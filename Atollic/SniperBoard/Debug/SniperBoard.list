
D:\Development\STM32\Atollic\SniperBoard\Debug\SniperBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000934  08005abc  08005abc  00015abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080063f0  080063f0  000163f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080063f4  080063f4  000163f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000a00  20000000  080063f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000009e0  20000a00  08006df8  00020a00  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200013e0  08006df8  000213e0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020a00  2**0
                  CONTENTS, READONLY
  9 .debug_info   000121c9  00000000  00000000  00020a29  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003538  00000000  00000000  00032bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000088b8  00000000  00000000  0003612a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001138  00000000  00000000  0003e9e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f68  00000000  00000000  0003fb20  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000064f3  00000000  00000000  00040a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000464f  00000000  00000000  00046f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0004b5ca  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002b34  00000000  00000000  0004b648  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000a00 	.word	0x20000a00
 8000128:	00000000 	.word	0x00000000
 800012c:	08005aa4 	.word	0x08005aa4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000a04 	.word	0x20000a04
 8000148:	08005aa4 	.word	0x08005aa4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800015c:	78c3      	ldrb	r3, [r0, #3]
 800015e:	b1fb      	cbz	r3, 80001a0 <NVIC_Init+0x44>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000160:	4b15      	ldr	r3, [pc, #84]	; (80001b8 <NVIC_Init+0x5c>)
 8000162:	68db      	ldr	r3, [r3, #12]
 8000164:	43db      	mvns	r3, r3
 8000166:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 800016a:	f1c3 0104 	rsb	r1, r3, #4
    tmpsub = tmpsub >> tmppriority;
 800016e:	220f      	movs	r2, #15
 8000170:	40da      	lsrs	r2, r3

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000172:	7843      	ldrb	r3, [r0, #1]
 8000174:	fa03 f101 	lsl.w	r1, r3, r1
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000178:	7883      	ldrb	r3, [r0, #2]
 800017a:	4013      	ands	r3, r2
 800017c:	430b      	orrs	r3, r1
    tmppriority = tmppriority << 0x04;
 800017e:	011b      	lsls	r3, r3, #4
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000180:	7802      	ldrb	r2, [r0, #0]
 8000182:	b2db      	uxtb	r3, r3
 8000184:	490d      	ldr	r1, [pc, #52]	; (80001bc <NVIC_Init+0x60>)
 8000186:	440a      	add	r2, r1
 8000188:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800018c:	7803      	ldrb	r3, [r0, #0]
 800018e:	0958      	lsrs	r0, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000190:	f003 031f 	and.w	r3, r3, #31
 8000194:	2201      	movs	r2, #1
 8000196:	fa02 f303 	lsl.w	r3, r2, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800019a:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
 800019e:	4770      	bx	lr
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001a0:	7803      	ldrb	r3, [r0, #0]
 80001a2:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001a4:	f003 031f 	and.w	r3, r3, #31
 80001a8:	2101      	movs	r1, #1
 80001aa:	fa01 f303 	lsl.w	r3, r1, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001ae:	3220      	adds	r2, #32
 80001b0:	4902      	ldr	r1, [pc, #8]	; (80001bc <NVIC_Init+0x60>)
 80001b2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80001b6:	4770      	bx	lr
 80001b8:	e000ed00 	.word	0xe000ed00
 80001bc:	e000e100 	.word	0xe000e100

080001c0 <BKP_DeInit>:
  * @brief  Deinitializes the BKP peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void BKP_DeInit(void)
{
 80001c0:	b508      	push	{r3, lr}
  RCC_BackupResetCmd(ENABLE);
 80001c2:	2001      	movs	r0, #1
 80001c4:	f000 f924 	bl	8000410 <RCC_BackupResetCmd>
  RCC_BackupResetCmd(DISABLE);
 80001c8:	2000      	movs	r0, #0
 80001ca:	f000 f921 	bl	8000410 <RCC_BackupResetCmd>
 80001ce:	bd08      	pop	{r3, pc}

080001d0 <BKP_WriteBackupRegister>:
  *   This parameter can be BKP_DRx where x:[1, 42]
  * @param  Data: data to write
  * @retval None
  */
void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data)
{
 80001d0:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_BKP_DR(BKP_DR));

  tmp = (uint32_t)BKP_BASE; 
 80001d6:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <BKP_WriteBackupRegister+0x18>)
 80001d8:	9301      	str	r3, [sp, #4]
  tmp += BKP_DR;
 80001da:	9b01      	ldr	r3, [sp, #4]
 80001dc:	4418      	add	r0, r3
 80001de:	9001      	str	r0, [sp, #4]

  *(__IO uint32_t *) tmp = Data;
 80001e0:	9b01      	ldr	r3, [sp, #4]
 80001e2:	6019      	str	r1, [r3, #0]
}
 80001e4:	b002      	add	sp, #8
 80001e6:	4770      	bx	lr
 80001e8:	40006c00 	.word	0x40006c00

080001ec <BKP_ReadBackupRegister>:
  * @param  BKP_DR: specifies the Data Backup Register.
  *   This parameter can be BKP_DRx where x:[1, 42]
  * @retval The content of the specified Data Backup Register
  */
uint16_t BKP_ReadBackupRegister(uint16_t BKP_DR)
{
 80001ec:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_BKP_DR(BKP_DR));

  tmp = (uint32_t)BKP_BASE; 
 80001f2:	4b05      	ldr	r3, [pc, #20]	; (8000208 <BKP_ReadBackupRegister+0x1c>)
 80001f4:	9301      	str	r3, [sp, #4]
  tmp += BKP_DR;
 80001f6:	9b01      	ldr	r3, [sp, #4]
 80001f8:	4418      	add	r0, r3
 80001fa:	9001      	str	r0, [sp, #4]

  return (*(__IO uint16_t *) tmp);
 80001fc:	9b01      	ldr	r3, [sp, #4]
 80001fe:	8818      	ldrh	r0, [r3, #0]
}
 8000200:	b280      	uxth	r0, r0
 8000202:	b002      	add	sp, #8
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	40006c00 	.word	0x40006c00

0800020c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800020c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800020e:	78cb      	ldrb	r3, [r1, #3]
 8000210:	f003 020f 	and.w	r2, r3, #15
 8000214:	4615      	mov	r5, r2
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000216:	f013 0f10 	tst.w	r3, #16
 800021a:	d001      	beq.n	8000220 <GPIO_Init+0x14>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800021c:	788d      	ldrb	r5, [r1, #2]
 800021e:	4315      	orrs	r5, r2
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000220:	780b      	ldrb	r3, [r1, #0]
 8000222:	b1e3      	cbz	r3, 800025e <GPIO_Init+0x52>
  {
    tmpreg = GPIOx->CRL;
 8000224:	6806      	ldr	r6, [r0, #0]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000226:	2300      	movs	r3, #0
 8000228:	e016      	b.n	8000258 <GPIO_Init+0x4c>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800022a:	2201      	movs	r2, #1
 800022c:	409a      	lsls	r2, r3
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800022e:	880c      	ldrh	r4, [r1, #0]
      if (currentpin == pos)
 8000230:	ea32 0404 	bics.w	r4, r2, r4
 8000234:	d10f      	bne.n	8000256 <GPIO_Init+0x4a>
      {
        pos = pinpos << 2;
 8000236:	009c      	lsls	r4, r3, #2
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000238:	270f      	movs	r7, #15
 800023a:	40a7      	lsls	r7, r4
        tmpreg &= ~pinmask;
 800023c:	ea26 0607 	bic.w	r6, r6, r7
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000240:	fa05 f404 	lsl.w	r4, r5, r4
 8000244:	4326      	orrs	r6, r4
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000246:	78cc      	ldrb	r4, [r1, #3]
 8000248:	2c28      	cmp	r4, #40	; 0x28
 800024a:	d101      	bne.n	8000250 <GPIO_Init+0x44>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800024c:	6142      	str	r2, [r0, #20]
 800024e:	e002      	b.n	8000256 <GPIO_Init+0x4a>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000250:	2c48      	cmp	r4, #72	; 0x48
 8000252:	d100      	bne.n	8000256 <GPIO_Init+0x4a>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000254:	6102      	str	r2, [r0, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000256:	3301      	adds	r3, #1
 8000258:	2b07      	cmp	r3, #7
 800025a:	d9e6      	bls.n	800022a <GPIO_Init+0x1e>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800025c:	6006      	str	r6, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800025e:	880b      	ldrh	r3, [r1, #0]
 8000260:	2bff      	cmp	r3, #255	; 0xff
 8000262:	d91e      	bls.n	80002a2 <GPIO_Init+0x96>
  {
    tmpreg = GPIOx->CRH;
 8000264:	6846      	ldr	r6, [r0, #4]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000266:	2300      	movs	r3, #0
 8000268:	e018      	b.n	800029c <GPIO_Init+0x90>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800026a:	f103 0408 	add.w	r4, r3, #8
 800026e:	2201      	movs	r2, #1
 8000270:	40a2      	lsls	r2, r4
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000272:	880c      	ldrh	r4, [r1, #0]
      if (currentpin == pos)
 8000274:	ea32 0404 	bics.w	r4, r2, r4
 8000278:	d10f      	bne.n	800029a <GPIO_Init+0x8e>
      {
        pos = pinpos << 2;
 800027a:	009c      	lsls	r4, r3, #2
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800027c:	270f      	movs	r7, #15
 800027e:	40a7      	lsls	r7, r4
        tmpreg &= ~pinmask;
 8000280:	ea26 0607 	bic.w	r6, r6, r7
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000284:	fa05 f404 	lsl.w	r4, r5, r4
 8000288:	4326      	orrs	r6, r4
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800028a:	78cc      	ldrb	r4, [r1, #3]
 800028c:	2c28      	cmp	r4, #40	; 0x28
 800028e:	d100      	bne.n	8000292 <GPIO_Init+0x86>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000290:	6142      	str	r2, [r0, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000292:	78cc      	ldrb	r4, [r1, #3]
 8000294:	2c48      	cmp	r4, #72	; 0x48
 8000296:	d100      	bne.n	800029a <GPIO_Init+0x8e>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000298:	6102      	str	r2, [r0, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800029a:	3301      	adds	r3, #1
 800029c:	2b07      	cmp	r3, #7
 800029e:	d9e4      	bls.n	800026a <GPIO_Init+0x5e>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80002a0:	6046      	str	r6, [r0, #4]
  }
}
 80002a2:	bcf0      	pop	{r4, r5, r6, r7}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop

080002a8 <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80002a8:	6883      	ldr	r3, [r0, #8]
 80002aa:	4219      	tst	r1, r3
 80002ac:	d001      	beq.n	80002b2 <GPIO_ReadInputDataBit+0xa>
  {
    bitstatus = (uint8_t)Bit_SET;
 80002ae:	2001      	movs	r0, #1
 80002b0:	4770      	bx	lr
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80002b2:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop

080002b8 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80002b8:	6101      	str	r1, [r0, #16]
 80002ba:	4770      	bx	lr

080002bc <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80002bc:	6141      	str	r1, [r0, #20]
 80002be:	4770      	bx	lr

080002c0 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80002c0:	b10a      	cbz	r2, 80002c6 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80002c2:	6101      	str	r1, [r0, #16]
 80002c4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 80002c6:	6141      	str	r1, [r0, #20]
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop

080002cc <PWR_BackupAccessCmd>:
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 80002cc:	4b01      	ldr	r3, [pc, #4]	; (80002d4 <PWR_BackupAccessCmd+0x8>)
 80002ce:	6018      	str	r0, [r3, #0]
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	420e0020 	.word	0x420e0020

080002d8 <RCC_LSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80002d8:	4b08      	ldr	r3, [pc, #32]	; (80002fc <RCC_LSEConfig+0x24>)
 80002da:	2200      	movs	r2, #0
 80002dc:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80002de:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 80002e0:	2801      	cmp	r0, #1
 80002e2:	d002      	beq.n	80002ea <RCC_LSEConfig+0x12>
 80002e4:	2804      	cmp	r0, #4
 80002e6:	d004      	beq.n	80002f2 <RCC_LSEConfig+0x1a>
 80002e8:	4770      	bx	lr
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80002ea:	2201      	movs	r2, #1
 80002ec:	4b03      	ldr	r3, [pc, #12]	; (80002fc <RCC_LSEConfig+0x24>)
 80002ee:	701a      	strb	r2, [r3, #0]
      break;
 80002f0:	4770      	bx	lr
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80002f2:	2205      	movs	r2, #5
 80002f4:	4b01      	ldr	r3, [pc, #4]	; (80002fc <RCC_LSEConfig+0x24>)
 80002f6:	701a      	strb	r2, [r3, #0]
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40021020 	.word	0x40021020

08000300 <RCC_RTCCLKConfig>:
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8000300:	4a02      	ldr	r2, [pc, #8]	; (800030c <RCC_RTCCLKConfig+0xc>)
 8000302:	6a13      	ldr	r3, [r2, #32]
 8000304:	4318      	orrs	r0, r3
 8000306:	6210      	str	r0, [r2, #32]
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40021000 	.word	0x40021000

08000310 <RCC_RTCCLKCmd>:
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000310:	4b01      	ldr	r3, [pc, #4]	; (8000318 <RCC_RTCCLKCmd+0x8>)
 8000312:	6018      	str	r0, [r3, #0]
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	4242043c 	.word	0x4242043c

0800031c <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800031c:	b410      	push	{r4}
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800031e:	4b29      	ldr	r3, [pc, #164]	; (80003c4 <RCC_GetClocksFreq+0xa8>)
 8000320:	685b      	ldr	r3, [r3, #4]
 8000322:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 8000326:	2b04      	cmp	r3, #4
 8000328:	d005      	beq.n	8000336 <RCC_GetClocksFreq+0x1a>
 800032a:	2b08      	cmp	r3, #8
 800032c:	d006      	beq.n	800033c <RCC_GetClocksFreq+0x20>
 800032e:	bb13      	cbnz	r3, 8000376 <RCC_GetClocksFreq+0x5a>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000330:	4b25      	ldr	r3, [pc, #148]	; (80003c8 <RCC_GetClocksFreq+0xac>)
 8000332:	6003      	str	r3, [r0, #0]
      break;
 8000334:	e021      	b.n	800037a <RCC_GetClocksFreq+0x5e>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000336:	4b24      	ldr	r3, [pc, #144]	; (80003c8 <RCC_GetClocksFreq+0xac>)
 8000338:	6003      	str	r3, [r0, #0]
      break;
 800033a:	e01e      	b.n	800037a <RCC_GetClocksFreq+0x5e>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800033c:	4a21      	ldr	r2, [pc, #132]	; (80003c4 <RCC_GetClocksFreq+0xa8>)
 800033e:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000340:	6852      	ldr	r2, [r2, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000342:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8000346:	3302      	adds	r3, #2
      
      if (pllsource == 0x00)
 8000348:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800034c:	d104      	bne.n	8000358 <RCC_GetClocksFreq+0x3c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800034e:	4a1f      	ldr	r2, [pc, #124]	; (80003cc <RCC_GetClocksFreq+0xb0>)
 8000350:	fb02 f303 	mul.w	r3, r2, r3
 8000354:	6003      	str	r3, [r0, #0]
 8000356:	e010      	b.n	800037a <RCC_GetClocksFreq+0x5e>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000358:	4a1a      	ldr	r2, [pc, #104]	; (80003c4 <RCC_GetClocksFreq+0xa8>)
 800035a:	6852      	ldr	r2, [r2, #4]
 800035c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000360:	d004      	beq.n	800036c <RCC_GetClocksFreq+0x50>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8000362:	4a1a      	ldr	r2, [pc, #104]	; (80003cc <RCC_GetClocksFreq+0xb0>)
 8000364:	fb02 f303 	mul.w	r3, r2, r3
 8000368:	6003      	str	r3, [r0, #0]
 800036a:	e006      	b.n	800037a <RCC_GetClocksFreq+0x5e>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 800036c:	4a16      	ldr	r2, [pc, #88]	; (80003c8 <RCC_GetClocksFreq+0xac>)
 800036e:	fb02 f303 	mul.w	r3, r2, r3
 8000372:	6003      	str	r3, [r0, #0]
 8000374:	e001      	b.n	800037a <RCC_GetClocksFreq+0x5e>
      }
#endif /* STM32F10X_CL */ 
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000376:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <RCC_GetClocksFreq+0xac>)
 8000378:	6003      	str	r3, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 800037a:	4912      	ldr	r1, [pc, #72]	; (80003c4 <RCC_GetClocksFreq+0xa8>)
 800037c:	684b      	ldr	r3, [r1, #4]
  tmp = tmp >> 4;
 800037e:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 8000382:	4c13      	ldr	r4, [pc, #76]	; (80003d0 <RCC_GetClocksFreq+0xb4>)
 8000384:	5ce3      	ldrb	r3, [r4, r3]
 8000386:	b2da      	uxtb	r2, r3
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000388:	6803      	ldr	r3, [r0, #0]
 800038a:	40d3      	lsrs	r3, r2
 800038c:	6043      	str	r3, [r0, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 800038e:	684a      	ldr	r2, [r1, #4]
  tmp = tmp >> 8;
 8000390:	f3c2 2202 	ubfx	r2, r2, #8, #3
  presc = APBAHBPrescTable[tmp];
 8000394:	5ca2      	ldrb	r2, [r4, r2]
 8000396:	b2d2      	uxtb	r2, r2
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000398:	fa23 f202 	lsr.w	r2, r3, r2
 800039c:	6082      	str	r2, [r0, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800039e:	684a      	ldr	r2, [r1, #4]
  tmp = tmp >> 11;
 80003a0:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  presc = APBAHBPrescTable[tmp];
 80003a4:	5ca2      	ldrb	r2, [r4, r2]
 80003a6:	b2d2      	uxtb	r2, r2
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80003a8:	40d3      	lsrs	r3, r2
 80003aa:	60c3      	str	r3, [r0, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80003ac:	684a      	ldr	r2, [r1, #4]
  tmp = tmp >> 14;
 80003ae:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 80003b2:	4908      	ldr	r1, [pc, #32]	; (80003d4 <RCC_GetClocksFreq+0xb8>)
 80003b4:	5c8a      	ldrb	r2, [r1, r2]
 80003b6:	b2d2      	uxtb	r2, r2
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80003b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80003bc:	6103      	str	r3, [r0, #16]
}
 80003be:	bc10      	pop	{r4}
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	40021000 	.word	0x40021000
 80003c8:	007a1200 	.word	0x007a1200
 80003cc:	003d0900 	.word	0x003d0900
 80003d0:	20000004 	.word	0x20000004
 80003d4:	20000000 	.word	0x20000000

080003d8 <RCC_APB2PeriphClockCmd>:
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80003d8:	b121      	cbz	r1, 80003e4 <RCC_APB2PeriphClockCmd+0xc>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80003da:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <RCC_APB2PeriphClockCmd+0x18>)
 80003dc:	699a      	ldr	r2, [r3, #24]
 80003de:	4310      	orrs	r0, r2
 80003e0:	6198      	str	r0, [r3, #24]
 80003e2:	4770      	bx	lr
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80003e4:	4a02      	ldr	r2, [pc, #8]	; (80003f0 <RCC_APB2PeriphClockCmd+0x18>)
 80003e6:	6993      	ldr	r3, [r2, #24]
 80003e8:	ea23 0000 	bic.w	r0, r3, r0
 80003ec:	6190      	str	r0, [r2, #24]
 80003ee:	4770      	bx	lr
 80003f0:	40021000 	.word	0x40021000

080003f4 <RCC_APB1PeriphClockCmd>:
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80003f4:	b121      	cbz	r1, 8000400 <RCC_APB1PeriphClockCmd+0xc>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80003f6:	4b05      	ldr	r3, [pc, #20]	; (800040c <RCC_APB1PeriphClockCmd+0x18>)
 80003f8:	69da      	ldr	r2, [r3, #28]
 80003fa:	4310      	orrs	r0, r2
 80003fc:	61d8      	str	r0, [r3, #28]
 80003fe:	4770      	bx	lr
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000400:	4a02      	ldr	r2, [pc, #8]	; (800040c <RCC_APB1PeriphClockCmd+0x18>)
 8000402:	69d3      	ldr	r3, [r2, #28]
 8000404:	ea23 0000 	bic.w	r0, r3, r0
 8000408:	61d0      	str	r0, [r2, #28]
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000

08000410 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000410:	4b01      	ldr	r3, [pc, #4]	; (8000418 <RCC_BackupResetCmd+0x8>)
 8000412:	6018      	str	r0, [r3, #0]
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	42420440 	.word	0x42420440

0800041c <RCC_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800041c:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 800041e:	2b01      	cmp	r3, #1
 8000420:	d102      	bne.n	8000428 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8000422:	4b0a      	ldr	r3, [pc, #40]	; (800044c <RCC_GetFlagStatus+0x30>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	e006      	b.n	8000436 <RCC_GetFlagStatus+0x1a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000428:	2b02      	cmp	r3, #2
 800042a:	d102      	bne.n	8000432 <RCC_GetFlagStatus+0x16>
  {
    statusreg = RCC->BDCR;
 800042c:	4b07      	ldr	r3, [pc, #28]	; (800044c <RCC_GetFlagStatus+0x30>)
 800042e:	6a1b      	ldr	r3, [r3, #32]
 8000430:	e001      	b.n	8000436 <RCC_GetFlagStatus+0x1a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <RCC_GetFlagStatus+0x30>)
 8000434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8000436:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800043a:	fa23 f000 	lsr.w	r0, r3, r0
 800043e:	f010 0f01 	tst.w	r0, #1
 8000442:	d001      	beq.n	8000448 <RCC_GetFlagStatus+0x2c>
  {
    bitstatus = SET;
 8000444:	2001      	movs	r0, #1
 8000446:	4770      	bx	lr
  }
  else
  {
    bitstatus = RESET;
 8000448:	2000      	movs	r0, #0
  }

  /* Return the flag status */
  return bitstatus;
}
 800044a:	4770      	bx	lr
 800044c:	40021000 	.word	0x40021000

08000450 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 8000450:	4a02      	ldr	r2, [pc, #8]	; (800045c <RCC_ClearFlag+0xc>)
 8000452:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000454:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000458:	6253      	str	r3, [r2, #36]	; 0x24
 800045a:	4770      	bx	lr
 800045c:	40021000 	.word	0x40021000

08000460 <RTC_ITConfig>:
{
  /* Check the parameters */
  assert_param(IS_RTC_IT(RTC_IT));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000460:	b129      	cbz	r1, 800046e <RTC_ITConfig+0xe>
  {
    RTC->CRH |= RTC_IT;
 8000462:	4a06      	ldr	r2, [pc, #24]	; (800047c <RTC_ITConfig+0x1c>)
 8000464:	8813      	ldrh	r3, [r2, #0]
 8000466:	b29b      	uxth	r3, r3
 8000468:	4318      	orrs	r0, r3
 800046a:	8010      	strh	r0, [r2, #0]
 800046c:	4770      	bx	lr
  }
  else
  {
    RTC->CRH &= (uint16_t)~RTC_IT;
 800046e:	4a03      	ldr	r2, [pc, #12]	; (800047c <RTC_ITConfig+0x1c>)
 8000470:	8813      	ldrh	r3, [r2, #0]
 8000472:	43c0      	mvns	r0, r0
 8000474:	b280      	uxth	r0, r0
 8000476:	4018      	ands	r0, r3
 8000478:	8010      	strh	r0, [r2, #0]
 800047a:	4770      	bx	lr
 800047c:	40002800 	.word	0x40002800

08000480 <RTC_EnterConfigMode>:
  * @retval None
  */
void RTC_EnterConfigMode(void)
{
  /* Set the CNF flag to enter in the Configuration Mode */
  RTC->CRL |= RTC_CRL_CNF;
 8000480:	4a03      	ldr	r2, [pc, #12]	; (8000490 <RTC_EnterConfigMode+0x10>)
 8000482:	8893      	ldrh	r3, [r2, #4]
 8000484:	b29b      	uxth	r3, r3
 8000486:	f043 0310 	orr.w	r3, r3, #16
 800048a:	8093      	strh	r3, [r2, #4]
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	40002800 	.word	0x40002800

08000494 <RTC_ExitConfigMode>:
  * @retval None
  */
void RTC_ExitConfigMode(void)
{
  /* Reset the CNF flag to exit from the Configuration Mode */
  RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); 
 8000494:	4a03      	ldr	r2, [pc, #12]	; (80004a4 <RTC_ExitConfigMode+0x10>)
 8000496:	8893      	ldrh	r3, [r2, #4]
 8000498:	b29b      	uxth	r3, r3
 800049a:	f023 0310 	bic.w	r3, r3, #16
 800049e:	b29b      	uxth	r3, r3
 80004a0:	8093      	strh	r3, [r2, #4]
 80004a2:	4770      	bx	lr
 80004a4:	40002800 	.word	0x40002800

080004a8 <RTC_GetCounter>:
  */
uint32_t RTC_GetCounter(void)
{
  uint16_t high1 = 0, high2 = 0, low = 0;

  high1 = RTC->CNTH;
 80004a8:	4908      	ldr	r1, [pc, #32]	; (80004cc <RTC_GetCounter+0x24>)
 80004aa:	8b08      	ldrh	r0, [r1, #24]
 80004ac:	b282      	uxth	r2, r0
  low   = RTC->CNTL;
 80004ae:	8b8b      	ldrh	r3, [r1, #28]
 80004b0:	b29b      	uxth	r3, r3
  high2 = RTC->CNTH;
 80004b2:	8b08      	ldrh	r0, [r1, #24]
 80004b4:	b280      	uxth	r0, r0

  if (high1 != high2)
 80004b6:	4282      	cmp	r2, r0
 80004b8:	d004      	beq.n	80004c4 <RTC_GetCounter+0x1c>
  { /* In this case the counter roll over during reading of CNTL and CNTH registers, 
       read again CNTL register then return the counter value */
    return (((uint32_t) high2 << 16 ) | RTC->CNTL);
 80004ba:	8b8b      	ldrh	r3, [r1, #28]
 80004bc:	b29b      	uxth	r3, r3
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	4770      	bx	lr
  }
  else
  { /* No counter roll over during reading of CNTL and CNTH registers, counter 
       value is equal to first value of CNTL and CNTH */
    return (((uint32_t) high1 << 16 ) | low);
 80004c4:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
  }
}
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	40002800 	.word	0x40002800

080004d0 <RTC_SetCounter>:
  * @brief  Sets the RTC counter value.
  * @param  CounterValue: RTC counter new value.
  * @retval None
  */
void RTC_SetCounter(uint32_t CounterValue)
{ 
 80004d0:	b510      	push	{r4, lr}
 80004d2:	4604      	mov	r4, r0
  RTC_EnterConfigMode();
 80004d4:	f7ff ffd4 	bl	8000480 <RTC_EnterConfigMode>
  /* Set RTC COUNTER MSB word */
  RTC->CNTH = CounterValue >> 16;
 80004d8:	0c22      	lsrs	r2, r4, #16
 80004da:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <RTC_SetCounter+0x18>)
 80004dc:	831a      	strh	r2, [r3, #24]
  /* Set RTC COUNTER LSB word */
  RTC->CNTL = (CounterValue & RTC_LSB_MASK);
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	839c      	strh	r4, [r3, #28]
  RTC_ExitConfigMode();
 80004e2:	f7ff ffd7 	bl	8000494 <RTC_ExitConfigMode>
 80004e6:	bd10      	pop	{r4, pc}
 80004e8:	40002800 	.word	0x40002800

080004ec <RTC_SetPrescaler>:
  * @brief  Sets the RTC prescaler value.
  * @param  PrescalerValue: RTC prescaler new value.
  * @retval None
  */
void RTC_SetPrescaler(uint32_t PrescalerValue)
{
 80004ec:	b510      	push	{r4, lr}
 80004ee:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_RTC_PRESCALER(PrescalerValue));
  
  RTC_EnterConfigMode();
 80004f0:	f7ff ffc6 	bl	8000480 <RTC_EnterConfigMode>
  /* Set RTC PRESCALER MSB word */
  RTC->PRLH = (PrescalerValue & PRLH_MSB_MASK) >> 16;
 80004f4:	f3c4 4203 	ubfx	r2, r4, #16, #4
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <RTC_SetPrescaler+0x1c>)
 80004fa:	811a      	strh	r2, [r3, #8]
  /* Set RTC PRESCALER LSB word */
  RTC->PRLL = (PrescalerValue & RTC_LSB_MASK);
 80004fc:	b2a4      	uxth	r4, r4
 80004fe:	819c      	strh	r4, [r3, #12]
  RTC_ExitConfigMode();
 8000500:	f7ff ffc8 	bl	8000494 <RTC_ExitConfigMode>
 8000504:	bd10      	pop	{r4, pc}
 8000506:	bf00      	nop
 8000508:	40002800 	.word	0x40002800

0800050c <RTC_WaitForLastTask>:
  * @retval None
  */
void RTC_WaitForLastTask(void)
{
  /* Loop until RTOFF flag is set */
  while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <RTC_WaitForLastTask+0x10>)
 800050e:	889b      	ldrh	r3, [r3, #4]
 8000510:	f003 0320 	and.w	r3, r3, #32
 8000514:	b29b      	uxth	r3, r3
 8000516:	2b00      	cmp	r3, #0
 8000518:	d0f8      	beq.n	800050c <RTC_WaitForLastTask>
  {
  }
}
 800051a:	4770      	bx	lr
 800051c:	40002800 	.word	0x40002800

08000520 <RTC_WaitForSynchro>:
  * @retval None
  */
void RTC_WaitForSynchro(void)
{
  /* Clear RSF flag */
  RTC->CRL &= (uint16_t)~RTC_FLAG_RSF;
 8000520:	4a07      	ldr	r2, [pc, #28]	; (8000540 <RTC_WaitForSynchro+0x20>)
 8000522:	8893      	ldrh	r3, [r2, #4]
 8000524:	b29b      	uxth	r3, r3
 8000526:	f023 0308 	bic.w	r3, r3, #8
 800052a:	b29b      	uxth	r3, r3
 800052c:	8093      	strh	r3, [r2, #4]
  /* Loop until RSF flag is set */
  while ((RTC->CRL & RTC_FLAG_RSF) == (uint16_t)RESET)
 800052e:	4b04      	ldr	r3, [pc, #16]	; (8000540 <RTC_WaitForSynchro+0x20>)
 8000530:	889b      	ldrh	r3, [r3, #4]
 8000532:	f003 0308 	and.w	r3, r3, #8
 8000536:	b29b      	uxth	r3, r3
 8000538:	2b00      	cmp	r3, #0
 800053a:	d0f8      	beq.n	800052e <RTC_WaitForSynchro+0xe>
  {
  }
}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40002800 	.word	0x40002800

08000544 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000548:	8803      	ldrh	r3, [r0, #0]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 800054a:	f403 5741 	and.w	r7, r3, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800054e:	880d      	ldrh	r5, [r1, #0]
 8000550:	884e      	ldrh	r6, [r1, #2]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000552:	888c      	ldrh	r4, [r1, #4]
 8000554:	f8b1 8006 	ldrh.w	r8, [r1, #6]
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000558:	890a      	ldrh	r2, [r1, #8]
 800055a:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800055e:	898b      	ldrh	r3, [r1, #12]
 8000560:	f8b1 e00e 	ldrh.w	lr, [r1, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000564:	4335      	orrs	r5, r6
 8000566:	4325      	orrs	r5, r4
 8000568:	ea48 0405 	orr.w	r4, r8, r5
 800056c:	4314      	orrs	r4, r2
 800056e:	ea4c 0204 	orr.w	r2, ip, r4
 8000572:	431a      	orrs	r2, r3
 8000574:	ea4e 0302 	orr.w	r3, lr, r2
 8000578:	433b      	orrs	r3, r7
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800057a:	8003      	strh	r3, [r0, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 800057c:	8b83      	ldrh	r3, [r0, #28]
 800057e:	b29b      	uxth	r3, r3
 8000580:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000584:	b29b      	uxth	r3, r3
 8000586:	8383      	strh	r3, [r0, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000588:	8a0b      	ldrh	r3, [r1, #16]
 800058a:	8203      	strh	r3, [r0, #16]
 800058c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000590 <SPI_Cmd>:
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000590:	b129      	cbz	r1, 800059e <SPI_Cmd+0xe>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8000592:	8803      	ldrh	r3, [r0, #0]
 8000594:	b29b      	uxth	r3, r3
 8000596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800059a:	8003      	strh	r3, [r0, #0]
 800059c:	4770      	bx	lr
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
 800059e:	8803      	ldrh	r3, [r0, #0]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	8003      	strh	r3, [r0, #0]
 80005aa:	4770      	bx	lr

080005ac <TIM_TimeBaseInit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80005ac:	8803      	ldrh	r3, [r0, #0]
 80005ae:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80005b0:	4a21      	ldr	r2, [pc, #132]	; (8000638 <TIM_TimeBaseInit+0x8c>)
 80005b2:	4290      	cmp	r0, r2
 80005b4:	d012      	beq.n	80005dc <TIM_TimeBaseInit+0x30>
 80005b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80005ba:	4290      	cmp	r0, r2
 80005bc:	d00e      	beq.n	80005dc <TIM_TimeBaseInit+0x30>
 80005be:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80005c2:	d00b      	beq.n	80005dc <TIM_TimeBaseInit+0x30>
 80005c4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80005c8:	4290      	cmp	r0, r2
 80005ca:	d007      	beq.n	80005dc <TIM_TimeBaseInit+0x30>
 80005cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80005d0:	4290      	cmp	r0, r2
 80005d2:	d003      	beq.n	80005dc <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80005d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80005d8:	4290      	cmp	r0, r2
 80005da:	d103      	bne.n	80005e4 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80005dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80005e0:	884a      	ldrh	r2, [r1, #2]
 80005e2:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80005e4:	4a15      	ldr	r2, [pc, #84]	; (800063c <TIM_TimeBaseInit+0x90>)
 80005e6:	4290      	cmp	r0, r2
 80005e8:	d008      	beq.n	80005fc <TIM_TimeBaseInit+0x50>
 80005ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80005ee:	4290      	cmp	r0, r2
 80005f0:	d004      	beq.n	80005fc <TIM_TimeBaseInit+0x50>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80005f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80005f6:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80005f8:	88ca      	ldrh	r2, [r1, #6]
 80005fa:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80005fc:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80005fe:	888b      	ldrh	r3, [r1, #4]
 8000600:	8583      	strh	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000602:	880b      	ldrh	r3, [r1, #0]
 8000604:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <TIM_TimeBaseInit+0x8c>)
 8000608:	4298      	cmp	r0, r3
 800060a:	d00f      	beq.n	800062c <TIM_TimeBaseInit+0x80>
 800060c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000610:	4298      	cmp	r0, r3
 8000612:	d00b      	beq.n	800062c <TIM_TimeBaseInit+0x80>
 8000614:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000618:	4298      	cmp	r0, r3
 800061a:	d007      	beq.n	800062c <TIM_TimeBaseInit+0x80>
 800061c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000620:	4298      	cmp	r0, r3
 8000622:	d003      	beq.n	800062c <TIM_TimeBaseInit+0x80>
 8000624:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000628:	4298      	cmp	r0, r3
 800062a:	d101      	bne.n	8000630 <TIM_TimeBaseInit+0x84>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800062c:	7a0b      	ldrb	r3, [r1, #8]
 800062e:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8000630:	2301      	movs	r3, #1
 8000632:	8283      	strh	r3, [r0, #20]
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40012c00 	.word	0x40012c00
 800063c:	40001000 	.word	0x40001000

08000640 <TIM_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000640:	b129      	cbz	r1, 800064e <TIM_Cmd+0xe>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000642:	8803      	ldrh	r3, [r0, #0]
 8000644:	b29b      	uxth	r3, r3
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	8003      	strh	r3, [r0, #0]
 800064c:	4770      	bx	lr
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 800064e:	8803      	ldrh	r3, [r0, #0]
 8000650:	b29b      	uxth	r3, r3
 8000652:	f023 0301 	bic.w	r3, r3, #1
 8000656:	b29b      	uxth	r3, r3
 8000658:	8003      	strh	r3, [r0, #0]
 800065a:	4770      	bx	lr

0800065c <TIM_ITConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800065c:	b122      	cbz	r2, 8000668 <TIM_ITConfig+0xc>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800065e:	8983      	ldrh	r3, [r0, #12]
 8000660:	b29b      	uxth	r3, r3
 8000662:	4319      	orrs	r1, r3
 8000664:	8181      	strh	r1, [r0, #12]
 8000666:	4770      	bx	lr
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000668:	8983      	ldrh	r3, [r0, #12]
 800066a:	43c9      	mvns	r1, r1
 800066c:	b289      	uxth	r1, r1
 800066e:	4019      	ands	r1, r3
 8000670:	8181      	strh	r1, [r0, #12]
 8000672:	4770      	bx	lr

08000674 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000674:	8a02      	ldrh	r2, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8000676:	8983      	ldrh	r3, [r0, #12]
 8000678:	400b      	ands	r3, r1
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800067a:	4211      	tst	r1, r2
 800067c:	d002      	beq.n	8000684 <TIM_GetITStatus+0x10>
 800067e:	b91b      	cbnz	r3, 8000688 <TIM_GetITStatus+0x14>
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 8000680:	2000      	movs	r0, #0
 8000682:	4770      	bx	lr
 8000684:	2000      	movs	r0, #0
 8000686:	4770      	bx	lr
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
  {
    bitstatus = SET;
 8000688:	2001      	movs	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800068a:	4770      	bx	lr

0800068c <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800068c:	43c9      	mvns	r1, r1
 800068e:	b289      	uxth	r1, r1
 8000690:	8201      	strh	r1, [r0, #16]
 8000692:	4770      	bx	lr

08000694 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	b087      	sub	sp, #28
 8000698:	4604      	mov	r4, r0
 800069a:	460d      	mov	r5, r1
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800069c:	8a03      	ldrh	r3, [r0, #16]
 800069e:	b29b      	uxth	r3, r3
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80006a0:	88ca      	ldrh	r2, [r1, #6]
 80006a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80006a6:	4313      	orrs	r3, r2
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80006a8:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80006aa:	8983      	ldrh	r3, [r0, #12]
 80006ac:	b29b      	uxth	r3, r3
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80006ae:	888a      	ldrh	r2, [r1, #4]
 80006b0:	8909      	ldrh	r1, [r1, #8]
            USART_InitStruct->USART_Mode;
 80006b2:	8968      	ldrh	r0, [r5, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80006b4:	430a      	orrs	r2, r1
 80006b6:	4302      	orrs	r2, r0
 80006b8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80006bc:	f023 030c 	bic.w	r3, r3, #12
 80006c0:	4313      	orrs	r3, r2
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80006c2:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80006c4:	8aa3      	ldrh	r3, [r4, #20]
 80006c6:	b29b      	uxth	r3, r3
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80006c8:	89aa      	ldrh	r2, [r5, #12]
 80006ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80006ce:	4313      	orrs	r3, r2
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80006d0:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80006d2:	a801      	add	r0, sp, #4
 80006d4:	f7ff fe22 	bl	800031c <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 80006d8:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <USART_Init+0xc0>)
 80006da:	429c      	cmp	r4, r3
 80006dc:	d101      	bne.n	80006e2 <USART_Init+0x4e>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80006de:	9a04      	ldr	r2, [sp, #16]
 80006e0:	e000      	b.n	80006e4 <USART_Init+0x50>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80006e2:	9a03      	ldr	r2, [sp, #12]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80006e4:	89a3      	ldrh	r3, [r4, #12]
 80006e6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80006ea:	d008      	beq.n	80006fe <USART_Init+0x6a>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80006ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80006f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80006f4:	6829      	ldr	r1, [r5, #0]
 80006f6:	0049      	lsls	r1, r1, #1
 80006f8:	fbb2 f1f1 	udiv	r1, r2, r1
 80006fc:	e007      	b.n	800070e <USART_Init+0x7a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80006fe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000702:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000706:	6829      	ldr	r1, [r5, #0]
 8000708:	0089      	lsls	r1, r1, #2
 800070a:	fbb2 f1f1 	udiv	r1, r2, r1
  }
  tmpreg = (integerdivider / 100) << 4;
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <USART_Init+0xc4>)
 8000710:	fba3 2301 	umull	r2, r3, r3, r1
 8000714:	095b      	lsrs	r3, r3, #5
 8000716:	011b      	lsls	r3, r3, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000718:	091a      	lsrs	r2, r3, #4
 800071a:	2064      	movs	r0, #100	; 0x64
 800071c:	fb00 1212 	mls	r2, r0, r2, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000720:	89a1      	ldrh	r1, [r4, #12]
 8000722:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8000726:	d008      	beq.n	800073a <USART_Init+0xa6>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000728:	00d2      	lsls	r2, r2, #3
 800072a:	3232      	adds	r2, #50	; 0x32
 800072c:	490a      	ldr	r1, [pc, #40]	; (8000758 <USART_Init+0xc4>)
 800072e:	fba1 1202 	umull	r1, r2, r1, r2
 8000732:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8000736:	431a      	orrs	r2, r3
 8000738:	e007      	b.n	800074a <USART_Init+0xb6>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800073a:	0112      	lsls	r2, r2, #4
 800073c:	3232      	adds	r2, #50	; 0x32
 800073e:	4906      	ldr	r1, [pc, #24]	; (8000758 <USART_Init+0xc4>)
 8000740:	fba1 1202 	umull	r1, r2, r1, r2
 8000744:	f3c2 1243 	ubfx	r2, r2, #5, #4
 8000748:	431a      	orrs	r2, r3
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 800074a:	b292      	uxth	r2, r2
 800074c:	8122      	strh	r2, [r4, #8]
}
 800074e:	b007      	add	sp, #28
 8000750:	bd30      	pop	{r4, r5, pc}
 8000752:	bf00      	nop
 8000754:	40013800 	.word	0x40013800
 8000758:	51eb851f 	.word	0x51eb851f

0800075c <USART_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800075c:	b129      	cbz	r1, 800076a <USART_Cmd+0xe>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 800075e:	8983      	ldrh	r3, [r0, #12]
 8000760:	b29b      	uxth	r3, r3
 8000762:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000766:	8183      	strh	r3, [r0, #12]
 8000768:	4770      	bx	lr
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 800076a:	8983      	ldrh	r3, [r0, #12]
 800076c:	b29b      	uxth	r3, r3
 800076e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000772:	b29b      	uxth	r3, r3
 8000774:	8183      	strh	r3, [r0, #12]
 8000776:	4770      	bx	lr

08000778 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000778:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800077c:	8081      	strh	r1, [r0, #4]
 800077e:	4770      	bx	lr

08000780 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000780:	8880      	ldrh	r0, [r0, #4]
}
 8000782:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8000786:	4770      	bx	lr

08000788 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000788:	8803      	ldrh	r3, [r0, #0]
 800078a:	4219      	tst	r1, r3
 800078c:	d001      	beq.n	8000792 <USART_GetFlagStatus+0xa>
  {
    bitstatus = SET;
 800078e:	2001      	movs	r0, #1
 8000790:	4770      	bx	lr
  }
  else
  {
    bitstatus = RESET;
 8000792:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop

08000798 <check_for_leap_year>:

struct DateTime current_date;

uint8_t check_for_leap_year(uint16_t year)
{
    if(year % 4 == 0)
 8000798:	f010 0f03 	tst.w	r0, #3
 800079c:	d114      	bne.n	80007c8 <check_for_leap_year+0x30>
    {
        if(year % 100 == 0)
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <check_for_leap_year+0x3c>)
 80007a0:	fba3 2300 	umull	r2, r3, r3, r0
 80007a4:	095b      	lsrs	r3, r3, #5
 80007a6:	2264      	movs	r2, #100	; 0x64
 80007a8:	fb02 0313 	mls	r3, r2, r3, r0
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	b96b      	cbnz	r3, 80007cc <check_for_leap_year+0x34>
        {
            if(year % 400 == 0)
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <check_for_leap_year+0x3c>)
 80007b2:	fba3 2300 	umull	r2, r3, r3, r0
 80007b6:	09db      	lsrs	r3, r3, #7
 80007b8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80007bc:	fb02 0013 	mls	r0, r2, r3, r0
 80007c0:	b280      	uxth	r0, r0
 80007c2:	b928      	cbnz	r0, 80007d0 <check_for_leap_year+0x38>
            {
                return 1;
 80007c4:	2001      	movs	r0, #1
 80007c6:	4770      	bx	lr
        }
    }

    else
    {
        return 0;
 80007c8:	2000      	movs	r0, #0
 80007ca:	4770      	bx	lr
            }
        }

        else
        {
            return 1;
 80007cc:	2001      	movs	r0, #1
 80007ce:	4770      	bx	lr
                return 1;
            }

            else
            {
                return 0;
 80007d0:	2000      	movs	r0, #0

    else
    {
        return 0;
    }
}
 80007d2:	4770      	bx	lr
 80007d4:	51eb851f 	.word	0x51eb851f

080007d8 <get_RTC>:

void get_RTC()
{
 80007d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     uint32_t counts = 0;

//     counts = RTC_CNTH;
//     counts <<= 16;
//     counts += RTC_CNTL;
     counts = RTC_GetCounter();
 80007da:	f7ff fe65 	bl	80004a8 <RTC_GetCounter>
     counts = counts + 14400; // UTC + 4:00 Dubai time
 80007de:	f500 5761 	add.w	r7, r0, #14400	; 0x3840
//     uint32_t i = counts;
//     while(i) {
//    	 printf("%d",(uint16_t)(i % 10));
//		i /= 10;
//	}
     temp = (counts / 86400);
 80007e2:	4c35      	ldr	r4, [pc, #212]	; (80008b8 <get_RTC+0xe0>)
 80007e4:	fba4 3407 	umull	r3, r4, r4, r7
 80007e8:	0c24      	lsrs	r4, r4, #16
     //printf("\ndays %d\n",(uint16_t)(temp));
     if(day_count != temp)
 80007ea:	4b34      	ldr	r3, [pc, #208]	; (80008bc <get_RTC+0xe4>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	429c      	cmp	r4, r3
 80007f0:	d034      	beq.n	800085c <get_RTC+0x84>
     {
         day_count = temp;
 80007f2:	4b32      	ldr	r3, [pc, #200]	; (80008bc <get_RTC+0xe4>)
 80007f4:	801c      	strh	r4, [r3, #0]
         temp1 = 1970;
 80007f6:	f240 76b2 	movw	r6, #1970	; 0x7b2

         while(temp >= 365)
 80007fa:	e00e      	b.n	800081a <get_RTC+0x42>
         {
             if(check_for_leap_year(temp1) == 1)
 80007fc:	4630      	mov	r0, r6
 80007fe:	f7ff ffcb 	bl	8000798 <check_for_leap_year>
 8000802:	2801      	cmp	r0, #1
 8000804:	d105      	bne.n	8000812 <get_RTC+0x3a>
             {
                 if(temp >= 366)
 8000806:	f5b4 7fb7 	cmp.w	r4, #366	; 0x16e
 800080a:	d309      	bcc.n	8000820 <get_RTC+0x48>
                 {
                     temp -= 366;
 800080c:	f5a4 74b7 	sub.w	r4, r4, #366	; 0x16e
 8000810:	e001      	b.n	8000816 <get_RTC+0x3e>
                 }
             }

             else
             {
                 temp -= 365;
 8000812:	f2a4 146d 	subw	r4, r4, #365	; 0x16d
             }

             temp1++;
 8000816:	3601      	adds	r6, #1
 8000818:	b2b6      	uxth	r6, r6
     if(day_count != temp)
     {
         day_count = temp;
         temp1 = 1970;

         while(temp >= 365)
 800081a:	f5b4 7fb6 	cmp.w	r4, #364	; 0x16c
 800081e:	d8ed      	bhi.n	80007fc <get_RTC+0x24>
             }

             temp1++;
         };

         cal_year = temp1;
 8000820:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <get_RTC+0xe8>)
 8000822:	801e      	strh	r6, [r3, #0]

         temp1 = 0;
 8000824:	2500      	movs	r5, #0
         while(temp >= 28)
 8000826:	e011      	b.n	800084c <get_RTC+0x74>
         {
             if((temp1 == 1) && (check_for_leap_year(cal_year) == 1))
 8000828:	2d01      	cmp	r5, #1
 800082a:	d108      	bne.n	800083e <get_RTC+0x66>
 800082c:	4630      	mov	r0, r6
 800082e:	f7ff ffb3 	bl	8000798 <check_for_leap_year>
 8000832:	2801      	cmp	r0, #1
 8000834:	d103      	bne.n	800083e <get_RTC+0x66>
             {
                 if(temp >= 29)
 8000836:	2c1c      	cmp	r4, #28
 8000838:	d90a      	bls.n	8000850 <get_RTC+0x78>
                 {
                     temp -= 29;
 800083a:	3c1d      	subs	r4, #29
         temp1 = 0;
         while(temp >= 28)
         {
             if((temp1 == 1) && (check_for_leap_year(cal_year) == 1))
             {
                 if(temp >= 29)
 800083c:	e004      	b.n	8000848 <get_RTC+0x70>
                 }
             }

             else
             {
                 if(temp >= month_table[temp1])
 800083e:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <get_RTC+0xec>)
 8000840:	5d5b      	ldrb	r3, [r3, r5]
 8000842:	429c      	cmp	r4, r3
 8000844:	d304      	bcc.n	8000850 <get_RTC+0x78>
                 {
                     temp -= ((uint32_t)month_table[temp1]);
 8000846:	1ae4      	subs	r4, r4, r3
                 {
                     break;
                 }
             }

             temp1++;
 8000848:	3501      	adds	r5, #1
 800084a:	b2ad      	uxth	r5, r5
         };

         cal_year = temp1;

         temp1 = 0;
         while(temp >= 28)
 800084c:	2c1b      	cmp	r4, #27
 800084e:	d8eb      	bhi.n	8000828 <get_RTC+0x50>
             }

             temp1++;
         };

         cal_month = (temp1 + 1);
 8000850:	3501      	adds	r5, #1
 8000852:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <get_RTC+0xf0>)
 8000854:	701d      	strb	r5, [r3, #0]
         cal_date = (temp + 1);
 8000856:	3401      	adds	r4, #1
 8000858:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <get_RTC+0xf4>)
 800085a:	701c      	strb	r4, [r3, #0]
     }

     temp = (counts % 86400);
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <get_RTC+0xe0>)
 800085e:	fba3 2307 	umull	r2, r3, r3, r7
 8000862:	0c1b      	lsrs	r3, r3, #16
 8000864:	4a1a      	ldr	r2, [pc, #104]	; (80008d0 <get_RTC+0xf8>)
 8000866:	fb02 7313 	mls	r3, r2, r3, r7

     cal_hour = (temp / 3600);
 800086a:	4a1a      	ldr	r2, [pc, #104]	; (80008d4 <get_RTC+0xfc>)
 800086c:	fba2 1203 	umull	r1, r2, r2, r3
 8000870:	0ad2      	lsrs	r2, r2, #11
 8000872:	b2d0      	uxtb	r0, r2
 8000874:	4918      	ldr	r1, [pc, #96]	; (80008d8 <get_RTC+0x100>)
 8000876:	7008      	strb	r0, [r1, #0]
     cal_minute = ((temp % 3600) / 60);
 8000878:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800087c:	fb01 3112 	mls	r1, r1, r2, r3
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <get_RTC+0x104>)
 8000882:	fba3 2301 	umull	r2, r3, r3, r1
 8000886:	095b      	lsrs	r3, r3, #5
 8000888:	b2dc      	uxtb	r4, r3
 800088a:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <get_RTC+0x108>)
 800088c:	7014      	strb	r4, [r2, #0]
     cal_second = ((temp % 3600) % 60);
 800088e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8000892:	009a      	lsls	r2, r3, #2
 8000894:	1a8a      	subs	r2, r1, r2
 8000896:	b2d3      	uxtb	r3, r2
 8000898:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <get_RTC+0x10c>)
 800089a:	7013      	strb	r3, [r2, #0]

     current_date.seconds = cal_second;
 800089c:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <get_RTC+0x110>)
 800089e:	7013      	strb	r3, [r2, #0]
     current_date.minutes = cal_minute;
 80008a0:	7054      	strb	r4, [r2, #1]
     current_date.hours   = cal_hour;
 80008a2:	7090      	strb	r0, [r2, #2]
     current_date.date    = cal_date;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <get_RTC+0xf4>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	70d3      	strb	r3, [r2, #3]
     current_date.month   = cal_month;
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <get_RTC+0xf0>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	7153      	strb	r3, [r2, #5]
     current_date.year    = cal_year;
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <get_RTC+0xe8>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	80d3      	strh	r3, [r2, #6]
 80008b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008b8:	c22e4507 	.word	0xc22e4507
 80008bc:	20000a1e 	.word	0x20000a1e
 80008c0:	20000016 	.word	0x20000016
 80008c4:	08005adc 	.word	0x08005adc
 80008c8:	20000018 	.word	0x20000018
 80008cc:	20000014 	.word	0x20000014
 80008d0:	00015180 	.word	0x00015180
 80008d4:	91a2b3c5 	.word	0x91a2b3c5
 80008d8:	20000a1c 	.word	0x20000a1c
 80008dc:	88888889 	.word	0x88888889
 80008e0:	20000a21 	.word	0x20000a21
 80008e4:	20000a20 	.word	0x20000a20
 80008e8:	20000b88 	.word	0x20000b88

080008ec <set_RTC>:

}

uint32_t set_RTC(uint16_t year,  uint8_t month,  uint8_t date,  uint8_t hour,  uint8_t minute,  uint8_t second)
{
 80008ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008f0:	4682      	mov	sl, r0
 80008f2:	4689      	mov	r9, r1
 80008f4:	4617      	mov	r7, r2
 80008f6:	4698      	mov	r8, r3
 80008f8:	f89d 6020 	ldrb.w	r6, [sp, #32]
    uint16_t i = 0;
    uint32_t counts = 0;

    if(year > 2099)
 80008fc:	f640 0333 	movw	r3, #2099	; 0x833
 8000900:	4298      	cmp	r0, r3
 8000902:	d900      	bls.n	8000906 <set_RTC+0x1a>
    {
        year = 2099;
 8000904:	469a      	mov	sl, r3
    }

    if(year < 1970)
 8000906:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800090a:	459a      	cmp	sl, r3
 800090c:	d801      	bhi.n	8000912 <set_RTC+0x26>
    {
        year = 1970;
 800090e:	f240 7ab2 	movw	sl, #1970	; 0x7b2
}

uint32_t set_RTC(uint16_t year,  uint8_t month,  uint8_t date,  uint8_t hour,  uint8_t minute,  uint8_t second)
{
    uint16_t i = 0;
    uint32_t counts = 0;
 8000912:	2400      	movs	r4, #0
    if(year < 1970)
    {
        year = 1970;
    }

    for(i = 1970; i < year; i++)
 8000914:	f240 75b2 	movw	r5, #1970	; 0x7b2
 8000918:	e011      	b.n	800093e <set_RTC+0x52>
    {
          if(check_for_leap_year(i) == 1)
 800091a:	4628      	mov	r0, r5
 800091c:	f7ff ff3c 	bl	8000798 <check_for_leap_year>
 8000920:	2801      	cmp	r0, #1
 8000922:	d104      	bne.n	800092e <set_RTC+0x42>
          {
              counts += 31622400;
 8000924:	f104 74f1 	add.w	r4, r4, #31588352	; 0x1e20000
 8000928:	f504 4405 	add.w	r4, r4, #34048	; 0x8500
 800092c:	e005      	b.n	800093a <set_RTC+0x4e>
          }

          else
          {
              counts += 31536000;
 800092e:	f104 74f0 	add.w	r4, r4, #31457280	; 0x1e00000
 8000932:	f504 3499 	add.w	r4, r4, #78336	; 0x13200
 8000936:	f504 74c0 	add.w	r4, r4, #384	; 0x180
    if(year < 1970)
    {
        year = 1970;
    }

    for(i = 1970; i < year; i++)
 800093a:	3501      	adds	r5, #1
 800093c:	b2ad      	uxth	r5, r5
 800093e:	45aa      	cmp	sl, r5
 8000940:	d8eb      	bhi.n	800091a <set_RTC+0x2e>
          {
              counts += 31536000;
          }
    }

    month -= 1;
 8000942:	f109 31ff 	add.w	r1, r9, #4294967295
 8000946:	b2c9      	uxtb	r1, r1

    for(i = 0; i < month; i++)
 8000948:	2300      	movs	r3, #0
 800094a:	e006      	b.n	800095a <set_RTC+0x6e>
    {
          counts += (((uint32_t)month_table[i]) * 86400);
 800094c:	4a12      	ldr	r2, [pc, #72]	; (8000998 <set_RTC+0xac>)
 800094e:	5cd2      	ldrb	r2, [r2, r3]
 8000950:	4812      	ldr	r0, [pc, #72]	; (800099c <set_RTC+0xb0>)
 8000952:	fb00 4402 	mla	r4, r0, r2, r4
          }
    }

    month -= 1;

    for(i = 0; i < month; i++)
 8000956:	3301      	adds	r3, #1
 8000958:	b29b      	uxth	r3, r3
 800095a:	b28a      	uxth	r2, r1
 800095c:	4293      	cmp	r3, r2
 800095e:	d3f5      	bcc.n	800094c <set_RTC+0x60>
    {
          counts += (((uint32_t)month_table[i]) * 86400);
    }

    if(check_for_leap_year(cal_year) == 1)
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <set_RTC+0xb4>)
 8000962:	8818      	ldrh	r0, [r3, #0]
 8000964:	f7ff ff18 	bl	8000798 <check_for_leap_year>
 8000968:	2801      	cmp	r0, #1
 800096a:	d103      	bne.n	8000974 <set_RTC+0x88>
    {
        counts += 86400;
 800096c:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
 8000970:	f504 74c0 	add.w	r4, r4, #384	; 0x180
    }

    counts += ((uint32_t)(date - 1) * 86400);
 8000974:	3f01      	subs	r7, #1
 8000976:	4809      	ldr	r0, [pc, #36]	; (800099c <set_RTC+0xb0>)
 8000978:	fb00 4407 	mla	r4, r0, r7, r4
    counts += ((uint32_t)hour * 3600);
 800097c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000980:	fb03 4408 	mla	r4, r3, r8, r4
    counts += ((uint32_t)minute * 60);
 8000984:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8000988:	00b3      	lsls	r3, r6, #2
 800098a:	4423      	add	r3, r4
//    RTC_SetCounter(counts);
//
//    while(!(RTC->CRL & RTC_CRL_RTOFF));
//
//    PWR->CR &= ~PWR_CR_DBP;
}
 800098c:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8000990:	4418      	add	r0, r3
 8000992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000996:	bf00      	nop
 8000998:	08005adc 	.word	0x08005adc
 800099c:	00015180 	.word	0x00015180
 80009a0:	20000016 	.word	0x20000016

080009a4 <display_date>:
//	printf("minutes : %d   -   ",current_date.minutes);
//	printf("seconds : %d   -   \n",current_date.seconds);
//}

void display_date()
{
 80009a4:	b538      	push	{r3, r4, r5, lr}
	printf("%d/",current_date.date);
 80009a6:	4c0e      	ldr	r4, [pc, #56]	; (80009e0 <display_date+0x3c>)
 80009a8:	4d0e      	ldr	r5, [pc, #56]	; (80009e4 <display_date+0x40>)
 80009aa:	78e1      	ldrb	r1, [r4, #3]
 80009ac:	4628      	mov	r0, r5
 80009ae:	f002 fdc1 	bl	8003534 <iprintf>
	printf("%d/",current_date.month);
 80009b2:	7961      	ldrb	r1, [r4, #5]
 80009b4:	4628      	mov	r0, r5
 80009b6:	f002 fdbd 	bl	8003534 <iprintf>
	printf("%d ",current_date.year);
 80009ba:	88e1      	ldrh	r1, [r4, #6]
 80009bc:	480a      	ldr	r0, [pc, #40]	; (80009e8 <display_date+0x44>)
 80009be:	f002 fdb9 	bl	8003534 <iprintf>
	printf("%d:",current_date.hours);
 80009c2:	4d0a      	ldr	r5, [pc, #40]	; (80009ec <display_date+0x48>)
 80009c4:	78a1      	ldrb	r1, [r4, #2]
 80009c6:	4628      	mov	r0, r5
 80009c8:	f002 fdb4 	bl	8003534 <iprintf>
	printf("%d:",current_date.minutes);
 80009cc:	7861      	ldrb	r1, [r4, #1]
 80009ce:	4628      	mov	r0, r5
 80009d0:	f002 fdb0 	bl	8003534 <iprintf>
	printf("%d",current_date.seconds);
 80009d4:	7821      	ldrb	r1, [r4, #0]
 80009d6:	4806      	ldr	r0, [pc, #24]	; (80009f0 <display_date+0x4c>)
 80009d8:	f002 fdac 	bl	8003534 <iprintf>
 80009dc:	bd38      	pop	{r3, r4, r5, pc}
 80009de:	bf00      	nop
 80009e0:	20000b88 	.word	0x20000b88
 80009e4:	08005ae8 	.word	0x08005ae8
 80009e8:	08005aec 	.word	0x08005aec
 80009ec:	08005af0 	.word	0x08005af0
 80009f0:	08005af4 	.word	0x08005af4

080009f4 <SPISend>:
static uint8_t SPISend(uint8_t data)
{
	//
	//    Setting the Data Register (DR) transmits the byte of data on MOSI.
	//
	SPI1->DR = data;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <SPISend+0x34>)
 80009f6:	8198      	strh	r0, [r3, #12]
	//
	//    Wait until the data has been transmitted.
	//
	while (!(SPI1->SR & SPI_I2S_FLAG_TXE));
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <SPISend+0x34>)
 80009fa:	891b      	ldrh	r3, [r3, #8]
 80009fc:	f003 0302 	and.w	r3, r3, #2
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0f8      	beq.n	80009f8 <SPISend+0x4>
	//
	//    Wait for any data on MISO pin to be received.
	//
	while (!(SPI1->SR & SPI_I2S_FLAG_RXNE));
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <SPISend+0x34>)
 8000a08:	891b      	ldrh	r3, [r3, #8]
 8000a0a:	f013 0f01 	tst.w	r3, #1
 8000a0e:	d0fa      	beq.n	8000a06 <SPISend+0x12>
	//
	//    All data transmitted/received but SPI may be busy so wait until done.
	//
	while (SPI1->SR & SPI_I2S_FLAG_BSY);
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <SPISend+0x34>)
 8000a12:	891b      	ldrh	r3, [r3, #8]
 8000a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1f8      	bne.n	8000a10 <SPISend+0x1c>
	//
	//    Return the data received on MISO pin.
	//
	//Sys_Delay(1);
	return(SPI1->DR);
 8000a1e:	4b02      	ldr	r3, [pc, #8]	; (8000a28 <SPISend+0x34>)
 8000a20:	8998      	ldrh	r0, [r3, #12]

}
 8000a22:	b2c0      	uxtb	r0, r0
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40013000 	.word	0x40013000

08000a2c <enc_readOp>:
	CSPASSIVE;
}


static void enc_readOp(uint8_t op, uint8_t address, uint8_t* data, uint8_t len)
{
 8000a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a2e:	4606      	mov	r6, r0
 8000a30:	460c      	mov	r4, r1
 8000a32:	4615      	mov	r5, r2
 8000a34:	461f      	mov	r7, r3

	CSACTIVE;
 8000a36:	2101      	movs	r1, #1
 8000a38:	480b      	ldr	r0, [pc, #44]	; (8000a68 <enc_readOp+0x3c>)
 8000a3a:	f7ff fc3f 	bl	80002bc <GPIO_ResetBits>

	// issue write command
	SPISend( op | (address & ADDR_MASK));
 8000a3e:	f004 001f 	and.w	r0, r4, #31
 8000a42:	4330      	orrs	r0, r6
 8000a44:	f7ff ffd6 	bl	80009f4 <SPISend>
	
	for (int i = 0; i< len; i++)
 8000a48:	2400      	movs	r4, #0
 8000a4a:	e006      	b.n	8000a5a <enc_readOp+0x2e>
	*data++ = SPISend(  0x00);
 8000a4c:	1c6e      	adds	r6, r5, #1
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f7ff ffd0 	bl	80009f4 <SPISend>
 8000a54:	7028      	strb	r0, [r5, #0]
	CSACTIVE;

	// issue write command
	SPISend( op | (address & ADDR_MASK));
	
	for (int i = 0; i< len; i++)
 8000a56:	3401      	adds	r4, #1
	*data++ = SPISend(  0x00);
 8000a58:	4635      	mov	r5, r6
	CSACTIVE;

	// issue write command
	SPISend( op | (address & ADDR_MASK));
	
	for (int i = 0; i< len; i++)
 8000a5a:	42bc      	cmp	r4, r7
 8000a5c:	dbf6      	blt.n	8000a4c <enc_readOp+0x20>
	*data++ = SPISend(  0x00);


	CSPASSIVE;
 8000a5e:	2101      	movs	r1, #1
 8000a60:	4801      	ldr	r0, [pc, #4]	; (8000a68 <enc_readOp+0x3c>)
 8000a62:	f7ff fc29 	bl	80002b8 <GPIO_SetBits>
 8000a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a68:	40010c00 	.word	0x40010c00

08000a6c <enc_writeOp>:
	    CSPASSIVE;
}


static void enc_writeOp(uint8_t op, uint8_t address, uint8_t* data, uint8_t len)
{
 8000a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6e:	4606      	mov	r6, r0
 8000a70:	460c      	mov	r4, r1
 8000a72:	4615      	mov	r5, r2
 8000a74:	461f      	mov	r7, r3
	CSACTIVE;
 8000a76:	2101      	movs	r1, #1
 8000a78:	480b      	ldr	r0, [pc, #44]	; (8000aa8 <enc_writeOp+0x3c>)
 8000a7a:	f7ff fc1f 	bl	80002bc <GPIO_ResetBits>

	// issue write command
	SPISend( op | (address & ADDR_MASK));
 8000a7e:	f004 001f 	and.w	r0, r4, #31
 8000a82:	4330      	orrs	r0, r6
 8000a84:	f7ff ffb6 	bl	80009f4 <SPISend>
	
	for ( int i = 0; i<len; i++)
 8000a88:	2400      	movs	r4, #0
 8000a8a:	e005      	b.n	8000a98 <enc_writeOp+0x2c>
	  SPISend(  *data++);
 8000a8c:	1c6e      	adds	r6, r5, #1
 8000a8e:	7828      	ldrb	r0, [r5, #0]
 8000a90:	f7ff ffb0 	bl	80009f4 <SPISend>
	CSACTIVE;

	// issue write command
	SPISend( op | (address & ADDR_MASK));
	
	for ( int i = 0; i<len; i++)
 8000a94:	3401      	adds	r4, #1
	  SPISend(  *data++);
 8000a96:	4635      	mov	r5, r6
	CSACTIVE;

	// issue write command
	SPISend( op | (address & ADDR_MASK));
	
	for ( int i = 0; i<len; i++)
 8000a98:	42bc      	cmp	r4, r7
 8000a9a:	dbf7      	blt.n	8000a8c <enc_writeOp+0x20>
	  SPISend(  *data++);

	CSPASSIVE;
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <enc_writeOp+0x3c>)
 8000aa0:	f7ff fc0a 	bl	80002b8 <GPIO_SetBits>
 8000aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40010c00 	.word	0x40010c00

08000aac <enc_SBI>:
static void enc_setBank(uint8_t address, bool keepEnabled ); // select the memory bank
static void readBuffer(uint16_t len, uint8_t* data);
  static void writeBuffer(uint16_t len, uint8_t* data);
/* issue an single byte instruction */
static void enc_SBI(uint8_t instruction, bool keepEnabled)
{
 8000aac:	b538      	push	{r3, r4, r5, lr}
 8000aae:	4605      	mov	r5, r0
 8000ab0:	460c      	mov	r4, r1

	CSACTIVE;
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	4805      	ldr	r0, [pc, #20]	; (8000acc <enc_SBI+0x20>)
 8000ab6:	f7ff fc01 	bl	80002bc <GPIO_ResetBits>

	// issue the instruction
	SPISend(instruction);
 8000aba:	4628      	mov	r0, r5
 8000abc:	f7ff ff9a 	bl	80009f4 <SPISend>

	if (!keepEnabled)
 8000ac0:	b91c      	cbnz	r4, 8000aca <enc_SBI+0x1e>
	    CSPASSIVE;
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	4801      	ldr	r0, [pc, #4]	; (8000acc <enc_SBI+0x20>)
 8000ac6:	f7ff fbf7 	bl	80002b8 <GPIO_SetBits>
 8000aca:	bd38      	pop	{r3, r4, r5, pc}
 8000acc:	40010c00 	.word	0x40010c00

08000ad0 <enc_setBank>:
  enc_writeOp(ENC624J600_BIT_FIELD_SET, address, &data,1);
}


static void enc_setBank(uint8_t address, bool keepEnabled)
{
 8000ad0:	b508      	push	{r3, lr}
 8000ad2:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
  // set the bank (if needed)
  if (((address & BANK_MASK) != bank) && ((address & BANK_MASK) != 0xE0))
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <enc_setBank+0x44>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	4298      	cmp	r0, r3
 8000adc:	d019      	beq.n	8000b12 <enc_setBank+0x42>
 8000ade:	28e0      	cmp	r0, #224	; 0xe0
 8000ae0:	d017      	beq.n	8000b12 <enc_setBank+0x42>
  {
    // set the bank

    bank = (address & BANK_MASK);
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <enc_setBank+0x44>)
 8000ae4:	7018      	strb	r0, [r3, #0]
    
    switch((bank)>>5){
 8000ae6:	0940      	lsrs	r0, r0, #5
 8000ae8:	2803      	cmp	r0, #3
 8000aea:	d812      	bhi.n	8000b12 <enc_setBank+0x42>
 8000aec:	e8df f000 	tbb	[pc, r0]
 8000af0:	0e0a0602 	.word	0x0e0a0602
			case 0 :
				enc_SBI(ENC624J600_BANK0_SELECT, keepEnabled);
 8000af4:	20c0      	movs	r0, #192	; 0xc0
 8000af6:	f7ff ffd9 	bl	8000aac <enc_SBI>
				break;
 8000afa:	bd08      	pop	{r3, pc}
			case 1 :
				enc_SBI(ENC624J600_BANK1_SELECT, keepEnabled);
 8000afc:	20c2      	movs	r0, #194	; 0xc2
 8000afe:	f7ff ffd5 	bl	8000aac <enc_SBI>
				break;
 8000b02:	bd08      	pop	{r3, pc}
			case 2 :
				enc_SBI(ENC624J600_BANK2_SELECT, keepEnabled);
 8000b04:	20c4      	movs	r0, #196	; 0xc4
 8000b06:	f7ff ffd1 	bl	8000aac <enc_SBI>
				break;
 8000b0a:	bd08      	pop	{r3, pc}
			case 3 :
				enc_SBI(ENC624J600_BANK3_SELECT, keepEnabled);
 8000b0c:	20c6      	movs	r0, #198	; 0xc6
 8000b0e:	f7ff ffcd 	bl	8000aac <enc_SBI>
 8000b12:	bd08      	pop	{r3, pc}
 8000b14:	20000a24 	.word	0x20000a24

08000b18 <readControlRegister>:

/* select bank and write control register
will always put CS high to end operation
*/
static uint8_t readControlRegister(uint8_t address)
{
 8000b18:	b510      	push	{r4, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	4604      	mov	r4, r0
  uint16_t retval;
  // set the bank
  enc_setBank(address,true);
 8000b1e:	2101      	movs	r1, #1
 8000b20:	f7ff ffd6 	bl	8000ad0 <enc_setBank>
  // do the write
  enc_readOp(ENC624J600_READ_CONTROL_REGISTER, address&0x1F,(uint8_t*) &retval ,1);
 8000b24:	2301      	movs	r3, #1
 8000b26:	f10d 0206 	add.w	r2, sp, #6
 8000b2a:	f004 011f 	and.w	r1, r4, #31
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f7ff ff7c 	bl	8000a2c <enc_readOp>
  
  return retval;
}
 8000b34:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8000b38:	b002      	add	sp, #8
 8000b3a:	bd10      	pop	{r4, pc}

08000b3c <readControlRegister16>:

/* select bank and read control register
will always put CS high to end operation
*/
static uint16_t readControlRegister16(uint8_t address)
{
 8000b3c:	b510      	push	{r4, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	4604      	mov	r4, r0
  uint16_t retval;
  // set the bank
  enc_setBank(address,true);
 8000b42:	2101      	movs	r1, #1
 8000b44:	f7ff ffc4 	bl	8000ad0 <enc_setBank>
  // do the write
  enc_readOp(ENC624J600_READ_CONTROL_REGISTER, address&0x1F,(uint8_t*) &retval ,2);
 8000b48:	2302      	movs	r3, #2
 8000b4a:	f10d 0206 	add.w	r2, sp, #6
 8000b4e:	f004 011f 	and.w	r1, r4, #31
 8000b52:	2000      	movs	r0, #0
 8000b54:	f7ff ff6a 	bl	8000a2c <enc_readOp>
  
  return retval;
}
 8000b58:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8000b5c:	b002      	add	sp, #8
 8000b5e:	bd10      	pop	{r4, pc}

08000b60 <writeBitField>:


/* select bank and write control register bit
will always put CS high to end operation
*/
static void writeBitField(uint8_t address, uint8_t data) {
 8000b60:	b530      	push	{r4, r5, lr}
 8000b62:	b083      	sub	sp, #12
 8000b64:	4605      	mov	r5, r0
 8000b66:	ac02      	add	r4, sp, #8
 8000b68:	f804 1d01 	strb.w	r1, [r4, #-1]!
  // set the bank
  enc_setBank(address,true);
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	f7ff ffaf 	bl	8000ad0 <enc_setBank>
  // do the write
  enc_writeOp(ENC624J600_BIT_FIELD_SET, address, &data,1);
 8000b72:	2301      	movs	r3, #1
 8000b74:	4622      	mov	r2, r4
 8000b76:	4629      	mov	r1, r5
 8000b78:	2080      	movs	r0, #128	; 0x80
 8000b7a:	f7ff ff77 	bl	8000a6c <enc_writeOp>
}
 8000b7e:	b003      	add	sp, #12
 8000b80:	bd30      	pop	{r4, r5, pc}
 8000b82:	bf00      	nop

08000b84 <writeControlRegister16>:
  // do the write
  enc_writeOp(ENC624J600_WRITE_CONTROL_REGISTER, address, &data, 1);
}

static void writeControlRegister16(uint8_t address, uint16_t data)
{
 8000b84:	b570      	push	{r4, r5, r6, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	4604      	mov	r4, r0
 8000b8a:	460e      	mov	r6, r1
  uint8_t dat;
  // set the bank
  enc_setBank(address,true);
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	f7ff ff9f 	bl	8000ad0 <enc_setBank>
  // do the write
  
  dat = data & 0x00FF;
 8000b92:	ad02      	add	r5, sp, #8
 8000b94:	f805 6d01 	strb.w	r6, [r5, #-1]!
  enc_writeOp(ENC624J600_WRITE_CONTROL_REGISTER, address&0x1F,(uint8_t*) &dat , 1);
 8000b98:	2301      	movs	r3, #1
 8000b9a:	462a      	mov	r2, r5
 8000b9c:	f004 011f 	and.w	r1, r4, #31
 8000ba0:	2040      	movs	r0, #64	; 0x40
 8000ba2:	f7ff ff63 	bl	8000a6c <enc_writeOp>
  dat = (data & 0xFF00) >> 8;
 8000ba6:	0a36      	lsrs	r6, r6, #8
 8000ba8:	f88d 6007 	strb.w	r6, [sp, #7]
  enc_writeOp(ENC624J600_WRITE_CONTROL_REGISTER, ((address+1) & 0x1F),(uint8_t*) &dat , 1);
 8000bac:	1c61      	adds	r1, r4, #1
 8000bae:	2301      	movs	r3, #1
 8000bb0:	462a      	mov	r2, r5
 8000bb2:	f001 011f 	and.w	r1, r1, #31
 8000bb6:	2040      	movs	r0, #64	; 0x40
 8000bb8:	f7ff ff58 	bl	8000a6c <enc_writeOp>

}
 8000bbc:	b002      	add	sp, #8
 8000bbe:	bd70      	pop	{r4, r5, r6, pc}

08000bc0 <writeControlRegister>:

/* select bank and write control register
will always put CS high to end operation
*/
static void writeControlRegister(uint8_t address, uint8_t data)
{
 8000bc0:	b530      	push	{r4, r5, lr}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	4605      	mov	r5, r0
 8000bc6:	ac02      	add	r4, sp, #8
 8000bc8:	f804 1d01 	strb.w	r1, [r4, #-1]!
  // set the bank
  enc_setBank(address,true);
 8000bcc:	2101      	movs	r1, #1
 8000bce:	f7ff ff7f 	bl	8000ad0 <enc_setBank>
  // do the write
  enc_writeOp(ENC624J600_WRITE_CONTROL_REGISTER, address, &data, 1);
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	4622      	mov	r2, r4
 8000bd6:	4629      	mov	r1, r5
 8000bd8:	2040      	movs	r0, #64	; 0x40
 8000bda:	f7ff ff47 	bl	8000a6c <enc_writeOp>
}
 8000bde:	b003      	add	sp, #12
 8000be0:	bd30      	pop	{r4, r5, pc}
 8000be2:	bf00      	nop

08000be4 <writePointer>:
}



static void writePointer(uint8_t instruction, uint16_t address, bool keepEnabled)
{
 8000be4:	b570      	push	{r4, r5, r6, lr}
 8000be6:	4606      	mov	r6, r0
 8000be8:	460c      	mov	r4, r1
 8000bea:	4615      	mov	r5, r2
	CSACTIVE;
 8000bec:	2101      	movs	r1, #1
 8000bee:	4809      	ldr	r0, [pc, #36]	; (8000c14 <writePointer+0x30>)
 8000bf0:	f7ff fb64 	bl	80002bc <GPIO_ResetBits>
	
	SPISend(instruction);
 8000bf4:	4630      	mov	r0, r6
 8000bf6:	f7ff fefd 	bl	80009f4 <SPISend>
	SPISend( address&0x00FF);
 8000bfa:	b2e0      	uxtb	r0, r4
 8000bfc:	f7ff fefa 	bl	80009f4 <SPISend>
	SPISend( address>>8);
 8000c00:	0a20      	lsrs	r0, r4, #8
 8000c02:	f7ff fef7 	bl	80009f4 <SPISend>

  if (!keepEnabled)
 8000c06:	b91d      	cbnz	r5, 8000c10 <writePointer+0x2c>
	  CSPASSIVE;
 8000c08:	2101      	movs	r1, #1
 8000c0a:	4802      	ldr	r0, [pc, #8]	; (8000c14 <writePointer+0x30>)
 8000c0c:	f7ff fb54 	bl	80002b8 <GPIO_SetBits>
 8000c10:	bd70      	pop	{r4, r5, r6, pc}
 8000c12:	bf00      	nop
 8000c14:	40010c00 	.word	0x40010c00

08000c18 <readBuffer>:
}


static void
readBuffer(uint16_t len, uint8_t* data)
{
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	460d      	mov	r5, r1
  CSACTIVE;
 8000c1e:	2101      	movs	r1, #1
 8000c20:	480a      	ldr	r0, [pc, #40]	; (8000c4c <readBuffer+0x34>)
 8000c22:	f7ff fb4b 	bl	80002bc <GPIO_ResetBits>
  // issue read command
  SPISend(  ENC624J600_READ_ERXDATA);
 8000c26:	202c      	movs	r0, #44	; 0x2c
 8000c28:	f7ff fee4 	bl	80009f4 <SPISend>
  
  #ifdef ENC28J60DEBUG
    SerialUSB.print("Readbuffer: ");
  #endif
  while(len)
 8000c2c:	e006      	b.n	8000c3c <readBuffer+0x24>
  {
    len--;
 8000c2e:	3c01      	subs	r4, #1
 8000c30:	b2a4      	uxth	r4, r4
    // read data

    *data = SPISend(0x00);
 8000c32:	2000      	movs	r0, #0
 8000c34:	f7ff fede 	bl	80009f4 <SPISend>
 8000c38:	f805 0b01 	strb.w	r0, [r5], #1
  SPISend(  ENC624J600_READ_ERXDATA);
  
  #ifdef ENC28J60DEBUG
    SerialUSB.print("Readbuffer: ");
  #endif
  while(len)
 8000c3c:	2c00      	cmp	r4, #0
 8000c3e:	d1f6      	bne.n	8000c2e <readBuffer+0x16>
    SerialUSB.print(*data,HEX);
    #endif
    data++;
  }
  //*data='\0';
  CSPASSIVE;
 8000c40:	2101      	movs	r1, #1
 8000c42:	4802      	ldr	r0, [pc, #8]	; (8000c4c <readBuffer+0x34>)
 8000c44:	f7ff fb38 	bl	80002b8 <GPIO_SetBits>
 8000c48:	bd38      	pop	{r3, r4, r5, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40010c00 	.word	0x40010c00

08000c50 <writeBuffer>:
  #endif
}

static void
writeBuffer(uint16_t len, uint8_t* data)
{
 8000c50:	b570      	push	{r4, r5, r6, lr}
 8000c52:	4605      	mov	r5, r0
 8000c54:	460e      	mov	r6, r1
  CSACTIVE;
 8000c56:	2101      	movs	r1, #1
 8000c58:	480a      	ldr	r0, [pc, #40]	; (8000c84 <writeBuffer+0x34>)
 8000c5a:	f7ff fb2f 	bl	80002bc <GPIO_ResetBits>
  // issue write command
	SPISend(ENC624J600_WRITE_EGPDATA);
 8000c5e:	202a      	movs	r0, #42	; 0x2a
 8000c60:	f7ff fec8 	bl	80009f4 <SPISend>
  //SerialUSB.print("writeBuffer: ");
	while(len--)
 8000c64:	e004      	b.n	8000c70 <writeBuffer+0x20>
	{
    //SerialUSB.print(*data,HEX);
    //SerialUSB.print(" ");
    SPISend( *data);
 8000c66:	f816 0b01 	ldrb.w	r0, [r6], #1
 8000c6a:	f7ff fec3 	bl	80009f4 <SPISend>
{
  CSACTIVE;
  // issue write command
	SPISend(ENC624J600_WRITE_EGPDATA);
  //SerialUSB.print("writeBuffer: ");
	while(len--)
 8000c6e:	4625      	mov	r5, r4
 8000c70:	1e6b      	subs	r3, r5, #1
 8000c72:	b29c      	uxth	r4, r3
 8000c74:	2d00      	cmp	r5, #0
 8000c76:	d1f6      	bne.n	8000c66 <writeBuffer+0x16>
    //SerialUSB.print(" ");
    SPISend( *data);
    data++;
	}
  //SerialUSB.println("");   
  CSPASSIVE;
 8000c78:	2101      	movs	r1, #1
 8000c7a:	4802      	ldr	r0, [pc, #8]	; (8000c84 <writeBuffer+0x34>)
 8000c7c:	f7ff fb1c 	bl	80002b8 <GPIO_SetBits>
 8000c80:	bd70      	pop	{r4, r5, r6, pc}
 8000c82:	bf00      	nop
 8000c84:	40010c00 	.word	0x40010c00

08000c88 <Enc424J600Network_initP1>:




void Enc424J600Network_initP1(uint8_t* macaddr)
{
 8000c88:	b510      	push	{r4, lr}
 8000c8a:	4604      	mov	r4, r0
//	digitalWrite(ENC28J60_CONTROL_CS, HIGH);
//  SPI.begin();
  
	//8.1 RESET
	//STEP ONE
	writeControlRegister16(EUDASTL,0x1234);
 8000c8c:	f241 2134 	movw	r1, #4660	; 0x1234
 8000c90:	2016      	movs	r0, #22
 8000c92:	f7ff ff77 	bl	8000b84 <writeControlRegister16>

	//STEP TWO
	while(readControlRegister16(EUDASTL)!=0x1234)
 8000c96:	e004      	b.n	8000ca2 <Enc424J600Network_initP1+0x1a>
	{
		writeControlRegister16(EUDASTL,0x1234);
 8000c98:	f241 2134 	movw	r1, #4660	; 0x1234
 8000c9c:	2016      	movs	r0, #22
 8000c9e:	f7ff ff71 	bl	8000b84 <writeControlRegister16>
	//8.1 RESET
	//STEP ONE
	writeControlRegister16(EUDASTL,0x1234);

	//STEP TWO
	while(readControlRegister16(EUDASTL)!=0x1234)
 8000ca2:	2016      	movs	r0, #22
 8000ca4:	f7ff ff4a 	bl	8000b3c <readControlRegister16>
 8000ca8:	f241 2334 	movw	r3, #4660	; 0x1234
 8000cac:	4298      	cmp	r0, r3
 8000cae:	d1f3      	bne.n	8000c98 <Enc424J600Network_initP1+0x10>
	{
		writeControlRegister16(EUDASTL,0x1234);
	}
  
	//STEP THREE
	while(readControlRegister(ESTATH) & ESTAT_CLKRDY);
 8000cb0:	20fb      	movs	r0, #251	; 0xfb
 8000cb2:	f7ff ff31 	bl	8000b18 <readControlRegister>
 8000cb6:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8000cba:	d1f9      	bne.n	8000cb0 <Enc424J600Network_initP1+0x28>

	//STEP FOUR
	// reset command
	enc_SBI(ENC624J600_ETH_RESET,0);
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	20ca      	movs	r0, #202	; 0xca
 8000cc0:	f7ff fef4 	bl	8000aac <enc_SBI>

	//STEP FIVE
	delayMicroseconds(25);
 8000cc4:	2019      	movs	r0, #25
 8000cc6:	f002 f897 	bl	8002df8 <delayMicroseconds>
	//STEP SIX
	if (readControlRegister16(EUDASTL)==0x0000)
 8000cca:	2016      	movs	r0, #22
 8000ccc:	f7ff ff36 	bl	8000b3c <readControlRegister16>
 8000cd0:	2800      	cmp	r0, #0
 8000cd2:	d146      	bne.n	8000d62 <Enc424J600Network_initP1+0xda>
	{
		delayMicroseconds(265);		
 8000cd4:	f240 1009 	movw	r0, #265	; 0x109
 8000cd8:	f002 f88e 	bl	8002df8 <delayMicroseconds>
		//8.2 CLKOUT Frequency
		// Arduino : 16MHz =>  COCON=0100 
		// We do not use the clkout
		//writeBitField( ECON2H,ECON2_COCON2>>8);
		//8.3 reception
		nextPacketPtr = RXSTART_INIT;
 8000cdc:	f44f 519a 	mov.w	r1, #4928	; 0x1340
 8000ce0:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <Enc424J600Network_initP1+0xdc>)
 8000ce2:	8019      	strh	r1, [r3, #0]
		writeControlRegister16(ERXSTL, RXSTART_INIT);
 8000ce4:	2004      	movs	r0, #4
 8000ce6:	f7ff ff4d 	bl	8000b84 <writeControlRegister16>

		
		writeControlRegister16(ERXTAILL, RXSTOP_INIT);
 8000cea:	f645 71ff 	movw	r1, #24575	; 0x5fff
 8000cee:	2006      	movs	r0, #6
 8000cf0:	f7ff ff48 	bl	8000b84 <writeControlRegister16>
			
 		// USER buffer : EUDAST Pointer at a higher memory address relative to the end address.
 		writeControlRegister16(EUDASTL, 0x5FFF);
 8000cf4:	f645 71ff 	movw	r1, #24575	; 0x5fff
 8000cf8:	2016      	movs	r0, #22
 8000cfa:	f7ff ff43 	bl	8000b84 <writeControlRegister16>
 		writeControlRegister16(EUDANDL, 0x5FFF);
 8000cfe:	f645 71ff 	movw	r1, #24575	; 0x5fff
 8000d02:	2018      	movs	r0, #24
 8000d04:	f7ff ff3e 	bl	8000b84 <writeControlRegister16>
		// frames shorter than 64 bits => disabled
		// CRC error rejection => enabled
		// Unicast collection filter => enabled
		// Not me unicast filter => disabled
		// Multicast collection filter 
		writeControlRegister(ERXFCONL,ERXFCON_CRCEN|ERXFCON_RUNTEN|ERXFCON_BCEN|ERXFCON_UCEN);//ERXFCON_CRCEN|ERXFCON_RUNTEN|ERXFCON_UCEN);
 8000d08:	2159      	movs	r1, #89	; 0x59
 8000d0a:	2034      	movs	r0, #52	; 0x34
 8000d0c:	f7ff ff58 	bl	8000bc0 <writeControlRegister>
		//exact pattern
		//writeControlRegister(ERXFCONH,0x01);
					      
		// 8.6 MAC initialization ...
		//flow control ???
		writeBitField( MACON2L, MACON2_TXCRCEN|MACON2_PADCFG0|MACON2_PADCFG1|MACON2_PADCFG2);
 8000d10:	21f0      	movs	r1, #240	; 0xf0
 8000d12:	2042      	movs	r0, #66	; 0x42
 8000d14:	f7ff ff24 	bl	8000b60 <writeBitField>

		writeControlRegister16(MAMXFLL, MAX_FRAMELEN);
 8000d18:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000d1c:	204a      	movs	r0, #74	; 0x4a
 8000d1e:	f7ff ff31 	bl	8000b84 <writeControlRegister16>



		writeControlRegister(MAADR1L, macaddr[0]);
 8000d22:	7821      	ldrb	r1, [r4, #0]
 8000d24:	2064      	movs	r0, #100	; 0x64
 8000d26:	f7ff ff4b 	bl	8000bc0 <writeControlRegister>
		writeControlRegister(MAADR1H, macaddr[1]);
 8000d2a:	7861      	ldrb	r1, [r4, #1]
 8000d2c:	2065      	movs	r0, #101	; 0x65
 8000d2e:	f7ff ff47 	bl	8000bc0 <writeControlRegister>
		writeControlRegister(MAADR2L, macaddr[2]);
 8000d32:	78a1      	ldrb	r1, [r4, #2]
 8000d34:	2062      	movs	r0, #98	; 0x62
 8000d36:	f7ff ff43 	bl	8000bc0 <writeControlRegister>
		writeControlRegister(MAADR2H, macaddr[3]);
 8000d3a:	78e1      	ldrb	r1, [r4, #3]
 8000d3c:	2063      	movs	r0, #99	; 0x63
 8000d3e:	f7ff ff3f 	bl	8000bc0 <writeControlRegister>
		writeControlRegister(MAADR3L, macaddr[4]);
 8000d42:	7921      	ldrb	r1, [r4, #4]
 8000d44:	2060      	movs	r0, #96	; 0x60
 8000d46:	f7ff ff3b 	bl	8000bc0 <writeControlRegister>
		writeControlRegister(MAADR3H, macaddr[5]);
 8000d4a:	7961      	ldrb	r1, [r4, #5]
 8000d4c:	2061      	movs	r0, #97	; 0x61
 8000d4e:	f7ff ff37 	bl	8000bc0 <writeControlRegister>
		// 8.8 OTHER considerations
		//half-duplex mode
			//writeBitField( MACON2H,MACON2_DEFER|MACON2_BPEN|MACON2_NOBKOFF);$
			
		// enable interuption
		writeControlRegister(EIEL,0x40);
 8000d52:	2140      	movs	r1, #64	; 0x40
 8000d54:	2072      	movs	r0, #114	; 0x72
 8000d56:	f7ff ff33 	bl	8000bc0 <writeControlRegister>
		// configuration LED
		//		ENC624J600WCRU(EIDLEDH, 0x06);

			 //	ENC624J600PhyWrite(PHCON1,PHCON1_PFULDPX);
		// enable reception
		enc_SBI(ENC624J600_ENABLE_RX,0);
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	20e8      	movs	r0, #232	; 0xe8
 8000d5e:	f7ff fea5 	bl	8000aac <enc_SBI>
 8000d62:	bd10      	pop	{r4, pc}
 8000d64:	20000a22 	.word	0x20000a22

08000d68 <enc424j600PacketReceiveP1>:
//    }
//  return (0);
//}

unsigned int enc424j600PacketReceiveP1(unsigned int maxlen, unsigned char* packet)
{
 8000d68:	b570      	push	{r4, r5, r6, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	4606      	mov	r6, r0
 8000d6e:	460d      	mov	r5, r1
    unsigned char rxdata[6];
    unsigned int len;
    uint16_t newRXTail;
    if (!(readControlRegister(EIRL) & EIR_PKTIF))
 8000d70:	20fc      	movs	r0, #252	; 0xfc
 8000d72:	f7ff fed1 	bl	8000b18 <readControlRegister>
 8000d76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000d7a:	d041      	beq.n	8000e00 <enc424j600PacketReceiveP1+0x98>
    {
        return (0);
    }
    //printf("Packets 0 %d\n",readControlRegister(ESTATL));
    // Set the RX Read Pointer to the beginning of the next unprocessed packet
    writePointer(ENC624J600_WRITE_ERXRDPT,nextPacketPtr,0);
 8000d7c:	4c23      	ldr	r4, [pc, #140]	; (8000e0c <enc424j600PacketReceiveP1+0xa4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	8821      	ldrh	r1, [r4, #0]
 8000d82:	2064      	movs	r0, #100	; 0x64
 8000d84:	f7ff ff2e 	bl	8000be4 <writePointer>
    readBuffer(2, rxdata);
 8000d88:	4669      	mov	r1, sp
 8000d8a:	2002      	movs	r0, #2
 8000d8c:	f7ff ff44 	bl	8000c18 <readBuffer>
    nextPacketPtr  =  rxdata[1];
 8000d90:	f89d 2001 	ldrb.w	r2, [sp, #1]
    nextPacketPtr  =  nextPacketPtr<<8;
    nextPacketPtr  |=  rxdata[0];
 8000d94:	f89d 3000 	ldrb.w	r3, [sp]
 8000d98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000d9c:	8023      	strh	r3, [r4, #0]
    readBuffer(6, rxdata);
 8000d9e:	4669      	mov	r1, sp
 8000da0:	2006      	movs	r0, #6
 8000da2:	f7ff ff39 	bl	8000c18 <readBuffer>
    len  =  rxdata[1];
 8000da6:	f89d 4001 	ldrb.w	r4, [sp, #1]
    len  =  len<<8;
    len  |=  rxdata[0];
 8000daa:	f89d 3000 	ldrb.w	r3, [sp]
 8000dae:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
    len-=4;
 8000db2:	3c04      	subs	r4, #4
    if ((rxdata[2] & 0x80)==0)
 8000db4:	f99d 3002 	ldrsb.w	r3, [sp, #2]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db00      	blt.n	8000dbe <enc424j600PacketReceiveP1+0x56>
    {
        len=0;
 8000dbc:	2400      	movs	r4, #0
    }
    if(len>maxlen)
 8000dbe:	42b4      	cmp	r4, r6
 8000dc0:	d900      	bls.n	8000dc4 <enc424j600PacketReceiveP1+0x5c>
    	len=0;
 8000dc2:	2400      	movs	r4, #0
    readBuffer(len,packet);
 8000dc4:	4629      	mov	r1, r5
 8000dc6:	b2a0      	uxth	r0, r4
 8000dc8:	f7ff ff26 	bl	8000c18 <readBuffer>
    newRXTail = nextPacketPtr - 2;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <enc424j600PacketReceiveP1+0xa4>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	1e9d      	subs	r5, r3, #2
 8000dd2:	b2ad      	uxth	r5, r5

    if (nextPacketPtr == RXSTART_INIT)
 8000dd4:	f5b3 5f9a 	cmp.w	r3, #4928	; 0x1340
 8000dd8:	d101      	bne.n	8000dde <enc424j600PacketReceiveP1+0x76>
        newRXTail = 0x5FFE - 2;
 8000dda:	f645 75fc 	movw	r5, #24572	; 0x5ffc
    //Packet decrement
    writeControlRegister(ECON1H, 0x01);
 8000dde:	2101      	movs	r1, #1
 8000de0:	20ff      	movs	r0, #255	; 0xff
 8000de2:	f7ff feed 	bl	8000bc0 <writeControlRegister>
    //printf("Packets 1 %d\n",readControlRegister(ESTATL));
    //Write new RX tail
    writeControlRegister(ERXTAILL, newRXTail);     //
 8000de6:	b2e9      	uxtb	r1, r5
 8000de8:	2006      	movs	r0, #6
 8000dea:	f7ff fee9 	bl	8000bc0 <writeControlRegister>
    writeControlRegister(ERXTAILH, newRXTail>>8);
 8000dee:	0a29      	lsrs	r1, r5, #8
 8000df0:	2007      	movs	r0, #7
 8000df2:	f7ff fee5 	bl	8000bc0 <writeControlRegister>
    if (len>maxlen-1)
 8000df6:	1e70      	subs	r0, r6, #1
 8000df8:	4284      	cmp	r4, r0
 8000dfa:	d903      	bls.n	8000e04 <enc424j600PacketReceiveP1+0x9c>
	{
		//len=maxlen-1;
		return 0;
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	e002      	b.n	8000e06 <enc424j600PacketReceiveP1+0x9e>
    unsigned char rxdata[6];
    unsigned int len;
    uint16_t newRXTail;
    if (!(readControlRegister(EIRL) & EIR_PKTIF))
    {
        return (0);
 8000e00:	2000      	movs	r0, #0
 8000e02:	e000      	b.n	8000e06 <enc424j600PacketReceiveP1+0x9e>
    if (len>maxlen-1)
	{
		//len=maxlen-1;
		return 0;
	}
    return len;
 8000e04:	4620      	mov	r0, r4
}
 8000e06:	b002      	add	sp, #8
 8000e08:	bd70      	pop	{r4, r5, r6, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000a22 	.word	0x20000a22

08000e10 <enc424j600PacketSendP1>:


void enc424j600PacketSendP1(unsigned int len, unsigned char* packet)
{
 8000e10:	b538      	push	{r3, r4, r5, lr}
 8000e12:	4604      	mov	r4, r0
 8000e14:	460d      	mov	r5, r1
	writePointer(ENC624J600_WRITE_EGPWRPT,TXSTART_INIT,0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2130      	movs	r1, #48	; 0x30
 8000e1a:	206c      	movs	r0, #108	; 0x6c
 8000e1c:	f7ff fee2 	bl	8000be4 <writePointer>
	writeControlRegister(ETXSTL,(TXSTART_INIT)&0x00FF);
 8000e20:	2130      	movs	r1, #48	; 0x30
 8000e22:	2000      	movs	r0, #0
 8000e24:	f7ff fecc 	bl	8000bc0 <writeControlRegister>
	writeControlRegister(ETXSTH,(TXSTART_INIT)>>8);
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f7ff fec8 	bl	8000bc0 <writeControlRegister>
    writeControlRegister(ETXLENL, len&0xFF);
 8000e30:	b2e1      	uxtb	r1, r4
 8000e32:	2002      	movs	r0, #2
 8000e34:	f7ff fec4 	bl	8000bc0 <writeControlRegister>
    writeControlRegister(ETXLENH, len>>8);
 8000e38:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f7ff febf 	bl	8000bc0 <writeControlRegister>
    writeBuffer(len, packet);
 8000e42:	4629      	mov	r1, r5
 8000e44:	b2a0      	uxth	r0, r4
 8000e46:	f7ff ff03 	bl	8000c50 <writeBuffer>
    //enc_writeOp(ENC624J600_BIT_FIELD_SET, ECON1L, ECON1_TXRTS,1);
    //writeBitField(ECON1L,ECON1_TXRTS);
    writeControlRegister(ECON1L,0x03);
 8000e4a:	2103      	movs	r1, #3
 8000e4c:	20fe      	movs	r0, #254	; 0xfe
 8000e4e:	f7ff feb7 	bl	8000bc0 <writeControlRegister>
 8000e52:	bd38      	pop	{r3, r4, r5, pc}

08000e54 <addToBuf>:
uint16_t currentSecs = 0;
static uint32_t leaseStart = 0;
static uint32_t leaseTime = 0;
static uint8_t* bufPtr;
static void addToBuf(uint8_t b) {
    *bufPtr++ = b;
 8000e54:	4a02      	ldr	r2, [pc, #8]	; (8000e60 <addToBuf+0xc>)
 8000e56:	6813      	ldr	r3, [r2, #0]
 8000e58:	1c59      	adds	r1, r3, #1
 8000e5a:	6011      	str	r1, [r2, #0]
 8000e5c:	7018      	strb	r0, [r3, #0]
 8000e5e:	4770      	bx	lr
 8000e60:	20000a2c 	.word	0x20000a2c

08000e64 <dhcp_state>:
{
        // Check lease and request renew if currently OK and time
        // leaseStart - start time in millis
        // leaseTime - length of lease in millis
        //
        if( dhcpState == DHCP_STATE_OK && (leaseStart + leaseTime) <= HAL_GetTick() ) {
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <dhcp_state+0x30>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b05      	cmp	r3, #5
 8000e6a:	d10f      	bne.n	8000e8c <dhcp_state+0x28>
static void addToBuf(uint8_t b) {
    *bufPtr++ = b;
}

uint8_t dhcp_state(void)
{
 8000e6c:	b510      	push	{r4, lr}
        // Check lease and request renew if currently OK and time
        // leaseStart - start time in millis
        // leaseTime - length of lease in millis
        //
        if( dhcpState == DHCP_STATE_OK && (leaseStart + leaseTime) <= HAL_GetTick() ) {
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <dhcp_state+0x34>)
 8000e70:	681c      	ldr	r4, [r3, #0]
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <dhcp_state+0x38>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	441c      	add	r4, r3
 8000e78:	f001 ffac 	bl	8002dd4 <Sys_GetTick>
 8000e7c:	4284      	cmp	r4, r0
 8000e7e:	d802      	bhi.n	8000e86 <dhcp_state+0x22>
                // Calling app needs to detect this and init renewal
                dhcpState = DHCP_STATE_RENEW;
 8000e80:	2206      	movs	r2, #6
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <dhcp_state+0x30>)
 8000e84:	701a      	strb	r2, [r3, #0]
        }
        return(dhcpState);
}
 8000e86:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <dhcp_state+0x30>)
 8000e88:	7818      	ldrb	r0, [r3, #0]
 8000e8a:	bd10      	pop	{r4, pc}
 8000e8c:	4b01      	ldr	r3, [pc, #4]	; (8000e94 <dhcp_state+0x30>)
 8000e8e:	7818      	ldrb	r0, [r3, #0]
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000a3a 	.word	0x20000a3a
 8000e98:	20000a34 	.word	0x20000a34
 8000e9c:	20000a3c 	.word	0x20000a3c

08000ea0 <dhcp_send>:
        dhcpState = DHCP_STATE_REQUEST;
}


// Main DHCP message sending function, either DHCPDISCOVER or DHCPREQUEST
void dhcp_send(uint8_t *buf, uint8_t requestType ) {
 8000ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ea4:	4605      	mov	r5, r0
 8000ea6:	460e      	mov	r6, r1
        int i=0;
        haveDhcpAnswer=0;
        dhcp_ansError=0;
        dhcptid_l++; // increment for next request, finally wrap
 8000ea8:	4b60      	ldr	r3, [pc, #384]	; (800102c <dhcp_send+0x18c>)
 8000eaa:	781c      	ldrb	r4, [r3, #0]
 8000eac:	3401      	adds	r4, #1
 8000eae:	b2e4      	uxtb	r4, r4
 8000eb0:	701c      	strb	r4, [r3, #0]
        // destination IP gets replaced after this call
       
        memset(buf, 0, 400); //XXX OUCH!   
 8000eb2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	f004 fa40 	bl	800533c <memset>
        send_udp_prepare(buf,(DHCPCLIENT_SRC_PORT_H<<8)|(dhcptid_l&0xff),dhcpip,DHCP_DEST_PORT);
 8000ebc:	2344      	movs	r3, #68	; 0x44
 8000ebe:	4a5c      	ldr	r2, [pc, #368]	; (8001030 <dhcp_send+0x190>)
 8000ec0:	6812      	ldr	r2, [r2, #0]
 8000ec2:	f444 4160 	orr.w	r1, r4, #57344	; 0xe000
 8000ec6:	4628      	mov	r0, r5
 8000ec8:	f000 fbca 	bl	8001660 <send_udp_prepare>

        memcpy(buf + ETH_SRC_MAC, macaddr, 6);
 8000ecc:	4b59      	ldr	r3, [pc, #356]	; (8001034 <dhcp_send+0x194>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	f8c5 2006 	str.w	r2, [r5, #6]
 8000ed6:	889a      	ldrh	r2, [r3, #4]
 8000ed8:	816a      	strh	r2, [r5, #10]
        memset(buf + ETH_DST_MAC, 0xFF, 6);
 8000eda:	f04f 32ff 	mov.w	r2, #4294967295
 8000ede:	602a      	str	r2, [r5, #0]
 8000ee0:	80aa      	strh	r2, [r5, #4]
        buf[IP_TOTLEN_L_P]=0x82;
 8000ee2:	f04f 0882 	mov.w	r8, #130	; 0x82
 8000ee6:	f885 8011 	strb.w	r8, [r5, #17]
        buf[IP_PROTO_P]=IP_PROTO_UDP_V;
 8000eea:	2111      	movs	r1, #17
 8000eec:	75e9      	strb	r1, [r5, #23]
        memset(buf + IP_DST_P, 0xFF, 4);
 8000eee:	f8c5 201e 	str.w	r2, [r5, #30]
        buf[UDP_DST_PORT_L_P]=DHCP_SRC_PORT; 
 8000ef2:	2243      	movs	r2, #67	; 0x43
 8000ef4:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
        buf[UDP_SRC_PORT_H_P]=0;
 8000ef8:	2400      	movs	r4, #0
 8000efa:	f885 4022 	strb.w	r4, [r5, #34]	; 0x22
        buf[UDP_SRC_PORT_L_P]=DHCP_DEST_PORT;
 8000efe:	2244      	movs	r2, #68	; 0x44
 8000f00:	f885 2023 	strb.w	r2, [r5, #35]	; 0x23

        // Build DHCP Packet from buf[UDP_DATA_P]
        // Make dhcpPtr start of UDP data buffer
        dhcpData *dhcpPtr = (dhcpData *)&buf[UDP_DATA_P];
        // 0-3 op, htype, hlen, hops
        dhcpPtr->op = DHCP_BOOTREQUEST;
 8000f04:	2701      	movs	r7, #1
 8000f06:	f885 702a 	strb.w	r7, [r5, #42]	; 0x2a
        dhcpPtr->htype = 1;
 8000f0a:	f885 702b 	strb.w	r7, [r5, #43]	; 0x2b
        dhcpPtr->hlen = 6;
 8000f0e:	2206      	movs	r2, #6
 8000f10:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
        dhcpPtr->hops = 0;
 8000f14:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
        // 4-7 xid
        dhcpPtr->xid = currentXid;
 8000f18:	4a47      	ldr	r2, [pc, #284]	; (8001038 <dhcp_send+0x198>)
 8000f1a:	6812      	ldr	r2, [r2, #0]
 8000f1c:	f8c5 202e 	str.w	r2, [r5, #46]	; 0x2e
        // 8-9 secs
        dhcpPtr->secs = currentSecs;
 8000f20:	4a46      	ldr	r2, [pc, #280]	; (800103c <dhcp_send+0x19c>)
 8000f22:	8812      	ldrh	r2, [r2, #0]
 8000f24:	866a      	strh	r2, [r5, #50]	; 0x32
        dhcpPtr->flags = 0x0080;
 8000f26:	2280      	movs	r2, #128	; 0x80
 8000f28:	86aa      	strh	r2, [r5, #52]	; 0x34
        // 16-19 yiaddr
        memset(dhcpPtr->yiaddr, 0, 4);
 8000f2a:	f8c5 403a 	str.w	r4, [r5, #58]	; 0x3a
        // 28-43 chaddr(16)
        memcpy(dhcpPtr->chaddr, macaddr, 6);
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	f8c5 2046 	str.w	r2, [r5, #70]	; 0x46
 8000f34:	889b      	ldrh	r3, [r3, #4]
 8000f36:	f8a5 304a 	strh.w	r3, [r5, #74]	; 0x4a

        // options defined as option, length, value
        bufPtr = buf + UDP_DATA_P + sizeof( dhcpData );
 8000f3a:	f505 728b 	add.w	r2, r5, #278	; 0x116
 8000f3e:	4b40      	ldr	r3, [pc, #256]	; (8001040 <dhcp_send+0x1a0>)
 8000f40:	601a      	str	r2, [r3, #0]
        // Magic cookie 99, 130, 83 and 99
        addToBuf(99);
 8000f42:	2063      	movs	r0, #99	; 0x63
 8000f44:	f7ff ff86 	bl	8000e54 <addToBuf>
        addToBuf(130);
 8000f48:	4640      	mov	r0, r8
 8000f4a:	f7ff ff83 	bl	8000e54 <addToBuf>
        addToBuf(83);
 8000f4e:	2053      	movs	r0, #83	; 0x53
 8000f50:	f7ff ff80 	bl	8000e54 <addToBuf>
        addToBuf(99);
 8000f54:	2063      	movs	r0, #99	; 0x63
 8000f56:	f7ff ff7d 	bl	8000e54 <addToBuf>
        
        // Set correct options
        // Option 1 - DHCP message type
        addToBuf(53);   // DHCPDISCOVER, DHCPREQUEST
 8000f5a:	2035      	movs	r0, #53	; 0x35
 8000f5c:	f7ff ff7a 	bl	8000e54 <addToBuf>
        addToBuf(1);      // Length 
 8000f60:	4638      	mov	r0, r7
 8000f62:	f7ff ff77 	bl	8000e54 <addToBuf>
        addToBuf(requestType);      // Value
 8000f66:	4630      	mov	r0, r6
 8000f68:	f7ff ff74 	bl	8000e54 <addToBuf>

        // Client Identifier Option, this is the client mac address
        addToBuf(61);     // Client identifier
 8000f6c:	203d      	movs	r0, #61	; 0x3d
 8000f6e:	f7ff ff71 	bl	8000e54 <addToBuf>
        addToBuf(7);      // Length 
 8000f72:	2007      	movs	r0, #7
 8000f74:	f7ff ff6e 	bl	8000e54 <addToBuf>
        addToBuf(0x01);      // Value
 8000f78:	4638      	mov	r0, r7
 8000f7a:	f7ff ff6b 	bl	8000e54 <addToBuf>
        for( i=0; i<6; i++)
 8000f7e:	e005      	b.n	8000f8c <dhcp_send+0xec>
                addToBuf(macaddr[i]);
 8000f80:	4b2c      	ldr	r3, [pc, #176]	; (8001034 <dhcp_send+0x194>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	5d18      	ldrb	r0, [r3, r4]
 8000f86:	f7ff ff65 	bl	8000e54 <addToBuf>

        // Client Identifier Option, this is the client mac address
        addToBuf(61);     // Client identifier
        addToBuf(7);      // Length 
        addToBuf(0x01);      // Value
        for( i=0; i<6; i++)
 8000f8a:	3401      	adds	r4, #1
 8000f8c:	2c05      	cmp	r4, #5
 8000f8e:	ddf7      	ble.n	8000f80 <dhcp_send+0xe0>
                addToBuf(macaddr[i]);

        // Host name Option
        addToBuf(12);     // Host name
 8000f90:	200c      	movs	r0, #12
 8000f92:	f7ff ff5f 	bl	8000e54 <addToBuf>
        addToBuf(10);      // Length 
 8000f96:	200a      	movs	r0, #10
 8000f98:	f7ff ff5c 	bl	8000e54 <addToBuf>
        for( i=0; i<10; i++)
 8000f9c:	2400      	movs	r4, #0
 8000f9e:	e004      	b.n	8000faa <dhcp_send+0x10a>
                addToBuf(hostname[i]);
 8000fa0:	4b28      	ldr	r3, [pc, #160]	; (8001044 <dhcp_send+0x1a4>)
 8000fa2:	5d18      	ldrb	r0, [r3, r4]
 8000fa4:	f7ff ff56 	bl	8000e54 <addToBuf>
                addToBuf(macaddr[i]);

        // Host name Option
        addToBuf(12);     // Host name
        addToBuf(10);      // Length 
        for( i=0; i<10; i++)
 8000fa8:	3401      	adds	r4, #1
 8000faa:	2c09      	cmp	r4, #9
 8000fac:	ddf8      	ble.n	8000fa0 <dhcp_send+0x100>
                addToBuf(hostname[i]);

        if( requestType == DHCPREQUEST ) {
 8000fae:	2e03      	cmp	r6, #3
 8000fb0:	d11f      	bne.n	8000ff2 <dhcp_send+0x152>
                // Request IP address
                addToBuf(50);     // Requested IP address
 8000fb2:	2032      	movs	r0, #50	; 0x32
 8000fb4:	f7ff ff4e 	bl	8000e54 <addToBuf>
                addToBuf(4);      // Length 
 8000fb8:	2004      	movs	r0, #4
 8000fba:	f7ff ff4b 	bl	8000e54 <addToBuf>
                for( i=0; i<4; i++)
 8000fbe:	2400      	movs	r4, #0
 8000fc0:	e005      	b.n	8000fce <dhcp_send+0x12e>
                        addToBuf(dhcpip[i]);
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <dhcp_send+0x190>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	5d18      	ldrb	r0, [r3, r4]
 8000fc8:	f7ff ff44 	bl	8000e54 <addToBuf>

        if( requestType == DHCPREQUEST ) {
                // Request IP address
                addToBuf(50);     // Requested IP address
                addToBuf(4);      // Length 
                for( i=0; i<4; i++)
 8000fcc:	3401      	adds	r4, #1
 8000fce:	2c03      	cmp	r4, #3
 8000fd0:	ddf7      	ble.n	8000fc2 <dhcp_send+0x122>
                        addToBuf(dhcpip[i]);

                // Request using server ip address
                addToBuf(54);     // Server IP address
 8000fd2:	2036      	movs	r0, #54	; 0x36
 8000fd4:	f7ff ff3e 	bl	8000e54 <addToBuf>
                addToBuf(4);      // Length 
 8000fd8:	2004      	movs	r0, #4
 8000fda:	f7ff ff3b 	bl	8000e54 <addToBuf>
                for( i=0; i<4; i++)
 8000fde:	2400      	movs	r4, #0
 8000fe0:	e005      	b.n	8000fee <dhcp_send+0x14e>
                        addToBuf(dhcpserver[i]);
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <dhcp_send+0x1a8>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	5d18      	ldrb	r0, [r3, r4]
 8000fe8:	f7ff ff34 	bl	8000e54 <addToBuf>
                        addToBuf(dhcpip[i]);

                // Request using server ip address
                addToBuf(54);     // Server IP address
                addToBuf(4);      // Length 
                for( i=0; i<4; i++)
 8000fec:	3401      	adds	r4, #1
 8000fee:	2c03      	cmp	r4, #3
 8000ff0:	ddf7      	ble.n	8000fe2 <dhcp_send+0x142>
                        addToBuf(dhcpserver[i]);
        }

        // Additional information in parameter list - minimal list for what we need
        addToBuf(55);     // Parameter request list
 8000ff2:	2037      	movs	r0, #55	; 0x37
 8000ff4:	f7ff ff2e 	bl	8000e54 <addToBuf>
        addToBuf(3);      // Length 
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f7ff ff2b 	bl	8000e54 <addToBuf>
        addToBuf(1);      // Subnet mask
 8000ffe:	2001      	movs	r0, #1
 8001000:	f7ff ff28 	bl	8000e54 <addToBuf>
        addToBuf(3);      // Route/Gateway
 8001004:	2003      	movs	r0, #3
 8001006:	f7ff ff25 	bl	8000e54 <addToBuf>
        addToBuf(6);      // DNS Server
 800100a:	2006      	movs	r0, #6
 800100c:	f7ff ff22 	bl	8000e54 <addToBuf>

        // payload len should be around 300
        addToBuf(255);      // end option
 8001010:	20ff      	movs	r0, #255	; 0xff
 8001012:	f7ff ff1f 	bl	8000e54 <addToBuf>
        send_udp_transmit(buf, bufPtr - buf - UDP_DATA_P);
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <dhcp_send+0x1a0>)
 8001018:	6819      	ldr	r1, [r3, #0]
 800101a:	1b49      	subs	r1, r1, r5
 800101c:	392a      	subs	r1, #42	; 0x2a
 800101e:	b289      	uxth	r1, r1
 8001020:	4628      	mov	r0, r5
 8001022:	f000 fb6b 	bl	80016fc <send_udp_transmit>
 8001026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800102a:	bf00      	nop
 800102c:	20000a40 	.word	0x20000a40
 8001030:	20000b94 	.word	0x20000b94
 8001034:	20000a28 	.word	0x20000a28
 8001038:	20000a30 	.word	0x20000a30
 800103c:	20000a38 	.word	0x20000a38
 8001040:	20000a2c 	.word	0x20000a2c
 8001044:	2000001c 	.word	0x2000001c
 8001048:	20000b98 	.word	0x20000b98

0800104c <dhcp_start>:
// Wait for DHCPACK
// All configured
void dhcp_start(uint8_t *buf, uint8_t *macaddrin, uint8_t *ipaddrin,
                uint8_t *maskin, uint8_t *gwipin, uint8_t *dhcpsvrin,
                uint8_t *dnssvrin )
{
 800104c:	b510      	push	{r4, lr}
 800104e:	4604      	mov	r4, r0
        macaddr = macaddrin;
 8001050:	4820      	ldr	r0, [pc, #128]	; (80010d4 <dhcp_start+0x88>)
 8001052:	6001      	str	r1, [r0, #0]
        dhcpip = ipaddrin;
 8001054:	4920      	ldr	r1, [pc, #128]	; (80010d8 <dhcp_start+0x8c>)
 8001056:	600a      	str	r2, [r1, #0]
        dhcpmask = maskin;
 8001058:	4a20      	ldr	r2, [pc, #128]	; (80010dc <dhcp_start+0x90>)
 800105a:	6013      	str	r3, [r2, #0]
        gwaddr = gwipin;
 800105c:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <dhcp_start+0x94>)
 800105e:	9a02      	ldr	r2, [sp, #8]
 8001060:	601a      	str	r2, [r3, #0]
        dhcpserver = dhcpsvrin;
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <dhcp_start+0x98>)
 8001064:	9a03      	ldr	r2, [sp, #12]
 8001066:	601a      	str	r2, [r3, #0]
        dnsserver = dnssvrin;
 8001068:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <dhcp_start+0x9c>)
 800106a:	9a04      	ldr	r2, [sp, #16]
 800106c:	601a      	str	r2, [r3, #0]
        /*srand(analogRead(0));*/ srand(0x13);
 800106e:	2013      	movs	r0, #19
 8001070:	f004 f96c 	bl	800534c <srand>
        currentXid = 0x00654321 + rand();
 8001074:	f004 f992 	bl	800539c <rand>
 8001078:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <dhcp_start+0xa0>)
 800107a:	4403      	add	r3, r0
 800107c:	4a1c      	ldr	r2, [pc, #112]	; (80010f0 <dhcp_start+0xa4>)
 800107e:	6013      	str	r3, [r2, #0]
        currentSecs = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <dhcp_start+0xa8>)
 8001084:	8013      	strh	r3, [r2, #0]
        int n;
        for( n=0; n<4; n++ ) {
 8001086:	e010      	b.n	80010aa <dhcp_start+0x5e>
          dhcpip[n] = 0;
 8001088:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <dhcp_start+0x8c>)
 800108a:	6811      	ldr	r1, [r2, #0]
 800108c:	2200      	movs	r2, #0
 800108e:	54ca      	strb	r2, [r1, r3]
          dhcpmask[n] = 0;
 8001090:	4912      	ldr	r1, [pc, #72]	; (80010dc <dhcp_start+0x90>)
 8001092:	6809      	ldr	r1, [r1, #0]
 8001094:	54ca      	strb	r2, [r1, r3]
          gwaddr[n] = 0;
 8001096:	4912      	ldr	r1, [pc, #72]	; (80010e0 <dhcp_start+0x94>)
 8001098:	6809      	ldr	r1, [r1, #0]
 800109a:	54ca      	strb	r2, [r1, r3]
          dhcpserver[n] = 0;
 800109c:	4911      	ldr	r1, [pc, #68]	; (80010e4 <dhcp_start+0x98>)
 800109e:	6809      	ldr	r1, [r1, #0]
 80010a0:	54ca      	strb	r2, [r1, r3]
          dnsserver[n] = 0;
 80010a2:	4911      	ldr	r1, [pc, #68]	; (80010e8 <dhcp_start+0x9c>)
 80010a4:	6809      	ldr	r1, [r1, #0]
 80010a6:	54ca      	strb	r2, [r1, r3]
        dnsserver = dnssvrin;
        /*srand(analogRead(0));*/ srand(0x13);
        currentXid = 0x00654321 + rand();
        currentSecs = 0;
        int n;
        for( n=0; n<4; n++ ) {
 80010a8:	3301      	adds	r3, #1
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	ddec      	ble.n	8001088 <dhcp_start+0x3c>
          gwaddr[n] = 0;
          dhcpserver[n] = 0;
          dnsserver[n] = 0;
        }
        // Set a unique hostname, use Arduino- plus last octet of mac address
        hostname[8] = 'A' + (macaddr[5] >> 4);
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <dhcp_start+0x88>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	795b      	ldrb	r3, [r3, #5]
 80010b4:	4910      	ldr	r1, [pc, #64]	; (80010f8 <dhcp_start+0xac>)
 80010b6:	091a      	lsrs	r2, r3, #4
 80010b8:	3241      	adds	r2, #65	; 0x41
 80010ba:	720a      	strb	r2, [r1, #8]
        hostname[9] = 'A' + (macaddr[5] & 0x0F);
 80010bc:	f003 030f 	and.w	r3, r3, #15
 80010c0:	3341      	adds	r3, #65	; 0x41
 80010c2:	724b      	strb	r3, [r1, #9]

        // Reception of broadcast packets turned off by default, but
        // it has been shown that some routers send responses as
        // broadcasts. Enable here and disable later
        //enc424j600EnableBroadcast();
        dhcp_send( buf, DHCPDISCOVER );
 80010c4:	2101      	movs	r1, #1
 80010c6:	4620      	mov	r0, r4
 80010c8:	f7ff feea 	bl	8000ea0 <dhcp_send>
        dhcpState = DHCP_STATE_DISCOVER;
 80010cc:	2201      	movs	r2, #1
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <dhcp_start+0xb0>)
 80010d0:	701a      	strb	r2, [r3, #0]
 80010d2:	bd10      	pop	{r4, pc}
 80010d4:	20000a28 	.word	0x20000a28
 80010d8:	20000b94 	.word	0x20000b94
 80010dc:	20000ba0 	.word	0x20000ba0
 80010e0:	20000b9c 	.word	0x20000b9c
 80010e4:	20000b98 	.word	0x20000b98
 80010e8:	20000b90 	.word	0x20000b90
 80010ec:	00654321 	.word	0x00654321
 80010f0:	20000a30 	.word	0x20000a30
 80010f4:	20000a38 	.word	0x20000a38
 80010f8:	2000001c 	.word	0x2000001c
 80010fc:	20000a3a 	.word	0x20000a3a

08001100 <dhcp_request_ip>:
}

void dhcp_request_ip(uint8_t *buf )
{
 8001100:	b508      	push	{r3, lr}
        dhcp_send( buf, DHCPREQUEST );
 8001102:	2103      	movs	r1, #3
 8001104:	f7ff fecc 	bl	8000ea0 <dhcp_send>
        dhcpState = DHCP_STATE_REQUEST;
 8001108:	2203      	movs	r2, #3
 800110a:	4b01      	ldr	r3, [pc, #4]	; (8001110 <dhcp_request_ip+0x10>)
 800110c:	701a      	strb	r2, [r3, #0]
 800110e:	bd08      	pop	{r3, pc}
 8001110:	20000a3a 	.word	0x20000a3a

08001114 <have_dhcpoffer>:
    }
    return 0;
}


uint8_t have_dhcpoffer (uint8_t *buf,uint16_t plen) {
 8001114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Map struct onto payload
    dhcpData *dhcpPtr = (dhcpData *)((uint8_t *)buf + UDP_DATA_P);
    // Offered IP address is in yiaddr
    memcpy(dhcpip, dhcpPtr->yiaddr, 4);
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <have_dhcpoffer+0x94>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f8d0 203a 	ldr.w	r2, [r0, #58]	; 0x3a
 800111e:	601a      	str	r2, [r3, #0]
    // Scan through variable length option list identifying options we want
    uint8_t *ptr = (uint8_t*) (dhcpPtr + 1) + 4;
 8001120:	f500 738d 	add.w	r3, r0, #282	; 0x11a
    do {
        uint8_t option = *ptr++;
 8001124:	461a      	mov	r2, r3
 8001126:	f812 4b02 	ldrb.w	r4, [r2], #2
        uint8_t optionLen = *ptr++;
 800112a:	785b      	ldrb	r3, [r3, #1]
        uint8_t i;
        switch (option) {
 800112c:	2c06      	cmp	r4, #6
 800112e:	d014      	beq.n	800115a <have_dhcpoffer+0x46>
 8001130:	d804      	bhi.n	800113c <have_dhcpoffer+0x28>
 8001132:	2c01      	cmp	r4, #1
 8001134:	d007      	beq.n	8001146 <have_dhcpoffer+0x32>
 8001136:	2c03      	cmp	r4, #3
 8001138:	d00a      	beq.n	8001150 <have_dhcpoffer+0x3c>
 800113a:	e02d      	b.n	8001198 <have_dhcpoffer+0x84>
 800113c:	2c33      	cmp	r4, #51	; 0x33
 800113e:	d011      	beq.n	8001164 <have_dhcpoffer+0x50>
 8001140:	2c36      	cmp	r4, #54	; 0x36
 8001142:	d025      	beq.n	8001190 <have_dhcpoffer+0x7c>
 8001144:	e028      	b.n	8001198 <have_dhcpoffer+0x84>
            case 1:  memcpy(dhcpmask, ptr, 4);
 8001146:	4c19      	ldr	r4, [pc, #100]	; (80011ac <have_dhcpoffer+0x98>)
 8001148:	6824      	ldr	r4, [r4, #0]
 800114a:	6815      	ldr	r5, [r2, #0]
 800114c:	6025      	str	r5, [r4, #0]
                     break;
 800114e:	e023      	b.n	8001198 <have_dhcpoffer+0x84>
            case 3:  memcpy(gwaddr, ptr, 4);
 8001150:	4c17      	ldr	r4, [pc, #92]	; (80011b0 <have_dhcpoffer+0x9c>)
 8001152:	6824      	ldr	r4, [r4, #0]
 8001154:	6815      	ldr	r5, [r2, #0]
 8001156:	6025      	str	r5, [r4, #0]
                     break;
 8001158:	e01e      	b.n	8001198 <have_dhcpoffer+0x84>
            case 6:  memcpy(dnsserver, ptr, 4);
 800115a:	4c16      	ldr	r4, [pc, #88]	; (80011b4 <have_dhcpoffer+0xa0>)
 800115c:	6824      	ldr	r4, [r4, #0]
 800115e:	6815      	ldr	r5, [r2, #0]
 8001160:	6025      	str	r5, [r4, #0]
                     break;
 8001162:	e019      	b.n	8001198 <have_dhcpoffer+0x84>
            case 51: leaseTime = 0;
 8001164:	2400      	movs	r4, #0
 8001166:	4d14      	ldr	r5, [pc, #80]	; (80011b8 <have_dhcpoffer+0xa4>)
 8001168:	602c      	str	r4, [r5, #0]
                     for (i = 0; i<4; i++)
 800116a:	e007      	b.n	800117c <have_dhcpoffer+0x68>
                         leaseTime = (leaseTime + ptr[i]) << 8;
 800116c:	5d17      	ldrb	r7, [r2, r4]
 800116e:	4e12      	ldr	r6, [pc, #72]	; (80011b8 <have_dhcpoffer+0xa4>)
 8001170:	6835      	ldr	r5, [r6, #0]
 8001172:	443d      	add	r5, r7
 8001174:	022d      	lsls	r5, r5, #8
 8001176:	6035      	str	r5, [r6, #0]
            case 3:  memcpy(gwaddr, ptr, 4);
                     break;
            case 6:  memcpy(dnsserver, ptr, 4);
                     break;
            case 51: leaseTime = 0;
                     for (i = 0; i<4; i++)
 8001178:	3401      	adds	r4, #1
 800117a:	b2e4      	uxtb	r4, r4
 800117c:	2c03      	cmp	r4, #3
 800117e:	d9f5      	bls.n	800116c <have_dhcpoffer+0x58>
                         leaseTime = (leaseTime + ptr[i]) << 8;
                     leaseTime *= 1000;      // milliseconds
 8001180:	4d0d      	ldr	r5, [pc, #52]	; (80011b8 <have_dhcpoffer+0xa4>)
 8001182:	682e      	ldr	r6, [r5, #0]
 8001184:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001188:	fb04 f406 	mul.w	r4, r4, r6
 800118c:	602c      	str	r4, [r5, #0]
                     break;
 800118e:	e003      	b.n	8001198 <have_dhcpoffer+0x84>
            case 54: memcpy(dhcpserver, ptr, 4);
 8001190:	4c0a      	ldr	r4, [pc, #40]	; (80011bc <have_dhcpoffer+0xa8>)
 8001192:	6824      	ldr	r4, [r4, #0]
 8001194:	6815      	ldr	r5, [r2, #0]
 8001196:	6025      	str	r5, [r4, #0]
                     break;
        }
        ptr += optionLen;
 8001198:	4413      	add	r3, r2
    } while (ptr < buf + plen);
 800119a:	1842      	adds	r2, r0, r1
 800119c:	4293      	cmp	r3, r2
 800119e:	d3c1      	bcc.n	8001124 <have_dhcpoffer+0x10>
    dhcp_request_ip( buf );
 80011a0:	f7ff ffae 	bl	8001100 <dhcp_request_ip>
    return 1;
}
 80011a4:	2001      	movs	r0, #1
 80011a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011a8:	20000b94 	.word	0x20000b94
 80011ac:	20000ba0 	.word	0x20000ba0
 80011b0:	20000b9c 	.word	0x20000b9c
 80011b4:	20000b90 	.word	0x20000b90
 80011b8:	20000a3c 	.word	0x20000a3c
 80011bc:	20000b98 	.word	0x20000b98

080011c0 <have_dhcpack>:

uint8_t have_dhcpack (uint8_t *buf,uint16_t plen) {
 80011c0:	b508      	push	{r3, lr}
    dhcpState = DHCP_STATE_OK;
 80011c2:	2205      	movs	r2, #5
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <have_dhcpack+0x14>)
 80011c6:	701a      	strb	r2, [r3, #0]
    leaseStart = HAL_GetTick();
 80011c8:	f001 fe04 	bl	8002dd4 <Sys_GetTick>
 80011cc:	4b02      	ldr	r3, [pc, #8]	; (80011d8 <have_dhcpack+0x18>)
 80011ce:	6018      	str	r0, [r3, #0]
    // Turn off broadcast. Application if it needs it can re-enable it
    //enc424j600DisableBroadcast();
    return 2;
}
 80011d0:	2002      	movs	r0, #2
 80011d2:	bd08      	pop	{r3, pc}
 80011d4:	20000a3a 	.word	0x20000a3a
 80011d8:	20000a34 	.word	0x20000a34

080011dc <check_for_dhcp_answer>:
// Either DHCPOFFER, DHCPACK or DHCPNACK
// Return 0 for nothing processed, 1 for done soemthing
uint8_t check_for_dhcp_answer(uint8_t *buf, uint16_t plen){
    // Map struct onto payload
    dhcpData *dhcpPtr = (dhcpData *)&buf[UDP_DATA_P];
    if (plen >= 70 && buf[UDP_SRC_PORT_L_P] == DHCP_SRC_PORT &&
 80011dc:	2945      	cmp	r1, #69	; 0x45
 80011de:	d91f      	bls.n	8001220 <check_for_dhcp_answer+0x44>
// process the answer from the dhcp server:
// return 1 on sucessful processing of answer.
// We set also the variable haveDhcpAnswer
// Either DHCPOFFER, DHCPACK or DHCPNACK
// Return 0 for nothing processed, 1 for done soemthing
uint8_t check_for_dhcp_answer(uint8_t *buf, uint16_t plen){
 80011e0:	b508      	push	{r3, lr}
    // Map struct onto payload
    dhcpData *dhcpPtr = (dhcpData *)&buf[UDP_DATA_P];
    if (plen >= 70 && buf[UDP_SRC_PORT_L_P] == DHCP_SRC_PORT &&
 80011e2:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80011e6:	2b43      	cmp	r3, #67	; 0x43
 80011e8:	d11c      	bne.n	8001224 <check_for_dhcp_answer+0x48>
            dhcpPtr->op == DHCP_BOOTREPLY && dhcpPtr->xid == currentXid ) {
 80011ea:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
// Either DHCPOFFER, DHCPACK or DHCPNACK
// Return 0 for nothing processed, 1 for done soemthing
uint8_t check_for_dhcp_answer(uint8_t *buf, uint16_t plen){
    // Map struct onto payload
    dhcpData *dhcpPtr = (dhcpData *)&buf[UDP_DATA_P];
    if (plen >= 70 && buf[UDP_SRC_PORT_L_P] == DHCP_SRC_PORT &&
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d11a      	bne.n	8001228 <check_for_dhcp_answer+0x4c>
            dhcpPtr->op == DHCP_BOOTREPLY && dhcpPtr->xid == currentXid ) {
 80011f2:	f8d0 202e 	ldr.w	r2, [r0, #46]	; 0x2e
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <check_for_dhcp_answer+0x5c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d116      	bne.n	800122c <check_for_dhcp_answer+0x50>
        // Check for lease expiry
        // uint32_t currentSecs = millis();
        int optionIndex = UDP_DATA_P + sizeof( dhcpData ) + 4;
        if( buf[optionIndex] == 53 )
 80011fe:	f890 311a 	ldrb.w	r3, [r0, #282]	; 0x11a
 8001202:	2b35      	cmp	r3, #53	; 0x35
 8001204:	d114      	bne.n	8001230 <check_for_dhcp_answer+0x54>
            switch( buf[optionIndex+2] ) {
 8001206:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 800120a:	2b02      	cmp	r3, #2
 800120c:	d002      	beq.n	8001214 <check_for_dhcp_answer+0x38>
 800120e:	2b05      	cmp	r3, #5
 8001210:	d003      	beq.n	800121a <check_for_dhcp_answer+0x3e>
 8001212:	e00f      	b.n	8001234 <check_for_dhcp_answer+0x58>
                case DHCPOFFER: return have_dhcpoffer( buf, plen );
 8001214:	f7ff ff7e 	bl	8001114 <have_dhcpoffer>
 8001218:	bd08      	pop	{r3, pc}
                case DHCPACK:   return have_dhcpack( buf, plen );
 800121a:	f7ff ffd1 	bl	80011c0 <have_dhcpack>
 800121e:	bd08      	pop	{r3, pc}
            }
    }
    return 0;
 8001220:	2000      	movs	r0, #0
}
 8001222:	4770      	bx	lr
            switch( buf[optionIndex+2] ) {
                case DHCPOFFER: return have_dhcpoffer( buf, plen );
                case DHCPACK:   return have_dhcpack( buf, plen );
            }
    }
    return 0;
 8001224:	2000      	movs	r0, #0
 8001226:	bd08      	pop	{r3, pc}
 8001228:	2000      	movs	r0, #0
 800122a:	bd08      	pop	{r3, pc}
 800122c:	2000      	movs	r0, #0
 800122e:	bd08      	pop	{r3, pc}
 8001230:	2000      	movs	r0, #0
 8001232:	bd08      	pop	{r3, pc}
 8001234:	2000      	movs	r0, #0
}
 8001236:	bd08      	pop	{r3, pc}
 8001238:	20000a30 	.word	0x20000a30

0800123c <checksum>:
//
// For more information on how this algorithm works see:
// http://www.netfor2.com/checksum.html
// http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
 800123c:	b410      	push	{r4}

        //if(type==0){    
        //        // do not add anything, standard IP checksum as described above
        //        // Usable for ICMP and IP header
        //}
        if(type==1){
 800123e:	2a01      	cmp	r2, #1
 8001240:	d102      	bne.n	8001248 <checksum+0xc>
                sum+=IP_PROTO_UDP_V; // protocol udp
                // the length here is the length of udp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real udp len
 8001242:	f101 0309 	add.w	r3, r1, #9
 8001246:	e000      	b.n	800124a <checksum+0xe>
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
        // type 0=ip , icmp
        //      1=udp
        //      2=tcp
        uint32_t sum = 0;
 8001248:	2300      	movs	r3, #0
                sum+=IP_PROTO_UDP_V; // protocol udp
                // the length here is the length of udp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real udp len
        }
        if(type==2){
 800124a:	2a02      	cmp	r2, #2
 800124c:	d10b      	bne.n	8001266 <checksum+0x2a>
                sum+=IP_PROTO_TCP_V; 
 800124e:	3306      	adds	r3, #6
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
 8001250:	440b      	add	r3, r1
 8001252:	3b08      	subs	r3, #8
 8001254:	e007      	b.n	8001266 <checksum+0x2a>
        }
        // build the sum of 16bit words
        while(len >1){
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
 8001256:	7804      	ldrb	r4, [r0, #0]
 8001258:	7842      	ldrb	r2, [r0, #1]
 800125a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800125e:	4413      	add	r3, r2
                buf+=2;
 8001260:	3002      	adds	r0, #2
                len-=2;
 8001262:	3902      	subs	r1, #2
 8001264:	b289      	uxth	r1, r1
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
        }
        // build the sum of 16bit words
        while(len >1){
 8001266:	2901      	cmp	r1, #1
 8001268:	d8f5      	bhi.n	8001256 <checksum+0x1a>
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
                buf+=2;
                len-=2;
        }
        // if there is a byte left then add it (padded with zero)
        if (len){
 800126a:	b129      	cbz	r1, 8001278 <checksum+0x3c>
                sum += ((uint32_t)(0xFF & *buf))<<8;
 800126c:	7802      	ldrb	r2, [r0, #0]
 800126e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001272:	e001      	b.n	8001278 <checksum+0x3c>
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
                sum = (sum & 0xFFFF)+(sum >> 16);
 8001274:	b29b      	uxth	r3, r3
 8001276:	4413      	add	r3, r2
        if (len){
                sum += ((uint32_t)(0xFF & *buf))<<8;
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
 8001278:	0c1a      	lsrs	r2, r3, #16
 800127a:	d1fb      	bne.n	8001274 <checksum+0x38>
                sum = (sum & 0xFFFF)+(sum >> 16);
        }
        // build 1's complement:
        return( (uint16_t) sum ^ 0xFFFF);
 800127c:	43d8      	mvns	r0, r3
}
 800127e:	b280      	uxth	r0, r0
 8001280:	bc10      	pop	{r4}
 8001282:	4770      	bx	lr

08001284 <init_ip_arp_udp_tcp>:

// This initializes the web server
// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint16_t port){
 8001284:	b410      	push	{r4}
        uint8_t i=0;
        wwwport_h=(port>>8)&0xff;
 8001286:	0a14      	lsrs	r4, r2, #8
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <init_ip_arp_udp_tcp+0x34>)
 800128a:	701c      	strb	r4, [r3, #0]
        wwwport_l=(port&0xff);
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <init_ip_arp_udp_tcp+0x38>)
 800128e:	701a      	strb	r2, [r3, #0]
}

// This initializes the web server
// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint16_t port){
        uint8_t i=0;
 8001290:	2300      	movs	r3, #0
        wwwport_h=(port>>8)&0xff;
        wwwport_l=(port&0xff);
        while(i<4){
 8001292:	e004      	b.n	800129e <init_ip_arp_udp_tcp+0x1a>
                ipaddr[i]=myip[i];
 8001294:	5ccc      	ldrb	r4, [r1, r3]
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <init_ip_arp_udp_tcp+0x3c>)
 8001298:	54d4      	strb	r4, [r2, r3]
                i++;
 800129a:	3301      	adds	r3, #1
 800129c:	b2db      	uxtb	r3, r3
// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint16_t port){
        uint8_t i=0;
        wwwport_h=(port>>8)&0xff;
        wwwport_l=(port&0xff);
        while(i<4){
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d9f8      	bls.n	8001294 <init_ip_arp_udp_tcp+0x10>
 80012a2:	2300      	movs	r3, #0
 80012a4:	e004      	b.n	80012b0 <init_ip_arp_udp_tcp+0x2c>
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
                macaddr[i]=mymac[i];
 80012a6:	5cc1      	ldrb	r1, [r0, r3]
 80012a8:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <init_ip_arp_udp_tcp+0x40>)
 80012aa:	54d1      	strb	r1, [r2, r3]
                i++;
 80012ac:	3301      	adds	r3, #1
 80012ae:	b2db      	uxtb	r3, r3
        while(i<4){
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
 80012b0:	2b05      	cmp	r3, #5
 80012b2:	d9f8      	bls.n	80012a6 <init_ip_arp_udp_tcp+0x22>
                macaddr[i]=mymac[i];
                i++;
        }
}
 80012b4:	bc10      	pop	{r4}
 80012b6:	4770      	bx	lr
 80012b8:	20000a52 	.word	0x20000a52
 80012bc:	2000002c 	.word	0x2000002c
 80012c0:	20000a54 	.word	0x20000a54
 80012c4:	20000ba4 	.word	0x20000ba4

080012c8 <check_ip_message_is_from>:

uint8_t check_ip_message_is_from(uint8_t *buf,uint8_t *ip)
{
 80012c8:	b410      	push	{r4}
        uint8_t i=0;
 80012ca:	2300      	movs	r3, #0
        while(i<4){
 80012cc:	e007      	b.n	80012de <check_ip_message_is_from+0x16>
                if(buf[IP_SRC_P+i]!=ip[i]){
 80012ce:	f103 021a 	add.w	r2, r3, #26
 80012d2:	5c84      	ldrb	r4, [r0, r2]
 80012d4:	5cca      	ldrb	r2, [r1, r3]
 80012d6:	4294      	cmp	r4, r2
 80012d8:	d105      	bne.n	80012e6 <check_ip_message_is_from+0x1e>
                        return(0);
                }
                i++;
 80012da:	3301      	adds	r3, #1
 80012dc:	b2db      	uxtb	r3, r3
}

uint8_t check_ip_message_is_from(uint8_t *buf,uint8_t *ip)
{
        uint8_t i=0;
        while(i<4){
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d9f5      	bls.n	80012ce <check_ip_message_is_from+0x6>
                if(buf[IP_SRC_P+i]!=ip[i]){
                        return(0);
                }
                i++;
        }
        return(1);
 80012e2:	2001      	movs	r0, #1
 80012e4:	e000      	b.n	80012e8 <check_ip_message_is_from+0x20>
uint8_t check_ip_message_is_from(uint8_t *buf,uint8_t *ip)
{
        uint8_t i=0;
        while(i<4){
                if(buf[IP_SRC_P+i]!=ip[i]){
                        return(0);
 80012e6:	2000      	movs	r0, #0
                }
                i++;
        }
        return(1);
}
 80012e8:	bc10      	pop	{r4}
 80012ea:	4770      	bx	lr

080012ec <eth_type_is_arp_and_my_ip>:

uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint16_t len){
        uint8_t i=0;
        //  
        if (len<41){
 80012ec:	2928      	cmp	r1, #40	; 0x28
 80012ee:	d914      	bls.n	800131a <eth_type_is_arp_and_my_ip+0x2e>
                return(0);
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
 80012f0:	7b03      	ldrb	r3, [r0, #12]
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d113      	bne.n	800131e <eth_type_is_arp_and_my_ip+0x32>
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
 80012f6:	7b43      	ldrb	r3, [r0, #13]
        uint8_t i=0;
        //  
        if (len<41){
                return(0);
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
 80012f8:	2b06      	cmp	r3, #6
 80012fa:	d112      	bne.n	8001322 <eth_type_is_arp_and_my_ip+0x36>
 80012fc:	2300      	movs	r3, #0
 80012fe:	e008      	b.n	8001312 <eth_type_is_arp_and_my_ip+0x26>
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
 8001300:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8001304:	5c81      	ldrb	r1, [r0, r2]
 8001306:	4a09      	ldr	r2, [pc, #36]	; (800132c <eth_type_is_arp_and_my_ip+0x40>)
 8001308:	5cd2      	ldrb	r2, [r2, r3]
 800130a:	4291      	cmp	r1, r2
 800130c:	d10b      	bne.n	8001326 <eth_type_is_arp_and_my_ip+0x3a>
                        return(0);
                }
                i++;
 800130e:	3301      	adds	r3, #1
 8001310:	b2db      	uxtb	r3, r3
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
 8001312:	2b03      	cmp	r3, #3
 8001314:	d9f4      	bls.n	8001300 <eth_type_is_arp_and_my_ip+0x14>
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
                        return(0);
                }
                i++;
        }
        return(1);
 8001316:	2001      	movs	r0, #1
 8001318:	4770      	bx	lr

uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint16_t len){
        uint8_t i=0;
        //  
        if (len<41){
                return(0);
 800131a:	2000      	movs	r0, #0
 800131c:	4770      	bx	lr
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
 800131e:	2000      	movs	r0, #0
 8001320:	4770      	bx	lr
 8001322:	2000      	movs	r0, #0
 8001324:	4770      	bx	lr
        }
        while(i<4){
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
                        return(0);
 8001326:	2000      	movs	r0, #0
                }
                i++;
        }
        return(1);
}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000a54 	.word	0x20000a54

08001330 <eth_type_is_ip_and_my_ip>:

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
        uint8_t i=0;
        //eth+ip+udp header is 42
        if (len<42){
 8001330:	2929      	cmp	r1, #41	; 0x29
 8001332:	d917      	bls.n	8001364 <eth_type_is_ip_and_my_ip+0x34>
                return(0);
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
 8001334:	7b03      	ldrb	r3, [r0, #12]
 8001336:	2b08      	cmp	r3, #8
 8001338:	d117      	bne.n	800136a <eth_type_is_ip_and_my_ip+0x3a>
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
 800133a:	7b43      	ldrb	r3, [r0, #13]
        uint8_t i=0;
        //eth+ip+udp header is 42
        if (len<42){
                return(0);
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
 800133c:	b9bb      	cbnz	r3, 800136e <eth_type_is_ip_and_my_ip+0x3e>
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
        	//printf("Not eth type %d %d\n",buf[ETH_TYPE_H_P],buf[ETH_TYPE_L_P]);
                return(0);
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
 800133e:	7b82      	ldrb	r2, [r0, #14]
 8001340:	2a45      	cmp	r2, #69	; 0x45
 8001342:	d110      	bne.n	8001366 <eth_type_is_ip_and_my_ip+0x36>
                i++;
        }
        return(1);
}

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
 8001344:	b410      	push	{r4}
 8001346:	2200      	movs	r2, #0
 8001348:	e008      	b.n	800135c <eth_type_is_ip_and_my_ip+0x2c>
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
                // must be IP V4 and 20 byte header
                return(0);
        }
        while(i<4){
                if(buf[IP_DST_P+i]!=ipaddr[i]){
 800134a:	f102 011e 	add.w	r1, r2, #30
 800134e:	5c44      	ldrb	r4, [r0, r1]
 8001350:	4909      	ldr	r1, [pc, #36]	; (8001378 <eth_type_is_ip_and_my_ip+0x48>)
 8001352:	5c89      	ldrb	r1, [r1, r2]
 8001354:	428c      	cmp	r4, r1
 8001356:	d10c      	bne.n	8001372 <eth_type_is_ip_and_my_ip+0x42>
                	//printf("not my ip %d %d %d \n",buf[IP_DST_P+i],ipaddr[i],i);
                        return(0);
                }
                i++;
 8001358:	3201      	adds	r2, #1
 800135a:	b2d2      	uxtb	r2, r2
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
                // must be IP V4 and 20 byte header
                return(0);
        }
        while(i<4){
 800135c:	2a03      	cmp	r2, #3
 800135e:	d9f4      	bls.n	800134a <eth_type_is_ip_and_my_ip+0x1a>
                	//printf("not my ip %d %d %d \n",buf[IP_DST_P+i],ipaddr[i],i);
                        return(0);
                }
                i++;
        }
        return(1);
 8001360:	2301      	movs	r3, #1
 8001362:	e006      	b.n	8001372 <eth_type_is_ip_and_my_ip+0x42>

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
        uint8_t i=0;
        //eth+ip+udp header is 42
        if (len<42){
                return(0);
 8001364:	2300      	movs	r3, #0
                        return(0);
                }
                i++;
        }
        return(1);
}
 8001366:	4618      	mov	r0, r3
 8001368:	4770      	bx	lr
                return(0);
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
        	//printf("Not eth type %d %d\n",buf[ETH_TYPE_H_P],buf[ETH_TYPE_L_P]);
                return(0);
 800136a:	2300      	movs	r3, #0
 800136c:	e7fb      	b.n	8001366 <eth_type_is_ip_and_my_ip+0x36>
 800136e:	2300      	movs	r3, #0
 8001370:	e7f9      	b.n	8001366 <eth_type_is_ip_and_my_ip+0x36>
                        return(0);
                }
                i++;
        }
        return(1);
}
 8001372:	4618      	mov	r0, r3
 8001374:	bc10      	pop	{r4}
 8001376:	4770      	bx	lr
 8001378:	20000a54 	.word	0x20000a54

0800137c <make_eth>:

// make a return eth header from a received eth packet
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
 800137c:	2300      	movs	r3, #0
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
 800137e:	e007      	b.n	8001390 <make_eth+0x14>
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
 8001380:	1d9a      	adds	r2, r3, #6
 8001382:	5c81      	ldrb	r1, [r0, r2]
 8001384:	54c1      	strb	r1, [r0, r3]
                buf[ETH_SRC_MAC +i]=macaddr[i];
 8001386:	4904      	ldr	r1, [pc, #16]	; (8001398 <make_eth+0x1c>)
 8001388:	5cc9      	ldrb	r1, [r1, r3]
 800138a:	5481      	strb	r1, [r0, r2]
                i++;
 800138c:	3301      	adds	r3, #1
 800138e:	b2db      	uxtb	r3, r3
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
 8001390:	2b05      	cmp	r3, #5
 8001392:	d9f5      	bls.n	8001380 <make_eth+0x4>
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000ba4 	.word	0x20000ba4

0800139c <fill_ip_hdr_checksum>:
		buf[ ETH_TYPE_L_P ] = ETHTYPE_IP_L_V;
}


void fill_ip_hdr_checksum(uint8_t *buf)
{
 800139c:	b510      	push	{r4, lr}
 800139e:	4604      	mov	r4, r0
        uint16_t ck;
        // clear the 2 byte checksum
        buf[IP_CHECKSUM_P]=0;
 80013a0:	2200      	movs	r2, #0
 80013a2:	7602      	strb	r2, [r0, #24]
        buf[IP_CHECKSUM_P+1]=0;
 80013a4:	7642      	strb	r2, [r0, #25]
        buf[IP_FLAGS_P]=0x40; // don't fragment
 80013a6:	2340      	movs	r3, #64	; 0x40
 80013a8:	7503      	strb	r3, [r0, #20]
        buf[IP_FLAGS_P+1]=0;  // fragement offset
 80013aa:	7542      	strb	r2, [r0, #21]
        buf[IP_TTL_P]=64; // ttl
 80013ac:	7583      	strb	r3, [r0, #22]
        // calculate the checksum:
        ck=checksum(&buf[IP_P], IP_HEADER_LEN,0);
 80013ae:	2114      	movs	r1, #20
 80013b0:	300e      	adds	r0, #14
 80013b2:	f7ff ff43 	bl	800123c <checksum>
        buf[IP_CHECKSUM_P]=ck>>8;
 80013b6:	0a03      	lsrs	r3, r0, #8
 80013b8:	7623      	strb	r3, [r4, #24]
        buf[IP_CHECKSUM_P+1]=ck & 0xff;
 80013ba:	7660      	strb	r0, [r4, #25]
 80013bc:	bd10      	pop	{r4, pc}
 80013be:	bf00      	nop

080013c0 <make_ip>:
        fill_ip_hdr_checksum(buf);
}


void make_ip(uint8_t *buf)
{
 80013c0:	b510      	push	{r4, lr}
        uint8_t i=0;
 80013c2:	2300      	movs	r3, #0
        while(i<4){
 80013c4:	e00a      	b.n	80013dc <make_ip+0x1c>
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
 80013c6:	f103 011e 	add.w	r1, r3, #30
 80013ca:	f103 021a 	add.w	r2, r3, #26
 80013ce:	5c84      	ldrb	r4, [r0, r2]
 80013d0:	5444      	strb	r4, [r0, r1]
                buf[IP_SRC_P+i]=ipaddr[i];
 80013d2:	4905      	ldr	r1, [pc, #20]	; (80013e8 <make_ip+0x28>)
 80013d4:	5cc9      	ldrb	r1, [r1, r3]
 80013d6:	5481      	strb	r1, [r0, r2]
                i++;
 80013d8:	3301      	adds	r3, #1
 80013da:	b2db      	uxtb	r3, r3


void make_ip(uint8_t *buf)
{
        uint8_t i=0;
        while(i<4){
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d9f2      	bls.n	80013c6 <make_ip+0x6>
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        fill_ip_hdr_checksum(buf);
 80013e0:	f7ff ffdc 	bl	800139c <fill_ip_hdr_checksum>
 80013e4:	bd10      	pop	{r4, pc}
 80013e6:	bf00      	nop
 80013e8:	20000a54 	.word	0x20000a54

080013ec <step_seq>:
}

// swap seq and ack number and count ack number up
void step_seq(uint8_t *buf,uint16_t rel_ack_num,uint8_t cp_seq)
{
 80013ec:	b470      	push	{r4, r5, r6}
        uint8_t i;
        uint8_t tseq;
        i=4;
 80013ee:	2304      	movs	r3, #4
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
 80013f0:	e010      	b.n	8001414 <step_seq+0x28>
                rel_ack_num=buf[TCP_SEQ_H_P+i-1]+rel_ack_num;
 80013f2:	f103 0525 	add.w	r5, r3, #37	; 0x25
 80013f6:	5d44      	ldrb	r4, [r0, r5]
 80013f8:	4421      	add	r1, r4
 80013fa:	b289      	uxth	r1, r1
                tseq=buf[TCP_SEQACK_H_P+i-1];
 80013fc:	f103 0429 	add.w	r4, r3, #41	; 0x29
 8001400:	5d06      	ldrb	r6, [r0, r4]
                buf[TCP_SEQACK_H_P+i-1]=0xff&rel_ack_num;
 8001402:	5501      	strb	r1, [r0, r4]
                if (cp_seq){
 8001404:	b10a      	cbz	r2, 800140a <step_seq+0x1e>
                        // copy the acknum sent to us into the sequence number
                        buf[TCP_SEQ_H_P+i-1]=tseq;
 8001406:	5546      	strb	r6, [r0, r5]
 8001408:	e001      	b.n	800140e <step_seq+0x22>
                }else{
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset vallue
 800140a:	2400      	movs	r4, #0
 800140c:	5544      	strb	r4, [r0, r5]
                }
                rel_ack_num=rel_ack_num>>8;
 800140e:	0a09      	lsrs	r1, r1, #8
                i--;
 8001410:	3b01      	subs	r3, #1
 8001412:	b2db      	uxtb	r3, r3
        uint8_t i;
        uint8_t tseq;
        i=4;
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1ec      	bne.n	80013f2 <step_seq+0x6>
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset vallue
                }
                rel_ack_num=rel_ack_num>>8;
                i--;
        }
}
 8001418:	bc70      	pop	{r4, r5, r6}
 800141a:	4770      	bx	lr

0800141c <make_tcphead>:
//
// After calling this function you can fill in the first data byte at TCP_OPTIONS_P+4
// If cp_seq=0 then an initial sequence number is used (should be use in synack)
// otherwise it is copied from the packet we received
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t cp_seq)
{
 800141c:	b538      	push	{r3, r4, r5, lr}
 800141e:	4604      	mov	r4, r0
        uint8_t i;
        // copy ports:
        i=buf[TCP_DST_PORT_H_P];
 8001420:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
        buf[TCP_DST_PORT_H_P]=buf[TCP_SRC_PORT_H_P];
 8001424:	f890 5022 	ldrb.w	r5, [r0, #34]	; 0x22
 8001428:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
        buf[TCP_SRC_PORT_H_P]=i;
 800142c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
        //
        i=buf[TCP_DST_PORT_L_P];
 8001430:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
        buf[TCP_DST_PORT_L_P]=buf[TCP_SRC_PORT_L_P];
 8001434:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
 8001438:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
        buf[TCP_SRC_PORT_L_P]=i;
 800143c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
        step_seq(buf,rel_ack_num,cp_seq);
 8001440:	f7ff ffd4 	bl	80013ec <step_seq>
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
 8001444:	2300      	movs	r3, #0
 8001446:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
 800144a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        // no options:
        // 20 bytes:
        // The tcp header length is only a 4 bit field (the upper 4 bits).
        // It is calculated in units of 4 bytes.
        // E.g 20 bytes: 20/4=6 => 0x50=header len field
        buf[TCP_HEADER_LEN_P]=0x50;
 800144e:	2350      	movs	r3, #80	; 0x50
 8001450:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8001454:	bd38      	pop	{r3, r4, r5, pc}
 8001456:	bf00      	nop

08001458 <make_arp_answer_from_request>:
}

void make_arp_answer_from_request(uint8_t *buf)
{
 8001458:	b510      	push	{r4, lr}
 800145a:	4604      	mov	r4, r0
        uint8_t i=0;
        //
        make_eth(buf);
 800145c:	f7ff ff8e 	bl	800137c <make_eth>
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
 8001460:	2300      	movs	r3, #0
 8001462:	7523      	strb	r3, [r4, #20]
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
 8001464:	2202      	movs	r2, #2
 8001466:	7562      	strb	r2, [r4, #21]
        // fill the mac addresses:
        while(i<6){
 8001468:	e00a      	b.n	8001480 <make_arp_answer_from_request+0x28>
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
 800146a:	f103 0120 	add.w	r1, r3, #32
 800146e:	f103 0216 	add.w	r2, r3, #22
 8001472:	5ca0      	ldrb	r0, [r4, r2]
 8001474:	5460      	strb	r0, [r4, r1]
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
 8001476:	490d      	ldr	r1, [pc, #52]	; (80014ac <make_arp_answer_from_request+0x54>)
 8001478:	5cc9      	ldrb	r1, [r1, r3]
 800147a:	54a1      	strb	r1, [r4, r2]
                i++;
 800147c:	3301      	adds	r3, #1
 800147e:	b2db      	uxtb	r3, r3
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
        // fill the mac addresses:
        while(i<6){
 8001480:	2b05      	cmp	r3, #5
 8001482:	d9f2      	bls.n	800146a <make_arp_answer_from_request+0x12>
 8001484:	2300      	movs	r3, #0
 8001486:	e00a      	b.n	800149e <make_arp_answer_from_request+0x46>
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
 8001488:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800148c:	f103 021c 	add.w	r2, r3, #28
 8001490:	5ca0      	ldrb	r0, [r4, r2]
 8001492:	5460      	strb	r0, [r4, r1]
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
 8001494:	4906      	ldr	r1, [pc, #24]	; (80014b0 <make_arp_answer_from_request+0x58>)
 8001496:	5cc9      	ldrb	r1, [r1, r3]
 8001498:	54a1      	strb	r1, [r4, r2]
                i++;
 800149a:	3301      	adds	r3, #1
 800149c:	b2db      	uxtb	r3, r3
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d9f2      	bls.n	8001488 <make_arp_answer_from_request+0x30>
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
                i++;
        }
        // eth+arp is 42 bytes:
        enc424j600PacketSendP1(42,buf);
 80014a2:	4621      	mov	r1, r4
 80014a4:	202a      	movs	r0, #42	; 0x2a
 80014a6:	f7ff fcb3 	bl	8000e10 <enc424j600PacketSendP1>
 80014aa:	bd10      	pop	{r4, pc}
 80014ac:	20000ba4 	.word	0x20000ba4
 80014b0:	20000a54 	.word	0x20000a54

080014b4 <make_echo_reply_from_request>:
}

void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
{
 80014b4:	b538      	push	{r3, r4, r5, lr}
 80014b6:	4604      	mov	r4, r0
 80014b8:	460d      	mov	r5, r1
        make_eth(buf);
 80014ba:	f7ff ff5f 	bl	800137c <make_eth>
        make_ip(buf);
 80014be:	4620      	mov	r0, r4
 80014c0:	f7ff ff7e 	bl	80013c0 <make_ip>
        buf[ICMP_TYPE_P]=ICMP_TYPE_ECHOREPLY_V;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        // we changed only the icmp.type field from request(=8) to reply(=0).
        // we can therefore easily correct the checksum:
        if (buf[ICMP_CHECKSUM_P] > (0xff-0x08)){
 80014ca:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80014ce:	2bf7      	cmp	r3, #247	; 0xf7
 80014d0:	d904      	bls.n	80014dc <make_echo_reply_from_request+0x28>
                buf[ICMP_CHECKSUM_P+1]++;
 80014d2:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80014d6:	3201      	adds	r2, #1
 80014d8:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        }
        buf[ICMP_CHECKSUM_P]+=0x08;
 80014dc:	3308      	adds	r3, #8
 80014de:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        //
        enc424j600PacketSendP1(len,buf);
 80014e2:	4621      	mov	r1, r4
 80014e4:	4628      	mov	r0, r5
 80014e6:	f7ff fc93 	bl	8000e10 <enc424j600PacketSendP1>
 80014ea:	bd38      	pop	{r3, r4, r5, pc}

080014ec <make_tcp_synack_from_syn>:
        enc424j600PacketSendP1(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
}

// this is for the server not the client:
void make_tcp_synack_from_syn(uint8_t *buf)
{
 80014ec:	b538      	push	{r3, r4, r5, lr}
 80014ee:	4604      	mov	r4, r0
        uint16_t ck;
        make_eth(buf);
 80014f0:	f7ff ff44 	bl	800137c <make_eth>
        // total length field in the IP header must be set:
        // 20 bytes IP + 24 bytes (20tcp+4tcp options)
        buf[IP_TOTLEN_H_P]=0;
 80014f4:	2500      	movs	r5, #0
 80014f6:	7425      	strb	r5, [r4, #16]
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
 80014f8:	232c      	movs	r3, #44	; 0x2c
 80014fa:	7463      	strb	r3, [r4, #17]
        make_ip(buf);
 80014fc:	4620      	mov	r0, r4
 80014fe:	f7ff ff5f 	bl	80013c0 <make_ip>
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYNACK_V;
 8001502:	2312      	movs	r3, #18
 8001504:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
        make_tcphead(buf,1,0);
 8001508:	462a      	mov	r2, r5
 800150a:	2101      	movs	r1, #1
 800150c:	4620      	mov	r0, r4
 800150e:	f7ff ff85 	bl	800141c <make_tcphead>
        // put an inital seq number
        buf[TCP_SEQ_H_P+0]= 0;
 8001512:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
        buf[TCP_SEQ_H_P+1]= 0;
 8001516:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
        // we step only the second byte, this allows us to send packts 
        // with 255 bytes, 512  or 765 (step by 3) without generating
        // overlapping numbers.
        buf[TCP_SEQ_H_P+2]= seqnum; 
 800151a:	4a15      	ldr	r2, [pc, #84]	; (8001570 <make_tcp_synack_from_syn+0x84>)
 800151c:	7813      	ldrb	r3, [r2, #0]
 800151e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        buf[TCP_SEQ_H_P+3]= 0;
 8001522:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
        // step the inititial seq num by something we will not use
        // during this tcp session:
        seqnum+=3;
 8001526:	3303      	adds	r3, #3
 8001528:	7013      	strb	r3, [r2, #0]
        // add an mss options field with MSS to 1280:
        // 1280 in hex is 0x500
        buf[TCP_OPTIONS_P]=2;
 800152a:	2202      	movs	r2, #2
 800152c:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
        buf[TCP_OPTIONS_P+1]=4;
 8001530:	2304      	movs	r3, #4
 8001532:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
        buf[TCP_OPTIONS_P+2]=0x05;
 8001536:	2305      	movs	r3, #5
 8001538:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        buf[TCP_OPTIONS_P+3]=0x0;
 800153c:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
        // The tcp header length is only a 4 bit field (the upper 4 bits).
        // It is calculated in units of 4 bytes.
        // E.g 24 bytes: 24/4=6 => 0x60=header len field
        buf[TCP_HEADER_LEN_P]=0x60;
 8001540:	2160      	movs	r1, #96	; 0x60
 8001542:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
        // here we must just be sure that the web browser contacting us
        // will send only one get packet
        buf[TCP_WIN_SIZE]=0x5; // 1400=0x578
 8001546:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        buf[TCP_WIN_SIZE+1]=0x78;
 800154a:	2378      	movs	r3, #120	; 0x78
 800154c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + 4 (one option: mss)
        ck=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+4,2);
 8001550:	2120      	movs	r1, #32
 8001552:	f104 001a 	add.w	r0, r4, #26
 8001556:	f7ff fe71 	bl	800123c <checksum>
        buf[TCP_CHECKSUM_H_P]=ck>>8;
 800155a:	0a03      	lsrs	r3, r0, #8
 800155c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
 8001560:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
        // add 4 for option mss:
        enc424j600PacketSendP1(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN,buf);
 8001564:	4621      	mov	r1, r4
 8001566:	203a      	movs	r0, #58	; 0x3a
 8001568:	f7ff fc52 	bl	8000e10 <enc424j600PacketSendP1>
 800156c:	bd38      	pop	{r3, r4, r5, pc}
 800156e:	bf00      	nop
 8001570:	2000002b 	.word	0x2000002b

08001574 <get_tcp_data_len>:

// do some basic length calculations and store the result in static variables
uint16_t get_tcp_data_len(uint8_t *buf)
{
        int16_t i;
        i=(((int16_t)buf[IP_TOTLEN_H_P])<<8)|(buf[IP_TOTLEN_L_P]&0xff);
 8001574:	7c02      	ldrb	r2, [r0, #16]
 8001576:	7c43      	ldrb	r3, [r0, #17]
 8001578:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800157c:	b21b      	sxth	r3, r3
        i-=IP_HEADER_LEN;
 800157e:	3b14      	subs	r3, #20
 8001580:	b29b      	uxth	r3, r3
        i-=(buf[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
 8001582:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 8001586:	0900      	lsrs	r0, r0, #4
 8001588:	eba3 0080 	sub.w	r0, r3, r0, lsl #2
 800158c:	b200      	sxth	r0, r0
        if (i<=0){
 800158e:	2800      	cmp	r0, #0
 8001590:	dc00      	bgt.n	8001594 <get_tcp_data_len+0x20>
                i=0;
 8001592:	2000      	movs	r0, #0
        }
        return((uint16_t)i);
}
 8001594:	b280      	uxth	r0, r0
 8001596:	4770      	bx	lr

08001598 <make_tcp_ack_from_any>:
}

// Make just an ack packet with no tcp data inside
// This will modify the eth/ip/tcp header 
void make_tcp_ack_from_any(uint8_t *buf,int16_t datlentoack,uint8_t addflags)
{
 8001598:	b570      	push	{r4, r5, r6, lr}
 800159a:	4604      	mov	r4, r0
 800159c:	460d      	mov	r5, r1
 800159e:	4616      	mov	r6, r2
        uint16_t j;
        make_eth(buf);
 80015a0:	f7ff feec 	bl	800137c <make_eth>
        // fill the header:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|addflags;
 80015a4:	f046 0310 	orr.w	r3, r6, #16
 80015a8:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
        if (addflags==TCP_FLAGS_RST_V){
 80015ac:	2e04      	cmp	r6, #4
 80015ae:	d105      	bne.n	80015bc <make_tcp_ack_from_any+0x24>
                make_tcphead(buf,datlentoack,1); 
 80015b0:	2201      	movs	r2, #1
 80015b2:	b2a9      	uxth	r1, r5
 80015b4:	4620      	mov	r0, r4
 80015b6:	f7ff ff31 	bl	800141c <make_tcphead>
 80015ba:	e006      	b.n	80015ca <make_tcp_ack_from_any+0x32>
        } else {
                if (datlentoack==0){
 80015bc:	b905      	cbnz	r5, 80015c0 <make_tcp_ack_from_any+0x28>
                        // if there is no data then we must still acknoledge one packet
                        datlentoack = 1;
 80015be:	2501      	movs	r5, #1
                }
                make_tcphead(buf,datlentoack,1); // no options
 80015c0:	2201      	movs	r2, #1
 80015c2:	b2a9      	uxth	r1, r5
 80015c4:	4620      	mov	r0, r4
 80015c6:	f7ff ff29 	bl	800141c <make_tcphead>
        }
        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) 
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
        buf[IP_TOTLEN_H_P]=j>>8;
 80015ca:	2500      	movs	r5, #0
 80015cc:	7425      	strb	r5, [r4, #16]
        buf[IP_TOTLEN_L_P]=j& 0xff;
 80015ce:	2328      	movs	r3, #40	; 0x28
 80015d0:	7463      	strb	r3, [r4, #17]
        make_ip(buf);
 80015d2:	4620      	mov	r0, r4
 80015d4:	f7ff fef4 	bl	80013c0 <make_ip>
        // use a low window size otherwise we have to have
        // timers and can not just react on every packet.
        buf[TCP_WIN_SIZE]=0x4; // 1024=0x400
 80015d8:	2304      	movs	r3, #4
 80015da:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        buf[TCP_WIN_SIZE+1]=0x0;
 80015de:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN,2);
 80015e2:	2202      	movs	r2, #2
 80015e4:	211c      	movs	r1, #28
 80015e6:	f104 001a 	add.w	r0, r4, #26
 80015ea:	f7ff fe27 	bl	800123c <checksum>
        buf[TCP_CHECKSUM_H_P]=j>>8;
 80015ee:	0a03      	lsrs	r3, r0, #8
 80015f0:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
 80015f4:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
        enc424j600PacketSendP1(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN,buf);
 80015f8:	4621      	mov	r1, r4
 80015fa:	2036      	movs	r0, #54	; 0x36
 80015fc:	f7ff fc08 	bl	8000e10 <enc424j600PacketSendP1>
 8001600:	bd70      	pop	{r4, r5, r6, pc}
 8001602:	bf00      	nop

08001604 <make_tcp_ack_with_data_noflags>:
// You can use this function only immediately after make_tcp_ack_from_any
// This is because this function will NOT modify the eth/ip/tcp header except for
// length and checksum
// You must set TCP_FLAGS before calling this
void make_tcp_ack_with_data_noflags(uint8_t *buf,uint16_t dlen)
{
 8001604:	b538      	push	{r3, r4, r5, lr}
 8001606:	4604      	mov	r4, r0
 8001608:	460d      	mov	r5, r1
        uint16_t j;
        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) + len of data
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
 800160a:	f101 0328 	add.w	r3, r1, #40	; 0x28
 800160e:	b29b      	uxth	r3, r3
        buf[IP_TOTLEN_H_P]=j>>8;
 8001610:	0a1a      	lsrs	r2, r3, #8
 8001612:	7402      	strb	r2, [r0, #16]
        buf[IP_TOTLEN_L_P]=j& 0xff;
 8001614:	7443      	strb	r3, [r0, #17]
        fill_ip_hdr_checksum(buf);
 8001616:	f7ff fec1 	bl	800139c <fill_ip_hdr_checksum>
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
 800161a:	2300      	movs	r3, #0
 800161c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
 8001620:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+dlen,2);
 8001624:	f105 011c 	add.w	r1, r5, #28
 8001628:	2202      	movs	r2, #2
 800162a:	b289      	uxth	r1, r1
 800162c:	f104 001a 	add.w	r0, r4, #26
 8001630:	f7ff fe04 	bl	800123c <checksum>
        buf[TCP_CHECKSUM_H_P]=j>>8;
 8001634:	0a03      	lsrs	r3, r0, #8
 8001636:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
 800163a:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
        enc424j600PacketSendP1(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN,buf);
 800163e:	4621      	mov	r1, r4
 8001640:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8001644:	f7ff fbe4 	bl	8000e10 <enc424j600PacketSendP1>
 8001648:	bd38      	pop	{r3, r4, r5, pc}
 800164a:	bf00      	nop

0800164c <fill_buf_p>:
void fill_buf_p(uint8_t *buf,uint16_t len, const char *s)
{   
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (len) {
 800164c:	e005      	b.n	800165a <fill_buf_p+0xe>
                *buf=*s;
 800164e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8001652:	f800 3b01 	strb.w	r3, [r0], #1
                buf++;
                s++;
                len--;
 8001656:	3901      	subs	r1, #1
 8001658:	b289      	uxth	r1, r1
void fill_buf_p(uint8_t *buf,uint16_t len, const char *s)
{   
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (len) {
 800165a:	2900      	cmp	r1, #0
 800165c:	d1f7      	bne.n	800164e <fill_buf_p+0x2>
                buf++;
                s++;
                len--;
        } 

}
 800165e:	4770      	bx	lr

08001660 <send_udp_prepare>:
// 2) You just allocate a large enough buffer for you data and you call send_udp and nothing else
// needs to be done.
//
// send_udp sends via gwip, you must call client_set_gwip at startup
void send_udp_prepare(uint8_t *buf,uint16_t sport, uint8_t *dip, uint16_t dport)
{
 8001660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001664:	4604      	mov	r4, r0
 8001666:	460e      	mov	r6, r1
 8001668:	4615      	mov	r5, r2
 800166a:	461f      	mov	r7, r3
        uint8_t i=0;
 800166c:	2300      	movs	r3, #0
        while(i<6){
 800166e:	e008      	b.n	8001682 <send_udp_prepare+0x22>
                buf[ETH_DST_MAC +i]=gwmacaddr[i]; // gw mac in local lan or host mac
 8001670:	4a1e      	ldr	r2, [pc, #120]	; (80016ec <send_udp_prepare+0x8c>)
 8001672:	5cd2      	ldrb	r2, [r2, r3]
 8001674:	54e2      	strb	r2, [r4, r3]
                buf[ETH_SRC_MAC +i]=macaddr[i];
 8001676:	1d9a      	adds	r2, r3, #6
 8001678:	491d      	ldr	r1, [pc, #116]	; (80016f0 <send_udp_prepare+0x90>)
 800167a:	5cc9      	ldrb	r1, [r1, r3]
 800167c:	54a1      	strb	r1, [r4, r2]
                i++;
 800167e:	3301      	adds	r3, #1
 8001680:	b2db      	uxtb	r3, r3
//
// send_udp sends via gwip, you must call client_set_gwip at startup
void send_udp_prepare(uint8_t *buf,uint16_t sport, uint8_t *dip, uint16_t dport)
{
        uint8_t i=0;
        while(i<6){
 8001682:	2b05      	cmp	r3, #5
 8001684:	d9f4      	bls.n	8001670 <send_udp_prepare+0x10>
                buf[ETH_DST_MAC +i]=gwmacaddr[i]; // gw mac in local lan or host mac
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8001686:	2308      	movs	r3, #8
 8001688:	7323      	strb	r3, [r4, #12]
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 800168a:	f04f 0800 	mov.w	r8, #0
 800168e:	f884 800d 	strb.w	r8, [r4, #13]
        fill_buf_p(&buf[IP_P],9,iphdr);
 8001692:	4a18      	ldr	r2, [pc, #96]	; (80016f4 <send_udp_prepare+0x94>)
 8001694:	2109      	movs	r1, #9
 8001696:	f104 000e 	add.w	r0, r4, #14
 800169a:	f7ff ffd7 	bl	800164c <fill_buf_p>
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
 800169e:	f884 8010 	strb.w	r8, [r4, #16]
        // done in transmit: buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
        buf[IP_PROTO_P]=IP_PROTO_UDP_V;
 80016a2:	2311      	movs	r3, #17
 80016a4:	75e3      	strb	r3, [r4, #23]
        i=0;
 80016a6:	4643      	mov	r3, r8
        while(i<4){
 80016a8:	e00a      	b.n	80016c0 <send_udp_prepare+0x60>
                buf[IP_DST_P+i]=dip[i];
 80016aa:	f103 021e 	add.w	r2, r3, #30
 80016ae:	5ce9      	ldrb	r1, [r5, r3]
 80016b0:	54a1      	strb	r1, [r4, r2]
                buf[IP_SRC_P+i]=ipaddr[i];
 80016b2:	f103 021a 	add.w	r2, r3, #26
 80016b6:	4910      	ldr	r1, [pc, #64]	; (80016f8 <send_udp_prepare+0x98>)
 80016b8:	5cc9      	ldrb	r1, [r1, r3]
 80016ba:	54a1      	strb	r1, [r4, r2]
                i++;
 80016bc:	3301      	adds	r3, #1
 80016be:	b2db      	uxtb	r3, r3
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
        // done in transmit: buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
        buf[IP_PROTO_P]=IP_PROTO_UDP_V;
        i=0;
        while(i<4){
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d9f2      	bls.n	80016aa <send_udp_prepare+0x4a>
                buf[IP_DST_P+i]=dip[i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        // done in transmit: fill_ip_hdr_checksum(buf);
        buf[UDP_DST_PORT_H_P]=(dport>>8);
 80016c4:	0a3b      	lsrs	r3, r7, #8
 80016c6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        buf[UDP_DST_PORT_L_P]=0xff&dport; 
 80016ca:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
        buf[UDP_SRC_PORT_H_P]=(sport>>8);
 80016ce:	0a33      	lsrs	r3, r6, #8
 80016d0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        buf[UDP_SRC_PORT_L_P]=sport&0xff; 
 80016d4:	f884 6023 	strb.w	r6, [r4, #35]	; 0x23
        buf[UDP_LEN_H_P]=0;
 80016d8:	2300      	movs	r3, #0
 80016da:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        // done in transmit: buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
 80016de:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        buf[UDP_CHECKSUM_L_P]=0;
 80016e2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 80016e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016ea:	bf00      	nop
 80016ec:	20000a68 	.word	0x20000a68
 80016f0:	20000ba4 	.word	0x20000ba4
 80016f4:	08005ca0 	.word	0x08005ca0
 80016f8:	20000a54 	.word	0x20000a54

080016fc <send_udp_transmit>:
        // copy the data:
        // now starting with the first byte at buf[UDP_DATA_P]
}

void send_udp_transmit(uint8_t *buf,uint16_t datalen)
{
 80016fc:	b570      	push	{r4, r5, r6, lr}
 80016fe:	4604      	mov	r4, r0
 8001700:	460d      	mov	r5, r1
        uint16_t ck;
        buf[IP_TOTLEN_H_P]=(IP_HEADER_LEN+UDP_HEADER_LEN+datalen) >> 8;
 8001702:	f101 031c 	add.w	r3, r1, #28
 8001706:	121b      	asrs	r3, r3, #8
 8001708:	7403      	strb	r3, [r0, #16]
        buf[IP_TOTLEN_L_P]=(IP_HEADER_LEN+UDP_HEADER_LEN+datalen) & 0xff;
 800170a:	b2ce      	uxtb	r6, r1
 800170c:	f106 031c 	add.w	r3, r6, #28
 8001710:	7443      	strb	r3, [r0, #17]
        fill_ip_hdr_checksum(buf);
 8001712:	f7ff fe43 	bl	800139c <fill_ip_hdr_checksum>
        //buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        buf[UDP_LEN_H_P]=(UDP_HEADER_LEN+datalen) >>8;
 8001716:	f105 0308 	add.w	r3, r5, #8
 800171a:	121b      	asrs	r3, r3, #8
 800171c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        buf[UDP_LEN_L_P]=(UDP_HEADER_LEN+datalen) & 0xff;
 8001720:	3608      	adds	r6, #8
 8001722:	f884 6027 	strb.w	r6, [r4, #39]	; 0x27

        //
        ck=checksum(&buf[IP_SRC_P], 16 + datalen,1);
 8001726:	f105 0110 	add.w	r1, r5, #16
 800172a:	2201      	movs	r2, #1
 800172c:	b289      	uxth	r1, r1
 800172e:	f104 001a 	add.w	r0, r4, #26
 8001732:	f7ff fd83 	bl	800123c <checksum>
        buf[UDP_CHECKSUM_H_P]=ck>>8;
 8001736:	0a03      	lsrs	r3, r0, #8
 8001738:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        buf[UDP_CHECKSUM_L_P]=ck& 0xff;
 800173c:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
        enc424j600PacketSendP1(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
 8001740:	4621      	mov	r1, r4
 8001742:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8001746:	f7ff fb63 	bl	8000e10 <enc424j600PacketSendP1>
 800174a:	bd70      	pop	{r4, r5, r6, pc}

0800174c <client_arp_whohas>:
#endif // WOL_client

#if defined (NTP_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
// make a arp request
void client_arp_whohas(uint8_t *buf,uint8_t *ip_we_search)
{
 800174c:	b538      	push	{r3, r4, r5, lr}
 800174e:	4604      	mov	r4, r0
 8001750:	460d      	mov	r5, r1
        uint8_t i=0;
 8001752:	2300      	movs	r3, #0
        //
        while(i<6){
 8001754:	e007      	b.n	8001766 <client_arp_whohas+0x1a>
                buf[ETH_DST_MAC +i]=0xff;
 8001756:	22ff      	movs	r2, #255	; 0xff
 8001758:	54e2      	strb	r2, [r4, r3]
                buf[ETH_SRC_MAC +i]=macaddr[i];
 800175a:	1d9a      	adds	r2, r3, #6
 800175c:	491b      	ldr	r1, [pc, #108]	; (80017cc <client_arp_whohas+0x80>)
 800175e:	5cc9      	ldrb	r1, [r1, r3]
 8001760:	54a1      	strb	r1, [r4, r2]
                i++;
 8001762:	3301      	adds	r3, #1
 8001764:	b2db      	uxtb	r3, r3
// make a arp request
void client_arp_whohas(uint8_t *buf,uint8_t *ip_we_search)
{
        uint8_t i=0;
        //
        while(i<6){
 8001766:	2b05      	cmp	r3, #5
 8001768:	d9f5      	bls.n	8001756 <client_arp_whohas+0xa>
                buf[ETH_DST_MAC +i]=0xff;
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
 800176a:	2108      	movs	r1, #8
 800176c:	7321      	strb	r1, [r4, #12]
        buf[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
 800176e:	2306      	movs	r3, #6
 8001770:	7363      	strb	r3, [r4, #13]
        fill_buf_p(&buf[ETH_ARP_P],8,arpreqhdr);
 8001772:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <client_arp_whohas+0x84>)
 8001774:	f104 000e 	add.w	r0, r4, #14
 8001778:	f7ff ff68 	bl	800164c <fill_buf_p>
        i=0;
 800177c:	2300      	movs	r3, #0
        while(i<6){
 800177e:	e00a      	b.n	8001796 <client_arp_whohas+0x4a>
                buf[ETH_ARP_SRC_MAC_P +i]=macaddr[i];
 8001780:	f103 0216 	add.w	r2, r3, #22
 8001784:	4911      	ldr	r1, [pc, #68]	; (80017cc <client_arp_whohas+0x80>)
 8001786:	5cc9      	ldrb	r1, [r1, r3]
 8001788:	54a1      	strb	r1, [r4, r2]
                buf[ETH_ARP_DST_MAC_P+i]=0;
 800178a:	f103 0220 	add.w	r2, r3, #32
 800178e:	2100      	movs	r1, #0
 8001790:	54a1      	strb	r1, [r4, r2]
                i++;
 8001792:	3301      	adds	r3, #1
 8001794:	b2db      	uxtb	r3, r3
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
        buf[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
        fill_buf_p(&buf[ETH_ARP_P],8,arpreqhdr);
        i=0;
        while(i<6){
 8001796:	2b05      	cmp	r3, #5
 8001798:	d9f2      	bls.n	8001780 <client_arp_whohas+0x34>
 800179a:	2300      	movs	r3, #0
 800179c:	e00a      	b.n	80017b4 <client_arp_whohas+0x68>
                buf[ETH_ARP_DST_MAC_P+i]=0;
                i++;
        }
        i=0;
        while(i<4){
                buf[ETH_ARP_DST_IP_P+i]=*(ip_we_search +i);
 800179e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80017a2:	5ce9      	ldrb	r1, [r5, r3]
 80017a4:	54a1      	strb	r1, [r4, r2]
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
 80017a6:	f103 021c 	add.w	r2, r3, #28
 80017aa:	490a      	ldr	r1, [pc, #40]	; (80017d4 <client_arp_whohas+0x88>)
 80017ac:	5cc9      	ldrb	r1, [r1, r3]
 80017ae:	54a1      	strb	r1, [r4, r2]
                i++;
 80017b0:	3301      	adds	r3, #1
 80017b2:	b2db      	uxtb	r3, r3
                buf[ETH_ARP_SRC_MAC_P +i]=macaddr[i];
                buf[ETH_ARP_DST_MAC_P+i]=0;
                i++;
        }
        i=0;
        while(i<4){
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d9f2      	bls.n	800179e <client_arp_whohas+0x52>
                buf[ETH_ARP_DST_IP_P+i]=*(ip_we_search +i);
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
                i++;
        }
       	waitgwmac|=WGW_ACCEPT_ARP_REPLY;
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <client_arp_whohas+0x8c>)
 80017ba:	7813      	ldrb	r3, [r2, #0]
 80017bc:	f043 0308 	orr.w	r3, r3, #8
 80017c0:	7013      	strb	r3, [r2, #0]

        // 0x2a=42=len of packet
        enc424j600PacketSendP1(0x2a,buf);
 80017c2:	4621      	mov	r1, r4
 80017c4:	202a      	movs	r0, #42	; 0x2a
 80017c6:	f7ff fb23 	bl	8000e10 <enc424j600PacketSendP1>
 80017ca:	bd38      	pop	{r3, r4, r5, pc}
 80017cc:	20000ba4 	.word	0x20000ba4
 80017d0:	08005cac 	.word	0x08005cac
 80017d4:	20000a54 	.word	0x20000a54
 80017d8:	2000002d 	.word	0x2000002d

080017dc <client_store_gw_mac>:

// store the mac addr from an arp reply
// no len check here, you must first call eth_type_is_arp_and_my_ip
uint8_t client_store_gw_mac(uint8_t *buf)
{
        uint8_t i=0;
 80017dc:	2300      	movs	r3, #0
        while(i<4){
 80017de:	e008      	b.n	80017f2 <client_store_gw_mac+0x16>
                if(buf[ETH_ARP_SRC_IP_P+i]!=gwip[i]){
 80017e0:	f103 021c 	add.w	r2, r3, #28
 80017e4:	5c81      	ldrb	r1, [r0, r2]
 80017e6:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <client_store_gw_mac+0x38>)
 80017e8:	5cd2      	ldrb	r2, [r2, r3]
 80017ea:	4291      	cmp	r1, r2
 80017ec:	d110      	bne.n	8001810 <client_store_gw_mac+0x34>
                        return(0);
                }
                i++;
 80017ee:	3301      	adds	r3, #1
 80017f0:	b2db      	uxtb	r3, r3
// store the mac addr from an arp reply
// no len check here, you must first call eth_type_is_arp_and_my_ip
uint8_t client_store_gw_mac(uint8_t *buf)
{
        uint8_t i=0;
        while(i<4){
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d9f4      	bls.n	80017e0 <client_store_gw_mac+0x4>
 80017f6:	2300      	movs	r3, #0
 80017f8:	e006      	b.n	8001808 <client_store_gw_mac+0x2c>
                }
                i++;
        }
        i=0;
        while(i<6){
                gwmacaddr[i]=buf[ETH_ARP_SRC_MAC_P +i];
 80017fa:	f103 0216 	add.w	r2, r3, #22
 80017fe:	5c81      	ldrb	r1, [r0, r2]
 8001800:	4a05      	ldr	r2, [pc, #20]	; (8001818 <client_store_gw_mac+0x3c>)
 8001802:	54d1      	strb	r1, [r2, r3]
                i++;
 8001804:	3301      	adds	r3, #1
 8001806:	b2db      	uxtb	r3, r3
                        return(0);
                }
                i++;
        }
        i=0;
        while(i<6){
 8001808:	2b05      	cmp	r3, #5
 800180a:	d9f6      	bls.n	80017fa <client_store_gw_mac+0x1e>
                gwmacaddr[i]=buf[ETH_ARP_SRC_MAC_P +i];
                i++;
        }
        return(1);
 800180c:	2001      	movs	r0, #1
 800180e:	4770      	bx	lr
uint8_t client_store_gw_mac(uint8_t *buf)
{
        uint8_t i=0;
        while(i<4){
                if(buf[ETH_ARP_SRC_IP_P+i]!=gwip[i]){
                        return(0);
 8001810:	2000      	movs	r0, #0
        while(i<6){
                gwmacaddr[i]=buf[ETH_ARP_SRC_MAC_P +i];
                i++;
        }
        return(1);
}
 8001812:	4770      	bx	lr
 8001814:	20000a60 	.word	0x20000a60
 8001818:	20000a68 	.word	0x20000a68

0800181c <client_set_gwip>:
*/

void client_set_gwip(uint8_t *gwipaddr)
{
        uint8_t i=0;
        delaycnt= 0;
 800181c:	2300      	movs	r3, #0
 800181e:	4a07      	ldr	r2, [pc, #28]	; (800183c <client_set_gwip+0x20>)
 8001820:	8013      	strh	r3, [r2, #0]
        waitgwmac=WGW_INITIAL_ARP; // causes an arp request in the packet loop
 8001822:	2101      	movs	r1, #1
 8001824:	4a06      	ldr	r2, [pc, #24]	; (8001840 <client_set_gwip+0x24>)
 8001826:	7011      	strb	r1, [r2, #0]
        while(i<4){
 8001828:	e004      	b.n	8001834 <client_set_gwip+0x18>
                gwip[i]=gwipaddr[i];
 800182a:	5cc1      	ldrb	r1, [r0, r3]
 800182c:	4a05      	ldr	r2, [pc, #20]	; (8001844 <client_set_gwip+0x28>)
 800182e:	54d1      	strb	r1, [r2, r3]
                i++;
 8001830:	3301      	adds	r3, #1
 8001832:	b2db      	uxtb	r3, r3
void client_set_gwip(uint8_t *gwipaddr)
{
        uint8_t i=0;
        delaycnt= 0;
        waitgwmac=WGW_INITIAL_ARP; // causes an arp request in the packet loop
        while(i<4){
 8001834:	2b03      	cmp	r3, #3
 8001836:	d9f8      	bls.n	800182a <client_set_gwip+0xe>
                gwip[i]=gwipaddr[i];
                i++;
        }
}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000028 	.word	0x20000028
 8001840:	2000002d 	.word	0x2000002d
 8001844:	20000a60 	.word	0x20000a60

08001848 <client_syn>:
}

#if defined (TCP_client)
// Make a tcp syn packet
void client_syn(uint8_t *buf,uint8_t srcport,uint8_t dstport_h,uint8_t dstport_l)
{
 8001848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800184c:	4604      	mov	r4, r0
 800184e:	460d      	mov	r5, r1
 8001850:	4617      	mov	r7, r2
 8001852:	461e      	mov	r6, r3
        uint16_t ck;
        uint8_t i=0;
 8001854:	2300      	movs	r3, #0
        // -- make the main part of the eth/IP/tcp header:
        while(i<6){
 8001856:	e008      	b.n	800186a <client_syn+0x22>
                buf[ETH_DST_MAC +i]=gwmacaddr[i]; // gw mac in local lan or host mac
 8001858:	4a3b      	ldr	r2, [pc, #236]	; (8001948 <client_syn+0x100>)
 800185a:	5cd2      	ldrb	r2, [r2, r3]
 800185c:	54e2      	strb	r2, [r4, r3]
                buf[ETH_SRC_MAC +i]=macaddr[i];
 800185e:	1d9a      	adds	r2, r3, #6
 8001860:	493a      	ldr	r1, [pc, #232]	; (800194c <client_syn+0x104>)
 8001862:	5cc9      	ldrb	r1, [r1, r3]
 8001864:	54a1      	strb	r1, [r4, r2]
                i++;
 8001866:	3301      	adds	r3, #1
 8001868:	b2db      	uxtb	r3, r3
void client_syn(uint8_t *buf,uint8_t srcport,uint8_t dstport_h,uint8_t dstport_l)
{
        uint16_t ck;
        uint8_t i=0;
        // -- make the main part of the eth/IP/tcp header:
        while(i<6){
 800186a:	2b05      	cmp	r3, #5
 800186c:	d9f4      	bls.n	8001858 <client_syn+0x10>
                buf[ETH_DST_MAC +i]=gwmacaddr[i]; // gw mac in local lan or host mac
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 800186e:	2308      	movs	r3, #8
 8001870:	7323      	strb	r3, [r4, #12]
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 8001872:	f04f 0800 	mov.w	r8, #0
 8001876:	f884 800d 	strb.w	r8, [r4, #13]
        fill_buf_p(&buf[IP_P],9,iphdr);
 800187a:	4a35      	ldr	r2, [pc, #212]	; (8001950 <client_syn+0x108>)
 800187c:	2109      	movs	r1, #9
 800187e:	f104 000e 	add.w	r0, r4, #14
 8001882:	f7ff fee3 	bl	800164c <fill_buf_p>
        buf[IP_TOTLEN_L_P]=44; // good for syn
 8001886:	232c      	movs	r3, #44	; 0x2c
 8001888:	7463      	strb	r3, [r4, #17]
        buf[IP_PROTO_P]=IP_PROTO_TCP_V;
 800188a:	2306      	movs	r3, #6
 800188c:	75e3      	strb	r3, [r4, #23]
        i=0;
 800188e:	4643      	mov	r3, r8
        while(i<4){
 8001890:	e00b      	b.n	80018aa <client_syn+0x62>
                buf[IP_DST_P+i]=tcpsrvip[i];
 8001892:	f103 021e 	add.w	r2, r3, #30
 8001896:	492f      	ldr	r1, [pc, #188]	; (8001954 <client_syn+0x10c>)
 8001898:	5cc9      	ldrb	r1, [r1, r3]
 800189a:	54a1      	strb	r1, [r4, r2]
                buf[IP_SRC_P+i]=ipaddr[i];
 800189c:	f103 021a 	add.w	r2, r3, #26
 80018a0:	492d      	ldr	r1, [pc, #180]	; (8001958 <client_syn+0x110>)
 80018a2:	5cc9      	ldrb	r1, [r1, r3]
 80018a4:	54a1      	strb	r1, [r4, r2]
                i++;
 80018a6:	3301      	adds	r3, #1
 80018a8:	b2db      	uxtb	r3, r3
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
        fill_buf_p(&buf[IP_P],9,iphdr);
        buf[IP_TOTLEN_L_P]=44; // good for syn
        buf[IP_PROTO_P]=IP_PROTO_TCP_V;
        i=0;
        while(i<4){
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d9f1      	bls.n	8001892 <client_syn+0x4a>
                buf[IP_DST_P+i]=tcpsrvip[i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        fill_ip_hdr_checksum(buf);
 80018ae:	4620      	mov	r0, r4
 80018b0:	f7ff fd74 	bl	800139c <fill_ip_hdr_checksum>
        buf[TCP_DST_PORT_H_P]=dstport_h;
 80018b4:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
        buf[TCP_DST_PORT_L_P]=dstport_l;
 80018b8:	f884 6025 	strb.w	r6, [r4, #37]	; 0x25
        buf[TCP_SRC_PORT_H_P]=TCPCLIENT_SRC_PORT_H;
 80018bc:	230b      	movs	r3, #11
 80018be:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        buf[TCP_SRC_PORT_L_P]=srcport; // lower 8 bit of src port
 80018c2:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
        i=0;
 80018c6:	2300      	movs	r3, #0
        // zero out sequence number and acknowledgement number
        while(i<8){
 80018c8:	e005      	b.n	80018d6 <client_syn+0x8e>
                buf[TCP_SEQ_H_P+i]=0;
 80018ca:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80018ce:	2100      	movs	r1, #0
 80018d0:	54a1      	strb	r1, [r4, r2]
                i++;
 80018d2:	3301      	adds	r3, #1
 80018d4:	b2db      	uxtb	r3, r3
        buf[TCP_DST_PORT_L_P]=dstport_l;
        buf[TCP_SRC_PORT_H_P]=TCPCLIENT_SRC_PORT_H;
        buf[TCP_SRC_PORT_L_P]=srcport; // lower 8 bit of src port
        i=0;
        // zero out sequence number and acknowledgement number
        while(i<8){
 80018d6:	2b07      	cmp	r3, #7
 80018d8:	d9f7      	bls.n	80018ca <client_syn+0x82>
        // -- header ready 
        // put inital seq number
        // we step only the second byte, this allows us to send packts 
        // with 255 bytes 512 (if we step the initial seqnum by 2)
        // or 765 (step by 3)
        buf[TCP_SEQ_H_P+2]= seqnum; 
 80018da:	4a20      	ldr	r2, [pc, #128]	; (800195c <client_syn+0x114>)
 80018dc:	7813      	ldrb	r3, [r2, #0]
 80018de:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        // step the inititial seq num by something we will not use
        // during this tcp session:
        seqnum+=3;
 80018e2:	3303      	adds	r3, #3
 80018e4:	7013      	strb	r3, [r2, #0]
        buf[TCP_HEADER_LEN_P]=0x60; // 0x60=24 len: (0x60>>4) * 4
 80018e6:	2360      	movs	r3, #96	; 0x60
 80018e8:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYN_V;
 80018ec:	2202      	movs	r2, #2
 80018ee:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
        // use a low window size otherwise we have to have
        // timers and can not just react on every packet.
        buf[TCP_WIN_SIZE]=0x4; // 1024=0x400, 768 = 0x300, initial window
 80018f2:	2104      	movs	r1, #4
 80018f4:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        buf[TCP_WIN_SIZE+1]=0x0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
 80018fe:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
 8001902:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        // urgent pointer
        buf[TCP_CHECKSUM_L_P+1]=0;
 8001906:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        buf[TCP_CHECKSUM_L_P+2]=0;
 800190a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        // MSS=768, must be more than 50% of the window size we use
        // 768 in hex is 0x300
        buf[TCP_OPTIONS_P]=2;
 800190e:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
        buf[TCP_OPTIONS_P+1]=4;
 8001912:	f884 1037 	strb.w	r1, [r4, #55]	; 0x37
        buf[TCP_OPTIONS_P+2]=(CLIENTMSS>>8);
 8001916:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
        buf[TCP_OPTIONS_P+3]=CLIENTMSS & 0xff;
 800191a:	2326      	movs	r3, #38	; 0x26
 800191c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        ck=checksum(&buf[IP_SRC_P], 8 +TCP_HEADER_LEN_PLAIN+4,2);
 8001920:	2120      	movs	r1, #32
 8001922:	f104 001a 	add.w	r0, r4, #26
 8001926:	f7ff fc89 	bl	800123c <checksum>
        buf[TCP_CHECKSUM_H_P]=ck>>8;
 800192a:	0a03      	lsrs	r3, r0, #8
 800192c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
 8001930:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
        // 4 is the tcp mss option:
        enc424j600PacketSendP1(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN+4,buf);
 8001934:	4621      	mov	r1, r4
 8001936:	203a      	movs	r0, #58	; 0x3a
 8001938:	f7ff fa6a 	bl	8000e10 <enc424j600PacketSendP1>
#ifdef ETHERSHIELD_DEBUG
        ethershieldDebug( "Sent TCP Syn\n");
 800193c:	4808      	ldr	r0, [pc, #32]	; (8001960 <client_syn+0x118>)
 800193e:	f001 fe1d 	bl	800357c <puts>
 8001942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001946:	bf00      	nop
 8001948:	20000a68 	.word	0x20000a68
 800194c:	20000ba4 	.word	0x20000ba4
 8001950:	08005ca0 	.word	0x08005ca0
 8001954:	20000a44 	.word	0x20000a44
 8001958:	20000a54 	.word	0x20000a54
 800195c:	2000002b 	.word	0x2000002b
 8001960:	08005bf8 	.word	0x08005bf8

08001964 <packetloop_icmp_tcp>:
#endif // PING_client

// return 0 to just continue in the packet loop and return the position 
// of the tcp/udp data if there is tcp/udp data part
uint16_t packetloop_icmp_tcp(uint8_t *buf,uint16_t plen)
{
 8001964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001968:	4604      	mov	r4, r0
#endif

        //plen will be unequal to zero if there is a valid 
        // packet (without crc error):
#if defined (NTP_client) ||  defined (UDP_client) || defined (TCP_client) || defined (PING_client)
        if(plen==0){
 800196a:	2900      	cmp	r1, #0
 800196c:	d132      	bne.n	80019d4 <packetloop_icmp_tcp+0x70>
        	//printf("Delay  %d \n",delaycnt);
                if ((waitgwmac & WGW_INITIAL_ARP||waitgwmac & WGW_REFRESHING) && delaycnt==0){// && Enc424J600Network_linkStatus()){
 800196e:	4bb2      	ldr	r3, [pc, #712]	; (8001c38 <packetloop_icmp_tcp+0x2d4>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	f013 0f01 	tst.w	r3, #1
 8001976:	d104      	bne.n	8001982 <packetloop_icmp_tcp+0x1e>
 8001978:	4baf      	ldr	r3, [pc, #700]	; (8001c38 <packetloop_icmp_tcp+0x2d4>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	f013 0f04 	tst.w	r3, #4
 8001980:	d007      	beq.n	8001992 <packetloop_icmp_tcp+0x2e>
 8001982:	4bae      	ldr	r3, [pc, #696]	; (8001c3c <packetloop_icmp_tcp+0x2d8>)
 8001984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001988:	b91b      	cbnz	r3, 8001992 <packetloop_icmp_tcp+0x2e>
                        client_arp_whohas(buf,gwip);
 800198a:	49ad      	ldr	r1, [pc, #692]	; (8001c40 <packetloop_icmp_tcp+0x2dc>)
 800198c:	4620      	mov	r0, r4
 800198e:	f7ff fedd 	bl	800174c <client_arp_whohas>
                        //printf("Running ARP\n");
                }
                delaycnt++;
 8001992:	4aaa      	ldr	r2, [pc, #680]	; (8001c3c <packetloop_icmp_tcp+0x2d8>)
 8001994:	8813      	ldrh	r3, [r2, #0]
 8001996:	3301      	adds	r3, #1
 8001998:	8013      	strh	r3, [r2, #0]
#if defined (TCP_client)
                //USART_Send(tcp_client_state);
                //if (tcp_client_state==1  && (waitgwmac & WGW_HAVE_GW_MAC)){ // send a syn
                	if (tcp_client_state==1  ){ // send a syn
 800199a:	4baa      	ldr	r3, [pc, #680]	; (8001c44 <packetloop_icmp_tcp+0x2e0>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	f040 81c2 	bne.w	8001d28 <packetloop_icmp_tcp+0x3c4>
                        tcp_client_state= 2;
 80019a4:	2202      	movs	r2, #2
 80019a6:	4ba7      	ldr	r3, [pc, #668]	; (8001c44 <packetloop_icmp_tcp+0x2e0>)
 80019a8:	701a      	strb	r2, [r3, #0]
                        tcpclient_src_port_l++; // allocate a new port
 80019aa:	4aa7      	ldr	r2, [pc, #668]	; (8001c48 <packetloop_icmp_tcp+0x2e4>)
 80019ac:	7813      	ldrb	r3, [r2, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	7013      	strb	r3, [r2, #0]
                        // we encode our 3 bit fd into the src port this
                        // way we get it back in every message that comes
                        // from the server:
                        client_syn(buf,((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port_h,tcp_client_port_l);
 80019b4:	4aa5      	ldr	r2, [pc, #660]	; (8001c4c <packetloop_icmp_tcp+0x2e8>)
 80019b6:	7811      	ldrb	r1, [r2, #0]
 80019b8:	f003 031f 	and.w	r3, r3, #31
 80019bc:	ea43 1141 	orr.w	r1, r3, r1, lsl #5
 80019c0:	4ba3      	ldr	r3, [pc, #652]	; (8001c50 <packetloop_icmp_tcp+0x2ec>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	4aa3      	ldr	r2, [pc, #652]	; (8001c54 <packetloop_icmp_tcp+0x2f0>)
 80019c6:	7812      	ldrb	r2, [r2, #0]
 80019c8:	b2c9      	uxtb	r1, r1
 80019ca:	4620      	mov	r0, r4
 80019cc:	f7ff ff3c 	bl	8001848 <client_syn>
                        //USART_Send(0x44);
                }
#endif
                	//printf("return 0\n");
                	return(0);
 80019d0:	2500      	movs	r5, #0
 80019d2:	e1c0      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
 80019d4:	460e      	mov	r6, r1
        }
#endif // NTP_client||UDP_client||TCP_client||PING_client
        // arp is broadcast if unknown but a host may also
        // verify the mac address by sending it to 
        // a unicast address.
        if(eth_type_is_arp_and_my_ip(buf,plen)){
 80019d6:	f7ff fc89 	bl	80012ec <eth_type_is_arp_and_my_ip>
 80019da:	b1d0      	cbz	r0, 8001a12 <packetloop_icmp_tcp+0xae>
        		//printf("my ip ARP Rx\n");
                if (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V){
 80019dc:	7d63      	ldrb	r3, [r4, #21]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d102      	bne.n	80019e8 <packetloop_icmp_tcp+0x84>
                        // is it an arp request 
                        make_arp_answer_from_request(buf);
 80019e2:	4620      	mov	r0, r4
 80019e4:	f7ff fd38 	bl	8001458 <make_arp_answer_from_request>
                        //printf("ARP reply created \n");
                }
#if defined (NTP_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
                if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V)){
 80019e8:	4b93      	ldr	r3, [pc, #588]	; (8001c38 <packetloop_icmp_tcp+0x2d4>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	f013 0f08 	tst.w	r3, #8
 80019f0:	f000 819c 	beq.w	8001d2c <packetloop_icmp_tcp+0x3c8>
 80019f4:	7d63      	ldrb	r3, [r4, #21]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	f040 819a 	bne.w	8001d30 <packetloop_icmp_tcp+0x3cc>
                        // is it an arp reply 
                	//printf("ARP reply received \n");
                        if (client_store_gw_mac(buf)){
 80019fc:	4620      	mov	r0, r4
 80019fe:	f7ff feed 	bl	80017dc <client_store_gw_mac>
 8001a02:	2800      	cmp	r0, #0
 8001a04:	f000 8196 	beq.w	8001d34 <packetloop_icmp_tcp+0x3d0>
                                waitgwmac=WGW_HAVE_GW_MAC;
 8001a08:	2202      	movs	r2, #2
 8001a0a:	4b8b      	ldr	r3, [pc, #556]	; (8001c38 <packetloop_icmp_tcp+0x2d4>)
 8001a0c:	701a      	strb	r2, [r3, #0]
                                //printf("GW Mac stored\n");
                        }
                }
#endif // NTP_client||UDP_client||TCP_client||PING_client
                //printf("return 1\n");
                return(0);
 8001a0e:	2500      	movs	r5, #0
 8001a10:	e1a1      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>

        }
        // check if ip packets are for us:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
 8001a12:	4631      	mov	r1, r6
 8001a14:	4620      	mov	r0, r4
 8001a16:	f7ff fc8b 	bl	8001330 <eth_type_is_ip_and_my_ip>
 8001a1a:	2800      	cmp	r0, #0
 8001a1c:	f000 818c 	beq.w	8001d38 <packetloop_icmp_tcp+0x3d4>
        }
#endif // NTP_client
#ifdef DNS_client
        // TODO - does this work?
        // If DNS response, drop out to have it processed elsewhere
        if(buf[IP_PROTO_P] == IP_PROTO_UDP_V && buf[UDP_SRC_PORT_H_P]==0 && buf[UDP_SRC_PORT_L_P]== 53 ) {
 8001a20:	7de3      	ldrb	r3, [r4, #23]
 8001a22:	2b11      	cmp	r3, #17
 8001a24:	d107      	bne.n	8001a36 <packetloop_icmp_tcp+0xd2>
 8001a26:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8001a2a:	b922      	cbnz	r2, 8001a36 <packetloop_icmp_tcp+0xd2>
 8001a2c:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8001a30:	2a35      	cmp	r2, #53	; 0x35
 8001a32:	f000 8183 	beq.w	8001d3c <packetloop_icmp_tcp+0x3d8>
                return( UDP_DATA_P );
        }
#endif

        if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d112      	bne.n	8001a60 <packetloop_icmp_tcp+0xfc>
 8001a3a:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8001a3e:	2a08      	cmp	r2, #8
 8001a40:	d10e      	bne.n	8001a60 <packetloop_icmp_tcp+0xfc>
                if (icmp_callback){
 8001a42:	4b85      	ldr	r3, [pc, #532]	; (8001c58 <packetloop_icmp_tcp+0x2f4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	b113      	cbz	r3, 8001a4e <packetloop_icmp_tcp+0xea>
                        (*icmp_callback)(&(buf[IP_SRC_P]));
 8001a48:	f104 001a 	add.w	r0, r4, #26
 8001a4c:	4798      	blx	r3
                }
                // a ping packet, let's send pong
                make_echo_reply_from_request(buf,plen);
 8001a4e:	4631      	mov	r1, r6
 8001a50:	4620      	mov	r0, r4
 8001a52:	f7ff fd2f 	bl	80014b4 <make_echo_reply_from_request>
                //ES_PingCallback();
                printf("return 3\n");
 8001a56:	4881      	ldr	r0, [pc, #516]	; (8001c5c <packetloop_icmp_tcp+0x2f8>)
 8001a58:	f001 fd90 	bl	800357c <puts>
                return(0);
 8001a5c:	2500      	movs	r5, #0
 8001a5e:	e17a      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
        }
        if (plen<54 && buf[IP_PROTO_P]!=IP_PROTO_TCP_V ){
 8001a60:	2e35      	cmp	r6, #53	; 0x35
 8001a62:	d802      	bhi.n	8001a6a <packetloop_icmp_tcp+0x106>
 8001a64:	2b06      	cmp	r3, #6
 8001a66:	f040 816b 	bne.w	8001d40 <packetloop_icmp_tcp+0x3dc>
        	//printf("return 4\n");
                return(0);
        }
#if  defined (TCP_client) 
        // a message for the tcp client, client_state is zero if client was never used
        if ( buf[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H){
 8001a6a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001a6e:	2b0b      	cmp	r3, #11
 8001a70:	f040 8129 	bne.w	8001cc6 <packetloop_icmp_tcp+0x362>
#if defined (WWW_client)
                // workaround to pass pointer to www_client_internal..
                bufptr=buf; 
 8001a74:	4b7a      	ldr	r3, [pc, #488]	; (8001c60 <packetloop_icmp_tcp+0x2fc>)
 8001a76:	601c      	str	r4, [r3, #0]
#endif // WWW_client
                if (check_ip_message_is_from(buf,tcpsrvip)==0){
 8001a78:	497a      	ldr	r1, [pc, #488]	; (8001c64 <packetloop_icmp_tcp+0x300>)
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	f7ff fc24 	bl	80012c8 <check_ip_message_is_from>
 8001a80:	2800      	cmp	r0, #0
 8001a82:	f000 815f 	beq.w	8001d44 <packetloop_icmp_tcp+0x3e0>
                	//printf("return 5\n");
                        return(0);
                }
                // if we get a reset:
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_RST_V){
 8001a86:	f894 502f 	ldrb.w	r5, [r4, #47]	; 0x2f
 8001a8a:	f015 0f04 	tst.w	r5, #4
 8001a8e:	d013      	beq.n	8001ab8 <packetloop_icmp_tcp+0x154>
                        if (client_tcp_result_callback){
 8001a90:	4b75      	ldr	r3, [pc, #468]	; (8001c68 <packetloop_icmp_tcp+0x304>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	b15b      	cbz	r3, 8001aae <packetloop_icmp_tcp+0x14a>
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "RST: Calling tcp client callback\n");
 8001a96:	4875      	ldr	r0, [pc, #468]	; (8001c6c <packetloop_icmp_tcp+0x308>)
 8001a98:	f001 fd70 	bl	800357c <puts>
#endif
                                // parameters in client_tcp_result_callback: fd, status, buf_start, len
                                (*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
 8001a9c:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8001aa0:	4b71      	ldr	r3, [pc, #452]	; (8001c68 <packetloop_icmp_tcp+0x304>)
 8001aa2:	681c      	ldr	r4, [r3, #0]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	2103      	movs	r1, #3
 8001aaa:	0940      	lsrs	r0, r0, #5
 8001aac:	47a0      	blx	r4
                        }
                        tcp_client_state=5;
 8001aae:	2205      	movs	r2, #5
 8001ab0:	4b64      	ldr	r3, [pc, #400]	; (8001c44 <packetloop_icmp_tcp+0x2e0>)
 8001ab2:	701a      	strb	r2, [r3, #0]
                        return(0);
 8001ab4:	2500      	movs	r5, #0
 8001ab6:	e14e      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
                }


                // Determine what to do with packed depending on state
 
                len=get_tcp_data_len(buf);
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f7ff fd5b 	bl	8001574 <get_tcp_data_len>
 8001abe:	4607      	mov	r7, r0
                if (tcp_client_state== 2){
 8001ac0:	4b60      	ldr	r3, [pc, #384]	; (8001c44 <packetloop_icmp_tcp+0x2e0>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d138      	bne.n	8001b3a <packetloop_icmp_tcp+0x1d6>
                        if ((buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (buf[TCP_FLAGS_P] &TCP_FLAGS_ACK_V)){
 8001ac8:	f005 0312 	and.w	r3, r5, #18
 8001acc:	2b12      	cmp	r3, #18
 8001ace:	d124      	bne.n	8001b1a <packetloop_icmp_tcp+0x1b6>
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "Got SYNACK\n");
 8001ad0:	4867      	ldr	r0, [pc, #412]	; (8001c70 <packetloop_icmp_tcp+0x30c>)
 8001ad2:	f001 fd53 	bl	800357c <puts>
#endif
                                // synack, answer with ack
                                make_tcp_ack_from_any(buf,0,0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	4611      	mov	r1, r2
 8001ada:	4620      	mov	r0, r4
 8001adc:	f7ff fd5c 	bl	8001598 <make_tcp_ack_from_any>
                                buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
 8001ae0:	2318      	movs	r3, #24
 8001ae2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f

                                // Make a tcp message with data. When calling this function we must
                                // still have a valid tcp-ack in the buffer. In other words
                                // you have just called make_tcp_ack_from_any(buf,0).
                                if (client_tcp_datafill_callback){
 8001ae6:	4b63      	ldr	r3, [pc, #396]	; (8001c74 <packetloop_icmp_tcp+0x310>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	b153      	cbz	r3, 8001b02 <packetloop_icmp_tcp+0x19e>
#ifdef ETHERSHIELD_DEBUG
                                        ethershieldDebug( "Datafil Callback\n");
 8001aec:	4862      	ldr	r0, [pc, #392]	; (8001c78 <packetloop_icmp_tcp+0x314>)
 8001aee:	f001 fd45 	bl	800357c <puts>
#endif
                                        // in this case it is src port because the above 
                                        // make_tcp_ack_from_any swaps the dst and src port:
                                        len=(*client_tcp_datafill_callback)((buf[TCP_SRC_PORT_L_P]>>5)&0x7);
 8001af2:	4b60      	ldr	r3, [pc, #384]	; (8001c74 <packetloop_icmp_tcp+0x310>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 8001afa:	0940      	lsrs	r0, r0, #5
 8001afc:	4798      	blx	r3
 8001afe:	4601      	mov	r1, r0
 8001b00:	e000      	b.n	8001b04 <packetloop_icmp_tcp+0x1a0>
                                }else{
                                        // this is just to prevent a crash
                                        len=0;
 8001b02:	2100      	movs	r1, #0
                                }
                                tcp_client_state=3;
 8001b04:	2203      	movs	r2, #3
 8001b06:	4b4f      	ldr	r3, [pc, #316]	; (8001c44 <packetloop_icmp_tcp+0x2e0>)
 8001b08:	701a      	strb	r2, [r3, #0]
                                make_tcp_ack_with_data_noflags(buf,len);
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f7ff fd7a 	bl	8001604 <make_tcp_ack_with_data_noflags>
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "Send ACK\n");
 8001b10:	485a      	ldr	r0, [pc, #360]	; (8001c7c <packetloop_icmp_tcp+0x318>)
 8001b12:	f001 fd33 	bl	800357c <puts>
#endif
                                return(0);
 8001b16:	2500      	movs	r5, #0
 8001b18:	e11d      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
                        }else{
                                // reset only if we have sent a syn and don't get syn-ack back.
                                // If we connect to a non listen port then we get a RST
                                // which will be handeled above. In other words there is
                                // normally no danger for an endless loop.
                                tcp_client_state=1; // retry
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4b49      	ldr	r3, [pc, #292]	; (8001c44 <packetloop_icmp_tcp+0x2e0>)
 8001b1e:	701a      	strb	r2, [r3, #0]
                                // do not inform application layer as we retry.
                                len++;
 8001b20:	1881      	adds	r1, r0, r2
 8001b22:	b289      	uxth	r1, r1
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
 8001b24:	f015 0f10 	tst.w	r5, #16
 8001b28:	d000      	beq.n	8001b2c <packetloop_icmp_tcp+0x1c8>
                                        // if packet was an ack then do not step the ack number
                                        len=0;
 8001b2a:	2100      	movs	r1, #0
                                }
                                // refuse and reset the connection
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
 8001b2c:	2204      	movs	r2, #4
 8001b2e:	b209      	sxth	r1, r1
 8001b30:	4620      	mov	r0, r4
 8001b32:	f7ff fd31 	bl	8001598 <make_tcp_ack_from_any>
                                //printf("return 6\n");
                                return(0);
 8001b36:	2500      	movs	r5, #0
 8001b38:	e10d      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
                        }
                } 
                // in tcp_client_state==3 we will normally first get an empty
                // ack-packet and then a ack-packet with data.
                if (tcp_client_state==4 ) {     //&& len>0){ 
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d137      	bne.n	8001bae <packetloop_icmp_tcp+0x24a>
//                        ethershieldDebug( "First Data Packet\n");
#endif
                        // Removed this as there is no code to handle state 4. Only 1st packet will be available.
                        //tcp_client_state=4;
                        // return the data we received
                        if (client_tcp_result_callback){
 8001b3e:	4b4a      	ldr	r3, [pc, #296]	; (8001c68 <packetloop_icmp_tcp+0x304>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	b1f3      	cbz	r3, 8001b82 <packetloop_icmp_tcp+0x21e>
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
 8001b44:	f894 502e 	ldrb.w	r5, [r4, #46]	; 0x2e
 8001b48:	092d      	lsrs	r5, r5, #4
 8001b4a:	00ad      	lsls	r5, r5, #2
 8001b4c:	3522      	adds	r5, #34	; 0x22
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
 8001b4e:	f1a6 0308 	sub.w	r3, r6, #8
 8001b52:	429d      	cmp	r5, r3
 8001b54:	dd00      	ble.n	8001b58 <packetloop_icmp_tcp+0x1f4>
                                        tcpstart=plen-8; // dummy but save
 8001b56:	b29d      	uxth	r5, r3
                                }
                                save_len=len;
                                if (tcpstart+len>plen){
 8001b58:	19eb      	adds	r3, r5, r7
 8001b5a:	429e      	cmp	r6, r3
 8001b5c:	da02      	bge.n	8001b64 <packetloop_icmp_tcp+0x200>
                                        save_len=plen-tcpstart;
 8001b5e:	1b76      	subs	r6, r6, r5
 8001b60:	b2b6      	uxth	r6, r6
 8001b62:	e000      	b.n	8001b66 <packetloop_icmp_tcp+0x202>
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
                                        tcpstart=plen-8; // dummy but save
                                }
                                save_len=len;
 8001b64:	463e      	mov	r6, r7
                                if (tcpstart+len>plen){
                                        save_len=plen-tcpstart;
                                }
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "Calling Result callback\n");
 8001b66:	4846      	ldr	r0, [pc, #280]	; (8001c80 <packetloop_icmp_tcp+0x31c>)
 8001b68:	f001 fd08 	bl	800357c <puts>
#endif
                                send_fin=(*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);
 8001b6c:	4b3e      	ldr	r3, [pc, #248]	; (8001c68 <packetloop_icmp_tcp+0x304>)
 8001b6e:	f8d3 8000 	ldr.w	r8, [r3]
 8001b72:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8001b76:	4633      	mov	r3, r6
 8001b78:	462a      	mov	r2, r5
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	0940      	lsrs	r0, r0, #5
 8001b7e:	47c0      	blx	r8
 8001b80:	e000      	b.n	8001b84 <packetloop_icmp_tcp+0x220>
// of the tcp/udp data if there is tcp/udp data part
uint16_t packetloop_icmp_tcp(uint8_t *buf,uint16_t plen)
{
        uint16_t len;
#if defined (TCP_client)
        uint8_t send_fin=0;
 8001b82:	2000      	movs	r0, #0
                                ethershieldDebug( "Calling Result callback\n");
#endif
                                send_fin=(*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);

                        }
                        if (send_fin){
 8001b84:	b160      	cbz	r0, 8001ba0 <packetloop_icmp_tcp+0x23c>
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "Send FIN\n");
 8001b86:	483f      	ldr	r0, [pc, #252]	; (8001c84 <packetloop_icmp_tcp+0x320>)
 8001b88:	f001 fcf8 	bl	800357c <puts>
#endif
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
 8001b8c:	2209      	movs	r2, #9
 8001b8e:	b239      	sxth	r1, r7
 8001b90:	4620      	mov	r0, r4
 8001b92:	f7ff fd01 	bl	8001598 <make_tcp_ack_from_any>
                                tcp_client_state=5;
 8001b96:	2205      	movs	r2, #5
 8001b98:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <packetloop_icmp_tcp+0x2e0>)
 8001b9a:	701a      	strb	r2, [r3, #0]
                                return(0);
 8001b9c:	2500      	movs	r5, #0
 8001b9e:	e0da      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
                        }
                        make_tcp_ack_from_any(buf,len,0);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	b239      	sxth	r1, r7
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	f7ff fcf7 	bl	8001598 <make_tcp_ack_from_any>
                        return(0);
 8001baa:	2500      	movs	r5, #0
 8001bac:	e0d3      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
                } 
                if (tcp_client_state==3) {      // && len>0){ 
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d13a      	bne.n	8001c28 <packetloop_icmp_tcp+0x2c4>
                        // our first real data packet
#ifdef ETHERSHIELD_DEBUG
//                        ethershieldDebug( "First Data Packet\n");
#endif
                        // Removed this as there is no code to handle state 4. Only 1st packet will be available.
                        tcp_client_state=4;
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <packetloop_icmp_tcp+0x2e0>)
 8001bb6:	701a      	strb	r2, [r3, #0]
                        // return the data we received
                        if (client_tcp_result_callback){
 8001bb8:	4b2b      	ldr	r3, [pc, #172]	; (8001c68 <packetloop_icmp_tcp+0x304>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	b1f3      	cbz	r3, 8001bfc <packetloop_icmp_tcp+0x298>
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
 8001bbe:	f894 502e 	ldrb.w	r5, [r4, #46]	; 0x2e
 8001bc2:	40d5      	lsrs	r5, r2
 8001bc4:	00ad      	lsls	r5, r5, #2
 8001bc6:	3522      	adds	r5, #34	; 0x22
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
 8001bc8:	f1a6 0308 	sub.w	r3, r6, #8
 8001bcc:	429d      	cmp	r5, r3
 8001bce:	dd00      	ble.n	8001bd2 <packetloop_icmp_tcp+0x26e>
                                        tcpstart=plen-8; // dummy but save
 8001bd0:	b29d      	uxth	r5, r3
                                }
                                save_len=len;
                                if (tcpstart+len>plen){
 8001bd2:	19eb      	adds	r3, r5, r7
 8001bd4:	429e      	cmp	r6, r3
 8001bd6:	da02      	bge.n	8001bde <packetloop_icmp_tcp+0x27a>
                                        save_len=plen-tcpstart;
 8001bd8:	1b76      	subs	r6, r6, r5
 8001bda:	b2b6      	uxth	r6, r6
 8001bdc:	e000      	b.n	8001be0 <packetloop_icmp_tcp+0x27c>
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
                                        tcpstart=plen-8; // dummy but save
                                }
                                save_len=len;
 8001bde:	463e      	mov	r6, r7
                                if (tcpstart+len>plen){
                                        save_len=plen-tcpstart;
                                }
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "Calling Result callback\n");
 8001be0:	4827      	ldr	r0, [pc, #156]	; (8001c80 <packetloop_icmp_tcp+0x31c>)
 8001be2:	f001 fccb 	bl	800357c <puts>
#endif
                                send_fin=(*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);
 8001be6:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <packetloop_icmp_tcp+0x304>)
 8001be8:	f8d3 8000 	ldr.w	r8, [r3]
 8001bec:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8001bf0:	4633      	mov	r3, r6
 8001bf2:	462a      	mov	r2, r5
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	0940      	lsrs	r0, r0, #5
 8001bf8:	47c0      	blx	r8
 8001bfa:	e000      	b.n	8001bfe <packetloop_icmp_tcp+0x29a>
// of the tcp/udp data if there is tcp/udp data part
uint16_t packetloop_icmp_tcp(uint8_t *buf,uint16_t plen)
{
        uint16_t len;
#if defined (TCP_client)
        uint8_t send_fin=0;
 8001bfc:	2000      	movs	r0, #0
                                ethershieldDebug( "Calling Result callback\n");
#endif
                                send_fin=(*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);

                        }
                        if (send_fin){
 8001bfe:	b160      	cbz	r0, 8001c1a <packetloop_icmp_tcp+0x2b6>
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "Send FIN\n");
 8001c00:	4820      	ldr	r0, [pc, #128]	; (8001c84 <packetloop_icmp_tcp+0x320>)
 8001c02:	f001 fcbb 	bl	800357c <puts>
#endif
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
 8001c06:	2209      	movs	r2, #9
 8001c08:	b239      	sxth	r1, r7
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f7ff fcc4 	bl	8001598 <make_tcp_ack_from_any>
                                tcp_client_state=5;
 8001c10:	2205      	movs	r2, #5
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <packetloop_icmp_tcp+0x2e0>)
 8001c14:	701a      	strb	r2, [r3, #0]
                                return(0);
 8001c16:	2500      	movs	r5, #0
 8001c18:	e09d      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
                        }
                        make_tcp_ack_from_any(buf,len,0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	b239      	sxth	r1, r7
 8001c1e:	4620      	mov	r0, r4
 8001c20:	f7ff fcba 	bl	8001598 <make_tcp_ack_from_any>
                        return(0);
 8001c24:	2500      	movs	r5, #0
 8001c26:	e096      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
                }
                if(tcp_client_state==5){
 8001c28:	2b05      	cmp	r3, #5
 8001c2a:	d12f      	bne.n	8001c8c <packetloop_icmp_tcp+0x328>
                        // no more ack
#ifdef ETHERSHIELD_DEBUG
                        ethershieldDebug( "No more ACK\n");
 8001c2c:	4816      	ldr	r0, [pc, #88]	; (8001c88 <packetloop_icmp_tcp+0x324>)
 8001c2e:	f001 fca5 	bl	800357c <puts>
#endif
                        return(0);
 8001c32:	2500      	movs	r5, #0
 8001c34:	e08f      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
 8001c36:	bf00      	nop
 8001c38:	2000002d 	.word	0x2000002d
 8001c3c:	20000028 	.word	0x20000028
 8001c40:	20000a60 	.word	0x20000a60
 8001c44:	20000a65 	.word	0x20000a65
 8001c48:	2000002a 	.word	0x2000002a
 8001c4c:	20000a66 	.word	0x20000a66
 8001c50:	20000a64 	.word	0x20000a64
 8001c54:	20000a67 	.word	0x20000a67
 8001c58:	20000a5c 	.word	0x20000a5c
 8001c5c:	08005c08 	.word	0x08005c08
 8001c60:	20000a58 	.word	0x20000a58
 8001c64:	20000a44 	.word	0x20000a44
 8001c68:	20000a4c 	.word	0x20000a4c
 8001c6c:	08005c14 	.word	0x08005c14
 8001c70:	08005c38 	.word	0x08005c38
 8001c74:	20000a48 	.word	0x20000a48
 8001c78:	08005c44 	.word	0x08005c44
 8001c7c:	08005c58 	.word	0x08005c58
 8001c80:	08005c64 	.word	0x08005c64
 8001c84:	08005c7c 	.word	0x08005c7c
 8001c88:	08005c88 	.word	0x08005c88
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
 8001c8c:	f015 0f01 	tst.w	r5, #1
 8001c90:	d00d      	beq.n	8001cae <packetloop_icmp_tcp+0x34a>
#ifdef ETHERSHIELD_DEBUG
                        ethershieldDebug( "Terminated\n");
 8001c92:	4832      	ldr	r0, [pc, #200]	; (8001d5c <packetloop_icmp_tcp+0x3f8>)
 8001c94:	f001 fc72 	bl	800357c <puts>
#endif
                        make_tcp_ack_from_any(buf,len+1,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
 8001c98:	1c79      	adds	r1, r7, #1
 8001c9a:	2209      	movs	r2, #9
 8001c9c:	b209      	sxth	r1, r1
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	f7ff fc7a 	bl	8001598 <make_tcp_ack_from_any>
                        tcp_client_state=5; // connection terminated
 8001ca4:	2205      	movs	r2, #5
 8001ca6:	4b2e      	ldr	r3, [pc, #184]	; (8001d60 <packetloop_icmp_tcp+0x3fc>)
 8001ca8:	701a      	strb	r2, [r3, #0]
                        return(0);
 8001caa:	2500      	movs	r5, #0
 8001cac:	e053      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
                }
                // ack all data (the web page may be long):
                // if we just get a fragment then len will be zero
                // and we ack only once we have the full packet
                if (len>0){
 8001cae:	2800      	cmp	r0, #0
 8001cb0:	d04a      	beq.n	8001d48 <packetloop_icmp_tcp+0x3e4>
                        make_tcp_ack_from_any(buf,len,0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	b201      	sxth	r1, r0
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	f7ff fc6e 	bl	8001598 <make_tcp_ack_from_any>
#ifdef ETHERSHIELD_DEBUG
                        ethershieldDebug( "Send ACK\n");
 8001cbc:	4829      	ldr	r0, [pc, #164]	; (8001d64 <packetloop_icmp_tcp+0x400>)
 8001cbe:	f001 fc5d 	bl	800357c <puts>
#endif
                }
                return(0);
 8001cc2:	2500      	movs	r5, #0
 8001cc4:	e047      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
        }
#endif // WWW_client||TCP_client
        //
        // tcp port web server start
        if (buf[TCP_DST_PORT_H_P]==wwwport_h && buf[TCP_DST_PORT_L_P]==wwwport_l){
 8001cc6:	4a28      	ldr	r2, [pc, #160]	; (8001d68 <packetloop_icmp_tcp+0x404>)
 8001cc8:	7812      	ldrb	r2, [r2, #0]
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d13e      	bne.n	8001d4c <packetloop_icmp_tcp+0x3e8>
 8001cce:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8001cd2:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <packetloop_icmp_tcp+0x408>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d13a      	bne.n	8001d50 <packetloop_icmp_tcp+0x3ec>
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V){
 8001cda:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
 8001cde:	f017 0f02 	tst.w	r7, #2
 8001ce2:	d004      	beq.n	8001cee <packetloop_icmp_tcp+0x38a>
                        make_tcp_synack_from_syn(buf);
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f7ff fc01 	bl	80014ec <make_tcp_synack_from_syn>
                        // make_tcp_synack_from_syn does already send the syn,ack
                        return(0);
 8001cea:	2500      	movs	r5, #0
 8001cec:	e033      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
 8001cee:	f017 0f10 	tst.w	r7, #16
 8001cf2:	d02f      	beq.n	8001d54 <packetloop_icmp_tcp+0x3f0>
                        info_data_len=get_tcp_data_len(buf);
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f7ff fc3d 	bl	8001574 <get_tcp_data_len>
 8001cfa:	4605      	mov	r5, r0
 8001cfc:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <packetloop_icmp_tcp+0x40c>)
 8001cfe:	8018      	strh	r0, [r3, #0]
                        // we can possibly have no data, just ack:
                        // Here we misuse plen for something else to save a variable.
                        // plen is now the position of start of the tcp user data.
                        if (info_data_len==0){
 8001d00:	b940      	cbnz	r0, 8001d14 <packetloop_icmp_tcp+0x3b0>
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
 8001d02:	f017 0f01 	tst.w	r7, #1
 8001d06:	d026      	beq.n	8001d56 <packetloop_icmp_tcp+0x3f2>
                                        // finack, answer with ack
                                        make_tcp_ack_from_any(buf,0,0);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	f7ff fc43 	bl	8001598 <make_tcp_ack_from_any>
 8001d12:	e020      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
                                }
                                // just an ack with no data, wait for next packet
                                return(0);
                        }
                        // Here we misuse len for something else to save a variable
                        len=TCP_DATA_START; // TCP_DATA_START is a formula
 8001d14:	f894 502e 	ldrb.w	r5, [r4, #46]	; 0x2e
 8001d18:	092d      	lsrs	r5, r5, #4
 8001d1a:	00ad      	lsls	r5, r5, #2
 8001d1c:	3522      	adds	r5, #34	; 0x22
                        // check for data corruption
                        if (len>plen-8){
 8001d1e:	3e08      	subs	r6, #8
 8001d20:	42b5      	cmp	r5, r6
 8001d22:	dd18      	ble.n	8001d56 <packetloop_icmp_tcp+0x3f2>
                                return(0);
 8001d24:	2500      	movs	r5, #0
 8001d26:	e016      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
                        client_syn(buf,((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port_h,tcp_client_port_l);
                        //USART_Send(0x44);
                }
#endif
                	//printf("return 0\n");
                	return(0);
 8001d28:	2500      	movs	r5, #0
 8001d2a:	e014      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
                                //printf("GW Mac stored\n");
                        }
                }
#endif // NTP_client||UDP_client||TCP_client||PING_client
                //printf("return 1\n");
                return(0);
 8001d2c:	2500      	movs	r5, #0
 8001d2e:	e012      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
 8001d30:	2500      	movs	r5, #0
 8001d32:	e010      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
 8001d34:	2500      	movs	r5, #0
 8001d36:	e00e      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>

        }
        // check if ip packets are for us:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
        	//printf("return 2\n");
                return(0);
 8001d38:	2500      	movs	r5, #0
 8001d3a:	e00c      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
#endif // NTP_client
#ifdef DNS_client
        // TODO - does this work?
        // If DNS response, drop out to have it processed elsewhere
        if(buf[IP_PROTO_P] == IP_PROTO_UDP_V && buf[UDP_SRC_PORT_H_P]==0 && buf[UDP_SRC_PORT_L_P]== 53 ) {
                return( UDP_DATA_P );
 8001d3c:	252a      	movs	r5, #42	; 0x2a
 8001d3e:	e00a      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
                return(0);
        }
        if (plen<54 && buf[IP_PROTO_P]!=IP_PROTO_TCP_V ){
                // smaller than the smallest TCP packet and not tcp port
        	//printf("return 4\n");
                return(0);
 8001d40:	2500      	movs	r5, #0
 8001d42:	e008      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
                // workaround to pass pointer to www_client_internal..
                bufptr=buf; 
#endif // WWW_client
                if (check_ip_message_is_from(buf,tcpsrvip)==0){
                	//printf("return 5\n");
                        return(0);
 8001d44:	2500      	movs	r5, #0
 8001d46:	e006      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
                        make_tcp_ack_from_any(buf,len,0);
#ifdef ETHERSHIELD_DEBUG
                        ethershieldDebug( "Send ACK\n");
#endif
                }
                return(0);
 8001d48:	2500      	movs	r5, #0
 8001d4a:	e004      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
                                return(0);
                        }
                        return(len);
                }
        }
        return(0);
 8001d4c:	2500      	movs	r5, #0
 8001d4e:	e002      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
 8001d50:	2500      	movs	r5, #0
 8001d52:	e000      	b.n	8001d56 <packetloop_icmp_tcp+0x3f2>
 8001d54:	2500      	movs	r5, #0
}
 8001d56:	4628      	mov	r0, r5
 8001d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d5c:	08005c94 	.word	0x08005c94
 8001d60:	20000a65 	.word	0x20000a65
 8001d64:	08005c58 	.word	0x08005c58
 8001d68:	20000a52 	.word	0x20000a52
 8001d6c:	2000002c 	.word	0x2000002c
 8001d70:	20000a50 	.word	0x20000a50

08001d74 <uipclient_appcall>:
uint8_t macaddr0[6] = {0x48,0x48,0x48,0x48,0x48,0x47};
uint32_t app_timeout=0;
//uint8_t tcp_svr_ip[4] = {144,217,91,32};
uint8_t tcp_svr_ip[4] = {142,44,211,146};  //142.44.211.146
volatile uint8_t tcp_app_state = 0; //0 - Not connected, 1- TCP Reg State, 2- TCP Alarm state
void uipclient_appcall(void){
 8001d74:	b508      	push	{r3, lr}
	//USART3_Send(0x11);
	//printf("uip client call %d \n",tcp_app_state);
	//dhcpc_appcall();
	if(tcp_app_state == 1)
 8001d76:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <uipclient_appcall+0xa0>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d10b      	bne.n	8001d98 <uipclient_appcall+0x24>
	{
		uip_send(tstreg,sizeof(tstreg));
 8001d80:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001d84:	4824      	ldr	r0, [pc, #144]	; (8001e18 <uipclient_appcall+0xa4>)
 8001d86:	f003 f86d 	bl	8004e64 <uip_send>
		//uip_close();
		tcp_app_state = 0;
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <uipclient_appcall+0xa0>)
 8001d8e:	701a      	strb	r2, [r3, #0]
		printf("uip client send reg \n");
 8001d90:	4822      	ldr	r0, [pc, #136]	; (8001e1c <uipclient_appcall+0xa8>)
 8001d92:	f001 fbf3 	bl	800357c <puts>
 8001d96:	bd08      	pop	{r3, pc}
	}else if(tcp_app_state == 2){
 8001d98:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <uipclient_appcall+0xa0>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d10b      	bne.n	8001dba <uipclient_appcall+0x46>
		uip_send(tstpkt0,300);
 8001da2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001da6:	481e      	ldr	r0, [pc, #120]	; (8001e20 <uipclient_appcall+0xac>)
 8001da8:	f003 f85c 	bl	8004e64 <uip_send>
		//uip_stop();
		tcp_app_state = 0;
 8001dac:	2200      	movs	r2, #0
 8001dae:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <uipclient_appcall+0xa0>)
 8001db0:	701a      	strb	r2, [r3, #0]
		printf("uip client send alarm 2\n");
 8001db2:	481c      	ldr	r0, [pc, #112]	; (8001e24 <uipclient_appcall+0xb0>)
 8001db4:	f001 fbe2 	bl	800357c <puts>
 8001db8:	bd08      	pop	{r3, pc}
	}else if(tcp_app_state == 3){
 8001dba:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <uipclient_appcall+0xa0>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d10b      	bne.n	8001ddc <uipclient_appcall+0x68>
		uip_send(tstpkt1,300);
 8001dc4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001dc8:	4817      	ldr	r0, [pc, #92]	; (8001e28 <uipclient_appcall+0xb4>)
 8001dca:	f003 f84b 	bl	8004e64 <uip_send>
		//uip_stop();
		tcp_app_state = 0;
 8001dce:	2200      	movs	r2, #0
 8001dd0:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <uipclient_appcall+0xa0>)
 8001dd2:	701a      	strb	r2, [r3, #0]
		printf("uip client send alarm 3\n");
 8001dd4:	4815      	ldr	r0, [pc, #84]	; (8001e2c <uipclient_appcall+0xb8>)
 8001dd6:	f001 fbd1 	bl	800357c <puts>
 8001dda:	bd08      	pop	{r3, pc}
	}else if(tcp_app_state == 4){
 8001ddc:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <uipclient_appcall+0xa0>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d10b      	bne.n	8001dfe <uipclient_appcall+0x8a>
		uip_send(tstpkt2,300);
 8001de6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001dea:	4811      	ldr	r0, [pc, #68]	; (8001e30 <uipclient_appcall+0xbc>)
 8001dec:	f003 f83a 	bl	8004e64 <uip_send>
		//uip_stop();
		tcp_app_state = 0;
 8001df0:	2200      	movs	r2, #0
 8001df2:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <uipclient_appcall+0xa0>)
 8001df4:	701a      	strb	r2, [r3, #0]
		printf("uip client send alarm 4\n");
 8001df6:	480f      	ldr	r0, [pc, #60]	; (8001e34 <uipclient_appcall+0xc0>)
 8001df8:	f001 fbc0 	bl	800357c <puts>
 8001dfc:	bd08      	pop	{r3, pc}
	}else
	{
		uip_close();
 8001dfe:	2210      	movs	r2, #16
 8001e00:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <uipclient_appcall+0xc4>)
 8001e02:	701a      	strb	r2, [r3, #0]
		tcp_app_state = 0;
 8001e04:	2200      	movs	r2, #0
 8001e06:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <uipclient_appcall+0xa0>)
 8001e08:	701a      	strb	r2, [r3, #0]
		printf("Closing TCP\n");
 8001e0a:	480c      	ldr	r0, [pc, #48]	; (8001e3c <uipclient_appcall+0xc8>)
 8001e0c:	f001 fbb6 	bl	800357c <puts>
 8001e10:	bd08      	pop	{r3, pc}
 8001e12:	bf00      	nop
 8001e14:	20000a74 	.word	0x20000a74
 8001e18:	200003c0 	.word	0x200003c0
 8001e1c:	08005cb4 	.word	0x08005cb4
 8001e20:	2000003c 	.word	0x2000003c
 8001e24:	08005ccc 	.word	0x08005ccc
 8001e28:	20000168 	.word	0x20000168
 8001e2c:	08005ce4 	.word	0x08005ce4
 8001e30:	20000294 	.word	0x20000294
 8001e34:	08005cfc 	.word	0x08005cfc
 8001e38:	20000f0c 	.word	0x20000f0c
 8001e3c:	08005d14 	.word	0x08005d14

08001e40 <uipudp_appcall>:
	}

}

void uipudp_appcall(void){
 8001e40:	b508      	push	{r3, lr}
//	USART3_Send(0xAD);
//	for(int k=0x28;k<0x30;k++)
//		USART3_Send(uip_buf[k]);
//	USART3_Send(0xAD);
//	USART3_Send(0xAF);
	if(!dhcp_acquired)
 8001e42:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <uipudp_appcall+0x18>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	b913      	cbnz	r3, 8001e4e <uipudp_appcall+0xe>
		dhcpc_appcall();
 8001e48:	f002 f82c 	bl	8003ea4 <dhcpc_appcall>
 8001e4c:	bd08      	pop	{r3, pc}
	else
		uip_close();
 8001e4e:	2210      	movs	r2, #16
 8001e50:	4b02      	ldr	r3, [pc, #8]	; (8001e5c <uipudp_appcall+0x1c>)
 8001e52:	701a      	strb	r2, [r3, #0]
 8001e54:	bd08      	pop	{r3, pc}
 8001e56:	bf00      	nop
 8001e58:	20000a75 	.word	0x20000a75
 8001e5c:	20000f0c 	.word	0x20000f0c

08001e60 <mac0_tick>:




void mac0_tick(void)
{
 8001e60:	b538      	push	{r3, r4, r5, lr}
	//int k;
	pkt_in_len = enc424j600PacketReceiveP0(800,uip_buf);
 8001e62:	493d      	ldr	r1, [pc, #244]	; (8001f58 <mac0_tick+0xf8>)
 8001e64:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001e68:	f001 fd66 	bl	8003938 <enc424j600PacketReceiveP0>
 8001e6c:	b280      	uxth	r0, r0
 8001e6e:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <mac0_tick+0xfc>)
 8001e70:	8018      	strh	r0, [r3, #0]
	if(pkt_in_len > 0)
 8001e72:	2800      	cmp	r0, #0
 8001e74:	d02f      	beq.n	8001ed6 <mac0_tick+0x76>
	{
		pktcount++;
 8001e76:	4a3a      	ldr	r2, [pc, #232]	; (8001f60 <mac0_tick+0x100>)
 8001e78:	8813      	ldrh	r3, [r2, #0]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	8013      	strh	r3, [r2, #0]
		uip_len = pkt_in_len;
 8001e7e:	4b39      	ldr	r3, [pc, #228]	; (8001f64 <mac0_tick+0x104>)
 8001e80:	8018      	strh	r0, [r3, #0]
		//printf("uip pkt rcvd : %d  pkt count : %d :\n",pkt_in_len,pktcount);

		if(BUF->type == htons(UIP_ETHTYPE_IP))
 8001e82:	4b35      	ldr	r3, [pc, #212]	; (8001f58 <mac0_tick+0xf8>)
 8001e84:	899c      	ldrh	r4, [r3, #12]
 8001e86:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e8a:	f002 f8b1 	bl	8003ff0 <htons>
 8001e8e:	4284      	cmp	r4, r0
 8001e90:	d111      	bne.n	8001eb6 <mac0_tick+0x56>
//				printf("\n -- \n");
//				for(k=0;k<uip_len;k++)
//				printf(" %d",uip_buf[k]);
//				printf("\n -- \n");
//			}
			uip_len = pkt_in_len;
 8001e92:	4c34      	ldr	r4, [pc, #208]	; (8001f64 <mac0_tick+0x104>)
 8001e94:	4b31      	ldr	r3, [pc, #196]	; (8001f5c <mac0_tick+0xfc>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	8023      	strh	r3, [r4, #0]
			uip_arp_ipin();
 8001e9a:	f003 f8bf 	bl	800501c <uip_arp_ipin>
			uip_input();
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f002 f8e6 	bl	8004070 <uip_process>
			if(uip_len > 0) {
 8001ea4:	8823      	ldrh	r3, [r4, #0]
 8001ea6:	b1b3      	cbz	r3, 8001ed6 <mac0_tick+0x76>
				uip_arp_out();
 8001ea8:	f003 f950 	bl	800514c <uip_arp_out>
//					printf("\n -- \n");
//					for(k=0;k<uip_len;k++)
//						printf(" %d",uip_buf[k]);
//					printf("\n -- \n");
//				}
				enc424j600PacketSendP0(uip_len, uip_buf);
 8001eac:	492a      	ldr	r1, [pc, #168]	; (8001f58 <mac0_tick+0xf8>)
 8001eae:	8820      	ldrh	r0, [r4, #0]
 8001eb0:	f001 fd96 	bl	80039e0 <enc424j600PacketSendP0>
 8001eb4:	e00f      	b.n	8001ed6 <mac0_tick+0x76>
				//printf("uip input reply pkt send \n");
			}
		}else if(BUF->type == htons(UIP_ETHTYPE_ARP))
 8001eb6:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <mac0_tick+0xf8>)
 8001eb8:	899c      	ldrh	r4, [r3, #12]
 8001eba:	f640 0006 	movw	r0, #2054	; 0x806
 8001ebe:	f002 f897 	bl	8003ff0 <htons>
 8001ec2:	4284      	cmp	r4, r0
 8001ec4:	d107      	bne.n	8001ed6 <mac0_tick+0x76>
		{
			//printf("ARP RECD \n");
			uip_arp_arpin();
 8001ec6:	f003 f8d1 	bl	800506c <uip_arp_arpin>
			if(uip_len>0)
 8001eca:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <mac0_tick+0x104>)
 8001ecc:	8818      	ldrh	r0, [r3, #0]
 8001ece:	b110      	cbz	r0, 8001ed6 <mac0_tick+0x76>
			{
//				USART3_Send(0xAD);
//				for(k=0;k<uip_len;k++)
//					USART3_Send(uip_buf[k]);
//				USART3_Send(0xAD);
				enc424j600PacketSendP0(uip_len, uip_buf);
 8001ed0:	4921      	ldr	r1, [pc, #132]	; (8001f58 <mac0_tick+0xf8>)
 8001ed2:	f001 fd85 	bl	80039e0 <enc424j600PacketSendP0>
				//printf("UIP ARP REPLY \n");
			}
		}
	//}else if(periodic_timer < (Sys_GetTick()-500)){
	}
	if(periodic_timer < (Sys_GetTick()-500)){
 8001ed6:	f000 ff7d 	bl	8002dd4 <Sys_GetTick>
 8001eda:	f5a0 70fa 	sub.w	r0, r0, #500	; 0x1f4
 8001ede:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <mac0_tick+0x108>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4298      	cmp	r0, r3
 8001ee4:	d937      	bls.n	8001f56 <mac0_tick+0xf6>
		periodic_timer = Sys_GetTick();
 8001ee6:	f000 ff75 	bl	8002dd4 <Sys_GetTick>
 8001eea:	4b1f      	ldr	r3, [pc, #124]	; (8001f68 <mac0_tick+0x108>)
 8001eec:	6018      	str	r0, [r3, #0]
		//printf("periodic trigger\n");
		for(int i = 0; i < UIP_CONNS; ++i) {
 8001eee:	2400      	movs	r4, #0
 8001ef0:	e013      	b.n	8001f1a <mac0_tick+0xba>
			uip_len = 0;
 8001ef2:	4d1c      	ldr	r5, [pc, #112]	; (8001f64 <mac0_tick+0x104>)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	802b      	strh	r3, [r5, #0]
			uip_periodic(i);
 8001ef8:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <mac0_tick+0x10c>)
 8001efa:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8001efe:	4a1c      	ldr	r2, [pc, #112]	; (8001f70 <mac0_tick+0x110>)
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	2002      	movs	r0, #2
 8001f04:	f002 f8b4 	bl	8004070 <uip_process>
			if(uip_len > 0) {
 8001f08:	882b      	ldrh	r3, [r5, #0]
 8001f0a:	b12b      	cbz	r3, 8001f18 <mac0_tick+0xb8>
//				USART3_Send(0xAE);
//				for(k=0;k<uip_len;k++)
//					USART3_Send(uip_buf[k]);
//				USART3_Send(0xAE);
				uip_arp_out();
 8001f0c:	f003 f91e 	bl	800514c <uip_arp_out>
				enc424j600PacketSendP0(uip_len, uip_buf);
 8001f10:	4911      	ldr	r1, [pc, #68]	; (8001f58 <mac0_tick+0xf8>)
 8001f12:	8828      	ldrh	r0, [r5, #0]
 8001f14:	f001 fd64 	bl	80039e0 <enc424j600PacketSendP0>
	//}else if(periodic_timer < (Sys_GetTick()-500)){
	}
	if(periodic_timer < (Sys_GetTick()-500)){
		periodic_timer = Sys_GetTick();
		//printf("periodic trigger\n");
		for(int i = 0; i < UIP_CONNS; ++i) {
 8001f18:	3401      	adds	r4, #1
 8001f1a:	2c03      	cmp	r4, #3
 8001f1c:	dde9      	ble.n	8001ef2 <mac0_tick+0x92>
				uip_arp_out();
				enc424j600PacketSendP0(uip_len, uip_buf);
				//printf("uip periodic pkt send %d\n",uip_len);
			}
		}
		if(!dhcp_acquired){
 8001f1e:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <mac0_tick+0x114>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	b1ab      	cbz	r3, 8001f50 <mac0_tick+0xf0>
 8001f24:	bd38      	pop	{r3, r4, r5, pc}
			for(int i = 0; i < UIP_UDP_CONNS; ++i) {
				uip_len = 0;
 8001f26:	4d0f      	ldr	r5, [pc, #60]	; (8001f64 <mac0_tick+0x104>)
 8001f28:	2300      	movs	r3, #0
 8001f2a:	802b      	strh	r3, [r5, #0]
				uip_udp_periodic(i);
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <mac0_tick+0x118>)
 8001f2e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8001f32:	4a12      	ldr	r2, [pc, #72]	; (8001f7c <mac0_tick+0x11c>)
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	2005      	movs	r0, #5
 8001f38:	f002 f89a 	bl	8004070 <uip_process>
				//printf("UIP Periodic\n");
				if(uip_len > 0) {
 8001f3c:	882b      	ldrh	r3, [r5, #0]
 8001f3e:	b12b      	cbz	r3, 8001f4c <mac0_tick+0xec>
	//				for(k=0;k<uip_len;k++)
	//					USART3_Send(uip_buf[k]);
	//				USART3_Send(0xAE);
	//				USART3_Send(0xAF);

					uip_arp_out();
 8001f40:	f003 f904 	bl	800514c <uip_arp_out>
					enc424j600PacketSendP0(uip_len, uip_buf);
 8001f44:	4904      	ldr	r1, [pc, #16]	; (8001f58 <mac0_tick+0xf8>)
 8001f46:	8828      	ldrh	r0, [r5, #0]
 8001f48:	f001 fd4a 	bl	80039e0 <enc424j600PacketSendP0>
				enc424j600PacketSendP0(uip_len, uip_buf);
				//printf("uip periodic pkt send %d\n",uip_len);
			}
		}
		if(!dhcp_acquired){
			for(int i = 0; i < UIP_UDP_CONNS; ++i) {
 8001f4c:	3401      	adds	r4, #1
 8001f4e:	e000      	b.n	8001f52 <mac0_tick+0xf2>
 8001f50:	2400      	movs	r4, #0
 8001f52:	2c03      	cmp	r4, #3
 8001f54:	dde7      	ble.n	8001f26 <mac0_tick+0xc6>
 8001f56:	bd38      	pop	{r3, r4, r5, pc}
 8001f58:	20000fb0 	.word	0x20000fb0
 8001f5c:	20000bb4 	.word	0x20000bb4
 8001f60:	20000bac 	.word	0x20000bac
 8001f64:	20000f00 	.word	0x20000f00
 8001f68:	20000bb0 	.word	0x20000bb0
 8001f6c:	20000f1c 	.word	0x20000f1c
 8001f70:	20000f18 	.word	0x20000f18
 8001f74:	20000a75 	.word	0x20000a75
 8001f78:	2000139c 	.word	0x2000139c
 8001f7c:	20000f10 	.word	0x20000f10

08001f80 <connect>:
			}
		}
	}
}
uint8_t connect(uint8_t* ip, uint16_t port)
{
 8001f80:	b530      	push	{r4, r5, lr}
 8001f82:	b083      	sub	sp, #12

  uip_ipaddr_t ipaddr;
  uip_ip_addr(ipaddr, ip);
 8001f84:	7802      	ldrb	r2, [r0, #0]
 8001f86:	7843      	ldrb	r3, [r0, #1]
 8001f88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001f8c:	0a1a      	lsrs	r2, r3, #8
 8001f8e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001f92:	f8ad 3004 	strh.w	r3, [sp, #4]
 8001f96:	7882      	ldrb	r2, [r0, #2]
 8001f98:	78c3      	ldrb	r3, [r0, #3]
 8001f9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001f9e:	0a1a      	lsrs	r2, r3, #8
 8001fa0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001fa4:	f8ad 3006 	strh.w	r3, [sp, #6]
  struct uip_conn* conn = uip_connect(&ipaddr, htons(port));
 8001fa8:	4608      	mov	r0, r1
 8001faa:	f002 f821 	bl	8003ff0 <htons>
 8001fae:	4601      	mov	r1, r0
 8001fb0:	a801      	add	r0, sp, #4
 8001fb2:	f002 fe8d 	bl	8004cd0 <uip_connect>
 8001fb6:	4604      	mov	r4, r0
  uint32_t timeout = Sys_GetTick() + 4000;
 8001fb8:	f000 ff0c 	bl	8002dd4 <Sys_GetTick>
 8001fbc:	f500 657a 	add.w	r5, r0, #4000	; 0xfa0
  printf("Inside Connect 1\n");
 8001fc0:	4812      	ldr	r0, [pc, #72]	; (800200c <connect+0x8c>)
 8001fc2:	f001 fadb 	bl	800357c <puts>
  mac0_tick();
 8001fc6:	f7ff ff4b 	bl	8001e60 <mac0_tick>
  if (conn)
 8001fca:	b9cc      	cbnz	r4, 8002000 <connect+0x80>
              break;
            }

        }
    }
  return 0;
 8001fcc:	2000      	movs	r0, #0
 8001fce:	e01b      	b.n	8002008 <connect+0x88>
  {
	  //printf("Inside Connect 2\n");
	  while((conn->tcpstateflags & UIP_TS_MASK) != UIP_CLOSED)
      {
		  //printf("Inside Connect 3\n");
		  mac0_tick();
 8001fd0:	f7ff ff46 	bl	8001e60 <mac0_tick>
          //printf("tick exit");
          if ((conn->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED)
 8001fd4:	7e63      	ldrb	r3, [r4, #25]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d108      	bne.n	8001ff0 <connect+0x70>
            {
//              data = (uip_userdata_t*) conn->appstate;

              printf("connected, state: waiting to close");
 8001fde:	480c      	ldr	r0, [pc, #48]	; (8002010 <connect+0x90>)
 8001fe0:	f001 faa8 	bl	8003534 <iprintf>
              //printf(", first packet in: ");
              //while((conn->tcpstateflags & UIP_TS_MASK) != UIP_CLOSED){
			//	mac0_tick();
				//printf(".%d\n",conn->tcpstateflags);
             // }
              printf("Closed TCP %d\n",conn->tcpstateflags);
 8001fe4:	7e61      	ldrb	r1, [r4, #25]
 8001fe6:	480b      	ldr	r0, [pc, #44]	; (8002014 <connect+0x94>)
 8001fe8:	f001 faa4 	bl	8003534 <iprintf>
              return 1;
 8001fec:	2001      	movs	r0, #1
 8001fee:	e00b      	b.n	8002008 <connect+0x88>
            }

          if (((int32_t)(Sys_GetTick() - timeout)) > 0)
 8001ff0:	f000 fef0 	bl	8002dd4 <Sys_GetTick>
 8001ff4:	1b40      	subs	r0, r0, r5
 8001ff6:	2800      	cmp	r0, #0
 8001ff8:	dd02      	ble.n	8002000 <connect+0x80>
            {
              conn->tcpstateflags = UIP_CLOSED;
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	7660      	strb	r0, [r4, #25]
              break;
 8001ffe:	e003      	b.n	8002008 <connect+0x88>
  printf("Inside Connect 1\n");
  mac0_tick();
  if (conn)
  {
	  //printf("Inside Connect 2\n");
	  while((conn->tcpstateflags & UIP_TS_MASK) != UIP_CLOSED)
 8002000:	7e60      	ldrb	r0, [r4, #25]
 8002002:	f010 000f 	ands.w	r0, r0, #15
 8002006:	d1e3      	bne.n	8001fd0 <connect+0x50>
            }

        }
    }
  return 0;
}
 8002008:	b003      	add	sp, #12
 800200a:	bd30      	pop	{r4, r5, pc}
 800200c:	08005d20 	.word	0x08005d20
 8002010:	08005d34 	.word	0x08005d34
 8002014:	08005d58 	.word	0x08005d58

08002018 <update_timestamp>:


void update_timestamp(uint8_t *tstpkt)
{
 8002018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201a:	b087      	sub	sp, #28
 800201c:	4605      	mov	r5, r0
	int m,n;
	uint32_t current,i;
	uint8_t buf[20];
	//unsigned char temp;
	unsigned char s = 0;
	for(m=0;m<20;m++)
 800201e:	2300      	movs	r3, #0
 8002020:	e005      	b.n	800202e <update_timestamp+0x16>
		buf[m] = '0';
 8002022:	aa06      	add	r2, sp, #24
 8002024:	441a      	add	r2, r3
 8002026:	2130      	movs	r1, #48	; 0x30
 8002028:	f802 1c14 	strb.w	r1, [r2, #-20]
	int m,n;
	uint32_t current,i;
	uint8_t buf[20];
	//unsigned char temp;
	unsigned char s = 0;
	for(m=0;m<20;m++)
 800202c:	3301      	adds	r3, #1
 800202e:	2b13      	cmp	r3, #19
 8002030:	ddf7      	ble.n	8002022 <update_timestamp+0xa>
 8002032:	2700      	movs	r7, #0
 8002034:	463c      	mov	r4, r7
 8002036:	e04f      	b.n	80020d8 <update_timestamp+0xc0>
		buf[m] = '0';
	for(m=0;m<150;m++)
	{
		if(	(tstpkt[m+0] == 'M') &&
 8002038:	4626      	mov	r6, r4
 800203a:	5d2b      	ldrb	r3, [r5, r4]
 800203c:	2b4d      	cmp	r3, #77	; 0x4d
 800203e:	d14a      	bne.n	80020d6 <update_timestamp+0xbe>
			(tstpkt[m+1] == 'i') &&
 8002040:	192b      	adds	r3, r5, r4
 8002042:	785b      	ldrb	r3, [r3, #1]
	unsigned char s = 0;
	for(m=0;m<20;m++)
		buf[m] = '0';
	for(m=0;m<150;m++)
	{
		if(	(tstpkt[m+0] == 'M') &&
 8002044:	2b69      	cmp	r3, #105	; 0x69
 8002046:	d146      	bne.n	80020d6 <update_timestamp+0xbe>
			(tstpkt[m+1] == 'i') &&
			(tstpkt[m+2] == 'l') &&
 8002048:	192b      	adds	r3, r5, r4
 800204a:	789b      	ldrb	r3, [r3, #2]
	for(m=0;m<20;m++)
		buf[m] = '0';
	for(m=0;m<150;m++)
	{
		if(	(tstpkt[m+0] == 'M') &&
			(tstpkt[m+1] == 'i') &&
 800204c:	2b6c      	cmp	r3, #108	; 0x6c
 800204e:	d142      	bne.n	80020d6 <update_timestamp+0xbe>
			(tstpkt[m+2] == 'l') &&
			(tstpkt[m+3] == 'l') &&
 8002050:	192b      	adds	r3, r5, r4
 8002052:	78db      	ldrb	r3, [r3, #3]
		buf[m] = '0';
	for(m=0;m<150;m++)
	{
		if(	(tstpkt[m+0] == 'M') &&
			(tstpkt[m+1] == 'i') &&
			(tstpkt[m+2] == 'l') &&
 8002054:	2b6c      	cmp	r3, #108	; 0x6c
 8002056:	d13e      	bne.n	80020d6 <update_timestamp+0xbe>
			(tstpkt[m+3] == 'l') &&
			(tstpkt[m+4] == 'i') &&
 8002058:	192b      	adds	r3, r5, r4
 800205a:	791b      	ldrb	r3, [r3, #4]
	for(m=0;m<150;m++)
	{
		if(	(tstpkt[m+0] == 'M') &&
			(tstpkt[m+1] == 'i') &&
			(tstpkt[m+2] == 'l') &&
			(tstpkt[m+3] == 'l') &&
 800205c:	2b69      	cmp	r3, #105	; 0x69
 800205e:	d13a      	bne.n	80020d6 <update_timestamp+0xbe>
			(tstpkt[m+4] == 'i') &&
			(tstpkt[m+5] == 's') &&
 8002060:	192b      	adds	r3, r5, r4
 8002062:	795b      	ldrb	r3, [r3, #5]
	{
		if(	(tstpkt[m+0] == 'M') &&
			(tstpkt[m+1] == 'i') &&
			(tstpkt[m+2] == 'l') &&
			(tstpkt[m+3] == 'l') &&
			(tstpkt[m+4] == 'i') &&
 8002064:	2b73      	cmp	r3, #115	; 0x73
 8002066:	d136      	bne.n	80020d6 <update_timestamp+0xbe>
			(tstpkt[m+5] == 's') &&
			(tstpkt[m+6] == '='))
 8002068:	192b      	adds	r3, r5, r4
 800206a:	799b      	ldrb	r3, [r3, #6]
		if(	(tstpkt[m+0] == 'M') &&
			(tstpkt[m+1] == 'i') &&
			(tstpkt[m+2] == 'l') &&
			(tstpkt[m+3] == 'l') &&
			(tstpkt[m+4] == 'i') &&
			(tstpkt[m+5] == 's') &&
 800206c:	2b3d      	cmp	r3, #61	; 0x3d
 800206e:	d132      	bne.n	80020d6 <update_timestamp+0xbe>
			(tstpkt[m+6] == '='))
		{
			//current = Sys_GetTick() + 8001521711;
			current = RTC_GetCounter();
 8002070:	f7fe fa1a 	bl	80004a8 <RTC_GetCounter>

			//printf("Systick %d\n",current);
			i=current;
			while(i) {
 8002074:	e010      	b.n	8002098 <update_timestamp+0x80>
				buf[s++] = i % 10 + '0';
 8002076:	1c79      	adds	r1, r7, #1
 8002078:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <update_timestamp+0xc8>)
 800207a:	fba3 2300 	umull	r2, r3, r3, r0
 800207e:	08db      	lsrs	r3, r3, #3
 8002080:	469e      	mov	lr, r3
 8002082:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002086:	005a      	lsls	r2, r3, #1
 8002088:	1a83      	subs	r3, r0, r2
 800208a:	aa06      	add	r2, sp, #24
 800208c:	4417      	add	r7, r2
 800208e:	3330      	adds	r3, #48	; 0x30
 8002090:	f807 3c14 	strb.w	r3, [r7, #-20]
				i /= 10;
 8002094:	4670      	mov	r0, lr
			current = RTC_GetCounter();

			//printf("Systick %d\n",current);
			i=current;
			while(i) {
				buf[s++] = i % 10 + '0';
 8002096:	b2cf      	uxtb	r7, r1
			//current = Sys_GetTick() + 8001521711;
			current = RTC_GetCounter();

			//printf("Systick %d\n",current);
			i=current;
			while(i) {
 8002098:	2800      	cmp	r0, #0
 800209a:	d1ec      	bne.n	8002076 <update_timestamp+0x5e>
				buf[s++] = i % 10 + '0';
				i /= 10;
			}
			buf[s] = '0';
 800209c:	ab06      	add	r3, sp, #24
 800209e:	441f      	add	r7, r3
 80020a0:	2330      	movs	r3, #48	; 0x30
 80020a2:	f807 3c14 	strb.w	r3, [r7, #-20]
//				temp = buf[s];
//				buf[s]=buf[t];
//				buf[t] = temp;
//			}
			//printf("Millis:");
			s= 0;
 80020a6:	2700      	movs	r7, #0
//			for(n=0;n<10;n++)
//				printf("%d",buf[n]);
//			printf("\n  millies");
			for(n=9;n>=0;n--){
 80020a8:	2309      	movs	r3, #9
 80020aa:	e009      	b.n	80020c0 <update_timestamp+0xa8>
				//printf("%d",buf[n]);
				tstpkt[m+7+s] = buf[n];
 80020ac:	1de2      	adds	r2, r4, #7
 80020ae:	443a      	add	r2, r7
 80020b0:	a906      	add	r1, sp, #24
 80020b2:	4419      	add	r1, r3
 80020b4:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 80020b8:	54a9      	strb	r1, [r5, r2]
				s++;
 80020ba:	3701      	adds	r7, #1
 80020bc:	b2ff      	uxtb	r7, r7
			//printf("Millis:");
			s= 0;
//			for(n=0;n<10;n++)
//				printf("%d",buf[n]);
//			printf("\n  millies");
			for(n=9;n>=0;n--){
 80020be:	3b01      	subs	r3, #1
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	daf3      	bge.n	80020ac <update_timestamp+0x94>
				//printf("%d",buf[n]);
				tstpkt[m+7+s] = buf[n];
				s++;
			}
			tstpkt[m+16] = '0';
 80020c4:	f106 0210 	add.w	r2, r6, #16
 80020c8:	2330      	movs	r3, #48	; 0x30
 80020ca:	54ab      	strb	r3, [r5, r2]
			tstpkt[m+17] = '0';
 80020cc:	f106 0211 	add.w	r2, r6, #17
 80020d0:	54ab      	strb	r3, [r5, r2]
			tstpkt[m+18] = '0';
 80020d2:	3612      	adds	r6, #18
 80020d4:	55ab      	strb	r3, [r5, r6]
	uint8_t buf[20];
	//unsigned char temp;
	unsigned char s = 0;
	for(m=0;m<20;m++)
		buf[m] = '0';
	for(m=0;m<150;m++)
 80020d6:	3401      	adds	r4, #1
 80020d8:	2c95      	cmp	r4, #149	; 0x95
 80020da:	ddad      	ble.n	8002038 <update_timestamp+0x20>
//			for(n=0;n<sizeof(tstpkt);n++)
//				USART3_Send(tstpkt[n]);
		}

	}
}
 80020dc:	b007      	add	sp, #28
 80020de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e0:	cccccccd 	.word	0xcccccccd

080020e4 <mac0_init>:


void mac0_init(void)
{
 80020e4:	b510      	push	{r4, lr}
 80020e6:	b084      	sub	sp, #16
	Enc424J600Network_initP0(macaddr0);
 80020e8:	4c38      	ldr	r4, [pc, #224]	; (80021cc <mac0_init+0xe8>)
 80020ea:	4620      	mov	r0, r4
 80020ec:	f001 fbb8 	bl	8003860 <Enc424J600Network_initP0>
	uip_seteth_addr(macaddr0);
 80020f0:	7822      	ldrb	r2, [r4, #0]
 80020f2:	4b37      	ldr	r3, [pc, #220]	; (80021d0 <mac0_init+0xec>)
 80020f4:	701a      	strb	r2, [r3, #0]
 80020f6:	7862      	ldrb	r2, [r4, #1]
 80020f8:	705a      	strb	r2, [r3, #1]
 80020fa:	78a2      	ldrb	r2, [r4, #2]
 80020fc:	709a      	strb	r2, [r3, #2]
 80020fe:	78e2      	ldrb	r2, [r4, #3]
 8002100:	70da      	strb	r2, [r3, #3]
 8002102:	7922      	ldrb	r2, [r4, #4]
 8002104:	711a      	strb	r2, [r3, #4]
 8002106:	7962      	ldrb	r2, [r4, #5]
 8002108:	715a      	strb	r2, [r3, #5]
	uip_init();
 800210a:	f001 ff33 	bl	8003f74 <uip_init>
	uip_arp_init();
 800210e:	f002 ff3f 	bl	8004f90 <uip_arp_init>

#ifdef DHCP
	printf("Initiating DHCP\n");
 8002112:	4830      	ldr	r0, [pc, #192]	; (80021d4 <mac0_init+0xf0>)
 8002114:	f001 fa32 	bl	800357c <puts>
	dhcpc_init(macaddr0,6);
 8002118:	2106      	movs	r1, #6
 800211a:	4620      	mov	r0, r4
 800211c:	f001 fea6 	bl	8003e6c <dhcpc_init>

	//dhcpc_request();
	while(!dhcp_getip()){
 8002120:	e00a      	b.n	8002138 <mac0_init+0x54>
		printf("Retrying DHCP...\n");
 8002122:	482d      	ldr	r0, [pc, #180]	; (80021d8 <mac0_init+0xf4>)
 8002124:	f001 fa2a 	bl	800357c <puts>
		Sys_Delay(1000);
 8002128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800212c:	f000 fe58 	bl	8002de0 <Sys_Delay>
		dhcpc_init(macaddr0,6);
 8002130:	2106      	movs	r1, #6
 8002132:	4826      	ldr	r0, [pc, #152]	; (80021cc <mac0_init+0xe8>)
 8002134:	f001 fe9a 	bl	8003e6c <dhcpc_init>
#ifdef DHCP
	printf("Initiating DHCP\n");
	dhcpc_init(macaddr0,6);

	//dhcpc_request();
	while(!dhcp_getip()){
 8002138:	f001 fdb2 	bl	8003ca0 <dhcp_getip>
 800213c:	2800      	cmp	r0, #0
 800213e:	d0f0      	beq.n	8002122 <mac0_init+0x3e>
		printf("Retrying DHCP...\n");
		Sys_Delay(1000);
		dhcpc_init(macaddr0,6);
//		dhcp_getip();
	}
	dhcp_acquired = 1;
 8002140:	2201      	movs	r2, #1
 8002142:	4b26      	ldr	r3, [pc, #152]	; (80021dc <mac0_init+0xf8>)
 8002144:	701a      	strb	r2, [r3, #0]
//	uip_setdraddr(ipaddr);
//
//	uip_ip_addr(ipaddr, mysn_addr);
//	uip_setnetmask(ipaddr);
	uint8_t dispip[4];
	uip_gethostaddr(dispip);
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <mac0_init+0xfc>)
 8002148:	881a      	ldrh	r2, [r3, #0]
 800214a:	f8ad 200c 	strh.w	r2, [sp, #12]
 800214e:	885b      	ldrh	r3, [r3, #2]
 8002150:	f8ad 300e 	strh.w	r3, [sp, #14]
	printf("\n--------------------------\n");
 8002154:	4823      	ldr	r0, [pc, #140]	; (80021e4 <mac0_init+0x100>)
 8002156:	f001 fa11 	bl	800357c <puts>
	printf("IP : %d.%d.%d.%d\n",dispip[0],dispip[1],dispip[2],dispip[3]);
 800215a:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800215e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8002162:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002166:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800216a:	9000      	str	r0, [sp, #0]
 800216c:	481e      	ldr	r0, [pc, #120]	; (80021e8 <mac0_init+0x104>)
 800216e:	f001 f9e1 	bl	8003534 <iprintf>
	uip_getdraddr(dispip);
 8002172:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <mac0_init+0x108>)
 8002174:	8819      	ldrh	r1, [r3, #0]
 8002176:	885b      	ldrh	r3, [r3, #2]
	printf("GWIP : %d.%d.%d.%d\n",dispip[0],dispip[1],dispip[2],dispip[3]);
 8002178:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800217c:	9200      	str	r2, [sp, #0]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8002184:	b2c9      	uxtb	r1, r1
 8002186:	481a      	ldr	r0, [pc, #104]	; (80021f0 <mac0_init+0x10c>)
 8002188:	f001 f9d4 	bl	8003534 <iprintf>
	uip_getnetmask(dispip);
 800218c:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <mac0_init+0x110>)
 800218e:	8819      	ldrh	r1, [r3, #0]
 8002190:	885b      	ldrh	r3, [r3, #2]
	printf("NETMASK : %d.%d.%d.%d\n",dispip[0],dispip[1],dispip[2],dispip[3]);
 8002192:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002196:	9200      	str	r2, [sp, #0]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800219e:	b2c9      	uxtb	r1, r1
 80021a0:	4815      	ldr	r0, [pc, #84]	; (80021f8 <mac0_init+0x114>)
 80021a2:	f001 f9c7 	bl	8003534 <iprintf>
	printf("--------------------------\n");
 80021a6:	4815      	ldr	r0, [pc, #84]	; (80021fc <mac0_init+0x118>)
 80021a8:	f001 f9e8 	bl	800357c <puts>
	//uip_gethostaddr(uip_netmask);
#endif
	printf("Init Complete Port 0\n");
 80021ac:	4814      	ldr	r0, [pc, #80]	; (8002200 <mac0_init+0x11c>)
 80021ae:	f001 f9e5 	bl	800357c <puts>
	app_timeout = Sys_GetTick() + 10000;
 80021b2:	f000 fe0f 	bl	8002dd4 <Sys_GetTick>
 80021b6:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
 80021ba:	3010      	adds	r0, #16
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <mac0_init+0x120>)
 80021be:	6018      	str	r0, [r3, #0]
	tcp_app_state = 0;
 80021c0:	2200      	movs	r2, #0
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <mac0_init+0x124>)
 80021c4:	701a      	strb	r2, [r3, #0]

}
 80021c6:	b004      	add	sp, #16
 80021c8:	bd10      	pop	{r4, pc}
 80021ca:	bf00      	nop
 80021cc:	20000034 	.word	0x20000034
 80021d0:	20000ae4 	.word	0x20000ae4
 80021d4:	08005d68 	.word	0x08005d68
 80021d8:	08005d78 	.word	0x08005d78
 80021dc:	20000a75 	.word	0x20000a75
 80021e0:	20000fac 	.word	0x20000fac
 80021e4:	08005d8c 	.word	0x08005d8c
 80021e8:	08005da8 	.word	0x08005da8
 80021ec:	20000fa4 	.word	0x20000fa4
 80021f0:	08005dbc 	.word	0x08005dbc
 80021f4:	20000fa8 	.word	0x20000fa8
 80021f8:	08005dd0 	.word	0x08005dd0
 80021fc:	08005de8 	.word	0x08005de8
 8002200:	08005e04 	.word	0x08005e04
 8002204:	20000a70 	.word	0x20000a70
 8002208:	20000a74 	.word	0x20000a74

0800220c <mac0_service>:


void mac0_service(uint8_t tcp_service_enable, uint8_t reg, uint8_t alarm_id)
{
 800220c:	b508      	push	{r3, lr}
	uint8_t conn_stat;
	if(tcp_service_enable)
 800220e:	2800      	cmp	r0, #0
 8002210:	d063      	beq.n	80022da <mac0_service+0xce>
	{
		//if((app_timeout < Sys_GetTick()) && (tcp_app_state == 0) && (reg == 1)){
		if((tcp_app_state == 0) && (reg == 1)){
 8002212:	4b33      	ldr	r3, [pc, #204]	; (80022e0 <mac0_service+0xd4>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	f013 0fff 	tst.w	r3, #255	; 0xff
 800221a:	d11d      	bne.n	8002258 <mac0_service+0x4c>
 800221c:	2901      	cmp	r1, #1
 800221e:	d11b      	bne.n	8002258 <mac0_service+0x4c>
			printf("Connecting tcp server for periodic reg pkt\n");
 8002220:	4830      	ldr	r0, [pc, #192]	; (80022e4 <mac0_service+0xd8>)
 8002222:	f001 f9ab 	bl	800357c <puts>
			tcp_app_state = 1;
 8002226:	2201      	movs	r2, #1
 8002228:	4b2d      	ldr	r3, [pc, #180]	; (80022e0 <mac0_service+0xd4>)
 800222a:	701a      	strb	r2, [r3, #0]
			conn_stat = connect(tcp_svr_ip, 8080);
 800222c:	f641 7190 	movw	r1, #8080	; 0x1f90
 8002230:	482d      	ldr	r0, [pc, #180]	; (80022e8 <mac0_service+0xdc>)
 8002232:	f7ff fea5 	bl	8001f80 <connect>
			if(!conn_stat){
 8002236:	b938      	cbnz	r0, 8002248 <mac0_service+0x3c>
				printf("Failed connection\n");
 8002238:	482c      	ldr	r0, [pc, #176]	; (80022ec <mac0_service+0xe0>)
 800223a:	f001 f99f 	bl	800357c <puts>
				connect(tcp_svr_ip, 8080);
 800223e:	f641 7190 	movw	r1, #8080	; 0x1f90
 8002242:	4829      	ldr	r0, [pc, #164]	; (80022e8 <mac0_service+0xdc>)
 8002244:	f7ff fe9c 	bl	8001f80 <connect>
			}
			app_timeout = Sys_GetTick() + 50000;
 8002248:	f000 fdc4 	bl	8002dd4 <Sys_GetTick>
 800224c:	f500 4043 	add.w	r0, r0, #49920	; 0xc300
 8002250:	3050      	adds	r0, #80	; 0x50
 8002252:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <mac0_service+0xe4>)
 8002254:	6018      	str	r0, [r3, #0]
 8002256:	e040      	b.n	80022da <mac0_service+0xce>
		}else if(alarm_id == 2){
 8002258:	2a02      	cmp	r2, #2
 800225a:	d113      	bne.n	8002284 <mac0_service+0x78>
			printf("Connecting tcp server for fire alarm pkt\n");
 800225c:	4825      	ldr	r0, [pc, #148]	; (80022f4 <mac0_service+0xe8>)
 800225e:	f001 f98d 	bl	800357c <puts>
			update_timestamp(tstpkt0);
 8002262:	4825      	ldr	r0, [pc, #148]	; (80022f8 <mac0_service+0xec>)
 8002264:	f7ff fed8 	bl	8002018 <update_timestamp>
			tcp_app_state = 2;
 8002268:	2202      	movs	r2, #2
 800226a:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <mac0_service+0xd4>)
 800226c:	701a      	strb	r2, [r3, #0]
			while(!connect(tcp_svr_ip, 8080));
 800226e:	f641 7190 	movw	r1, #8080	; 0x1f90
 8002272:	481d      	ldr	r0, [pc, #116]	; (80022e8 <mac0_service+0xdc>)
 8002274:	f7ff fe84 	bl	8001f80 <connect>
 8002278:	2800      	cmp	r0, #0
 800227a:	d0f8      	beq.n	800226e <mac0_service+0x62>
			printf("Connected\n");
 800227c:	481f      	ldr	r0, [pc, #124]	; (80022fc <mac0_service+0xf0>)
 800227e:	f001 f97d 	bl	800357c <puts>
 8002282:	e02a      	b.n	80022da <mac0_service+0xce>

		}else if(alarm_id == 4){
 8002284:	2a04      	cmp	r2, #4
 8002286:	d113      	bne.n	80022b0 <mac0_service+0xa4>
			printf("Connecting tcp server for fire alarm pkt Floor 5\n");
 8002288:	481d      	ldr	r0, [pc, #116]	; (8002300 <mac0_service+0xf4>)
 800228a:	f001 f977 	bl	800357c <puts>
			update_timestamp(tstpkt1);
 800228e:	481d      	ldr	r0, [pc, #116]	; (8002304 <mac0_service+0xf8>)
 8002290:	f7ff fec2 	bl	8002018 <update_timestamp>
			tcp_app_state = 3;
 8002294:	2203      	movs	r2, #3
 8002296:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <mac0_service+0xd4>)
 8002298:	701a      	strb	r2, [r3, #0]
			while(!connect(tcp_svr_ip, 8080));
 800229a:	f641 7190 	movw	r1, #8080	; 0x1f90
 800229e:	4812      	ldr	r0, [pc, #72]	; (80022e8 <mac0_service+0xdc>)
 80022a0:	f7ff fe6e 	bl	8001f80 <connect>
 80022a4:	2800      	cmp	r0, #0
 80022a6:	d0f8      	beq.n	800229a <mac0_service+0x8e>
			printf("Connected\n");
 80022a8:	4814      	ldr	r0, [pc, #80]	; (80022fc <mac0_service+0xf0>)
 80022aa:	f001 f967 	bl	800357c <puts>
 80022ae:	e014      	b.n	80022da <mac0_service+0xce>
		 }else if(alarm_id == 8){
 80022b0:	2a08      	cmp	r2, #8
 80022b2:	d112      	bne.n	80022da <mac0_service+0xce>
			printf("Connecting tcp server for fire alarm pkt Floor 6\n");
 80022b4:	4814      	ldr	r0, [pc, #80]	; (8002308 <mac0_service+0xfc>)
 80022b6:	f001 f961 	bl	800357c <puts>
			update_timestamp(tstpkt2);
 80022ba:	4814      	ldr	r0, [pc, #80]	; (800230c <mac0_service+0x100>)
 80022bc:	f7ff feac 	bl	8002018 <update_timestamp>
			tcp_app_state = 4;
 80022c0:	2204      	movs	r2, #4
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <mac0_service+0xd4>)
 80022c4:	701a      	strb	r2, [r3, #0]
			while(!connect(tcp_svr_ip, 8080));
 80022c6:	f641 7190 	movw	r1, #8080	; 0x1f90
 80022ca:	4807      	ldr	r0, [pc, #28]	; (80022e8 <mac0_service+0xdc>)
 80022cc:	f7ff fe58 	bl	8001f80 <connect>
 80022d0:	2800      	cmp	r0, #0
 80022d2:	d0f8      	beq.n	80022c6 <mac0_service+0xba>
			printf("Connected\n");
 80022d4:	4809      	ldr	r0, [pc, #36]	; (80022fc <mac0_service+0xf0>)
 80022d6:	f001 f951 	bl	800357c <puts>
		 }
	}
	uip_arp_timer();
 80022da:	f002 fe6f 	bl	8004fbc <uip_arp_timer>
 80022de:	bd08      	pop	{r3, pc}
 80022e0:	20000a74 	.word	0x20000a74
 80022e4:	08005e1c 	.word	0x08005e1c
 80022e8:	20000030 	.word	0x20000030
 80022ec:	08005e48 	.word	0x08005e48
 80022f0:	20000a70 	.word	0x20000a70
 80022f4:	08005e5c 	.word	0x08005e5c
 80022f8:	2000003c 	.word	0x2000003c
 80022fc:	08005e88 	.word	0x08005e88
 8002300:	08005e94 	.word	0x08005e94
 8002304:	20000168 	.word	0x20000168
 8002308:	08005ec8 	.word	0x08005ec8
 800230c:	20000294 	.word	0x20000294

08002310 <allocateIPAddress>:
//	}
//	printf("\n*******PACKET******** \n");
//}
// Perform all processing to get an IP address plus other addresses returned, e.g. gw, dns, dhcp server.
// Returns 1 for successful IP address allocation, 0 otherwise
uint8_t allocateIPAddress(uint8_t *buf1, uint16_t buffer_size, uint8_t *mymac, uint16_t myport, uint8_t *myip, uint8_t *mynetmask, uint8_t *gwip, uint8_t *dnsip, uint8_t *dhcpsvrip ) {
 8002310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002314:	b085      	sub	sp, #20
 8002316:	4604      	mov	r4, r0
 8002318:	4688      	mov	r8, r1
 800231a:	4615      	mov	r5, r2
 800231c:	469b      	mov	fp, r3
 800231e:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint16_t dat_p;
  int plen = 0;
  long lastDhcpRequest = HAL_GetTick();
 8002320:	f000 fd58 	bl	8002dd4 <Sys_GetTick>
 8002324:	4681      	mov	r9, r0
  uint8_t dhcpState = 0;
  bool gotIp = FALSE;
  uint8_t dhcpTries = 3;	// After 10 attempts fail gracefully so other action can be carried out
  //printf("0xA0");
  dhcp_start( buf1, mymac, myip, mynetmask,gwip, dnsip, dhcpsvrip );
 8002326:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002328:	9302      	str	r3, [sp, #8]
 800232a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800232c:	9301      	str	r3, [sp, #4]
 800232e:	9700      	str	r7, [sp, #0]
 8002330:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002332:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002334:	4629      	mov	r1, r5
 8002336:	4620      	mov	r0, r4
 8002338:	f7fe fe88 	bl	800104c <dhcp_start>
  uint16_t dat_p;
  int plen = 0;
  long lastDhcpRequest = HAL_GetTick();
  uint8_t dhcpState = 0;
  bool gotIp = FALSE;
  uint8_t dhcpTries = 3;	// After 10 attempts fail gracefully so other action can be carried out
 800233c:	f04f 0a03 	mov.w	sl, #3
uint8_t allocateIPAddress(uint8_t *buf1, uint16_t buffer_size, uint8_t *mymac, uint16_t myport, uint8_t *myip, uint8_t *mynetmask, uint8_t *gwip, uint8_t *dnsip, uint8_t *dhcpsvrip ) {
  uint16_t dat_p;
  int plen = 0;
  long lastDhcpRequest = HAL_GetTick();
  uint8_t dhcpState = 0;
  bool gotIp = FALSE;
 8002340:	2600      	movs	r6, #0
  uint8_t dhcpTries = 3;	// After 10 attempts fail gracefully so other action can be carried out
  //printf("0xA0");
  dhcp_start( buf1, mymac, myip, mynetmask,gwip, dnsip, dhcpsvrip );
  //printf("0xA1");
  while( !gotIp ) {
 8002342:	e03a      	b.n	80023ba <allocateIPAddress+0xaa>
    // handle ping and wait for a tcp packet
    plen = enc424j600PacketReceiveP1(buffer_size, buf1);
 8002344:	4621      	mov	r1, r4
 8002346:	4640      	mov	r0, r8
 8002348:	f7fe fd0e 	bl	8000d68 <enc424j600PacketReceiveP1>
    if(plen)
 800234c:	4605      	mov	r5, r0
 800234e:	b3a0      	cbz	r0, 80023ba <allocateIPAddress+0xaa>
    {
		//printf("0xA2");
		//printf("Packet length %d\n",plen);
		//print_packet(plen,buf);
		Sys_Delay(100);
 8002350:	2064      	movs	r0, #100	; 0x64
 8002352:	f000 fd45 	bl	8002de0 <Sys_Delay>
		dat_p=packetloop_icmp_tcp(buf1,plen);
 8002356:	b2ad      	uxth	r5, r5
 8002358:	4629      	mov	r1, r5
 800235a:	4620      	mov	r0, r4
 800235c:	f7ff fb02 	bl	8001964 <packetloop_icmp_tcp>
		//USART3_Send(dat_p);
		if(dat_p==0) {
 8002360:	bb58      	cbnz	r0, 80023ba <allocateIPAddress+0xaa>
		  check_for_dhcp_answer( buf1, plen);
 8002362:	4629      	mov	r1, r5
 8002364:	4620      	mov	r0, r4
 8002366:	f7fe ff39 	bl	80011dc <check_for_dhcp_answer>
		  dhcpState = dhcp_state();
 800236a:	f7fe fd7b 	bl	8000e64 <dhcp_state>
		  //USART3_Send(0xA5);
		  //USART3_Send(dhcpState);
		  // we are idle here
		  if( dhcpState != DHCP_STATE_OK ) {
 800236e:	2805      	cmp	r0, #5
 8002370:	d019      	beq.n	80023a6 <allocateIPAddress+0x96>
			if (HAL_GetTick() > (lastDhcpRequest + 1000L) ){
 8002372:	f000 fd2f 	bl	8002dd4 <Sys_GetTick>
 8002376:	f509 737a 	add.w	r3, r9, #1000	; 0x3e8
 800237a:	4298      	cmp	r0, r3
 800237c:	d91d      	bls.n	80023ba <allocateIPAddress+0xaa>
			  lastDhcpRequest = HAL_GetTick();
 800237e:	f000 fd29 	bl	8002dd4 <Sys_GetTick>
 8002382:	4681      	mov	r9, r0
		  if( --dhcpTries <= 0 )
 8002384:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002388:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
 800238c:	d019      	beq.n	80023c2 <allocateIPAddress+0xb2>
			  return 0;		// Failed to allocate address
			  // send dhcp
			  dhcp_start( buf1, macaddr1, myip, mynetmask,gwip, dnsip, dhcpsvrip );
 800238e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002390:	9302      	str	r3, [sp, #8]
 8002392:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	9700      	str	r7, [sp, #0]
 8002398:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800239a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800239c:	490b      	ldr	r1, [pc, #44]	; (80023cc <allocateIPAddress+0xbc>)
 800239e:	4620      	mov	r0, r4
 80023a0:	f7fe fe54 	bl	800104c <dhcp_start>
 80023a4:	e009      	b.n	80023ba <allocateIPAddress+0xaa>
			  //USART3_Send(0xA5);
			}
		  } else {
			if( !gotIp ) {
 80023a6:	b946      	cbnz	r6, 80023ba <allocateIPAddress+0xaa>
			  gotIp = TRUE;

			  //init the ethernet/ip layer:
			  init_ip_arp_udp_tcp(macaddr1, myip, myport);
 80023a8:	465a      	mov	r2, fp
 80023aa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80023ac:	4807      	ldr	r0, [pc, #28]	; (80023cc <allocateIPAddress+0xbc>)
 80023ae:	f7fe ff69 	bl	8001284 <init_ip_arp_udp_tcp>

			  // Set the Router IP
			  client_set_gwip(gwip);  // e.g internal IP of dsl router
 80023b2:	4638      	mov	r0, r7
 80023b4:	f7ff fa32 	bl	800181c <client_set_gwip>
			  dhcp_start( buf1, macaddr1, myip, mynetmask,gwip, dnsip, dhcpsvrip );
			  //USART3_Send(0xA5);
			}
		  } else {
			if( !gotIp ) {
			  gotIp = TRUE;
 80023b8:	2601      	movs	r6, #1
  bool gotIp = FALSE;
  uint8_t dhcpTries = 3;	// After 10 attempts fail gracefully so other action can be carried out
  //printf("0xA0");
  dhcp_start( buf1, mymac, myip, mynetmask,gwip, dnsip, dhcpsvrip );
  //printf("0xA1");
  while( !gotIp ) {
 80023ba:	2e00      	cmp	r6, #0
 80023bc:	d0c2      	beq.n	8002344 <allocateIPAddress+0x34>
		  }
      }
    }
  }

  return 1;
 80023be:	2001      	movs	r0, #1
 80023c0:	e000      	b.n	80023c4 <allocateIPAddress+0xb4>
		  // we are idle here
		  if( dhcpState != DHCP_STATE_OK ) {
			if (HAL_GetTick() > (lastDhcpRequest + 1000L) ){
			  lastDhcpRequest = HAL_GetTick();
		  if( --dhcpTries <= 0 )
			  return 0;		// Failed to allocate address
 80023c2:	2000      	movs	r0, #0
    }
  }

  return 1;

}
 80023c4:	b005      	add	sp, #20
 80023c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023ca:	bf00      	nop
 80023cc:	200004e0 	.word	0x200004e0

080023d0 <process_bacnet_reply>:
	uint16_t readprop_input = 0;
	uint16_t i;
	uint8_t read_list_ptr;

	//Check bacnet Source port No                        Dest Port No                               Bacnet /IP
	if(((buf[0x22] == 0xba) && (buf[0x23]==0xc0) && (buf[0x24] == 0xba) && (buf[0x25]==0xc0) && (buf[0x2A] == 0x81)) ||
 80023d0:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80023d4:	2bba      	cmp	r3, #186	; 0xba
 80023d6:	d103      	bne.n	80023e0 <process_bacnet_reply+0x10>
 80023d8:	f890 2023 	ldrb.w	r2, [r0, #35]	; 0x23
 80023dc:	2ac0      	cmp	r2, #192	; 0xc0
 80023de:	d007      	beq.n	80023f0 <process_bacnet_reply+0x20>
 80023e0:	2be4      	cmp	r3, #228	; 0xe4
 80023e2:	f040 8112 	bne.w	800260a <process_bacnet_reply+0x23a>
	   ((buf[0x22] == 0xe4) && (buf[0x23]==0x03) && (buf[0x24] == 0xba) && (buf[0x25]==0xc0) && (buf[0x2A] == 0x81)))
 80023e6:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	f040 810d 	bne.w	800260a <process_bacnet_reply+0x23a>
	uint16_t readprop_input = 0;
	uint16_t i;
	uint8_t read_list_ptr;

	//Check bacnet Source port No                        Dest Port No                               Bacnet /IP
	if(((buf[0x22] == 0xba) && (buf[0x23]==0xc0) && (buf[0x24] == 0xba) && (buf[0x25]==0xc0) && (buf[0x2A] == 0x81)) ||
 80023f0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80023f4:	2bba      	cmp	r3, #186	; 0xba
 80023f6:	f040 8108 	bne.w	800260a <process_bacnet_reply+0x23a>
 80023fa:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80023fe:	2bc0      	cmp	r3, #192	; 0xc0
 8002400:	f040 8103 	bne.w	800260a <process_bacnet_reply+0x23a>
 8002404:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8002408:	2b81      	cmp	r3, #129	; 0x81
 800240a:	f040 80fe 	bne.w	800260a <process_bacnet_reply+0x23a>
  return 1;

}

void process_bacnet_reply(uint8_t *buf,uint16_t len)
{
 800240e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002412:	b088      	sub	sp, #32
	if(((buf[0x22] == 0xba) && (buf[0x23]==0xc0) && (buf[0x24] == 0xba) && (buf[0x25]==0xc0) && (buf[0x2A] == 0x81)) ||
	   ((buf[0x22] == 0xe4) && (buf[0x23]==0x03) && (buf[0x24] == 0xba) && (buf[0x25]==0xc0) && (buf[0x2A] == 0x81)))
	{
		//bac_length = buf[0x2D];
		bac_apdu_offset = 0x30;
		if(buf[0x2F] & 0x20){
 8002414:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
 8002418:	f012 0f20 	tst.w	r2, #32
 800241c:	d101      	bne.n	8002422 <process_bacnet_reply+0x52>
	//Check bacnet Source port No                        Dest Port No                               Bacnet /IP
	if(((buf[0x22] == 0xba) && (buf[0x23]==0xc0) && (buf[0x24] == 0xba) && (buf[0x25]==0xc0) && (buf[0x2A] == 0x81)) ||
	   ((buf[0x22] == 0xe4) && (buf[0x23]==0x03) && (buf[0x24] == 0xba) && (buf[0x25]==0xc0) && (buf[0x2A] == 0x81)))
	{
		//bac_length = buf[0x2D];
		bac_apdu_offset = 0x30;
 800241e:	2330      	movs	r3, #48	; 0x30
 8002420:	e000      	b.n	8002424 <process_bacnet_reply+0x54>
		if(buf[0x2F] & 0x20){
			bac_apdu_offset = bac_apdu_offset+4;
 8002422:	2334      	movs	r3, #52	; 0x34
		}
		if(buf[0x2F] & 0x08){
 8002424:	f012 0f08 	tst.w	r2, #8
 8002428:	d001      	beq.n	800242e <process_bacnet_reply+0x5e>
			bac_apdu_offset = bac_apdu_offset+4;
 800242a:	3304      	adds	r3, #4
 800242c:	b2db      	uxtb	r3, r3
 800242e:	4604      	mov	r4, r0
		}
		//Check Bacnet I am
		//printf(" bacnet reply Length %d\n",len);
		if((buf[bac_apdu_offset] == 0x10) && (buf[bac_apdu_offset+1] == 0x00) && (bacnet_found == 0)){
 8002430:	4618      	mov	r0, r3
 8002432:	5ce2      	ldrb	r2, [r4, r3]
 8002434:	2a10      	cmp	r2, #16
 8002436:	d116      	bne.n	8002466 <process_bacnet_reply+0x96>
 8002438:	18e5      	adds	r5, r4, r3
 800243a:	786d      	ldrb	r5, [r5, #1]
 800243c:	b99d      	cbnz	r5, 8002466 <process_bacnet_reply+0x96>
 800243e:	4d73      	ldr	r5, [pc, #460]	; (800260c <process_bacnet_reply+0x23c>)
 8002440:	782d      	ldrb	r5, [r5, #0]
 8002442:	b985      	cbnz	r5, 8002466 <process_bacnet_reply+0x96>
			bacdev_ip[0] = buf[0x1A];
 8002444:	7ea1      	ldrb	r1, [r4, #26]
 8002446:	4872      	ldr	r0, [pc, #456]	; (8002610 <process_bacnet_reply+0x240>)
 8002448:	7001      	strb	r1, [r0, #0]
			bacdev_ip[1] = buf[0x1B];
 800244a:	7ee2      	ldrb	r2, [r4, #27]
 800244c:	7042      	strb	r2, [r0, #1]
			bacdev_ip[2] = buf[0x1C];
 800244e:	7f23      	ldrb	r3, [r4, #28]
 8002450:	7083      	strb	r3, [r0, #2]
			bacdev_ip[3] = buf[0x1D];
 8002452:	7f64      	ldrb	r4, [r4, #29]
 8002454:	70c4      	strb	r4, [r0, #3]
			printf("Bacnet device found on IP %d.%d.%d.%d \n",bacdev_ip[0],bacdev_ip[1],bacdev_ip[2],bacdev_ip[3]);
 8002456:	9400      	str	r4, [sp, #0]
 8002458:	486e      	ldr	r0, [pc, #440]	; (8002614 <process_bacnet_reply+0x244>)
 800245a:	f001 f86b 	bl	8003534 <iprintf>
			bacnet_found = 1;
 800245e:	2201      	movs	r2, #1
 8002460:	4b6a      	ldr	r3, [pc, #424]	; (800260c <process_bacnet_reply+0x23c>)
 8002462:	701a      	strb	r2, [r3, #0]
 8002464:	e0ce      	b.n	8002604 <process_bacnet_reply+0x234>
		}else if((buf[bac_apdu_offset] == 0x30) && (buf[bac_apdu_offset+2] == 0x0E)) // Read Property Multiple
 8002466:	2a30      	cmp	r2, #48	; 0x30
 8002468:	f040 80cc 	bne.w	8002604 <process_bacnet_reply+0x234>
 800246c:	1822      	adds	r2, r4, r0
 800246e:	7892      	ldrb	r2, [r2, #2]
 8002470:	2a0e      	cmp	r2, #14
 8002472:	f040 80c7 	bne.w	8002604 <process_bacnet_reply+0x234>
		{
			//printf("1\n");
			if((buf[bac_apdu_offset+3] == 0x0C) && (buf[bac_apdu_offset+5] == 0xC0)) // Binary input
 8002476:	1822      	adds	r2, r4, r0
 8002478:	78d2      	ldrb	r2, [r2, #3]
 800247a:	2a0c      	cmp	r2, #12
 800247c:	d16c      	bne.n	8002558 <process_bacnet_reply+0x188>
 800247e:	1825      	adds	r5, r4, r0
 8002480:	796d      	ldrb	r5, [r5, #5]
 8002482:	2dc0      	cmp	r5, #192	; 0xc0
 8002484:	d168      	bne.n	8002558 <process_bacnet_reply+0x188>
			{
				//printf("2\n");
				readprop_input = ((buf[bac_apdu_offset+6])<<8) | (buf[bac_apdu_offset+7]);
 8002486:	1822      	adds	r2, r4, r0
 8002488:	7996      	ldrb	r6, [r2, #6]
 800248a:	3007      	adds	r0, #7
 800248c:	5c22      	ldrb	r2, [r4, r0]
 800248e:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
				read_list_ptr = 0xFF;
 8002492:	25ff      	movs	r5, #255	; 0xff
				for(i=0;i<rdp_count;i++){ // Find the readprop_list pointer for the received read prop packet
 8002494:	2200      	movs	r2, #0
 8002496:	e007      	b.n	80024a8 <process_bacnet_reply+0xd8>
					if(readprop_input == readprop_list[i])
 8002498:	4f5f      	ldr	r7, [pc, #380]	; (8002618 <process_bacnet_reply+0x248>)
 800249a:	f837 7012 	ldrh.w	r7, [r7, r2, lsl #1]
 800249e:	42be      	cmp	r6, r7
 80024a0:	d100      	bne.n	80024a4 <process_bacnet_reply+0xd4>
						read_list_ptr = i;
 80024a2:	b2d5      	uxtb	r5, r2
			if((buf[bac_apdu_offset+3] == 0x0C) && (buf[bac_apdu_offset+5] == 0xC0)) // Binary input
			{
				//printf("2\n");
				readprop_input = ((buf[bac_apdu_offset+6])<<8) | (buf[bac_apdu_offset+7]);
				read_list_ptr = 0xFF;
				for(i=0;i<rdp_count;i++){ // Find the readprop_list pointer for the received read prop packet
 80024a4:	3201      	adds	r2, #1
 80024a6:	b292      	uxth	r2, r2
 80024a8:	2a09      	cmp	r2, #9
 80024aa:	d9f5      	bls.n	8002498 <process_bacnet_reply+0xc8>
					if(readprop_input == readprop_list[i])
						read_list_ptr = i;
				}
				if(read_list_ptr == 0xFF){ // Did not find a valid read input number from existing list
 80024ac:	2dff      	cmp	r5, #255	; 0xff
 80024ae:	d103      	bne.n	80024b8 <process_bacnet_reply+0xe8>
					printf("exit\n");
 80024b0:	485a      	ldr	r0, [pc, #360]	; (800261c <process_bacnet_reply+0x24c>)
 80024b2:	f001 f863 	bl	800357c <puts>

					return;
 80024b6:	e0a5      	b.n	8002604 <process_bacnet_reply+0x234>
				}

				i=bac_apdu_offset+8;
 80024b8:	3308      	adds	r3, #8
				if(buf[i] == 0x1E){ // Open tag
 80024ba:	5ce2      	ldrb	r2, [r4, r3]
 80024bc:	2a1e      	cmp	r2, #30
 80024be:	f040 80a1 	bne.w	8002604 <process_bacnet_reply+0x234>
 80024c2:	e046      	b.n	8002552 <process_bacnet_reply+0x182>
					while(i<len)
					{
						if(buf[i+1] == 0x29){ // Property Identifier
 80024c4:	461a      	mov	r2, r3
 80024c6:	18e6      	adds	r6, r4, r3
 80024c8:	7876      	ldrb	r6, [r6, #1]
 80024ca:	2e29      	cmp	r6, #41	; 0x29
 80024cc:	d13f      	bne.n	800254e <process_bacnet_reply+0x17e>
							if((buf[i+2] == 0x55) && (buf[i+3] == 0x4E) && (buf[i+4] == 0x91) && (buf[i+6] == 0x4F)){
 80024ce:	18e6      	adds	r6, r4, r3
 80024d0:	78b6      	ldrb	r6, [r6, #2]
 80024d2:	2e55      	cmp	r6, #85	; 0x55
 80024d4:	d13b      	bne.n	800254e <process_bacnet_reply+0x17e>
 80024d6:	18e6      	adds	r6, r4, r3
 80024d8:	78f6      	ldrb	r6, [r6, #3]
 80024da:	2e4e      	cmp	r6, #78	; 0x4e
 80024dc:	d137      	bne.n	800254e <process_bacnet_reply+0x17e>
 80024de:	18e6      	adds	r6, r4, r3
 80024e0:	7936      	ldrb	r6, [r6, #4]
 80024e2:	2e91      	cmp	r6, #145	; 0x91
 80024e4:	d133      	bne.n	800254e <process_bacnet_reply+0x17e>
 80024e6:	18e6      	adds	r6, r4, r3
 80024e8:	79b6      	ldrb	r6, [r6, #6]
 80024ea:	2e4f      	cmp	r6, #79	; 0x4f
 80024ec:	d12f      	bne.n	800254e <process_bacnet_reply+0x17e>
								if((bac_binval[read_list_ptr] == 0x00) && (buf[i+5] > 0x01)){
 80024ee:	4629      	mov	r1, r5
 80024f0:	4e4b      	ldr	r6, [pc, #300]	; (8002620 <process_bacnet_reply+0x250>)
 80024f2:	5d75      	ldrb	r5, [r6, r5]
 80024f4:	b945      	cbnz	r5, 8002508 <process_bacnet_reply+0x138>
 80024f6:	18e5      	adds	r5, r4, r3
 80024f8:	796d      	ldrb	r5, [r5, #5]
 80024fa:	2d01      	cmp	r5, #1
 80024fc:	d904      	bls.n	8002508 <process_bacnet_reply+0x138>
									set_bacnet_bin_alarm = readprop_list[read_list_ptr];
 80024fe:	4d46      	ldr	r5, [pc, #280]	; (8002618 <process_bacnet_reply+0x248>)
 8002500:	f835 6011 	ldrh.w	r6, [r5, r1, lsl #1]
 8002504:	4d47      	ldr	r5, [pc, #284]	; (8002624 <process_bacnet_reply+0x254>)
 8002506:	802e      	strh	r6, [r5, #0]
								}
								bac_binval[read_list_ptr] = buf[i+5];
 8002508:	4422      	add	r2, r4
 800250a:	7952      	ldrb	r2, [r2, #5]
 800250c:	4d44      	ldr	r5, [pc, #272]	; (8002620 <process_bacnet_reply+0x250>)
 800250e:	546a      	strb	r2, [r5, r1]
								printf("Bacnet Binary reply offset %d - %d  - ",i+5, buf[bac_apdu_offset+7]-1);
 8002510:	5c22      	ldrb	r2, [r4, r0]
 8002512:	3a01      	subs	r2, #1
 8002514:	1d59      	adds	r1, r3, #5
 8002516:	4844      	ldr	r0, [pc, #272]	; (8002628 <process_bacnet_reply+0x258>)
 8002518:	f001 f80c 	bl	8003534 <iprintf>
								printf("Bacnet Binary status %d:%d:%d:%d:%d:%d:%d:%d:%d:%d\n",bac_binval[0],bac_binval[1],bac_binval[2],bac_binval[3],bac_binval[4],bac_binval[5],bac_binval[6],bac_binval[7],bac_binval[8],bac_binval[9]);
 800251c:	7829      	ldrb	r1, [r5, #0]
 800251e:	786a      	ldrb	r2, [r5, #1]
 8002520:	78ab      	ldrb	r3, [r5, #2]
 8002522:	78e8      	ldrb	r0, [r5, #3]
 8002524:	792c      	ldrb	r4, [r5, #4]
 8002526:	796e      	ldrb	r6, [r5, #5]
 8002528:	79af      	ldrb	r7, [r5, #6]
 800252a:	f895 e007 	ldrb.w	lr, [r5, #7]
 800252e:	f895 c008 	ldrb.w	ip, [r5, #8]
 8002532:	7a6d      	ldrb	r5, [r5, #9]
 8002534:	9506      	str	r5, [sp, #24]
 8002536:	f8cd c014 	str.w	ip, [sp, #20]
 800253a:	f8cd e010 	str.w	lr, [sp, #16]
 800253e:	9703      	str	r7, [sp, #12]
 8002540:	9602      	str	r6, [sp, #8]
 8002542:	9401      	str	r4, [sp, #4]
 8002544:	9000      	str	r0, [sp, #0]
 8002546:	4839      	ldr	r0, [pc, #228]	; (800262c <process_bacnet_reply+0x25c>)
 8002548:	f000 fff4 	bl	8003534 <iprintf>
								return;
 800254c:	e05a      	b.n	8002604 <process_bacnet_reply+0x234>
							}
						}
						i++;
 800254e:	3301      	adds	r3, #1
 8002550:	b29b      	uxth	r3, r3
					return;
				}

				i=bac_apdu_offset+8;
				if(buf[i] == 0x1E){ // Open tag
					while(i<len)
 8002552:	428b      	cmp	r3, r1
 8002554:	d3b6      	bcc.n	80024c4 <process_bacnet_reply+0xf4>
 8002556:	e055      	b.n	8002604 <process_bacnet_reply+0x234>
							}
						}
						i++;
					}
				}
			}else if((buf[bac_apdu_offset+3] == 0x0C) && (buf[bac_apdu_offset+5] == 0x00)) // Analog input
 8002558:	2a0c      	cmp	r2, #12
 800255a:	d153      	bne.n	8002604 <process_bacnet_reply+0x234>
 800255c:	1822      	adds	r2, r4, r0
 800255e:	7952      	ldrb	r2, [r2, #5]
 8002560:	2a00      	cmp	r2, #0
 8002562:	d14f      	bne.n	8002604 <process_bacnet_reply+0x234>
			{
				//printf("3\n");
				readprop_input = ((buf[bac_apdu_offset+6])<<8) | (buf[bac_apdu_offset+7]);
 8002564:	1822      	adds	r2, r4, r0
 8002566:	7995      	ldrb	r5, [r2, #6]
 8002568:	3007      	adds	r0, #7
 800256a:	5c22      	ldrb	r2, [r4, r0]
 800256c:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
				//printf("read id %d \n",readprop_input);
				read_list_ptr = 0xFF;
				for(i=0;i<rdpa_count;i++){ // Find the readprop_list pointer for the received read prop packet
 8002570:	2200      	movs	r2, #0
 8002572:	e009      	b.n	8002588 <process_bacnet_reply+0x1b8>
					//printf("read id %d \n",readpropa_list[i]);
					if(readprop_input == readpropa_list[i]){
 8002574:	4e2e      	ldr	r6, [pc, #184]	; (8002630 <process_bacnet_reply+0x260>)
 8002576:	f836 6012 	ldrh.w	r6, [r6, r2, lsl #1]
 800257a:	42b5      	cmp	r5, r6
 800257c:	d102      	bne.n	8002584 <process_bacnet_reply+0x1b4>
						read_list_ptr = i;
 800257e:	fa5f fe82 	uxtb.w	lr, r2
						break;
 8002582:	e005      	b.n	8002590 <process_bacnet_reply+0x1c0>
			{
				//printf("3\n");
				readprop_input = ((buf[bac_apdu_offset+6])<<8) | (buf[bac_apdu_offset+7]);
				//printf("read id %d \n",readprop_input);
				read_list_ptr = 0xFF;
				for(i=0;i<rdpa_count;i++){ // Find the readprop_list pointer for the received read prop packet
 8002584:	3201      	adds	r2, #1
 8002586:	b292      	uxth	r2, r2
 8002588:	2a01      	cmp	r2, #1
 800258a:	d9f3      	bls.n	8002574 <process_bacnet_reply+0x1a4>
			}else if((buf[bac_apdu_offset+3] == 0x0C) && (buf[bac_apdu_offset+5] == 0x00)) // Analog input
			{
				//printf("3\n");
				readprop_input = ((buf[bac_apdu_offset+6])<<8) | (buf[bac_apdu_offset+7]);
				//printf("read id %d \n",readprop_input);
				read_list_ptr = 0xFF;
 800258c:	f04f 0eff 	mov.w	lr, #255	; 0xff
					if(readprop_input == readpropa_list[i]){
						read_list_ptr = i;
						break;
					}
				}
				if(read_list_ptr == 0xFF){ // Did not find a valid read input number from existing list
 8002590:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8002594:	d036      	beq.n	8002604 <process_bacnet_reply+0x234>
					//printf("exit\n");
					return;
				}


				i=bac_apdu_offset+8;
 8002596:	3308      	adds	r3, #8
				if(buf[i] == 0x1E){ // Open tag
 8002598:	5ce2      	ldrb	r2, [r4, r3]
 800259a:	2a1e      	cmp	r2, #30
 800259c:	d132      	bne.n	8002604 <process_bacnet_reply+0x234>
 800259e:	e02f      	b.n	8002600 <process_bacnet_reply+0x230>

					while(i<len)
					{
						if(buf[i+1] == 0x29){ // Property Identifier
 80025a0:	18e5      	adds	r5, r4, r3
 80025a2:	786d      	ldrb	r5, [r5, #1]
 80025a4:	2d29      	cmp	r5, #41	; 0x29
 80025a6:	d129      	bne.n	80025fc <process_bacnet_reply+0x22c>
							if((buf[i+2] == 0x55) && (buf[i+3] == 0x4E) && (buf[i+4] == 0x44) && (buf[i+9] == 0x4F)){
 80025a8:	18e5      	adds	r5, r4, r3
 80025aa:	78ad      	ldrb	r5, [r5, #2]
 80025ac:	2d55      	cmp	r5, #85	; 0x55
 80025ae:	d125      	bne.n	80025fc <process_bacnet_reply+0x22c>
 80025b0:	18e5      	adds	r5, r4, r3
 80025b2:	78ed      	ldrb	r5, [r5, #3]
 80025b4:	2d4e      	cmp	r5, #78	; 0x4e
 80025b6:	d121      	bne.n	80025fc <process_bacnet_reply+0x22c>
 80025b8:	18e5      	adds	r5, r4, r3
 80025ba:	792d      	ldrb	r5, [r5, #4]
 80025bc:	2d44      	cmp	r5, #68	; 0x44
 80025be:	d11d      	bne.n	80025fc <process_bacnet_reply+0x22c>
 80025c0:	18e5      	adds	r5, r4, r3
 80025c2:	7a6d      	ldrb	r5, [r5, #9]
 80025c4:	2d4f      	cmp	r5, #79	; 0x4f
 80025c6:	d119      	bne.n	80025fc <process_bacnet_reply+0x22c>
//								if((bac_binval[read_list_ptr] == 0x00) && (buf[i+5] > 0x01)){
//									set_bacnet_bin_alarm = readprop_list[read_list_ptr];
//								}
								bac_anaval[read_list_ptr] = (buf[i+5]<<24) |(buf[i+6]<<16) |(buf[i+7]<<8) |(buf[i+8]);
 80025c8:	f103 0805 	add.w	r8, r3, #5
 80025cc:	1d9f      	adds	r7, r3, #6
 80025ce:	1dde      	adds	r6, r3, #7
 80025d0:	f103 0508 	add.w	r5, r3, #8
 80025d4:	5d61      	ldrb	r1, [r4, r5]
 80025d6:	4a17      	ldr	r2, [pc, #92]	; (8002634 <process_bacnet_reply+0x264>)
 80025d8:	f802 100e 	strb.w	r1, [r2, lr]
								printf("Bacnet Analog reply offset %d - %d  - ",i+5, buf[bac_apdu_offset+7]-1);
 80025dc:	5c22      	ldrb	r2, [r4, r0]
 80025de:	3a01      	subs	r2, #1
 80025e0:	4641      	mov	r1, r8
 80025e2:	4815      	ldr	r0, [pc, #84]	; (8002638 <process_bacnet_reply+0x268>)
 80025e4:	f000 ffa6 	bl	8003534 <iprintf>
								printf(" Value %d,%d,%d,%d \n",buf[i+5] ,buf[i+6] ,buf[i+7] ,buf[i+8]);
 80025e8:	f814 1008 	ldrb.w	r1, [r4, r8]
 80025ec:	5de2      	ldrb	r2, [r4, r7]
 80025ee:	5da3      	ldrb	r3, [r4, r6]
 80025f0:	5d60      	ldrb	r0, [r4, r5]
 80025f2:	9000      	str	r0, [sp, #0]
 80025f4:	4811      	ldr	r0, [pc, #68]	; (800263c <process_bacnet_reply+0x26c>)
 80025f6:	f000 ff9d 	bl	8003534 <iprintf>
								return;
 80025fa:	e003      	b.n	8002604 <process_bacnet_reply+0x234>
							}
						}
						i++;
 80025fc:	3301      	adds	r3, #1
 80025fe:	b29b      	uxth	r3, r3


				i=bac_apdu_offset+8;
				if(buf[i] == 0x1E){ // Open tag

					while(i<len)
 8002600:	428b      	cmp	r3, r1
 8002602:	d3cd      	bcc.n	80025a0 <process_bacnet_reply+0x1d0>
					}
				}
			}
		}
	}
}
 8002604:	b008      	add	sp, #32
 8002606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800260a:	4770      	bx	lr
 800260c:	20000ee9 	.word	0x20000ee9
 8002610:	20000a90 	.word	0x20000a90
 8002614:	08005efc 	.word	0x08005efc
 8002618:	200004cc 	.word	0x200004cc
 800261c:	08005f24 	.word	0x08005f24
 8002620:	20000a80 	.word	0x20000a80
 8002624:	20000a8a 	.word	0x20000a8a
 8002628:	08005f2c 	.word	0x08005f2c
 800262c:	08005f54 	.word	0x08005f54
 8002630:	200004f0 	.word	0x200004f0
 8002634:	20000a78 	.word	0x20000a78
 8002638:	08005f88 	.word	0x08005f88
 800263c:	08005fb0 	.word	0x08005fb0

08002640 <mac1_tick>:

void mac1_tick(void)
{
 8002640:	b508      	push	{r3, lr}
	plen = enc424j600PacketReceiveP1(BUFFER_SIZE, buf1);
 8002642:	490b      	ldr	r1, [pc, #44]	; (8002670 <mac1_tick+0x30>)
 8002644:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002648:	f7fe fb8e 	bl	8000d68 <enc424j600PacketReceiveP1>
 800264c:	b281      	uxth	r1, r0
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <mac1_tick+0x34>)
 8002650:	8019      	strh	r1, [r3, #0]
	if(plen>0){
 8002652:	b131      	cbz	r1, 8002662 <mac1_tick+0x22>

		mac1_pkt_cntr++;
 8002654:	4a08      	ldr	r2, [pc, #32]	; (8002678 <mac1_tick+0x38>)
 8002656:	8813      	ldrh	r3, [r2, #0]
 8002658:	3301      	adds	r3, #1
 800265a:	8013      	strh	r3, [r2, #0]
//			printf("----------------\n");
//			for(uint16_t q=0;q<plen;q++)
//				//printf("%d ",buf1[q]);
//				USART1_Send(buf1[q]);
//			printf("\n----------------\n");
			process_bacnet_reply(buf1,plen);
 800265c:	4804      	ldr	r0, [pc, #16]	; (8002670 <mac1_tick+0x30>)
 800265e:	f7ff feb7 	bl	80023d0 <process_bacnet_reply>
//				printf("ARP Req Rcvd");
//				printf("From : %d:%d:%d:%d:%d:%d \n",buf1[6],buf1[7],buf1[8],buf1[9],buf1[10],buf1[11]);
//			}
//		}
	}
	packetloop_icmp_tcp(buf1,plen);
 8002662:	4b04      	ldr	r3, [pc, #16]	; (8002674 <mac1_tick+0x34>)
 8002664:	8819      	ldrh	r1, [r3, #0]
 8002666:	4802      	ldr	r0, [pc, #8]	; (8002670 <mac1_tick+0x30>)
 8002668:	f7ff f97c 	bl	8001964 <packetloop_icmp_tcp>
 800266c:	bd08      	pop	{r3, pc}
 800266e:	bf00      	nop
 8002670:	20000bbc 	.word	0x20000bbc
 8002674:	20000bb8 	.word	0x20000bb8
 8002678:	20000a8c 	.word	0x20000a8c

0800267c <mac1_init>:

}
void mac1_init(void)
{
 800267c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002680:	b087      	sub	sp, #28
	Enc424J600Network_initP1(macaddr1);
 8002682:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8002758 <mac1_init+0xdc>
 8002686:	4648      	mov	r0, r9
 8002688:	f7fe fafe 	bl	8000c88 <Enc424J600Network_initP1>
	dhcp_up=0;
 800268c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800275c <mac1_init+0xe0>
 8002690:	2700      	movs	r7, #0
 8002692:	f888 7000 	strb.w	r7, [r8]
	dhcp_up = allocateIPAddress(buf1, sizeof(buf1), macaddr1, myport, myip, mynetmask, gwip, dnsip, dhcpsvrip );
 8002696:	4b22      	ldr	r3, [pc, #136]	; (8002720 <mac1_init+0xa4>)
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	4a22      	ldr	r2, [pc, #136]	; (8002724 <mac1_init+0xa8>)
 800269c:	9204      	str	r2, [sp, #16]
 800269e:	4c22      	ldr	r4, [pc, #136]	; (8002728 <mac1_init+0xac>)
 80026a0:	9403      	str	r4, [sp, #12]
 80026a2:	4d22      	ldr	r5, [pc, #136]	; (800272c <mac1_init+0xb0>)
 80026a4:	9502      	str	r5, [sp, #8]
 80026a6:	4a22      	ldr	r2, [pc, #136]	; (8002730 <mac1_init+0xb4>)
 80026a8:	9201      	str	r2, [sp, #4]
 80026aa:	4e22      	ldr	r6, [pc, #136]	; (8002734 <mac1_init+0xb8>)
 80026ac:	9600      	str	r6, [sp, #0]
 80026ae:	464a      	mov	r2, r9
 80026b0:	f240 3121 	movw	r1, #801	; 0x321
 80026b4:	4820      	ldr	r0, [pc, #128]	; (8002738 <mac1_init+0xbc>)
 80026b6:	f7ff fe2b 	bl	8002310 <allocateIPAddress>
 80026ba:	f888 0000 	strb.w	r0, [r8]
	printf("\n--------------------------\n");
 80026be:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8002760 <mac1_init+0xe4>
 80026c2:	4640      	mov	r0, r8
 80026c4:	f000 ff5a 	bl	800357c <puts>
	printf("IP Address Port 2 -  %d.%d.%d.%d \n",myip[0],myip[1],myip[2],myip[3]);
 80026c8:	7831      	ldrb	r1, [r6, #0]
 80026ca:	7872      	ldrb	r2, [r6, #1]
 80026cc:	78b3      	ldrb	r3, [r6, #2]
 80026ce:	78f0      	ldrb	r0, [r6, #3]
 80026d0:	9000      	str	r0, [sp, #0]
 80026d2:	481a      	ldr	r0, [pc, #104]	; (800273c <mac1_init+0xc0>)
 80026d4:	f000 ff2e 	bl	8003534 <iprintf>
	printf("Gateway IP Port 2 -  %d.%d.%d.%d \n",gwip[0],gwip[1],gwip[2],gwip[3]);
 80026d8:	7829      	ldrb	r1, [r5, #0]
 80026da:	786a      	ldrb	r2, [r5, #1]
 80026dc:	78ab      	ldrb	r3, [r5, #2]
 80026de:	78e8      	ldrb	r0, [r5, #3]
 80026e0:	9000      	str	r0, [sp, #0]
 80026e2:	4817      	ldr	r0, [pc, #92]	; (8002740 <mac1_init+0xc4>)
 80026e4:	f000 ff26 	bl	8003534 <iprintf>
	printf("DNS  IP    Port 2 -  %d.%d.%d.%d \n",dnsip[0],dnsip[1],dnsip[2],dnsip[3]);
 80026e8:	7821      	ldrb	r1, [r4, #0]
 80026ea:	7862      	ldrb	r2, [r4, #1]
 80026ec:	78a3      	ldrb	r3, [r4, #2]
 80026ee:	78e0      	ldrb	r0, [r4, #3]
 80026f0:	9000      	str	r0, [sp, #0]
 80026f2:	4814      	ldr	r0, [pc, #80]	; (8002744 <mac1_init+0xc8>)
 80026f4:	f000 ff1e 	bl	8003534 <iprintf>
	printf("Init Complete Port 1\n");
 80026f8:	4813      	ldr	r0, [pc, #76]	; (8002748 <mac1_init+0xcc>)
 80026fa:	f000 ff3f 	bl	800357c <puts>
	printf("\n--------------------------\n");
 80026fe:	4640      	mov	r0, r8
 8002700:	f000 ff3c 	bl	800357c <puts>
	bac_timeout = Sys_GetTick() + 2000;
 8002704:	f000 fb66 	bl	8002dd4 <Sys_GetTick>
 8002708:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800270c:	4b0f      	ldr	r3, [pc, #60]	; (800274c <mac1_init+0xd0>)
 800270e:	6018      	str	r0, [r3, #0]
	bacnet_found = 0;
 8002710:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <mac1_init+0xd4>)
 8002712:	701f      	strb	r7, [r3, #0]
	invokeid=0;
 8002714:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <mac1_init+0xd8>)
 8002716:	701f      	strb	r7, [r3, #0]
}
 8002718:	b007      	add	sp, #28
 800271a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800271e:	bf00      	nop
 8002720:	200004e6 	.word	0x200004e6
 8002724:	20000ee4 	.word	0x20000ee4
 8002728:	200004ec 	.word	0x200004ec
 800272c:	200004e8 	.word	0x200004e8
 8002730:	20000efc 	.word	0x20000efc
 8002734:	200004f4 	.word	0x200004f4
 8002738:	20000bbc 	.word	0x20000bbc
 800273c:	08005fc8 	.word	0x08005fc8
 8002740:	08005fec 	.word	0x08005fec
 8002744:	08006010 	.word	0x08006010
 8002748:	08006034 	.word	0x08006034
 800274c:	20000a7c 	.word	0x20000a7c
 8002750:	20000ee9 	.word	0x20000ee9
 8002754:	20000edd 	.word	0x20000edd
 8002758:	200004e0 	.word	0x200004e0
 800275c:	20000ee8 	.word	0x20000ee8
 8002760:	08005d8c 	.word	0x08005d8c

08002764 <bacnet_whois>:
void bacnet_whois(void)
{
 8002764:	b500      	push	{lr}
 8002766:	b085      	sub	sp, #20

	uint16_t i;
	char whois_pkt[] = {0x81,0x0B,0x00,0x0C,0x01,0x20,0xFF,0xFF,0x00,0x0E,0x10,0x08};
 8002768:	4a19      	ldr	r2, [pc, #100]	; (80027d0 <bacnet_whois+0x6c>)
 800276a:	ab01      	add	r3, sp, #4
 800276c:	6810      	ldr	r0, [r2, #0]
 800276e:	6851      	ldr	r1, [r2, #4]
 8002770:	6892      	ldr	r2, [r2, #8]
 8002772:	c307      	stmia	r3!, {r0, r1, r2}
	dip[0] = myip[0];
 8002774:	4b17      	ldr	r3, [pc, #92]	; (80027d4 <bacnet_whois+0x70>)
 8002776:	7819      	ldrb	r1, [r3, #0]
 8002778:	4a17      	ldr	r2, [pc, #92]	; (80027d8 <bacnet_whois+0x74>)
 800277a:	7011      	strb	r1, [r2, #0]
	dip[1] = myip[1];
 800277c:	7859      	ldrb	r1, [r3, #1]
 800277e:	7051      	strb	r1, [r2, #1]
	dip[2] = myip[2];
 8002780:	789b      	ldrb	r3, [r3, #2]
 8002782:	7093      	strb	r3, [r2, #2]
	dip[3] = 255;
 8002784:	23ff      	movs	r3, #255	; 0xff
 8002786:	70d3      	strb	r3, [r2, #3]
	send_udp_prepare(buf1,sport,dip,dport);
 8002788:	4b14      	ldr	r3, [pc, #80]	; (80027dc <bacnet_whois+0x78>)
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	4914      	ldr	r1, [pc, #80]	; (80027e0 <bacnet_whois+0x7c>)
 800278e:	8809      	ldrh	r1, [r1, #0]
 8002790:	4814      	ldr	r0, [pc, #80]	; (80027e4 <bacnet_whois+0x80>)
 8002792:	f7fe ff65 	bl	8001660 <send_udp_prepare>
	i=0;
 8002796:	2300      	movs	r3, #0
	while(i<sizeof(whois_pkt)){
 8002798:	e009      	b.n	80027ae <bacnet_whois+0x4a>
		buf1[UDP_DATA_P+i] = whois_pkt[i];
 800279a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800279e:	a904      	add	r1, sp, #16
 80027a0:	4419      	add	r1, r3
 80027a2:	f811 0c0c 	ldrb.w	r0, [r1, #-12]
 80027a6:	490f      	ldr	r1, [pc, #60]	; (80027e4 <bacnet_whois+0x80>)
 80027a8:	5488      	strb	r0, [r1, r2]
		i++;
 80027aa:	3301      	adds	r3, #1
 80027ac:	b29b      	uxth	r3, r3
	dip[1] = myip[1];
	dip[2] = myip[2];
	dip[3] = 255;
	send_udp_prepare(buf1,sport,dip,dport);
	i=0;
	while(i<sizeof(whois_pkt)){
 80027ae:	2b0b      	cmp	r3, #11
 80027b0:	d9f3      	bls.n	800279a <bacnet_whois+0x36>
		buf1[UDP_DATA_P+i] = whois_pkt[i];
		i++;
	}
	//Force Broadcast
	buf1[0] = 0xFF;
 80027b2:	480c      	ldr	r0, [pc, #48]	; (80027e4 <bacnet_whois+0x80>)
 80027b4:	23ff      	movs	r3, #255	; 0xff
 80027b6:	7003      	strb	r3, [r0, #0]
	buf1[1] = 0xFF;
 80027b8:	7043      	strb	r3, [r0, #1]
	buf1[2] = 0xFF;
 80027ba:	7083      	strb	r3, [r0, #2]
	buf1[3] = 0xFF;
 80027bc:	70c3      	strb	r3, [r0, #3]
	buf1[4] = 0xFF;
 80027be:	7103      	strb	r3, [r0, #4]
	buf1[5] = 0xFF;
 80027c0:	7143      	strb	r3, [r0, #5]
	send_udp_transmit(buf1,sizeof(whois_pkt));
 80027c2:	210c      	movs	r1, #12
 80027c4:	f7fe ff9a 	bl	80016fc <send_udp_transmit>
	//send_udp(buf1,whois_pkt,sizeof(whois_pkt),sport, dip, dport);
}
 80027c8:	b005      	add	sp, #20
 80027ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80027ce:	bf00      	nop
 80027d0:	08005abc 	.word	0x08005abc
 80027d4:	200004f4 	.word	0x200004f4
 80027d8:	20000ee0 	.word	0x20000ee0
 80027dc:	200004fa 	.word	0x200004fa
 80027e0:	200004f8 	.word	0x200004f8
 80027e4:	20000bbc 	.word	0x20000bbc

080027e8 <bacnet_read_prop>:

void bacnet_read_prop(uint8_t id, uint16_t inst, uint8_t analogprop)
{
 80027e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ea:	b087      	sub	sp, #28
 80027ec:	4605      	mov	r5, r0
 80027ee:	460c      	mov	r4, r1
 80027f0:	4616      	mov	r6, r2
	uint16_t i;
	char bacrd_pkt[] = {0x81,0x0A,0x00,0x13,0x01,0x04,0x02,0x75,0x53,0x0E,0x0C,0x00,0xC0,0x00,0x02,0x1E,0x09,0x08,0x1F};
 80027f2:	af01      	add	r7, sp, #4
 80027f4:	f8df e09c 	ldr.w	lr, [pc, #156]	; 8002894 <bacnet_read_prop+0xac>
 80027f8:	f85e 0f0c 	ldr.w	r0, [lr, #12]!
 80027fc:	f8de 1004 	ldr.w	r1, [lr, #4]
 8002800:	f8de 2008 	ldr.w	r2, [lr, #8]
 8002804:	f8de 300c 	ldr.w	r3, [lr, #12]
 8002808:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800280a:	f8be 2010 	ldrh.w	r2, [lr, #16]
 800280e:	f89e 3012 	ldrb.w	r3, [lr, #18]
 8002812:	803a      	strh	r2, [r7, #0]
 8002814:	70bb      	strb	r3, [r7, #2]
	dip[0] = bacdev_ip[0];
 8002816:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <bacnet_read_prop+0x98>)
 8002818:	7819      	ldrb	r1, [r3, #0]
 800281a:	4a1a      	ldr	r2, [pc, #104]	; (8002884 <bacnet_read_prop+0x9c>)
 800281c:	7011      	strb	r1, [r2, #0]
	dip[1] = bacdev_ip[1];
 800281e:	7859      	ldrb	r1, [r3, #1]
 8002820:	7051      	strb	r1, [r2, #1]
	dip[2] = bacdev_ip[2];
 8002822:	7899      	ldrb	r1, [r3, #2]
 8002824:	7091      	strb	r1, [r2, #2]
	dip[3] = bacdev_ip[3];
 8002826:	78db      	ldrb	r3, [r3, #3]
 8002828:	70d3      	strb	r3, [r2, #3]
	send_udp_prepare(buf1,sport,dip,dport);
 800282a:	4b17      	ldr	r3, [pc, #92]	; (8002888 <bacnet_read_prop+0xa0>)
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	4917      	ldr	r1, [pc, #92]	; (800288c <bacnet_read_prop+0xa4>)
 8002830:	8809      	ldrh	r1, [r1, #0]
 8002832:	4817      	ldr	r0, [pc, #92]	; (8002890 <bacnet_read_prop+0xa8>)
 8002834:	f7fe ff14 	bl	8001660 <send_udp_prepare>
	i=0;
 8002838:	2300      	movs	r3, #0
	while(i<sizeof(bacrd_pkt)){
 800283a:	e009      	b.n	8002850 <bacnet_read_prop+0x68>
		buf1[UDP_DATA_P+i] = bacrd_pkt[i];
 800283c:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8002840:	a906      	add	r1, sp, #24
 8002842:	4419      	add	r1, r3
 8002844:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8002848:	4911      	ldr	r1, [pc, #68]	; (8002890 <bacnet_read_prop+0xa8>)
 800284a:	5488      	strb	r0, [r1, r2]
		i++;
 800284c:	3301      	adds	r3, #1
 800284e:	b29b      	uxth	r3, r3
	dip[1] = bacdev_ip[1];
	dip[2] = bacdev_ip[2];
	dip[3] = bacdev_ip[3];
	send_udp_prepare(buf1,sport,dip,dport);
	i=0;
	while(i<sizeof(bacrd_pkt)){
 8002850:	2b12      	cmp	r3, #18
 8002852:	d9f3      	bls.n	800283c <bacnet_read_prop+0x54>
		buf1[UDP_DATA_P+i] = bacrd_pkt[i];
		i++;
	}
	//Force Broadcast
	buf1[0] = 0xFF;
 8002854:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <bacnet_read_prop+0xa8>)
 8002856:	22ff      	movs	r2, #255	; 0xff
 8002858:	701a      	strb	r2, [r3, #0]
	buf1[1] = 0xFF;
 800285a:	705a      	strb	r2, [r3, #1]
	buf1[2] = 0xFF;
 800285c:	709a      	strb	r2, [r3, #2]
	buf1[3] = 0xFF;
 800285e:	70da      	strb	r2, [r3, #3]
	buf1[4] = 0xFF;
 8002860:	711a      	strb	r2, [r3, #4]
	buf1[5] = 0xFF;
 8002862:	715a      	strb	r2, [r3, #5]
	if(analogprop)
 8002864:	b116      	cbz	r6, 800286c <bacnet_read_prop+0x84>
	{
		buf1[UDP_DATA_P+12] = 0x00;
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}
	buf1[UDP_DATA_P+8] = id;
 800286c:	4808      	ldr	r0, [pc, #32]	; (8002890 <bacnet_read_prop+0xa8>)
 800286e:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
	buf1[UDP_DATA_P+14] = (uint8_t)((inst & 0xFF00)>>8);
	buf1[UDP_DATA_P+14] = (uint8_t)(inst & 0x00FF);
 8002872:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
	send_udp_transmit(buf1,sizeof(bacrd_pkt));
 8002876:	2113      	movs	r1, #19
 8002878:	f7fe ff40 	bl	80016fc <send_udp_transmit>
}
 800287c:	b007      	add	sp, #28
 800287e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002880:	20000a90 	.word	0x20000a90
 8002884:	20000ee0 	.word	0x20000ee0
 8002888:	200004fa 	.word	0x200004fa
 800288c:	200004f8 	.word	0x200004f8
 8002890:	20000bbc 	.word	0x20000bbc
 8002894:	08005abc 	.word	0x08005abc

08002898 <mac1_service>:

void mac1_service(void)
{
 8002898:	b570      	push	{r4, r5, r6, lr}
	//printf("Bacnet timeout %d:%d",bac_timeout,Sys_GetTick());
	if(bac_timeout < Sys_GetTick()){
 800289a:	f000 fa9b 	bl	8002dd4 <Sys_GetTick>
 800289e:	4b2d      	ldr	r3, [pc, #180]	; (8002954 <mac1_service+0xbc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4298      	cmp	r0, r3
 80028a4:	d954      	bls.n	8002950 <mac1_service+0xb8>
		if(!bacnet_found)
 80028a6:	4b2c      	ldr	r3, [pc, #176]	; (8002958 <mac1_service+0xc0>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	b97b      	cbnz	r3, 80028cc <mac1_service+0x34>
		{
			printf("Sending Bacnet Who Is \n");
 80028ac:	482b      	ldr	r0, [pc, #172]	; (800295c <mac1_service+0xc4>)
 80028ae:	f000 fe65 	bl	800357c <puts>
			bacnet_whois();
 80028b2:	f7ff ff57 	bl	8002764 <bacnet_whois>
			bac_timeout = Sys_GetTick() + 10000;
 80028b6:	f000 fa8d 	bl	8002dd4 <Sys_GetTick>
 80028ba:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
 80028be:	3010      	adds	r0, #16
 80028c0:	4b24      	ldr	r3, [pc, #144]	; (8002954 <mac1_service+0xbc>)
 80028c2:	6018      	str	r0, [r3, #0]
			bac_inst = 0;
 80028c4:	2200      	movs	r2, #0
 80028c6:	4b26      	ldr	r3, [pc, #152]	; (8002960 <mac1_service+0xc8>)
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	bd70      	pop	{r4, r5, r6, pc}
		}else
		{
			if(bac_inst <rdp_count){
 80028cc:	4b24      	ldr	r3, [pc, #144]	; (8002960 <mac1_service+0xc8>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b09      	cmp	r3, #9
 80028d2:	d814      	bhi.n	80028fe <mac1_service+0x66>
				bacnet_read_prop(invokeid,readprop_list[bac_inst],0);
 80028d4:	4e23      	ldr	r6, [pc, #140]	; (8002964 <mac1_service+0xcc>)
 80028d6:	4d24      	ldr	r5, [pc, #144]	; (8002968 <mac1_service+0xd0>)
 80028d8:	2200      	movs	r2, #0
 80028da:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 80028de:	7828      	ldrb	r0, [r5, #0]
 80028e0:	f7ff ff82 	bl	80027e8 <bacnet_read_prop>
				printf("Bacnet read prop %d %d %d Binary \n",invokeid,readprop_list[bac_inst],bac_inst);
 80028e4:	4c1e      	ldr	r4, [pc, #120]	; (8002960 <mac1_service+0xc8>)
 80028e6:	7822      	ldrb	r2, [r4, #0]
 80028e8:	4613      	mov	r3, r2
 80028ea:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80028ee:	7829      	ldrb	r1, [r5, #0]
 80028f0:	481e      	ldr	r0, [pc, #120]	; (800296c <mac1_service+0xd4>)
 80028f2:	f000 fe1f 	bl	8003534 <iprintf>
				bac_inst++;
 80028f6:	7823      	ldrb	r3, [r4, #0]
 80028f8:	3301      	adds	r3, #1
 80028fa:	7023      	strb	r3, [r4, #0]
 80028fc:	e015      	b.n	800292a <mac1_service+0x92>
			}else{
				bacnet_read_prop(invokeid,readpropa_list[bac_inst-rdp_count],1);
 80028fe:	3b0a      	subs	r3, #10
 8002900:	4e1b      	ldr	r6, [pc, #108]	; (8002970 <mac1_service+0xd8>)
 8002902:	4d19      	ldr	r5, [pc, #100]	; (8002968 <mac1_service+0xd0>)
 8002904:	2201      	movs	r2, #1
 8002906:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800290a:	7828      	ldrb	r0, [r5, #0]
 800290c:	f7ff ff6c 	bl	80027e8 <bacnet_read_prop>
				printf("Bacnet read prop %d %d %d Analog \n",invokeid,readpropa_list[bac_inst-rdp_count],bac_inst);
 8002910:	4c13      	ldr	r4, [pc, #76]	; (8002960 <mac1_service+0xc8>)
 8002912:	7823      	ldrb	r3, [r4, #0]
 8002914:	f1a3 020a 	sub.w	r2, r3, #10
 8002918:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 800291c:	7829      	ldrb	r1, [r5, #0]
 800291e:	4815      	ldr	r0, [pc, #84]	; (8002974 <mac1_service+0xdc>)
 8002920:	f000 fe08 	bl	8003534 <iprintf>
				bac_inst++;
 8002924:	7823      	ldrb	r3, [r4, #0]
 8002926:	3301      	adds	r3, #1
 8002928:	7023      	strb	r3, [r4, #0]
			}
			bac_timeout = Sys_GetTick() + 2000;
 800292a:	f000 fa53 	bl	8002dd4 <Sys_GetTick>
 800292e:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8002932:	4b08      	ldr	r3, [pc, #32]	; (8002954 <mac1_service+0xbc>)
 8002934:	6018      	str	r0, [r3, #0]
			invoke_id_str[bac_inst] = invokeid++;
 8002936:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <mac1_service+0xc8>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	490b      	ldr	r1, [pc, #44]	; (8002968 <mac1_service+0xd0>)
 800293c:	780a      	ldrb	r2, [r1, #0]
 800293e:	1c50      	adds	r0, r2, #1
 8002940:	7008      	strb	r0, [r1, #0]
 8002942:	490d      	ldr	r1, [pc, #52]	; (8002978 <mac1_service+0xe0>)
 8002944:	54ca      	strb	r2, [r1, r3]
			//}
			if(bac_inst >= (rdp_count+rdpa_count))
 8002946:	2b0b      	cmp	r3, #11
 8002948:	d902      	bls.n	8002950 <mac1_service+0xb8>
				bac_inst = 0;
 800294a:	2200      	movs	r2, #0
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <mac1_service+0xc8>)
 800294e:	701a      	strb	r2, [r3, #0]
 8002950:	bd70      	pop	{r4, r5, r6, pc}
 8002952:	bf00      	nop
 8002954:	20000a7c 	.word	0x20000a7c
 8002958:	20000ee9 	.word	0x20000ee9
 800295c:	0800604c 	.word	0x0800604c
 8002960:	20000ef8 	.word	0x20000ef8
 8002964:	200004cc 	.word	0x200004cc
 8002968:	20000edd 	.word	0x20000edd
 800296c:	08006064 	.word	0x08006064
 8002970:	200004f0 	.word	0x200004f0
 8002974:	08006088 	.word	0x08006088
 8002978:	20000eec 	.word	0x20000eec

0800297c <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main()
{
 800297c:	b538      	push	{r3, r4, r5, lr}
	//uint8_t mode;
	uint32_t display_timeout;
	sys_init();
 800297e:	f000 f90b 	bl	8002b98 <sys_init>
	printf("\n-------------------------\n");
 8002982:	4829      	ldr	r0, [pc, #164]	; (8002a28 <main+0xac>)
 8002984:	f000 fdfa 	bl	800357c <puts>
	printf("Starting Ethernet Init \n");
 8002988:	4828      	ldr	r0, [pc, #160]	; (8002a2c <main+0xb0>)
 800298a:	f000 fdf7 	bl	800357c <puts>
	mac0_init();
 800298e:	f7ff fba9 	bl	80020e4 <mac0_init>
	mac1_init();
 8002992:	f7ff fe73 	bl	800267c <mac1_init>
	Sys_Delay(100);
 8002996:	2064      	movs	r0, #100	; 0x64
 8002998:	f000 fa22 	bl	8002de0 <Sys_Delay>
	printf("Init completed\n");
 800299c:	4824      	ldr	r0, [pc, #144]	; (8002a30 <main+0xb4>)
 800299e:	f000 fded 	bl	800357c <puts>
	mac0_service(1,1,0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2101      	movs	r1, #1
 80029a6:	4608      	mov	r0, r1
 80029a8:	f7ff fc30 	bl	800220c <mac0_service>
	//mode = 0;

	while(1)
	{
		//Sys_Delay(1000);
		display_timeout = Sys_GetTick();
 80029ac:	f000 fa12 	bl	8002dd4 <Sys_GetTick>
 80029b0:	4604      	mov	r4, r0
		//printf("1 %d ",periodic_timer);

		mac0_tick();
 80029b2:	f7ff fa55 	bl	8001e60 <mac0_tick>
		mac0_service(1,0,0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	4611      	mov	r1, r2
 80029ba:	2001      	movs	r0, #1
 80029bc:	f7ff fc26 	bl	800220c <mac0_service>
		mac1_tick();
 80029c0:	f7ff fe3e 	bl	8002640 <mac1_tick>

		if(set_bacnet_bin_alarm)
 80029c4:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <main+0xb8>)
 80029c6:	7819      	ldrb	r1, [r3, #0]
 80029c8:	b159      	cbz	r1, 80029e2 <main+0x66>
		{
			printf("Bacnet Alarm %d \n",set_bacnet_bin_alarm);
 80029ca:	481b      	ldr	r0, [pc, #108]	; (8002a38 <main+0xbc>)
 80029cc:	f000 fdb2 	bl	8003534 <iprintf>
			mac0_service(1,0,set_bacnet_bin_alarm);
 80029d0:	4d18      	ldr	r5, [pc, #96]	; (8002a34 <main+0xb8>)
 80029d2:	782a      	ldrb	r2, [r5, #0]
 80029d4:	2100      	movs	r1, #0
 80029d6:	2001      	movs	r0, #1
 80029d8:	f7ff fc18 	bl	800220c <mac0_service>
			set_bacnet_bin_alarm = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	702b      	strb	r3, [r5, #0]
 80029e0:	e00e      	b.n	8002a00 <main+0x84>
		}else if(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_3))
 80029e2:	2108      	movs	r1, #8
 80029e4:	4815      	ldr	r0, [pc, #84]	; (8002a3c <main+0xc0>)
 80029e6:	f7fd fc5f 	bl	80002a8 <GPIO_ReadInputDataBit>
 80029ea:	b148      	cbz	r0, 8002a00 <main+0x84>
		{
			printf("Bacnet Alarm %d \n",set_bacnet_bin_alarm);
 80029ec:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <main+0xb8>)
 80029ee:	7819      	ldrb	r1, [r3, #0]
 80029f0:	4811      	ldr	r0, [pc, #68]	; (8002a38 <main+0xbc>)
 80029f2:	f000 fd9f 	bl	8003534 <iprintf>
			mac0_service(1,0,8);
 80029f6:	2208      	movs	r2, #8
 80029f8:	2100      	movs	r1, #0
 80029fa:	2001      	movs	r0, #1
 80029fc:	f7ff fc06 	bl	800220c <mac0_service>
		}

		mac1_service();
 8002a00:	f7ff ff4a 	bl	8002898 <mac1_service>
//		printf("-\r");
		if((display_timeout%10000) == 0){
 8002a04:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <main+0xc4>)
 8002a06:	fba3 2304 	umull	r2, r3, r3, r4
 8002a0a:	0b5b      	lsrs	r3, r3, #13
 8002a0c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a10:	fb02 4313 	mls	r3, r2, r3, r4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1c9      	bne.n	80029ac <main+0x30>
			get_RTC();
 8002a18:	f7fd fede 	bl	80007d8 <get_RTC>
			display_date();
 8002a1c:	f7fd ffc2 	bl	80009a4 <display_date>
			printf(" : \n");
 8002a20:	4808      	ldr	r0, [pc, #32]	; (8002a44 <main+0xc8>)
 8002a22:	f000 fdab 	bl	800357c <puts>
 8002a26:	e7c1      	b.n	80029ac <main+0x30>
 8002a28:	080060ac 	.word	0x080060ac
 8002a2c:	080060c8 	.word	0x080060c8
 8002a30:	080060e0 	.word	0x080060e0
 8002a34:	20000a8a 	.word	0x20000a8a
 8002a38:	080060f0 	.word	0x080060f0
 8002a3c:	40010800 	.word	0x40010800
 8002a40:	d1b71759 	.word	0xd1b71759
 8002a44:	08006104 	.word	0x08006104

08002a48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002a4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002a4e:	e003      	b.n	8002a58 <LoopCopyDataInit>

08002a50 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8002a52:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002a54:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002a56:	3104      	adds	r1, #4

08002a58 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002a58:	480b      	ldr	r0, [pc, #44]	; (8002a88 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8002a5a:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8002a5c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002a5e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002a60:	d3f6      	bcc.n	8002a50 <CopyDataInit>
	ldr	r2, =_sbss
 8002a62:	4a0b      	ldr	r2, [pc, #44]	; (8002a90 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8002a64:	e002      	b.n	8002a6c <LoopFillZerobss>

08002a66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002a66:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002a68:	f842 3b04 	str.w	r3, [r2], #4

08002a6c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002a6c:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8002a6e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002a70:	d3f9      	bcc.n	8002a66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a72:	f000 fc6d 	bl	8003350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a76:	f002 fc21 	bl	80052bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a7a:	f7ff ff7f 	bl	800297c <main>
	bx	lr
 8002a7e:	4770      	bx	lr

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a80:	20005000 	.word	0x20005000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8002a84:	080063f8 	.word	0x080063f8
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002a88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002a8c:	20000a00 	.word	0x20000a00
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8002a90:	20000a00 	.word	0x20000a00
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8002a94:	200013e0 	.word	0x200013e0

08002a98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a98:	e7fe      	b.n	8002a98 <ADC1_2_IRQHandler>
	...

08002a9c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002a9c:	b508      	push	{r3, lr}
	printf("NMI Fault");
 8002a9e:	4802      	ldr	r0, [pc, #8]	; (8002aa8 <NMI_Handler+0xc>)
 8002aa0:	f000 fd48 	bl	8003534 <iprintf>
 8002aa4:	e7fe      	b.n	8002aa4 <NMI_Handler+0x8>
 8002aa6:	bf00      	nop
 8002aa8:	08006108 	.word	0x08006108

08002aac <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002aac:	b508      	push	{r3, lr}
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
	  printf("HardFault");
 8002aae:	4802      	ldr	r0, [pc, #8]	; (8002ab8 <HardFault_Handler+0xc>)
 8002ab0:	f000 fd40 	bl	8003534 <iprintf>
 8002ab4:	e7fe      	b.n	8002ab4 <HardFault_Handler+0x8>
 8002ab6:	bf00      	nop
 8002ab8:	08006114 	.word	0x08006114

08002abc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002abc:	e7fe      	b.n	8002abc <MemManage_Handler>
 8002abe:	bf00      	nop

08002ac0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002ac0:	e7fe      	b.n	8002ac0 <BusFault_Handler>
 8002ac2:	bf00      	nop

08002ac4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002ac4:	e7fe      	b.n	8002ac4 <UsageFault_Handler>
 8002ac6:	bf00      	nop

08002ac8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop

08002acc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop

08002ad0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop

08002ad4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop

08002ad8 <myGPIO_Init>:
#include <stdio.h>
#include "sys_timer.h"
#include "sys_spi.h"
#include "sys_usart.h"
void myGPIO_Init(void)
{
 8002ad8:	b570      	push	{r4, r5, r6, lr}
 8002ada:	b082      	sub	sp, #8
	GPIO_InitTypeDef GPIO_InitStruct;
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8002adc:	2101      	movs	r1, #1
 8002ade:	2010      	movs	r0, #16
 8002ae0:	f7fd fc7a 	bl	80003d8 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 8002ae4:	2510      	movs	r5, #16
 8002ae6:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_13;
 8002aea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002aee:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8002af2:	2401      	movs	r4, #1
 8002af4:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_Init(GPIOC,&GPIO_InitStruct);
 8002af8:	a901      	add	r1, sp, #4
 8002afa:	4824      	ldr	r0, [pc, #144]	; (8002b8c <myGPIO_Init+0xb4>)
 8002afc:	f7fd fb86 	bl	800020c <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8002b00:	4621      	mov	r1, r4
 8002b02:	2008      	movs	r0, #8
 8002b04:	f7fd fc68 	bl	80003d8 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 8002b08:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6;
 8002b0c:	2340      	movs	r3, #64	; 0x40
 8002b0e:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8002b12:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_Init(GPIOB,&GPIO_InitStruct);
 8002b16:	4e1e      	ldr	r6, [pc, #120]	; (8002b90 <myGPIO_Init+0xb8>)
 8002b18:	a901      	add	r1, sp, #4
 8002b1a:	4630      	mov	r0, r6
 8002b1c:	f7fd fb76 	bl	800020c <GPIO_Init>
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 8002b20:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_7;
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8002b2a:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_Init(GPIOB,&GPIO_InitStruct);
 8002b2e:	a901      	add	r1, sp, #4
 8002b30:	4630      	mov	r0, r6
 8002b32:	f7fd fb6b 	bl	800020c <GPIO_Init>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8002b36:	4621      	mov	r1, r4
 8002b38:	2004      	movs	r0, #4
 8002b3a:	f7fd fc4d 	bl	80003d8 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;
 8002b3e:	2348      	movs	r3, #72	; 0x48
 8002b40:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_4;
 8002b44:	f8ad 5004 	strh.w	r5, [sp, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8002b48:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8002b4c:	4d11      	ldr	r5, [pc, #68]	; (8002b94 <myGPIO_Init+0xbc>)
 8002b4e:	a901      	add	r1, sp, #4
 8002b50:	4628      	mov	r0, r5
 8002b52:	f7fd fb5b 	bl	800020c <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPD;
 8002b56:	2628      	movs	r6, #40	; 0x28
 8002b58:	f88d 6007 	strb.w	r6, [sp, #7]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2;
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8002b62:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8002b66:	eb0d 0103 	add.w	r1, sp, r3
 8002b6a:	4628      	mov	r0, r5
 8002b6c:	f7fd fb4e 	bl	800020c <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPD;
 8002b70:	f88d 6007 	strb.w	r6, [sp, #7]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3;
 8002b74:	2308      	movs	r3, #8
 8002b76:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8002b7a:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8002b7e:	a901      	add	r1, sp, #4
 8002b80:	4628      	mov	r0, r5
 8002b82:	f7fd fb43 	bl	800020c <GPIO_Init>
}
 8002b86:	b002      	add	sp, #8
 8002b88:	bd70      	pop	{r4, r5, r6, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40011000 	.word	0x40011000
 8002b90:	40010c00 	.word	0x40010c00
 8002b94:	40010800 	.word	0x40010800

08002b98 <sys_init>:
//         configuration. User can add here some code to deal with this error */
//  }
//}

void sys_init(void)
{
 8002b98:	b508      	push	{r3, lr}

	//SetClock();
	myGPIO_Init();
 8002b9a:	f7ff ff9d 	bl	8002ad8 <myGPIO_Init>
	sys_timer_init();
 8002b9e:	f000 f8df 	bl	8002d60 <sys_timer_init>
	myUSART3_Init();
 8002ba2:	f000 faa9 	bl	80030f8 <myUSART3_Init>
	myUSART1_Init();
 8002ba6:	f000 faf3 	bl	8003190 <myUSART1_Init>
	mySPI2_Init();
 8002baa:	f000 f805 	bl	8002bb8 <mySPI2_Init>
	mySPI1_Init();
 8002bae:	f000 f871 	bl	8002c94 <mySPI1_Init>
	//Sys_Delay(2000);
	RTC_Init();
 8002bb2:	f000 fa61 	bl	8003078 <RTC_Init>
 8002bb6:	bd08      	pop	{r3, pc}

08002bb8 <mySPI2_Init>:
 */
#include "sys_spi.h"
#include "stm32f10x_spi.h"

void mySPI2_Init(void)
{
 8002bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002bbc:	b087      	sub	sp, #28
	SPI_InitTypeDef SPI_InitStruct;
	GPIO_InitTypeDef GPIO_InitStruct;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	2004      	movs	r0, #4
 8002bc2:	f7fd fc09 	bl	80003d8 <RCC_APB2PeriphClockCmd>
	//GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;//GPIO_Mode_Out_PP;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 8002bc6:	2310      	movs	r3, #16
 8002bc8:	f88d 3003 	strb.w	r3, [sp, #3]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_8;
 8002bcc:	f44f 7980 	mov.w	r9, #256	; 0x100
 8002bd0:	f8ad 9000 	strh.w	r9, [sp]
	//GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;//GPIO_Speed_10MHz;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8002bd4:	2401      	movs	r4, #1
 8002bd6:	f88d 4002 	strb.w	r4, [sp, #2]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8002bda:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8002c90 <mySPI2_Init+0xd8>
 8002bde:	4669      	mov	r1, sp
 8002be0:	4640      	mov	r0, r8
 8002be2:	f7fd fb13 	bl	800020c <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 8002be6:	2518      	movs	r5, #24
 8002be8:	f88d 5003 	strb.w	r5, [sp, #3]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_13;
 8002bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bf0:	f8ad 3000 	strh.w	r3, [sp]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8002bf4:	f88d 4002 	strb.w	r4, [sp, #2]
	GPIO_Init(GPIOB,&GPIO_InitStruct);
 8002bf8:	4e23      	ldr	r6, [pc, #140]	; (8002c88 <mySPI2_Init+0xd0>)
 8002bfa:	4669      	mov	r1, sp
 8002bfc:	4630      	mov	r0, r6
 8002bfe:	f7fd fb05 	bl	800020c <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPD;
 8002c02:	2328      	movs	r3, #40	; 0x28
 8002c04:	f88d 3003 	strb.w	r3, [sp, #3]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_14;
 8002c08:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 8002c0c:	f8ad 7000 	strh.w	r7, [sp]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8002c10:	f88d 4002 	strb.w	r4, [sp, #2]
	GPIO_Init(GPIOB,&GPIO_InitStruct);
 8002c14:	4669      	mov	r1, sp
 8002c16:	4630      	mov	r0, r6
 8002c18:	f7fd faf8 	bl	800020c <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 8002c1c:	f88d 5003 	strb.w	r5, [sp, #3]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_15;
 8002c20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c24:	f8ad 3000 	strh.w	r3, [sp]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8002c28:	f88d 4002 	strb.w	r4, [sp, #2]
	GPIO_Init(GPIOB,&GPIO_InitStruct);
 8002c2c:	4669      	mov	r1, sp
 8002c2e:	4630      	mov	r0, r6
 8002c30:	f7fd faec 	bl	800020c <GPIO_Init>

	GPIO_ResetBits(GPIOA,GPIO_Pin_8);
 8002c34:	4649      	mov	r1, r9
 8002c36:	4640      	mov	r0, r8
 8002c38:	f7fd fb40 	bl	80002bc <GPIO_ResetBits>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8002c3c:	4621      	mov	r1, r4
 8002c3e:	4638      	mov	r0, r7
 8002c40:	f7fd fbd8 	bl	80003f4 <RCC_APB1PeriphClockCmd>

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8002c44:	2300      	movs	r3, #0
 8002c46:	f8ad 3004 	strh.w	r3, [sp, #4]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8002c4a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c4e:	f8ad 2006 	strh.w	r2, [sp, #6]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 8002c52:	f8ad 3008 	strh.w	r3, [sp, #8]
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8002c56:	f8ad 300a 	strh.w	r3, [sp, #10]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8002c5a:	f8ad 300c 	strh.w	r3, [sp, #12]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set;
 8002c5e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002c62:	f8ad 200e 	strh.w	r2, [sp, #14]
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;//SPI_BaudRatePrescaler_256;
 8002c66:	f8ad 5010 	strh.w	r5, [sp, #16]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 8002c6a:	f8ad 3012 	strh.w	r3, [sp, #18]

	SPI_Init(SPI2, &SPI_InitStruct);
 8002c6e:	4d07      	ldr	r5, [pc, #28]	; (8002c8c <mySPI2_Init+0xd4>)
 8002c70:	a901      	add	r1, sp, #4
 8002c72:	4628      	mov	r0, r5
 8002c74:	f7fd fc66 	bl	8000544 <SPI_Init>

	SPI_Cmd(SPI2, ENABLE);
 8002c78:	4621      	mov	r1, r4
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	f7fd fc88 	bl	8000590 <SPI_Cmd>
}
 8002c80:	b007      	add	sp, #28
 8002c82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c86:	bf00      	nop
 8002c88:	40010c00 	.word	0x40010c00
 8002c8c:	40003800 	.word	0x40003800
 8002c90:	40010800 	.word	0x40010800

08002c94 <mySPI1_Init>:


void mySPI1_Init(void)
{
 8002c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c96:	b087      	sub	sp, #28
	SPI_InitTypeDef SPI_InitStruct;
	GPIO_InitTypeDef GPIO_InitStruct;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8002c98:	2101      	movs	r1, #1
 8002c9a:	2008      	movs	r0, #8
 8002c9c:	f7fd fb9c 	bl	80003d8 <RCC_APB2PeriphClockCmd>
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 8002ca0:	2310      	movs	r3, #16
 8002ca2:	f88d 3003 	strb.w	r3, [sp, #3]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
 8002ca6:	2401      	movs	r4, #1
 8002ca8:	f8ad 4000 	strh.w	r4, [sp]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8002cac:	f88d 4002 	strb.w	r4, [sp, #2]
	GPIO_Init(GPIOB,&GPIO_InitStruct);
 8002cb0:	4f28      	ldr	r7, [pc, #160]	; (8002d54 <mySPI1_Init+0xc0>)
 8002cb2:	4669      	mov	r1, sp
 8002cb4:	4638      	mov	r0, r7
 8002cb6:	f7fd faa9 	bl	800020c <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 8002cba:	2518      	movs	r5, #24
 8002cbc:	f88d 5003 	strb.w	r5, [sp, #3]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_5;
 8002cc0:	2320      	movs	r3, #32
 8002cc2:	f8ad 3000 	strh.w	r3, [sp]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8002cc6:	f88d 4002 	strb.w	r4, [sp, #2]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8002cca:	4e23      	ldr	r6, [pc, #140]	; (8002d58 <mySPI1_Init+0xc4>)
 8002ccc:	4669      	mov	r1, sp
 8002cce:	4630      	mov	r0, r6
 8002cd0:	f7fd fa9c 	bl	800020c <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPD;
 8002cd4:	2328      	movs	r3, #40	; 0x28
 8002cd6:	f88d 3003 	strb.w	r3, [sp, #3]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6;
 8002cda:	2340      	movs	r3, #64	; 0x40
 8002cdc:	f8ad 3000 	strh.w	r3, [sp]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8002ce0:	f88d 4002 	strb.w	r4, [sp, #2]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8002ce4:	4669      	mov	r1, sp
 8002ce6:	4630      	mov	r0, r6
 8002ce8:	f7fd fa90 	bl	800020c <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 8002cec:	f88d 5003 	strb.w	r5, [sp, #3]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_7;
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	f8ad 3000 	strh.w	r3, [sp]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8002cf6:	f88d 4002 	strb.w	r4, [sp, #2]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8002cfa:	4669      	mov	r1, sp
 8002cfc:	4630      	mov	r0, r6
 8002cfe:	f7fd fa85 	bl	800020c <GPIO_Init>

	GPIO_ResetBits(GPIOB,GPIO_Pin_0);
 8002d02:	4621      	mov	r1, r4
 8002d04:	4638      	mov	r0, r7
 8002d06:	f7fd fad9 	bl	80002bc <GPIO_ResetBits>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002d10:	f7fd fb62 	bl	80003d8 <RCC_APB2PeriphClockCmd>

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f8ad 3004 	strh.w	r3, [sp, #4]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8002d1a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d1e:	f8ad 2006 	strh.w	r2, [sp, #6]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 8002d22:	f8ad 3008 	strh.w	r3, [sp, #8]
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8002d26:	f8ad 300a 	strh.w	r3, [sp, #10]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8002d2a:	f8ad 300c 	strh.w	r3, [sp, #12]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set;
 8002d2e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002d32:	f8ad 200e 	strh.w	r2, [sp, #14]
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;//SPI_BaudRatePrescaler_256;
 8002d36:	f8ad 5010 	strh.w	r5, [sp, #16]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 8002d3a:	f8ad 3012 	strh.w	r3, [sp, #18]

	SPI_Init(SPI1, &SPI_InitStruct);
 8002d3e:	4d07      	ldr	r5, [pc, #28]	; (8002d5c <mySPI1_Init+0xc8>)
 8002d40:	a901      	add	r1, sp, #4
 8002d42:	4628      	mov	r0, r5
 8002d44:	f7fd fbfe 	bl	8000544 <SPI_Init>

	SPI_Cmd(SPI1, ENABLE);
 8002d48:	4621      	mov	r1, r4
 8002d4a:	4628      	mov	r0, r5
 8002d4c:	f7fd fc20 	bl	8000590 <SPI_Cmd>
}
 8002d50:	b007      	add	sp, #28
 8002d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d54:	40010c00 	.word	0x40010c00
 8002d58:	40010800 	.word	0x40010800
 8002d5c:	40013000 	.word	0x40013000

08002d60 <sys_timer_init>:
#include "stm32f10x_tim.h"
#include "calendar.h"
#include "sys_usart.h"
volatile uint32_t systick = 0;
volatile uint8_t led1 = 0;
void sys_timer_init(void) {
 8002d60:	b510      	push	{r4, lr}
 8002d62:	b084      	sub	sp, #16
	TIM_TimeBaseInitTypeDef TIM_InitStruct;
	NVIC_InitTypeDef NVIC_InitStructure;
	RCC_APB1PeriphClockCmd(RCC_APB1ENR_TIM2EN, ENABLE);
 8002d64:	2101      	movs	r1, #1
 8002d66:	4608      	mov	r0, r1
 8002d68:	f7fd fb44 	bl	80003f4 <RCC_APB1PeriphClockCmd>

	TIM_InitStruct.TIM_ClockDivision = TIM_CKD_DIV4;
 8002d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d70:	f8ad 300a 	strh.w	r3, [sp, #10]
	TIM_InitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8002d74:	2400      	movs	r4, #0
 8002d76:	f8ad 4006 	strh.w	r4, [sp, #6]
	//TIM_InitStruct.TIM_Period = 4000;
	TIM_InitStruct.TIM_Period = 12000;
 8002d7a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8002d7e:	f8ad 3008 	strh.w	r3, [sp, #8]
	TIM_InitStruct.TIM_Prescaler = 5;
 8002d82:	a904      	add	r1, sp, #16
 8002d84:	2305      	movs	r3, #5
 8002d86:	f821 3d0c 	strh.w	r3, [r1, #-12]!
	//TIM_InitStruct.TIM_RepetitionCounter = 2;
	TIM_TimeBaseInit(TIM2, &TIM_InitStruct);
 8002d8a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d8e:	f7fd fc0d 	bl	80005ac <TIM_TimeBaseInit>

	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn; /*TIM3 interrupt*/
 8002d92:	231c      	movs	r3, #28
 8002d94:	f88d 3000 	strb.w	r3, [sp]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; /*Preemptive priority level 0*/
 8002d98:	f88d 4001 	strb.w	r4, [sp, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3; /*From the priority level 3*/
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	f88d 3002 	strb.w	r3, [sp, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; /*The IRQ channel is enabled*/
 8002da2:	2401      	movs	r4, #1
 8002da4:	f88d 4003 	strb.w	r4, [sp, #3]
	NVIC_Init(&NVIC_InitStructure);
 8002da8:	4668      	mov	r0, sp
 8002daa:	f7fd f9d7 	bl	800015c <NVIC_Init>

	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8002dae:	4622      	mov	r2, r4
 8002db0:	4621      	mov	r1, r4
 8002db2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002db6:	f7fd fc51 	bl	800065c <TIM_ITConfig>

	TIM_Cmd(TIM2, ENABLE);
 8002dba:	4621      	mov	r1, r4
 8002dbc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002dc0:	f7fd fc3e 	bl	8000640 <TIM_Cmd>

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8002dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dc8:	4b01      	ldr	r3, [pc, #4]	; (8002dd0 <sys_timer_init+0x70>)
 8002dca:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(TIM2_IRQn);

}
 8002dcc:	b004      	add	sp, #16
 8002dce:	bd10      	pop	{r4, pc}
 8002dd0:	e000e100 	.word	0xe000e100

08002dd4 <Sys_GetTick>:
	tickstart = Sys_GetTick();
	while ((Sys_GetTick() - tickstart) < Delay) {
	}
}
uint32_t Sys_GetTick() {
	return systick;
 8002dd4:	4b01      	ldr	r3, [pc, #4]	; (8002ddc <Sys_GetTick+0x8>)
 8002dd6:	6818      	ldr	r0, [r3, #0]
}
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	20000a98 	.word	0x20000a98

08002de0 <Sys_Delay>:
	TIM_Cmd(TIM2, ENABLE);
	NVIC_EnableIRQ(TIM2_IRQn);

}

void Sys_Delay(uint32_t Delay) {
 8002de0:	b538      	push	{r3, r4, r5, lr}
 8002de2:	4605      	mov	r5, r0
	uint32_t tickstart = 0;
	tickstart = Sys_GetTick();
 8002de4:	f7ff fff6 	bl	8002dd4 <Sys_GetTick>
 8002de8:	4604      	mov	r4, r0
	while ((Sys_GetTick() - tickstart) < Delay) {
 8002dea:	f7ff fff3 	bl	8002dd4 <Sys_GetTick>
 8002dee:	1b00      	subs	r0, r0, r4
 8002df0:	42a8      	cmp	r0, r5
 8002df2:	d3fa      	bcc.n	8002dea <Sys_Delay+0xa>
	}
}
 8002df4:	bd38      	pop	{r3, r4, r5, pc}
 8002df6:	bf00      	nop

08002df8 <delayMicroseconds>:
void delayMicroseconds(uint16_t Delay)
{
 8002df8:	b538      	push	{r3, r4, r5, lr}
 8002dfa:	4605      	mov	r5, r0
	uint16_t tickstart = 0;
	tickstart = Sys_GetTick();
 8002dfc:	f7ff ffea 	bl	8002dd4 <Sys_GetTick>
 8002e00:	4604      	mov	r4, r0
	while ((Sys_GetTick() - tickstart) < Delay) {
 8002e02:	f7ff ffe7 	bl	8002dd4 <Sys_GetTick>
 8002e06:	b2a3      	uxth	r3, r4
 8002e08:	1ac0      	subs	r0, r0, r3
 8002e0a:	42a8      	cmp	r0, r5
 8002e0c:	d3f9      	bcc.n	8002e02 <delayMicroseconds+0xa>
	}
}
 8002e0e:	bd38      	pop	{r3, r4, r5, pc}

08002e10 <TIM2_IRQHandler>:
uint32_t Sys_GetTick() {
	return systick;
}

void TIM2_IRQHandler(void) {
 8002e10:	b508      	push	{r3, lr}
	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) /*Check the TIM3 update interrupt occurs or not*/
 8002e12:	2101      	movs	r1, #1
 8002e14:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e18:	f7fd fc2c 	bl	8000674 <TIM_GetITStatus>
 8002e1c:	b1a8      	cbz	r0, 8002e4a <TIM2_IRQHandler+0x3a>
	{
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update); /*Remove TIMx update interrupt flag */
 8002e1e:	2101      	movs	r1, #1
 8002e20:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e24:	f7fd fc32 	bl	800068c <TIM_ClearITPendingBit>
        led1 = !led1;
 8002e28:	4b08      	ldr	r3, [pc, #32]	; (8002e4c <TIM2_IRQHandler+0x3c>)
 8002e2a:	781a      	ldrb	r2, [r3, #0]
 8002e2c:	f012 0fff 	tst.w	r2, #255	; 0xff
 8002e30:	bf0c      	ite	eq
 8002e32:	2201      	moveq	r2, #1
 8002e34:	2200      	movne	r2, #0
 8002e36:	701a      	strb	r2, [r3, #0]
        GPIO_WriteBit(GPIOB,GPIO_Pin_7,led1);
 8002e38:	781a      	ldrb	r2, [r3, #0]
 8002e3a:	2180      	movs	r1, #128	; 0x80
 8002e3c:	4804      	ldr	r0, [pc, #16]	; (8002e50 <TIM2_IRQHandler+0x40>)
 8002e3e:	f7fd fa3f 	bl	80002c0 <GPIO_WriteBit>
		systick++;
 8002e42:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <TIM2_IRQHandler+0x44>)
 8002e44:	6813      	ldr	r3, [r2, #0]
 8002e46:	3301      	adds	r3, #1
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	bd08      	pop	{r3, pc}
 8002e4c:	20000a94 	.word	0x20000a94
 8002e50:	40010c00 	.word	0x40010c00
 8002e54:	20000a98 	.word	0x20000a98

08002e58 <RTC_Configuration>:

	  /* Display time in infinite loop */
	  //Time_Show();
}
void RTC_Configuration(void)
{
 8002e58:	b508      	push	{r3, lr}
  /* Enable PWR and BKP clocks */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
 8002e60:	f7fd fac8 	bl	80003f4 <RCC_APB1PeriphClockCmd>

  /* Allow access to BKP Domain */
  PWR_BackupAccessCmd(ENABLE);
 8002e64:	2001      	movs	r0, #1
 8002e66:	f7fd fa31 	bl	80002cc <PWR_BackupAccessCmd>

  /* Reset Backup Domain */
  BKP_DeInit();
 8002e6a:	f7fd f9a9 	bl	80001c0 <BKP_DeInit>

  /* Enable LSE */
  RCC_LSEConfig(RCC_LSE_ON);
 8002e6e:	2001      	movs	r0, #1
 8002e70:	f7fd fa32 	bl	80002d8 <RCC_LSEConfig>
  /* Wait till LSE is ready */
  while (RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET)
 8002e74:	2041      	movs	r0, #65	; 0x41
 8002e76:	f7fd fad1 	bl	800041c <RCC_GetFlagStatus>
 8002e7a:	2800      	cmp	r0, #0
 8002e7c:	d0fa      	beq.n	8002e74 <RTC_Configuration+0x1c>
  {}

  /* Select LSE as RTC Clock Source */
  RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);
 8002e7e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002e82:	f7fd fa3d 	bl	8000300 <RCC_RTCCLKConfig>

  /* Enable RTC Clock */
  RCC_RTCCLKCmd(ENABLE);
 8002e86:	2001      	movs	r0, #1
 8002e88:	f7fd fa42 	bl	8000310 <RCC_RTCCLKCmd>

  /* Wait for RTC registers synchronization */
  RTC_WaitForSynchro();
 8002e8c:	f7fd fb48 	bl	8000520 <RTC_WaitForSynchro>

  /* Wait until last write operation on RTC registers has finished */
  RTC_WaitForLastTask();
 8002e90:	f7fd fb3c 	bl	800050c <RTC_WaitForLastTask>

  /* Enable the RTC Second */
  RTC_ITConfig(RTC_IT_SEC, ENABLE);
 8002e94:	2101      	movs	r1, #1
 8002e96:	4608      	mov	r0, r1
 8002e98:	f7fd fae2 	bl	8000460 <RTC_ITConfig>

  /* Wait until last write operation on RTC registers has finished */
  RTC_WaitForLastTask();
 8002e9c:	f7fd fb36 	bl	800050c <RTC_WaitForLastTask>

  /* Set RTC prescaler: set RTC period to 1sec */
  //RTC_SetPrescaler(32767); /* RTC period = RTCCLK/RTC_PR = (32.768 KHz)/(32767+1) */
  RTC_SetPrescaler(32773); /* RTC period = RTCCLK/RTC_PR = (32.768 KHz)/(32767+1) */
 8002ea0:	f248 0005 	movw	r0, #32773	; 0x8005
 8002ea4:	f7fd fb22 	bl	80004ec <RTC_SetPrescaler>
  /* Wait until last write operation on RTC registers has finished */
  RTC_WaitForLastTask();
 8002ea8:	f7fd fb30 	bl	800050c <RTC_WaitForLastTask>
 8002eac:	bd08      	pop	{r3, pc}
 8002eae:	bf00      	nop

08002eb0 <USART_Scanf>:
}

uint16_t USART_Scanf(uint16_t value,uint8_t len)
{
 8002eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	4607      	mov	r7, r0
 8002eb6:	460e      	mov	r6, r1
	uint8_t index = 0;
	uint8_t tmp[4] = {0, 0, 0, 0};
 8002eb8:	2500      	movs	r5, #0
 8002eba:	9501      	str	r5, [sp, #4]
	uint16_t ret_val = 0;

	while (index < len)
 8002ebc:	e01f      	b.n	8002efe <USART_Scanf+0x4e>
	{
		/* Loop until RXNE = 1 */
		while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET)
 8002ebe:	2120      	movs	r1, #32
 8002ec0:	482c      	ldr	r0, [pc, #176]	; (8002f74 <USART_Scanf+0xc4>)
 8002ec2:	f7fd fc61 	bl	8000788 <USART_GetFlagStatus>
 8002ec6:	2800      	cmp	r0, #0
 8002ec8:	d0f9      	beq.n	8002ebe <USART_Scanf+0xe>
		{}
		tmp[index] = (USART_ReceiveData(USART1));
 8002eca:	482a      	ldr	r0, [pc, #168]	; (8002f74 <USART_Scanf+0xc4>)
 8002ecc:	f7fd fc58 	bl	8000780 <USART_ReceiveData>
 8002ed0:	b2c0      	uxtb	r0, r0
 8002ed2:	ab02      	add	r3, sp, #8
 8002ed4:	442b      	add	r3, r5
 8002ed6:	f803 0c04 	strb.w	r0, [r3, #-4]
		USART1_Send(tmp[index++]);
 8002eda:	1c6c      	adds	r4, r5, #1
 8002edc:	b2e4      	uxtb	r4, r4
 8002ede:	f000 f9a3 	bl	8003228 <USART1_Send>
		if ((tmp[index - 1] < 0x30) || (tmp[index - 1] > 0x39))
 8002ee2:	1e63      	subs	r3, r4, #1
 8002ee4:	aa02      	add	r2, sp, #8
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8002eec:	3b30      	subs	r3, #48	; 0x30
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b09      	cmp	r3, #9
 8002ef2:	d903      	bls.n	8002efc <USART_Scanf+0x4c>
		{
			printf("\n\rPlease enter valid number between 0 and 9");
 8002ef4:	4820      	ldr	r0, [pc, #128]	; (8002f78 <USART_Scanf+0xc8>)
 8002ef6:	f000 fb1d 	bl	8003534 <iprintf>
 8002efa:	e000      	b.n	8002efe <USART_Scanf+0x4e>
	{
		/* Loop until RXNE = 1 */
		while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET)
		{}
		tmp[index] = (USART_ReceiveData(USART1));
		USART1_Send(tmp[index++]);
 8002efc:	4625      	mov	r5, r4
{
	uint8_t index = 0;
	uint8_t tmp[4] = {0, 0, 0, 0};
	uint16_t ret_val = 0;

	while (index < len)
 8002efe:	42b5      	cmp	r5, r6
 8002f00:	d3dd      	bcc.n	8002ebe <USART_Scanf+0xe>
			printf("\n\rPlease enter valid number between 0 and 9");
			index--;
		}
	}
	/* Calculate the Corresponding value */
	if(len == 4){
 8002f02:	2e04      	cmp	r6, #4
 8002f04:	d11d      	bne.n	8002f42 <USART_Scanf+0x92>
		ret_val = (tmp[3] - 0x30) + ((tmp[2] - 0x30) * 10) + ((tmp[1] - 0x30) * 100) + ((tmp[0] - 0x30) * 1000);
 8002f06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002f0a:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8002f0e:	3830      	subs	r0, #48	; 0x30
 8002f10:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002f14:	3a30      	subs	r2, #48	; 0x30
 8002f16:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002f1a:	3930      	subs	r1, #48	; 0x30
 8002f1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f20:	0044      	lsls	r4, r0, #1
 8002f22:	4423      	add	r3, r4
 8002f24:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002f28:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002f2c:	0090      	lsls	r0, r2, #2
 8002f2e:	4403      	add	r3, r0
 8002f30:	ebc1 1241 	rsb	r2, r1, r1, lsl #5
 8002f34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8002f38:	00c8      	lsls	r0, r1, #3
 8002f3a:	4418      	add	r0, r3
 8002f3c:	3830      	subs	r0, #48	; 0x30
 8002f3e:	b280      	uxth	r0, r0
 8002f40:	e00e      	b.n	8002f60 <USART_Scanf+0xb0>
	}else if(len == 2){
 8002f42:	2e02      	cmp	r6, #2
 8002f44:	d10b      	bne.n	8002f5e <USART_Scanf+0xae>
		ret_val = (tmp[1] - 0x30) + ((tmp[0] - 0x30) * 10);
 8002f46:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002f4a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002f4e:	3a30      	subs	r2, #48	; 0x30
 8002f50:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002f54:	0050      	lsls	r0, r2, #1
 8002f56:	4418      	add	r0, r3
 8002f58:	3830      	subs	r0, #48	; 0x30
 8002f5a:	b280      	uxth	r0, r0
 8002f5c:	e000      	b.n	8002f60 <USART_Scanf+0xb0>

uint16_t USART_Scanf(uint16_t value,uint8_t len)
{
	uint8_t index = 0;
	uint8_t tmp[4] = {0, 0, 0, 0};
	uint16_t ret_val = 0;
 8002f5e:	2000      	movs	r0, #0
		ret_val = (tmp[3] - 0x30) + ((tmp[2] - 0x30) * 10) + ((tmp[1] - 0x30) * 100) + ((tmp[0] - 0x30) * 1000);
	}else if(len == 2){
		ret_val = (tmp[1] - 0x30) + ((tmp[0] - 0x30) * 10);
	}
	/* Checks */
	if (ret_val > value)
 8002f60:	42b8      	cmp	r0, r7
 8002f62:	d904      	bls.n	8002f6e <USART_Scanf+0xbe>
	{
		printf("\n\rPlease enter valid number between 0 and %d ", value);
 8002f64:	4639      	mov	r1, r7
 8002f66:	4805      	ldr	r0, [pc, #20]	; (8002f7c <USART_Scanf+0xcc>)
 8002f68:	f000 fae4 	bl	8003534 <iprintf>
		return 0xFF;
 8002f6c:	20ff      	movs	r0, #255	; 0xff
	}
	return ret_val;
}
 8002f6e:	b003      	add	sp, #12
 8002f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40013800 	.word	0x40013800
 8002f78:	08006120 	.word	0x08006120
 8002f7c:	0800614c 	.word	0x0800614c

08002f80 <Time_Regulate>:
  * @brief  Returns the time entered by user, using Hyperterminal.
  * @param  None
  * @retval Current time RTC counter value
  */
uint32_t Time_Regulate(void)
{
 8002f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f84:	b082      	sub	sp, #8
	uint16_t Tmp_YY = 0xFFFF;
	uint8_t Tmp_MO = 0xFF, Tmp_DD = 0xFF, Tmp_HH = 0xFF, Tmp_MM = 0xFF, Tmp_SS = 0xFF;

	printf("\r\n==============Time Settings=====================================");
 8002f86:	482f      	ldr	r0, [pc, #188]	; (8003044 <Time_Regulate+0xc4>)
 8002f88:	f000 fad4 	bl	8003534 <iprintf>
	printf("\r\n  Please Set Year:");
 8002f8c:	482e      	ldr	r0, [pc, #184]	; (8003048 <Time_Regulate+0xc8>)
 8002f8e:	f000 fad1 	bl	8003534 <iprintf>
  * @param  None
  * @retval Current time RTC counter value
  */
uint32_t Time_Regulate(void)
{
	uint16_t Tmp_YY = 0xFFFF;
 8002f92:	f64f 74ff 	movw	r4, #65535	; 0xffff
	uint8_t Tmp_MO = 0xFF, Tmp_DD = 0xFF, Tmp_HH = 0xFF, Tmp_MM = 0xFF, Tmp_SS = 0xFF;

	printf("\r\n==============Time Settings=====================================");
	printf("\r\n  Please Set Year:");
	while (Tmp_YY == 0xFFFF)
 8002f96:	e005      	b.n	8002fa4 <Time_Regulate+0x24>
	{
	 Tmp_YY = USART_Scanf(2099,4);
 8002f98:	2104      	movs	r1, #4
 8002f9a:	f640 0033 	movw	r0, #2099	; 0x833
 8002f9e:	f7ff ff87 	bl	8002eb0 <USART_Scanf>
 8002fa2:	4604      	mov	r4, r0
	uint16_t Tmp_YY = 0xFFFF;
	uint8_t Tmp_MO = 0xFF, Tmp_DD = 0xFF, Tmp_HH = 0xFF, Tmp_MM = 0xFF, Tmp_SS = 0xFF;

	printf("\r\n==============Time Settings=====================================");
	printf("\r\n  Please Set Year:");
	while (Tmp_YY == 0xFFFF)
 8002fa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fa8:	429c      	cmp	r4, r3
 8002faa:	d0f5      	beq.n	8002f98 <Time_Regulate+0x18>
	{
	 Tmp_YY = USART_Scanf(2099,4);
	}
	printf("\r\n  Please Set Month:");
 8002fac:	4827      	ldr	r0, [pc, #156]	; (800304c <Time_Regulate+0xcc>)
 8002fae:	f000 fac1 	bl	8003534 <iprintf>
  * @retval Current time RTC counter value
  */
uint32_t Time_Regulate(void)
{
	uint16_t Tmp_YY = 0xFFFF;
	uint8_t Tmp_MO = 0xFF, Tmp_DD = 0xFF, Tmp_HH = 0xFF, Tmp_MM = 0xFF, Tmp_SS = 0xFF;
 8002fb2:	25ff      	movs	r5, #255	; 0xff
	while (Tmp_YY == 0xFFFF)
	{
	 Tmp_YY = USART_Scanf(2099,4);
	}
	printf("\r\n  Please Set Month:");
	while (Tmp_MO == 0xFF)
 8002fb4:	e004      	b.n	8002fc0 <Time_Regulate+0x40>
	{
	 Tmp_MO = USART_Scanf(12,2);
 8002fb6:	2102      	movs	r1, #2
 8002fb8:	200c      	movs	r0, #12
 8002fba:	f7ff ff79 	bl	8002eb0 <USART_Scanf>
 8002fbe:	b2c5      	uxtb	r5, r0
	while (Tmp_YY == 0xFFFF)
	{
	 Tmp_YY = USART_Scanf(2099,4);
	}
	printf("\r\n  Please Set Month:");
	while (Tmp_MO == 0xFF)
 8002fc0:	2dff      	cmp	r5, #255	; 0xff
 8002fc2:	d0f8      	beq.n	8002fb6 <Time_Regulate+0x36>
	{
	 Tmp_MO = USART_Scanf(12,2);
	}
	printf("\r\n  Please Set Date:");
 8002fc4:	4822      	ldr	r0, [pc, #136]	; (8003050 <Time_Regulate+0xd0>)
 8002fc6:	f000 fab5 	bl	8003534 <iprintf>
  * @retval Current time RTC counter value
  */
uint32_t Time_Regulate(void)
{
	uint16_t Tmp_YY = 0xFFFF;
	uint8_t Tmp_MO = 0xFF, Tmp_DD = 0xFF, Tmp_HH = 0xFF, Tmp_MM = 0xFF, Tmp_SS = 0xFF;
 8002fca:	26ff      	movs	r6, #255	; 0xff
	while (Tmp_MO == 0xFF)
	{
	 Tmp_MO = USART_Scanf(12,2);
	}
	printf("\r\n  Please Set Date:");
	while (Tmp_DD == 0xFF)
 8002fcc:	e004      	b.n	8002fd8 <Time_Regulate+0x58>
	{
	 Tmp_DD = USART_Scanf(31,2);
 8002fce:	2102      	movs	r1, #2
 8002fd0:	201f      	movs	r0, #31
 8002fd2:	f7ff ff6d 	bl	8002eb0 <USART_Scanf>
 8002fd6:	b2c6      	uxtb	r6, r0
	while (Tmp_MO == 0xFF)
	{
	 Tmp_MO = USART_Scanf(12,2);
	}
	printf("\r\n  Please Set Date:");
	while (Tmp_DD == 0xFF)
 8002fd8:	2eff      	cmp	r6, #255	; 0xff
 8002fda:	d0f8      	beq.n	8002fce <Time_Regulate+0x4e>
	{
	 Tmp_DD = USART_Scanf(31,2);
	}
	printf("\r\n  Please Set Hours:");
 8002fdc:	481d      	ldr	r0, [pc, #116]	; (8003054 <Time_Regulate+0xd4>)
 8002fde:	f000 faa9 	bl	8003534 <iprintf>
  * @retval Current time RTC counter value
  */
uint32_t Time_Regulate(void)
{
	uint16_t Tmp_YY = 0xFFFF;
	uint8_t Tmp_MO = 0xFF, Tmp_DD = 0xFF, Tmp_HH = 0xFF, Tmp_MM = 0xFF, Tmp_SS = 0xFF;
 8002fe2:	27ff      	movs	r7, #255	; 0xff
	{
	 Tmp_DD = USART_Scanf(31,2);
	}
	printf("\r\n  Please Set Hours:");

	while (Tmp_HH == 0xFF)
 8002fe4:	e004      	b.n	8002ff0 <Time_Regulate+0x70>
	{
	Tmp_HH = USART_Scanf(23,2);
 8002fe6:	2102      	movs	r1, #2
 8002fe8:	2017      	movs	r0, #23
 8002fea:	f7ff ff61 	bl	8002eb0 <USART_Scanf>
 8002fee:	b2c7      	uxtb	r7, r0
	{
	 Tmp_DD = USART_Scanf(31,2);
	}
	printf("\r\n  Please Set Hours:");

	while (Tmp_HH == 0xFF)
 8002ff0:	2fff      	cmp	r7, #255	; 0xff
 8002ff2:	d0f8      	beq.n	8002fe6 <Time_Regulate+0x66>
	{
	Tmp_HH = USART_Scanf(23,2);
	}
	//printf(":  %d", Tmp_HH);
	printf("\r\n  Please Set Minutes:");
 8002ff4:	4818      	ldr	r0, [pc, #96]	; (8003058 <Time_Regulate+0xd8>)
 8002ff6:	f000 fa9d 	bl	8003534 <iprintf>
  * @retval Current time RTC counter value
  */
uint32_t Time_Regulate(void)
{
	uint16_t Tmp_YY = 0xFFFF;
	uint8_t Tmp_MO = 0xFF, Tmp_DD = 0xFF, Tmp_HH = 0xFF, Tmp_MM = 0xFF, Tmp_SS = 0xFF;
 8002ffa:	f04f 08ff 	mov.w	r8, #255	; 0xff
	{
	Tmp_HH = USART_Scanf(23,2);
	}
	//printf(":  %d", Tmp_HH);
	printf("\r\n  Please Set Minutes:");
	while (Tmp_MM == 0xFF)
 8002ffe:	e005      	b.n	800300c <Time_Regulate+0x8c>
	{
	Tmp_MM = USART_Scanf(59,2);
 8003000:	2102      	movs	r1, #2
 8003002:	203b      	movs	r0, #59	; 0x3b
 8003004:	f7ff ff54 	bl	8002eb0 <USART_Scanf>
 8003008:	fa5f f880 	uxtb.w	r8, r0
	{
	Tmp_HH = USART_Scanf(23,2);
	}
	//printf(":  %d", Tmp_HH);
	printf("\r\n  Please Set Minutes:");
	while (Tmp_MM == 0xFF)
 800300c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8003010:	d0f6      	beq.n	8003000 <Time_Regulate+0x80>
	{
	Tmp_MM = USART_Scanf(59,2);
	}
	//printf(":  %d", Tmp_MM);
	printf("\r\n  Please Set Seconds:");
 8003012:	4812      	ldr	r0, [pc, #72]	; (800305c <Time_Regulate+0xdc>)
 8003014:	f000 fa8e 	bl	8003534 <iprintf>
  * @retval Current time RTC counter value
  */
uint32_t Time_Regulate(void)
{
	uint16_t Tmp_YY = 0xFFFF;
	uint8_t Tmp_MO = 0xFF, Tmp_DD = 0xFF, Tmp_HH = 0xFF, Tmp_MM = 0xFF, Tmp_SS = 0xFF;
 8003018:	20ff      	movs	r0, #255	; 0xff
	{
	Tmp_MM = USART_Scanf(59,2);
	}
	//printf(":  %d", Tmp_MM);
	printf("\r\n  Please Set Seconds:");
	while (Tmp_SS == 0xFF)
 800301a:	e004      	b.n	8003026 <Time_Regulate+0xa6>
	{
	Tmp_SS = USART_Scanf(59,2);
 800301c:	2102      	movs	r1, #2
 800301e:	203b      	movs	r0, #59	; 0x3b
 8003020:	f7ff ff46 	bl	8002eb0 <USART_Scanf>
 8003024:	b2c0      	uxtb	r0, r0
	{
	Tmp_MM = USART_Scanf(59,2);
	}
	//printf(":  %d", Tmp_MM);
	printf("\r\n  Please Set Seconds:");
	while (Tmp_SS == 0xFF)
 8003026:	28ff      	cmp	r0, #255	; 0xff
 8003028:	d0f8      	beq.n	800301c <Time_Regulate+0x9c>
	Tmp_SS = USART_Scanf(59,2);
	}
	//printf(":  %d", Tmp_SS);


	return(set_RTC(Tmp_YY,  Tmp_MO,  Tmp_DD,  Tmp_HH,  Tmp_MM,  Tmp_SS));
 800302a:	9001      	str	r0, [sp, #4]
 800302c:	f8cd 8000 	str.w	r8, [sp]
 8003030:	463b      	mov	r3, r7
 8003032:	4632      	mov	r2, r6
 8003034:	4629      	mov	r1, r5
 8003036:	4620      	mov	r0, r4
 8003038:	f7fd fc58 	bl	80008ec <set_RTC>
	/* Return the value to store in RTC counter register */
	//return((Tmp_HH*3600 + Tmp_MM*60 + Tmp_SS));
}
 800303c:	b002      	add	sp, #8
 800303e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003042:	bf00      	nop
 8003044:	0800617c 	.word	0x0800617c
 8003048:	080061c0 	.word	0x080061c0
 800304c:	080061d8 	.word	0x080061d8
 8003050:	080061f0 	.word	0x080061f0
 8003054:	08006208 	.word	0x08006208
 8003058:	08006220 	.word	0x08006220
 800305c:	08006238 	.word	0x08006238

08003060 <Time_Adjust>:
  * @brief  Adjusts time.
  * @param  None
  * @retval None
  */
void Time_Adjust(void)
{
 8003060:	b510      	push	{r4, lr}
	uint32_t rtc_time;
	rtc_time = Time_Regulate();
 8003062:	f7ff ff8d 	bl	8002f80 <Time_Regulate>
 8003066:	4604      	mov	r4, r0
	/* Wait until last write operation on RTC registers has finished */
	RTC_WaitForLastTask();
 8003068:	f7fd fa50 	bl	800050c <RTC_WaitForLastTask>
	/* Change the current time */
	//Time_Regulate();
	RTC_SetCounter(rtc_time);
 800306c:	4620      	mov	r0, r4
 800306e:	f7fd fa2f 	bl	80004d0 <RTC_SetCounter>
	/* Wait until last write operation on RTC registers has finished */
	RTC_WaitForLastTask();
 8003072:	f7fd fa4b 	bl	800050c <RTC_WaitForLastTask>
 8003076:	bd10      	pop	{r4, pc}

08003078 <RTC_Init>:
        GPIO_WriteBit(GPIOB,GPIO_Pin_7,led1);
		systick++;
	}
}
void RTC_Init(void)
{
 8003078:	b508      	push	{r3, lr}
	  if (BKP_ReadBackupRegister(BKP_DR1) != 0xA5A5)
 800307a:	2004      	movs	r0, #4
 800307c:	f7fd f8b6 	bl	80001ec <BKP_ReadBackupRegister>
 8003080:	f24a 53a5 	movw	r3, #42405	; 0xa5a5
 8003084:	4298      	cmp	r0, r3
 8003086:	d00f      	beq.n	80030a8 <RTC_Init+0x30>
	  {
	    /* Backup data register value is not correct or not yet programmed (when
	       the first time the program is executed) */

	    printf("\r\n\n RTC not yet configured....");
 8003088:	4816      	ldr	r0, [pc, #88]	; (80030e4 <RTC_Init+0x6c>)
 800308a:	f000 fa53 	bl	8003534 <iprintf>

	    /* RTC Configuration */
	    RTC_Configuration();
 800308e:	f7ff fee3 	bl	8002e58 <RTC_Configuration>

	    printf("\r\n RTC configured....");
 8003092:	4815      	ldr	r0, [pc, #84]	; (80030e8 <RTC_Init+0x70>)
 8003094:	f000 fa4e 	bl	8003534 <iprintf>

	    /* Adjust time by values entered by the user on the hyperterminal */
	    Time_Adjust();
 8003098:	f7ff ffe2 	bl	8003060 <Time_Adjust>

	    BKP_WriteBackupRegister(BKP_DR1, 0xA5A5);
 800309c:	f24a 51a5 	movw	r1, #42405	; 0xa5a5
 80030a0:	2004      	movs	r0, #4
 80030a2:	f7fd f895 	bl	80001d0 <BKP_WriteBackupRegister>
 80030a6:	e019      	b.n	80030dc <RTC_Init+0x64>
	  }
	  else
	  {
	    /* Check if the Power On Reset flag is set */
	    if (RCC_GetFlagStatus(RCC_FLAG_PORRST) != RESET)
 80030a8:	207b      	movs	r0, #123	; 0x7b
 80030aa:	f7fd f9b7 	bl	800041c <RCC_GetFlagStatus>
 80030ae:	b118      	cbz	r0, 80030b8 <RTC_Init+0x40>
	    {
	      printf("\r\n\n Power On Reset occurred....");
 80030b0:	480e      	ldr	r0, [pc, #56]	; (80030ec <RTC_Init+0x74>)
 80030b2:	f000 fa3f 	bl	8003534 <iprintf>
 80030b6:	e006      	b.n	80030c6 <RTC_Init+0x4e>
	    }
	    /* Check if the Pin Reset flag is set */
	    else if (RCC_GetFlagStatus(RCC_FLAG_PINRST) != RESET)
 80030b8:	207a      	movs	r0, #122	; 0x7a
 80030ba:	f7fd f9af 	bl	800041c <RCC_GetFlagStatus>
 80030be:	b110      	cbz	r0, 80030c6 <RTC_Init+0x4e>
	    {
	      printf("\r\n\n External Reset occurred....");
 80030c0:	480b      	ldr	r0, [pc, #44]	; (80030f0 <RTC_Init+0x78>)
 80030c2:	f000 fa37 	bl	8003534 <iprintf>
	    }

	    printf("\r\n No need to configure RTC....");
 80030c6:	480b      	ldr	r0, [pc, #44]	; (80030f4 <RTC_Init+0x7c>)
 80030c8:	f000 fa34 	bl	8003534 <iprintf>
	    /* Wait for RTC registers synchronization */
	    RTC_WaitForSynchro();
 80030cc:	f7fd fa28 	bl	8000520 <RTC_WaitForSynchro>

	    /* Enable the RTC Second */
	    RTC_ITConfig(RTC_IT_SEC, ENABLE);
 80030d0:	2101      	movs	r1, #1
 80030d2:	4608      	mov	r0, r1
 80030d4:	f7fd f9c4 	bl	8000460 <RTC_ITConfig>
	    /* Wait until last write operation on RTC registers has finished */
	    RTC_WaitForLastTask();
 80030d8:	f7fd fa18 	bl	800050c <RTC_WaitForLastTask>
	  /* Enable RTC Clock Output on Tamper Pin */
	  BKP_RTCOutputConfig(BKP_RTCOutputSource_CalibClock);
	#endif

	  /* Clear reset flags */
	  RCC_ClearFlag();
 80030dc:	f7fd f9b8 	bl	8000450 <RCC_ClearFlag>
 80030e0:	bd08      	pop	{r3, pc}
 80030e2:	bf00      	nop
 80030e4:	08006250 	.word	0x08006250
 80030e8:	08006270 	.word	0x08006270
 80030ec:	08006288 	.word	0x08006288
 80030f0:	080062a8 	.word	0x080062a8
 80030f4:	080062c8 	.word	0x080062c8

080030f8 <myUSART3_Init>:

#include "sys_usart.h"
#include "stm32f10x_usart.h"

void myUSART3_Init(void)
{
 80030f8:	b530      	push	{r4, r5, lr}
 80030fa:	b087      	sub	sp, #28
	USART_InitTypeDef USART_InitStruct;
	GPIO_InitTypeDef GPIO_InitStruct;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80030fc:	2101      	movs	r1, #1
 80030fe:	2008      	movs	r0, #8
 8003100:	f7fd f96a 	bl	80003d8 <RCC_APB2PeriphClockCmd>
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 8003104:	2318      	movs	r3, #24
 8003106:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 800310a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800310e:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8003112:	2401      	movs	r4, #1
 8003114:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_Init(GPIOB,&GPIO_InitStruct);
 8003118:	4d1a      	ldr	r5, [pc, #104]	; (8003184 <myUSART3_Init+0x8c>)
 800311a:	a901      	add	r1, sp, #4
 800311c:	4628      	mov	r0, r5
 800311e:	f7fd f875 	bl	800020c <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003122:	2304      	movs	r3, #4
 8003124:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_11;
 8003128:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800312c:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8003130:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_Init(GPIOB,&GPIO_InitStruct);
 8003134:	a901      	add	r1, sp, #4
 8003136:	4628      	mov	r0, r5
 8003138:	f7fd f868 	bl	800020c <GPIO_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 800313c:	4621      	mov	r1, r4
 800313e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003142:	f7fd f957 	bl	80003f4 <RCC_APB1PeriphClockCmd>

	USART_InitStruct.USART_BaudRate = 115200;
 8003146:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800314a:	9302      	str	r3, [sp, #8]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 800314c:	2300      	movs	r3, #0
 800314e:	f8ad 300c 	strh.w	r3, [sp, #12]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8003152:	f8ad 300e 	strh.w	r3, [sp, #14]
	USART_InitStruct.USART_Parity = USART_Parity_No ;
 8003156:	f8ad 3010 	strh.w	r3, [sp, #16]
	USART_InitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800315a:	220c      	movs	r2, #12
 800315c:	f8ad 2012 	strh.w	r2, [sp, #18]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003160:	f8ad 3014 	strh.w	r3, [sp, #20]

	USART_Cmd(USART3, ENABLE);
 8003164:	f5a5 4544 	sub.w	r5, r5, #50176	; 0xc400
 8003168:	4621      	mov	r1, r4
 800316a:	4628      	mov	r0, r5
 800316c:	f7fd faf6 	bl	800075c <USART_Cmd>
	USART_Init(USART3,&USART_InitStruct);
 8003170:	a902      	add	r1, sp, #8
 8003172:	4628      	mov	r0, r5
 8003174:	f7fd fa8e 	bl	8000694 <USART_Init>
 8003178:	2280      	movs	r2, #128	; 0x80
 800317a:	4b03      	ldr	r3, [pc, #12]	; (8003188 <myUSART3_Init+0x90>)
 800317c:	605a      	str	r2, [r3, #4]
	/* Enable RXNE interrupt */
	//USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
	/* Enable USART3 global interrupt */
	NVIC_EnableIRQ(USART3_IRQn);

}
 800317e:	b007      	add	sp, #28
 8003180:	bd30      	pop	{r4, r5, pc}
 8003182:	bf00      	nop
 8003184:	40010c00 	.word	0x40010c00
 8003188:	e000e100 	.word	0xe000e100

0800318c <USART1_IRQHandler>:
	USART_SendData(USART3,data);
}


void USART1_IRQHandler (void)
{
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop

08003190 <myUSART1_Init>:

}

void myUSART1_Init(void)
{
 8003190:	b530      	push	{r4, r5, lr}
 8003192:	b087      	sub	sp, #28
	USART_InitTypeDef USART_InitStruct;
	GPIO_InitTypeDef GPIO_InitStruct;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8003194:	2101      	movs	r1, #1
 8003196:	2004      	movs	r0, #4
 8003198:	f7fd f91e 	bl	80003d8 <RCC_APB2PeriphClockCmd>
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 800319c:	2318      	movs	r3, #24
 800319e:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_9;
 80031a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031a6:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 80031aa:	2401      	movs	r4, #1
 80031ac:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 80031b0:	4d1a      	ldr	r5, [pc, #104]	; (800321c <myUSART1_Init+0x8c>)
 80031b2:	a901      	add	r1, sp, #4
 80031b4:	4628      	mov	r0, r5
 80031b6:	f7fd f829 	bl	800020c <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80031ba:	2304      	movs	r3, #4
 80031bc:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 80031c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031c4:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 80031c8:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 80031cc:	a901      	add	r1, sp, #4
 80031ce:	4628      	mov	r0, r5
 80031d0:	f7fd f81c 	bl	800020c <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80031d4:	4621      	mov	r1, r4
 80031d6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80031da:	f7fd f8fd 	bl	80003d8 <RCC_APB2PeriphClockCmd>

	USART_InitStruct.USART_BaudRate = 115200;
 80031de:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80031e2:	9302      	str	r3, [sp, #8]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 80031e4:	2300      	movs	r3, #0
 80031e6:	f8ad 300c 	strh.w	r3, [sp, #12]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 80031ea:	f8ad 300e 	strh.w	r3, [sp, #14]
	USART_InitStruct.USART_Parity = USART_Parity_No ;
 80031ee:	f8ad 3010 	strh.w	r3, [sp, #16]
	USART_InitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80031f2:	220c      	movs	r2, #12
 80031f4:	f8ad 2012 	strh.w	r2, [sp, #18]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80031f8:	f8ad 3014 	strh.w	r3, [sp, #20]

	USART_Cmd(USART1, ENABLE);
 80031fc:	f505 5540 	add.w	r5, r5, #12288	; 0x3000
 8003200:	4621      	mov	r1, r4
 8003202:	4628      	mov	r0, r5
 8003204:	f7fd faaa 	bl	800075c <USART_Cmd>
	USART_Init(USART1,&USART_InitStruct);
 8003208:	a902      	add	r1, sp, #8
 800320a:	4628      	mov	r0, r5
 800320c:	f7fd fa42 	bl	8000694 <USART_Init>
 8003210:	2220      	movs	r2, #32
 8003212:	4b03      	ldr	r3, [pc, #12]	; (8003220 <myUSART1_Init+0x90>)
 8003214:	605a      	str	r2, [r3, #4]
	/* Enable RXNE interrupt */
	//USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
	/* Enable USART3 global interrupt */
	NVIC_EnableIRQ(USART1_IRQn);

}
 8003216:	b007      	add	sp, #28
 8003218:	bd30      	pop	{r4, r5, pc}
 800321a:	bf00      	nop
 800321c:	40010800 	.word	0x40010800
 8003220:	e000e100 	.word	0xe000e100

08003224 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop

08003228 <USART1_Send>:

}

void USART1_Send(uint8_t data)
{
 8003228:	b510      	push	{r4, lr}
 800322a:	4604      	mov	r4, r0
	while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);
 800322c:	2140      	movs	r1, #64	; 0x40
 800322e:	4805      	ldr	r0, [pc, #20]	; (8003244 <USART1_Send+0x1c>)
 8003230:	f7fd faaa 	bl	8000788 <USART_GetFlagStatus>
 8003234:	2800      	cmp	r0, #0
 8003236:	d0f9      	beq.n	800322c <USART1_Send+0x4>
	USART_SendData(USART1,data);
 8003238:	4621      	mov	r1, r4
 800323a:	4802      	ldr	r0, [pc, #8]	; (8003244 <USART1_Send+0x1c>)
 800323c:	f7fd fa9c 	bl	8000778 <USART_SendData>
 8003240:	bd10      	pop	{r4, pc}
 8003242:	bf00      	nop
 8003244:	40013800 	.word	0x40013800

08003248 <_sbrk>:
//	errno = ENOSYS;
//	return -1;
//}

void * _sbrk(int32_t incr)
{
 8003248:	4603      	mov	r3, r0
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 800324a:	4a05      	ldr	r2, [pc, #20]	; (8003260 <_sbrk+0x18>)
 800324c:	6812      	ldr	r2, [r2, #0]
 800324e:	b912      	cbnz	r2, 8003256 <_sbrk+0xe>
		heap_end = & end;
 8003250:	4904      	ldr	r1, [pc, #16]	; (8003264 <_sbrk+0x1c>)
 8003252:	4a03      	ldr	r2, [pc, #12]	; (8003260 <_sbrk+0x18>)
 8003254:	6011      	str	r1, [r2, #0]
	}

	prev_heap_end = heap_end;
 8003256:	4a02      	ldr	r2, [pc, #8]	; (8003260 <_sbrk+0x18>)
 8003258:	6810      	ldr	r0, [r2, #0]
	heap_end += incr;
 800325a:	4403      	add	r3, r0
 800325c:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
}
 800325e:	4770      	bx	lr
 8003260:	20000a9c 	.word	0x20000a9c
 8003264:	200013e0 	.word	0x200013e0

08003268 <_write>:
{
  errno = ENOSYS;
  return -1;
}
int _write(int fd, char *str, int len)
{
 8003268:	b570      	push	{r4, r5, r6, lr}
 800326a:	460e      	mov	r6, r1
 800326c:	4615      	mov	r5, r2
	int j;
	for(j=0;j<len;j++)
 800326e:	2400      	movs	r4, #0
 8003270:	e003      	b.n	800327a <_write+0x12>
	{
		USART1_Send(str[j]);
 8003272:	5d30      	ldrb	r0, [r6, r4]
 8003274:	f7ff ffd8 	bl	8003228 <USART1_Send>
  return -1;
}
int _write(int fd, char *str, int len)
{
	int j;
	for(j=0;j<len;j++)
 8003278:	3401      	adds	r4, #1
 800327a:	42ac      	cmp	r4, r5
 800327c:	dbf9      	blt.n	8003272 <_write+0xa>
	{
		USART1_Send(str[j]);
	}
	return 1;

}
 800327e:	2001      	movs	r0, #1
 8003280:	bd70      	pop	{r4, r5, r6, pc}
 8003282:	bf00      	nop

08003284 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8003284:	b082      	sub	sp, #8
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	9300      	str	r3, [sp, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800328c:	4a2c      	ldr	r2, [pc, #176]	; (8003340 <SetSysClockTo72+0xbc>)
 800328e:	6813      	ldr	r3, [r2, #0]
 8003290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003294:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003296:	4b2a      	ldr	r3, [pc, #168]	; (8003340 <SetSysClockTo72+0xbc>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	9300      	str	r3, [sp, #0]
    StartUpCounter++;  
 80032a0:	9b01      	ldr	r3, [sp, #4]
 80032a2:	3301      	adds	r3, #1
 80032a4:	9301      	str	r3, [sp, #4]
  //} while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
  } while((HSEStatus == 0) && (StartUpCounter != 0x2000));
 80032a6:	9b00      	ldr	r3, [sp, #0]
 80032a8:	b91b      	cbnz	r3, 80032b2 <SetSysClockTo72+0x2e>
 80032aa:	9b01      	ldr	r3, [sp, #4]
 80032ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b0:	d1f1      	bne.n	8003296 <SetSysClockTo72+0x12>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80032b2:	4b23      	ldr	r3, [pc, #140]	; (8003340 <SetSysClockTo72+0xbc>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80032ba:	d002      	beq.n	80032c2 <SetSysClockTo72+0x3e>
  {
    HSEStatus = (uint32_t)0x01;
 80032bc:	2301      	movs	r3, #1
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	e001      	b.n	80032c6 <SetSysClockTo72+0x42>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80032c2:	2300      	movs	r3, #0
 80032c4:	9300      	str	r3, [sp, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80032c6:	9b00      	ldr	r3, [sp, #0]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d136      	bne.n	800333a <SetSysClockTo72+0xb6>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80032cc:	4b1d      	ldr	r3, [pc, #116]	; (8003344 <SetSysClockTo72+0xc0>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	f042 0210 	orr.w	r2, r2, #16
 80032d4:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	f022 0203 	bic.w	r2, r2, #3
 80032dc:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	f042 0202 	orr.w	r2, r2, #2
 80032e4:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80032e6:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032f8:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8003300:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8003308:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003310:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003312:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <SetSysClockTo72+0xbc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800331a:	d0fa      	beq.n	8003312 <SetSysClockTo72+0x8e>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800331c:	4b08      	ldr	r3, [pc, #32]	; (8003340 <SetSysClockTo72+0xbc>)
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	f022 0203 	bic.w	r2, r2, #3
 8003324:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	f042 0202 	orr.w	r2, r2, #2
 800332c:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800332e:	4b04      	ldr	r3, [pc, #16]	; (8003340 <SetSysClockTo72+0xbc>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b08      	cmp	r3, #8
 8003338:	d1f9      	bne.n	800332e <SetSysClockTo72+0xaa>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 800333a:	b002      	add	sp, #8
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	40021000 	.word	0x40021000
 8003344:	40022000 	.word	0x40022000

08003348 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003348:	b508      	push	{r3, lr}
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800334a:	f7ff ff9b 	bl	8003284 <SetSysClockTo72>
 800334e:	bd08      	pop	{r3, pc}

08003350 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003350:	b508      	push	{r3, lr}
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003352:	4b10      	ldr	r3, [pc, #64]	; (8003394 <SystemInit+0x44>)
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800335c:	6859      	ldr	r1, [r3, #4]
 800335e:	4a0e      	ldr	r2, [pc, #56]	; (8003398 <SystemInit+0x48>)
 8003360:	400a      	ands	r2, r1
 8003362:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800336a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800336e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003376:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800337e:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8003380:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003384:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8003386:	f7ff ffdf 	bl	8003348 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800338a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800338e:	4b03      	ldr	r3, [pc, #12]	; (800339c <SystemInit+0x4c>)
 8003390:	609a      	str	r2, [r3, #8]
 8003392:	bd08      	pop	{r3, pc}
 8003394:	40021000 	.word	0x40021000
 8003398:	f8ff0000 	.word	0xf8ff0000
 800339c:	e000ed00 	.word	0xe000ed00

080033a0 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80033a0:	b470      	push	{r4, r5, r6}
	int div = 1;
 80033a2:	2301      	movs	r3, #1
	while (d/div >= base)
 80033a4:	e001      	b.n	80033aa <ts_itoa+0xa>
		div *= base;
 80033a6:	fb02 f303 	mul.w	r3, r2, r3
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 80033aa:	fbb1 f4f3 	udiv	r4, r1, r3
 80033ae:	4294      	cmp	r4, r2
 80033b0:	d2f9      	bcs.n	80033a6 <ts_itoa+0x6>
 80033b2:	e012      	b.n	80033da <ts_itoa+0x3a>
		div *= base;

	while (div != 0)
	{
		int num = d/div;
 80033b4:	fbb1 f4f3 	udiv	r4, r1, r3
		d = d%div;
 80033b8:	fb03 1114 	mls	r1, r3, r4, r1
		div /= base;
 80033bc:	fb93 f3f2 	sdiv	r3, r3, r2
		if (num > 9)
 80033c0:	2c09      	cmp	r4, #9
 80033c2:	dd05      	ble.n	80033d0 <ts_itoa+0x30>
			*((*buf)++) = (num-10) + 'A';
 80033c4:	6805      	ldr	r5, [r0, #0]
 80033c6:	1c6e      	adds	r6, r5, #1
 80033c8:	6006      	str	r6, [r0, #0]
 80033ca:	3437      	adds	r4, #55	; 0x37
 80033cc:	702c      	strb	r4, [r5, #0]
 80033ce:	e004      	b.n	80033da <ts_itoa+0x3a>
		else
			*((*buf)++) = num + '0';
 80033d0:	6805      	ldr	r5, [r0, #0]
 80033d2:	1c6e      	adds	r6, r5, #1
 80033d4:	6006      	str	r6, [r0, #0]
 80033d6:	3430      	adds	r4, #48	; 0x30
 80033d8:	702c      	strb	r4, [r5, #0]
{
	int div = 1;
	while (d/div >= base)
		div *= base;

	while (div != 0)
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1ea      	bne.n	80033b4 <ts_itoa+0x14>
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 80033de:	bc70      	pop	{r4, r5, r6}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop

080033e4 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80033e4:	b570      	push	{r4, r5, r6, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	9001      	str	r0, [sp, #4]
 80033ea:	460c      	mov	r4, r1
 80033ec:	4615      	mov	r5, r2
	char *start_buf = buf;
 80033ee:	4606      	mov	r6, r0
	while(*fmt)
 80033f0:	e055      	b.n	800349e <ts_formatstring+0xba>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80033f2:	2b25      	cmp	r3, #37	; 0x25
 80033f4:	d14d      	bne.n	8003492 <ts_formatstring+0xae>
		{
			switch (*(++fmt))
 80033f6:	7863      	ldrb	r3, [r4, #1]
 80033f8:	2b64      	cmp	r3, #100	; 0x64
 80033fa:	d019      	beq.n	8003430 <ts_formatstring+0x4c>
 80033fc:	d806      	bhi.n	800340c <ts_formatstring+0x28>
 80033fe:	2b58      	cmp	r3, #88	; 0x58
 8003400:	d039      	beq.n	8003476 <ts_formatstring+0x92>
 8003402:	2b63      	cmp	r3, #99	; 0x63
 8003404:	d00d      	beq.n	8003422 <ts_formatstring+0x3e>
 8003406:	2b25      	cmp	r3, #37	; 0x25
 8003408:	d141      	bne.n	800348e <ts_formatstring+0xaa>
 800340a:	e03b      	b.n	8003484 <ts_formatstring+0xa0>
 800340c:	2b73      	cmp	r3, #115	; 0x73
 800340e:	d01e      	beq.n	800344e <ts_formatstring+0x6a>
 8003410:	d802      	bhi.n	8003418 <ts_formatstring+0x34>
 8003412:	2b69      	cmp	r3, #105	; 0x69
 8003414:	d00c      	beq.n	8003430 <ts_formatstring+0x4c>
 8003416:	e03a      	b.n	800348e <ts_formatstring+0xaa>
 8003418:	2b75      	cmp	r3, #117	; 0x75
 800341a:	d025      	beq.n	8003468 <ts_formatstring+0x84>
 800341c:	2b78      	cmp	r3, #120	; 0x78
 800341e:	d02a      	beq.n	8003476 <ts_formatstring+0x92>
 8003420:	e035      	b.n	800348e <ts_formatstring+0xaa>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8003422:	9a01      	ldr	r2, [sp, #4]
 8003424:	1c53      	adds	r3, r2, #1
 8003426:	9301      	str	r3, [sp, #4]
 8003428:	682b      	ldr	r3, [r5, #0]
 800342a:	3504      	adds	r5, #4
 800342c:	7013      	strb	r3, [r2, #0]
				break;
 800342e:	e02e      	b.n	800348e <ts_formatstring+0xaa>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8003430:	6829      	ldr	r1, [r5, #0]
 8003432:	3504      	adds	r5, #4
					if (val < 0)
 8003434:	2900      	cmp	r1, #0
 8003436:	da05      	bge.n	8003444 <ts_formatstring+0x60>
					{
						val *= -1;
 8003438:	4249      	negs	r1, r1
						*buf++ = '-';
 800343a:	9b01      	ldr	r3, [sp, #4]
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	9201      	str	r2, [sp, #4]
 8003440:	222d      	movs	r2, #45	; 0x2d
 8003442:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8003444:	220a      	movs	r2, #10
 8003446:	a801      	add	r0, sp, #4
 8003448:	f7ff ffaa 	bl	80033a0 <ts_itoa>
				}
				break;
 800344c:	e01f      	b.n	800348e <ts_formatstring+0xaa>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 800344e:	682b      	ldr	r3, [r5, #0]
 8003450:	3504      	adds	r5, #4
					while (*arg)
 8003452:	e005      	b.n	8003460 <ts_formatstring+0x7c>
					{
						*buf++ = *arg++;
 8003454:	9a01      	ldr	r2, [sp, #4]
 8003456:	1c51      	adds	r1, r2, #1
 8003458:	9101      	str	r1, [sp, #4]
 800345a:	7819      	ldrb	r1, [r3, #0]
 800345c:	7011      	strb	r1, [r2, #0]
 800345e:	3301      	adds	r3, #1
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
					while (*arg)
 8003460:	781a      	ldrb	r2, [r3, #0]
 8003462:	2a00      	cmp	r2, #0
 8003464:	d1f6      	bne.n	8003454 <ts_formatstring+0x70>
 8003466:	e012      	b.n	800348e <ts_formatstring+0xaa>
						*buf++ = *arg++;
					}
				}
				break;
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8003468:	220a      	movs	r2, #10
 800346a:	6829      	ldr	r1, [r5, #0]
 800346c:	3504      	adds	r5, #4
 800346e:	a801      	add	r0, sp, #4
 8003470:	f7ff ff96 	bl	80033a0 <ts_itoa>
				break;
 8003474:	e00b      	b.n	800348e <ts_formatstring+0xaa>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8003476:	2210      	movs	r2, #16
 8003478:	6829      	ldr	r1, [r5, #0]
 800347a:	3504      	adds	r5, #4
 800347c:	a801      	add	r0, sp, #4
 800347e:	f7ff ff8f 	bl	80033a0 <ts_itoa>
				break;
 8003482:	e004      	b.n	800348e <ts_formatstring+0xaa>
			  case '%':
				  *buf++ = '%';
 8003484:	9b01      	ldr	r3, [sp, #4]
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	9201      	str	r2, [sp, #4]
 800348a:	2225      	movs	r2, #37	; 0x25
 800348c:	701a      	strb	r2, [r3, #0]
				  break;
			}
			fmt++;
 800348e:	3402      	adds	r4, #2
 8003490:	e005      	b.n	800349e <ts_formatstring+0xba>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8003492:	9b01      	ldr	r3, [sp, #4]
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	9201      	str	r2, [sp, #4]
 8003498:	7822      	ldrb	r2, [r4, #0]
 800349a:	701a      	strb	r2, [r3, #0]
 800349c:	3401      	adds	r4, #1
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 800349e:	7823      	ldrb	r3, [r4, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1a6      	bne.n	80033f2 <ts_formatstring+0xe>
		else
		{
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 80034a4:	2200      	movs	r2, #0
 80034a6:	9b01      	ldr	r3, [sp, #4]
 80034a8:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
}
 80034aa:	9801      	ldr	r0, [sp, #4]
 80034ac:	1b80      	subs	r0, r0, r6
 80034ae:	b002      	add	sp, #8
 80034b0:	bd70      	pop	{r4, r5, r6, pc}
 80034b2:	bf00      	nop

080034b4 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 80034b4:	b410      	push	{r4}
 80034b6:	4603      	mov	r3, r0
	int length = 0;
 80034b8:	2000      	movs	r0, #0
	while (*fmt)
 80034ba:	e035      	b.n	8003528 <ts_formatlength+0x74>
	{
		if (*fmt == '%')
 80034bc:	2a25      	cmp	r2, #37	; 0x25
 80034be:	d131      	bne.n	8003524 <ts_formatlength+0x70>
		{
			++fmt;
 80034c0:	1c5c      	adds	r4, r3, #1
			switch (*fmt)
 80034c2:	785b      	ldrb	r3, [r3, #1]
 80034c4:	3b58      	subs	r3, #88	; 0x58
 80034c6:	2b20      	cmp	r3, #32
 80034c8:	d829      	bhi.n	800351e <ts_formatlength+0x6a>
 80034ca:	e8df f003 	tbb	[pc, r3]
 80034ce:	2824      	.short	0x2824
 80034d0:	28282828 	.word	0x28282828
 80034d4:	28282828 	.word	0x28282828
 80034d8:	28151128 	.word	0x28151128
 80034dc:	15282828 	.word	0x15282828
 80034e0:	28282828 	.word	0x28282828
 80034e4:	28282828 	.word	0x28282828
 80034e8:	15281928 	.word	0x15281928
 80034ec:	2828      	.short	0x2828
 80034ee:	24          	.byte	0x24
 80034ef:	00          	.byte	0x00
			{
			  case 'c':
		  		  va_arg(va, int);
 80034f0:	3104      	adds	r1, #4
				  ++length;
 80034f2:	3001      	adds	r0, #1
	int length = 0;
	while (*fmt)
	{
		if (*fmt == '%')
		{
			++fmt;
 80034f4:	4623      	mov	r3, r4
			switch (*fmt)
			{
			  case 'c':
		  		  va_arg(va, int);
				  ++length;
				  break;
 80034f6:	e016      	b.n	8003526 <ts_formatlength+0x72>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 80034f8:	300b      	adds	r0, #11
				  va_arg(va, int);
 80034fa:	3104      	adds	r1, #4
	int length = 0;
	while (*fmt)
	{
		if (*fmt == '%')
		{
			++fmt;
 80034fc:	4623      	mov	r3, r4
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
				  va_arg(va, int);
				  break;
 80034fe:	e012      	b.n	8003526 <ts_formatlength+0x72>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8003500:	680b      	ldr	r3, [r1, #0]
 8003502:	3104      	adds	r1, #4
			  		  while (*str++)
 8003504:	e001      	b.n	800350a <ts_formatlength+0x56>
			  			  ++length;
 8003506:	3001      	adds	r0, #1
				  va_arg(va, int);
				  break;
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
			  		  while (*str++)
 8003508:	4613      	mov	r3, r2
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f9      	bne.n	8003506 <ts_formatlength+0x52>
	int length = 0;
	while (*fmt)
	{
		if (*fmt == '%')
		{
			++fmt;
 8003512:	4623      	mov	r3, r4
 8003514:	e007      	b.n	8003526 <ts_formatlength+0x72>
			  	  }
				  break;
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8003516:	3008      	adds	r0, #8
				  va_arg(va, unsigned int);
 8003518:	3104      	adds	r1, #4
	int length = 0;
	while (*fmt)
	{
		if (*fmt == '%')
		{
			++fmt;
 800351a:	4623      	mov	r3, r4
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
				  va_arg(va, unsigned int);
				  break;
 800351c:	e003      	b.n	8003526 <ts_formatlength+0x72>
			  default:
				  ++length;
 800351e:	3001      	adds	r0, #1
	int length = 0;
	while (*fmt)
	{
		if (*fmt == '%')
		{
			++fmt;
 8003520:	4623      	mov	r3, r4
				  length += 8;
				  va_arg(va, unsigned int);
				  break;
			  default:
				  ++length;
				  break;
 8003522:	e000      	b.n	8003526 <ts_formatlength+0x72>
			}
		}
		else
		{
			++length;
 8003524:	3001      	adds	r0, #1
		}
		++fmt;
 8003526:	3301      	adds	r3, #1
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
	int length = 0;
	while (*fmt)
 8003528:	781a      	ldrb	r2, [r3, #0]
 800352a:	2a00      	cmp	r2, #0
 800352c:	d1c6      	bne.n	80034bc <ts_formatlength+0x8>
			++length;
		}
		++fmt;
	}
	return length;
}
 800352e:	bc10      	pop	{r4}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop

08003534 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8003534:	b40f      	push	{r0, r1, r2, r3}
 8003536:	b5b0      	push	{r4, r5, r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	f107 0418 	add.w	r4, r7, #24
 8003540:	f854 5b04 	ldr.w	r5, [r4], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
 8003544:	607c      	str	r4, [r7, #4]
	length = ts_formatlength(fmt, va);
 8003546:	4621      	mov	r1, r4
 8003548:	4628      	mov	r0, r5
 800354a:	f7ff ffb3 	bl	80034b4 <ts_formatlength>
	va_end(va);
	{
		char buf[length];
 800354e:	3007      	adds	r0, #7
 8003550:	f020 0007 	bic.w	r0, r0, #7
 8003554:	ebad 0d00 	sub.w	sp, sp, r0
		va_start(va, fmt);
 8003558:	607c      	str	r4, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 800355a:	4622      	mov	r2, r4
 800355c:	4629      	mov	r1, r5
 800355e:	4668      	mov	r0, sp
 8003560:	f7ff ff40 	bl	80033e4 <ts_formatstring>
		length = _write(1, buf, length);
 8003564:	4602      	mov	r2, r0
 8003566:	4669      	mov	r1, sp
 8003568:	2001      	movs	r0, #1
 800356a:	f7ff fe7d 	bl	8003268 <_write>
		va_end(va);
	}
	return length;
}
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003576:	b004      	add	sp, #16
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop

0800357c <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 800357c:	b538      	push	{r3, r4, r5, lr}
 800357e:	4605      	mov	r5, r0
	int length = strlen(s);
 8003580:	f7fc fde4 	bl	800014c <strlen>
 8003584:	4604      	mov	r4, r0
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*)s, length);
 8003586:	4602      	mov	r2, r0
 8003588:	4629      	mov	r1, r5
 800358a:	2001      	movs	r0, #1
 800358c:	f7ff fe6c 	bl	8003268 <_write>
 8003590:	4605      	mov	r5, r0
	numbytes += _write(1, "\n", 1);
 8003592:	2201      	movs	r2, #1
 8003594:	4906      	ldr	r1, [pc, #24]	; (80035b0 <puts+0x34>)
 8003596:	4610      	mov	r0, r2
 8003598:	f7ff fe66 	bl	8003268 <_write>
 800359c:	4428      	add	r0, r5

	if (numbytes == (length+1))
 800359e:	3401      	adds	r4, #1
 80035a0:	42a0      	cmp	r0, r4
 80035a2:	d101      	bne.n	80035a8 <puts+0x2c>
	{
		res = 0;
 80035a4:	2000      	movs	r0, #0
 80035a6:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		res = EOF;
 80035a8:	f04f 30ff 	mov.w	r0, #4294967295
	}

	return res;
}
 80035ac:	bd38      	pop	{r3, r4, r5, pc}
 80035ae:	bf00      	nop
 80035b0:	08005bf4 	.word	0x08005bf4

080035b4 <SPISend>:
static uint8_t SPISend(uint8_t data)
{
	//
	//    Setting the Data Register (DR) transmits the byte of data on MOSI.
	//
	SPI2->DR = data;
 80035b4:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <SPISend+0x34>)
 80035b6:	8198      	strh	r0, [r3, #12]
	//
	//    Wait until the data has been transmitted.
	//
	while (!(SPI2->SR & SPI_I2S_FLAG_TXE));
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <SPISend+0x34>)
 80035ba:	891b      	ldrh	r3, [r3, #8]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f8      	beq.n	80035b8 <SPISend+0x4>
	//
	//    Wait for any data on MISO pin to be received.
	//
	while (!(SPI2->SR & SPI_I2S_FLAG_RXNE));
 80035c6:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <SPISend+0x34>)
 80035c8:	891b      	ldrh	r3, [r3, #8]
 80035ca:	f013 0f01 	tst.w	r3, #1
 80035ce:	d0fa      	beq.n	80035c6 <SPISend+0x12>
	//
	//    All data transmitted/received but SPI may be busy so wait until done.
	//
	while (SPI2->SR & SPI_I2S_FLAG_BSY);
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <SPISend+0x34>)
 80035d2:	891b      	ldrh	r3, [r3, #8]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f8      	bne.n	80035d0 <SPISend+0x1c>
	//
	//    Return the data received on MISO pin.
	//
	//Sys_Delay(1);
	return(SPI2->DR);
 80035de:	4b02      	ldr	r3, [pc, #8]	; (80035e8 <SPISend+0x34>)
 80035e0:	8998      	ldrh	r0, [r3, #12]

}
 80035e2:	b2c0      	uxtb	r0, r0
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40003800 	.word	0x40003800

080035ec <enc_readOp>:
	CSPASSIVE;
}


static void enc_readOp(uint8_t op, uint8_t address, uint8_t* data, uint8_t len)
{
 80035ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ee:	4606      	mov	r6, r0
 80035f0:	460c      	mov	r4, r1
 80035f2:	4615      	mov	r5, r2
 80035f4:	461f      	mov	r7, r3

	CSACTIVE;
 80035f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035fa:	480c      	ldr	r0, [pc, #48]	; (800362c <enc_readOp+0x40>)
 80035fc:	f7fc fe5e 	bl	80002bc <GPIO_ResetBits>

	// issue write command
	SPISend( op | (address & ADDR_MASK));
 8003600:	f004 001f 	and.w	r0, r4, #31
 8003604:	4330      	orrs	r0, r6
 8003606:	f7ff ffd5 	bl	80035b4 <SPISend>
	
	for (int i = 0; i< len; i++)
 800360a:	2400      	movs	r4, #0
 800360c:	e006      	b.n	800361c <enc_readOp+0x30>
	*data++ = SPISend(  0x00);
 800360e:	1c6e      	adds	r6, r5, #1
 8003610:	2000      	movs	r0, #0
 8003612:	f7ff ffcf 	bl	80035b4 <SPISend>
 8003616:	7028      	strb	r0, [r5, #0]
	CSACTIVE;

	// issue write command
	SPISend( op | (address & ADDR_MASK));
	
	for (int i = 0; i< len; i++)
 8003618:	3401      	adds	r4, #1
	*data++ = SPISend(  0x00);
 800361a:	4635      	mov	r5, r6
	CSACTIVE;

	// issue write command
	SPISend( op | (address & ADDR_MASK));
	
	for (int i = 0; i< len; i++)
 800361c:	42bc      	cmp	r4, r7
 800361e:	dbf6      	blt.n	800360e <enc_readOp+0x22>
	*data++ = SPISend(  0x00);


	CSPASSIVE;
 8003620:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003624:	4801      	ldr	r0, [pc, #4]	; (800362c <enc_readOp+0x40>)
 8003626:	f7fc fe47 	bl	80002b8 <GPIO_SetBits>
 800362a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800362c:	40010800 	.word	0x40010800

08003630 <enc_writeOp>:
	    CSPASSIVE;
}


static void enc_writeOp(uint8_t op, uint8_t address, uint8_t* data, uint8_t len)
{
 8003630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003632:	4606      	mov	r6, r0
 8003634:	460c      	mov	r4, r1
 8003636:	4615      	mov	r5, r2
 8003638:	461f      	mov	r7, r3
	CSACTIVE;
 800363a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800363e:	480c      	ldr	r0, [pc, #48]	; (8003670 <enc_writeOp+0x40>)
 8003640:	f7fc fe3c 	bl	80002bc <GPIO_ResetBits>

	// issue write command
	SPISend( op | (address & ADDR_MASK));
 8003644:	f004 001f 	and.w	r0, r4, #31
 8003648:	4330      	orrs	r0, r6
 800364a:	f7ff ffb3 	bl	80035b4 <SPISend>
	
	for ( int i = 0; i<len; i++)
 800364e:	2400      	movs	r4, #0
 8003650:	e005      	b.n	800365e <enc_writeOp+0x2e>
	  SPISend(  *data++);
 8003652:	1c6e      	adds	r6, r5, #1
 8003654:	7828      	ldrb	r0, [r5, #0]
 8003656:	f7ff ffad 	bl	80035b4 <SPISend>
	CSACTIVE;

	// issue write command
	SPISend( op | (address & ADDR_MASK));
	
	for ( int i = 0; i<len; i++)
 800365a:	3401      	adds	r4, #1
	  SPISend(  *data++);
 800365c:	4635      	mov	r5, r6
	CSACTIVE;

	// issue write command
	SPISend( op | (address & ADDR_MASK));
	
	for ( int i = 0; i<len; i++)
 800365e:	42bc      	cmp	r4, r7
 8003660:	dbf7      	blt.n	8003652 <enc_writeOp+0x22>
	  SPISend(  *data++);

	CSPASSIVE;
 8003662:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003666:	4802      	ldr	r0, [pc, #8]	; (8003670 <enc_writeOp+0x40>)
 8003668:	f7fc fe26 	bl	80002b8 <GPIO_SetBits>
 800366c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800366e:	bf00      	nop
 8003670:	40010800 	.word	0x40010800

08003674 <enc_SBI>:
static void enc_setBank(uint8_t address, bool keepEnabled ); // select the memory bank
static void readBuffer(uint16_t len, uint8_t* data);
  static void writeBuffer(uint16_t len, uint8_t* data);
/* issue an single byte instruction */
static void enc_SBI(uint8_t instruction, bool keepEnabled)
{
 8003674:	b538      	push	{r3, r4, r5, lr}
 8003676:	4605      	mov	r5, r0
 8003678:	460c      	mov	r4, r1

	CSACTIVE;
 800367a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800367e:	4806      	ldr	r0, [pc, #24]	; (8003698 <enc_SBI+0x24>)
 8003680:	f7fc fe1c 	bl	80002bc <GPIO_ResetBits>

	// issue the instruction
	SPISend(instruction);
 8003684:	4628      	mov	r0, r5
 8003686:	f7ff ff95 	bl	80035b4 <SPISend>

	if (!keepEnabled)
 800368a:	b924      	cbnz	r4, 8003696 <enc_SBI+0x22>
	    CSPASSIVE;
 800368c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003690:	4801      	ldr	r0, [pc, #4]	; (8003698 <enc_SBI+0x24>)
 8003692:	f7fc fe11 	bl	80002b8 <GPIO_SetBits>
 8003696:	bd38      	pop	{r3, r4, r5, pc}
 8003698:	40010800 	.word	0x40010800

0800369c <enc_setBank>:
  enc_writeOp(ENC624J600_BIT_FIELD_SET, address, &data,1);
}


static void enc_setBank(uint8_t address, bool keepEnabled)
{
 800369c:	b508      	push	{r3, lr}
 800369e:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
  // set the bank (if needed)
  if (((address & BANK_MASK) != bank) && ((address & BANK_MASK) != 0xE0))
 80036a2:	4b0f      	ldr	r3, [pc, #60]	; (80036e0 <enc_setBank+0x44>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	4298      	cmp	r0, r3
 80036a8:	d019      	beq.n	80036de <enc_setBank+0x42>
 80036aa:	28e0      	cmp	r0, #224	; 0xe0
 80036ac:	d017      	beq.n	80036de <enc_setBank+0x42>
  {
    // set the bank

    bank = (address & BANK_MASK);
 80036ae:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <enc_setBank+0x44>)
 80036b0:	7018      	strb	r0, [r3, #0]
    
    switch((bank)>>5){
 80036b2:	0940      	lsrs	r0, r0, #5
 80036b4:	2803      	cmp	r0, #3
 80036b6:	d812      	bhi.n	80036de <enc_setBank+0x42>
 80036b8:	e8df f000 	tbb	[pc, r0]
 80036bc:	0e0a0602 	.word	0x0e0a0602
			case 0 :
				enc_SBI(ENC624J600_BANK0_SELECT, keepEnabled);
 80036c0:	20c0      	movs	r0, #192	; 0xc0
 80036c2:	f7ff ffd7 	bl	8003674 <enc_SBI>
				break;
 80036c6:	bd08      	pop	{r3, pc}
			case 1 :
				enc_SBI(ENC624J600_BANK1_SELECT, keepEnabled);
 80036c8:	20c2      	movs	r0, #194	; 0xc2
 80036ca:	f7ff ffd3 	bl	8003674 <enc_SBI>
				break;
 80036ce:	bd08      	pop	{r3, pc}
			case 2 :
				enc_SBI(ENC624J600_BANK2_SELECT, keepEnabled);
 80036d0:	20c4      	movs	r0, #196	; 0xc4
 80036d2:	f7ff ffcf 	bl	8003674 <enc_SBI>
				break;
 80036d6:	bd08      	pop	{r3, pc}
			case 3 :
				enc_SBI(ENC624J600_BANK3_SELECT, keepEnabled);
 80036d8:	20c6      	movs	r0, #198	; 0xc6
 80036da:	f7ff ffcb 	bl	8003674 <enc_SBI>
 80036de:	bd08      	pop	{r3, pc}
 80036e0:	20000aa2 	.word	0x20000aa2

080036e4 <readControlRegister>:

/* select bank and write control register
will always put CS high to end operation
*/
static uint8_t readControlRegister(uint8_t address)
{
 80036e4:	b510      	push	{r4, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	4604      	mov	r4, r0
  uint16_t retval;
  // set the bank
  enc_setBank(address,true);
 80036ea:	2101      	movs	r1, #1
 80036ec:	f7ff ffd6 	bl	800369c <enc_setBank>
  // do the write
  enc_readOp(ENC624J600_READ_CONTROL_REGISTER, address&0x1F,(uint8_t*) &retval ,1);
 80036f0:	2301      	movs	r3, #1
 80036f2:	f10d 0206 	add.w	r2, sp, #6
 80036f6:	f004 011f 	and.w	r1, r4, #31
 80036fa:	2000      	movs	r0, #0
 80036fc:	f7ff ff76 	bl	80035ec <enc_readOp>
  
  return retval;
}
 8003700:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8003704:	b002      	add	sp, #8
 8003706:	bd10      	pop	{r4, pc}

08003708 <readControlRegister16>:

/* select bank and read control register
will always put CS high to end operation
*/
static uint16_t readControlRegister16(uint8_t address)
{
 8003708:	b510      	push	{r4, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	4604      	mov	r4, r0
  uint16_t retval;
  // set the bank
  enc_setBank(address,true);
 800370e:	2101      	movs	r1, #1
 8003710:	f7ff ffc4 	bl	800369c <enc_setBank>
  // do the write
  enc_readOp(ENC624J600_READ_CONTROL_REGISTER, address&0x1F,(uint8_t*) &retval ,2);
 8003714:	2302      	movs	r3, #2
 8003716:	f10d 0206 	add.w	r2, sp, #6
 800371a:	f004 011f 	and.w	r1, r4, #31
 800371e:	2000      	movs	r0, #0
 8003720:	f7ff ff64 	bl	80035ec <enc_readOp>
  
  return retval;
}
 8003724:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8003728:	b002      	add	sp, #8
 800372a:	bd10      	pop	{r4, pc}

0800372c <writeBitField>:


/* select bank and write control register bit
will always put CS high to end operation
*/
static void writeBitField(uint8_t address, uint8_t data) {
 800372c:	b530      	push	{r4, r5, lr}
 800372e:	b083      	sub	sp, #12
 8003730:	4605      	mov	r5, r0
 8003732:	ac02      	add	r4, sp, #8
 8003734:	f804 1d01 	strb.w	r1, [r4, #-1]!
  // set the bank
  enc_setBank(address,true);
 8003738:	2101      	movs	r1, #1
 800373a:	f7ff ffaf 	bl	800369c <enc_setBank>
  // do the write
  enc_writeOp(ENC624J600_BIT_FIELD_SET, address, &data,1);
 800373e:	2301      	movs	r3, #1
 8003740:	4622      	mov	r2, r4
 8003742:	4629      	mov	r1, r5
 8003744:	2080      	movs	r0, #128	; 0x80
 8003746:	f7ff ff73 	bl	8003630 <enc_writeOp>
}
 800374a:	b003      	add	sp, #12
 800374c:	bd30      	pop	{r4, r5, pc}
 800374e:	bf00      	nop

08003750 <writeControlRegister16>:
  // do the write
  enc_writeOp(ENC624J600_WRITE_CONTROL_REGISTER, address, &data, 1);
}

static void writeControlRegister16(uint8_t address, uint16_t data)
{
 8003750:	b570      	push	{r4, r5, r6, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	4604      	mov	r4, r0
 8003756:	460e      	mov	r6, r1
  uint8_t dat;
  // set the bank
  enc_setBank(address,true);
 8003758:	2101      	movs	r1, #1
 800375a:	f7ff ff9f 	bl	800369c <enc_setBank>
  // do the write
  
  dat = data & 0x00FF;
 800375e:	ad02      	add	r5, sp, #8
 8003760:	f805 6d01 	strb.w	r6, [r5, #-1]!
  enc_writeOp(ENC624J600_WRITE_CONTROL_REGISTER, address&0x1F,(uint8_t*) &dat , 1);
 8003764:	2301      	movs	r3, #1
 8003766:	462a      	mov	r2, r5
 8003768:	f004 011f 	and.w	r1, r4, #31
 800376c:	2040      	movs	r0, #64	; 0x40
 800376e:	f7ff ff5f 	bl	8003630 <enc_writeOp>
  dat = (data & 0xFF00) >> 8;
 8003772:	0a36      	lsrs	r6, r6, #8
 8003774:	f88d 6007 	strb.w	r6, [sp, #7]
  enc_writeOp(ENC624J600_WRITE_CONTROL_REGISTER, ((address+1) & 0x1F),(uint8_t*) &dat , 1);
 8003778:	1c61      	adds	r1, r4, #1
 800377a:	2301      	movs	r3, #1
 800377c:	462a      	mov	r2, r5
 800377e:	f001 011f 	and.w	r1, r1, #31
 8003782:	2040      	movs	r0, #64	; 0x40
 8003784:	f7ff ff54 	bl	8003630 <enc_writeOp>

}
 8003788:	b002      	add	sp, #8
 800378a:	bd70      	pop	{r4, r5, r6, pc}

0800378c <writeControlRegister>:

/* select bank and write control register
will always put CS high to end operation
*/
static void writeControlRegister(uint8_t address, uint8_t data)
{
 800378c:	b530      	push	{r4, r5, lr}
 800378e:	b083      	sub	sp, #12
 8003790:	4605      	mov	r5, r0
 8003792:	ac02      	add	r4, sp, #8
 8003794:	f804 1d01 	strb.w	r1, [r4, #-1]!
  // set the bank
  enc_setBank(address,true);
 8003798:	2101      	movs	r1, #1
 800379a:	f7ff ff7f 	bl	800369c <enc_setBank>
  // do the write
  enc_writeOp(ENC624J600_WRITE_CONTROL_REGISTER, address, &data, 1);
 800379e:	2301      	movs	r3, #1
 80037a0:	4622      	mov	r2, r4
 80037a2:	4629      	mov	r1, r5
 80037a4:	2040      	movs	r0, #64	; 0x40
 80037a6:	f7ff ff43 	bl	8003630 <enc_writeOp>
}
 80037aa:	b003      	add	sp, #12
 80037ac:	bd30      	pop	{r4, r5, pc}
 80037ae:	bf00      	nop

080037b0 <writePointer>:
}



static void writePointer(uint8_t instruction, uint16_t address, bool keepEnabled)
{
 80037b0:	b570      	push	{r4, r5, r6, lr}
 80037b2:	4606      	mov	r6, r0
 80037b4:	460c      	mov	r4, r1
 80037b6:	4615      	mov	r5, r2
	CSACTIVE;
 80037b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037bc:	4809      	ldr	r0, [pc, #36]	; (80037e4 <writePointer+0x34>)
 80037be:	f7fc fd7d 	bl	80002bc <GPIO_ResetBits>
	
	SPISend(instruction);
 80037c2:	4630      	mov	r0, r6
 80037c4:	f7ff fef6 	bl	80035b4 <SPISend>
	SPISend( address&0x00FF);
 80037c8:	b2e0      	uxtb	r0, r4
 80037ca:	f7ff fef3 	bl	80035b4 <SPISend>
	SPISend( address>>8);
 80037ce:	0a20      	lsrs	r0, r4, #8
 80037d0:	f7ff fef0 	bl	80035b4 <SPISend>

  if (!keepEnabled)
 80037d4:	b925      	cbnz	r5, 80037e0 <writePointer+0x30>
	  CSPASSIVE;
 80037d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037da:	4802      	ldr	r0, [pc, #8]	; (80037e4 <writePointer+0x34>)
 80037dc:	f7fc fd6c 	bl	80002b8 <GPIO_SetBits>
 80037e0:	bd70      	pop	{r4, r5, r6, pc}
 80037e2:	bf00      	nop
 80037e4:	40010800 	.word	0x40010800

080037e8 <readBuffer>:
}


static void
readBuffer(uint16_t len, uint8_t* data)
{
 80037e8:	b538      	push	{r3, r4, r5, lr}
 80037ea:	4604      	mov	r4, r0
 80037ec:	460d      	mov	r5, r1
  CSACTIVE;
 80037ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037f2:	480b      	ldr	r0, [pc, #44]	; (8003820 <readBuffer+0x38>)
 80037f4:	f7fc fd62 	bl	80002bc <GPIO_ResetBits>
  // issue read command
  SPISend(  ENC624J600_READ_ERXDATA);
 80037f8:	202c      	movs	r0, #44	; 0x2c
 80037fa:	f7ff fedb 	bl	80035b4 <SPISend>
  
  #ifdef ENC28J60DEBUG
    SerialUSB.print("Readbuffer: ");
  #endif
  while(len)
 80037fe:	e006      	b.n	800380e <readBuffer+0x26>
  {
    len--;
 8003800:	3c01      	subs	r4, #1
 8003802:	b2a4      	uxth	r4, r4
    // read data

    *data = SPISend(0x00);
 8003804:	2000      	movs	r0, #0
 8003806:	f7ff fed5 	bl	80035b4 <SPISend>
 800380a:	f805 0b01 	strb.w	r0, [r5], #1
  SPISend(  ENC624J600_READ_ERXDATA);
  
  #ifdef ENC28J60DEBUG
    SerialUSB.print("Readbuffer: ");
  #endif
  while(len)
 800380e:	2c00      	cmp	r4, #0
 8003810:	d1f6      	bne.n	8003800 <readBuffer+0x18>
    SerialUSB.print(*data,HEX);
    #endif
    data++;
  }
  //*data='\0';
  CSPASSIVE;
 8003812:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003816:	4802      	ldr	r0, [pc, #8]	; (8003820 <readBuffer+0x38>)
 8003818:	f7fc fd4e 	bl	80002b8 <GPIO_SetBits>
 800381c:	bd38      	pop	{r3, r4, r5, pc}
 800381e:	bf00      	nop
 8003820:	40010800 	.word	0x40010800

08003824 <writeBuffer>:
  #endif
}

static void
writeBuffer(uint16_t len, uint8_t* data)
{
 8003824:	b570      	push	{r4, r5, r6, lr}
 8003826:	4605      	mov	r5, r0
 8003828:	460e      	mov	r6, r1
  CSACTIVE;
 800382a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800382e:	480b      	ldr	r0, [pc, #44]	; (800385c <writeBuffer+0x38>)
 8003830:	f7fc fd44 	bl	80002bc <GPIO_ResetBits>
  // issue write command
	SPISend(ENC624J600_WRITE_EGPDATA);
 8003834:	202a      	movs	r0, #42	; 0x2a
 8003836:	f7ff febd 	bl	80035b4 <SPISend>
  //SerialUSB.print("writeBuffer: ");
	while(len--)
 800383a:	e004      	b.n	8003846 <writeBuffer+0x22>
	{
    //SerialUSB.print(*data,HEX);
    //SerialUSB.print(" ");
    SPISend( *data);
 800383c:	f816 0b01 	ldrb.w	r0, [r6], #1
 8003840:	f7ff feb8 	bl	80035b4 <SPISend>
{
  CSACTIVE;
  // issue write command
	SPISend(ENC624J600_WRITE_EGPDATA);
  //SerialUSB.print("writeBuffer: ");
	while(len--)
 8003844:	4625      	mov	r5, r4
 8003846:	1e6b      	subs	r3, r5, #1
 8003848:	b29c      	uxth	r4, r3
 800384a:	2d00      	cmp	r5, #0
 800384c:	d1f6      	bne.n	800383c <writeBuffer+0x18>
    //SerialUSB.print(" ");
    SPISend( *data);
    data++;
	}
  //SerialUSB.println("");   
  CSPASSIVE;
 800384e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003852:	4802      	ldr	r0, [pc, #8]	; (800385c <writeBuffer+0x38>)
 8003854:	f7fc fd30 	bl	80002b8 <GPIO_SetBits>
 8003858:	bd70      	pop	{r4, r5, r6, pc}
 800385a:	bf00      	nop
 800385c:	40010800 	.word	0x40010800

08003860 <Enc424J600Network_initP0>:




void Enc424J600Network_initP0(uint8_t* macaddr)
{
 8003860:	b510      	push	{r4, lr}
 8003862:	4604      	mov	r4, r0
//	digitalWrite(ENC28J60_CONTROL_CS, HIGH);
//  SPI.begin();
  
	//8.1 RESET
	//STEP ONE
	writeControlRegister16(EUDASTL,0x1234);
 8003864:	f241 2134 	movw	r1, #4660	; 0x1234
 8003868:	2016      	movs	r0, #22
 800386a:	f7ff ff71 	bl	8003750 <writeControlRegister16>

	//STEP TWO
	while(readControlRegister16(EUDASTL)!=0x1234)
 800386e:	e004      	b.n	800387a <Enc424J600Network_initP0+0x1a>
	{
		writeControlRegister16(EUDASTL,0x1234);
 8003870:	f241 2134 	movw	r1, #4660	; 0x1234
 8003874:	2016      	movs	r0, #22
 8003876:	f7ff ff6b 	bl	8003750 <writeControlRegister16>
	//8.1 RESET
	//STEP ONE
	writeControlRegister16(EUDASTL,0x1234);

	//STEP TWO
	while(readControlRegister16(EUDASTL)!=0x1234)
 800387a:	2016      	movs	r0, #22
 800387c:	f7ff ff44 	bl	8003708 <readControlRegister16>
 8003880:	f241 2334 	movw	r3, #4660	; 0x1234
 8003884:	4298      	cmp	r0, r3
 8003886:	d1f3      	bne.n	8003870 <Enc424J600Network_initP0+0x10>
	{
		writeControlRegister16(EUDASTL,0x1234);
	}
  
	//STEP THREE
	while(readControlRegister(ESTATH) & ESTAT_CLKRDY);
 8003888:	20fb      	movs	r0, #251	; 0xfb
 800388a:	f7ff ff2b 	bl	80036e4 <readControlRegister>
 800388e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8003892:	d1f9      	bne.n	8003888 <Enc424J600Network_initP0+0x28>

	//STEP FOUR
	// reset command
	enc_SBI(ENC624J600_ETH_RESET,0);
 8003894:	2100      	movs	r1, #0
 8003896:	20ca      	movs	r0, #202	; 0xca
 8003898:	f7ff feec 	bl	8003674 <enc_SBI>

	//STEP FIVE
	delayMicroseconds(25);
 800389c:	2019      	movs	r0, #25
 800389e:	f7ff faab 	bl	8002df8 <delayMicroseconds>
	//STEP SIX
	if (readControlRegister16(EUDASTL)==0x0000)
 80038a2:	2016      	movs	r0, #22
 80038a4:	f7ff ff30 	bl	8003708 <readControlRegister16>
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d142      	bne.n	8003932 <Enc424J600Network_initP0+0xd2>
	{
		delayMicroseconds(265);		
 80038ac:	f240 1009 	movw	r0, #265	; 0x109
 80038b0:	f7ff faa2 	bl	8002df8 <delayMicroseconds>
		//8.2 CLKOUT Frequency
		// Arduino : 16MHz =>  COCON=0100 
		// We do not use the clkout
		//writeBitField( ECON2H,ECON2_COCON2>>8);
		//8.3 reception
		nextPacketPtr = RXSTART_INIT;
 80038b4:	f44f 519a 	mov.w	r1, #4928	; 0x1340
 80038b8:	4b1e      	ldr	r3, [pc, #120]	; (8003934 <Enc424J600Network_initP0+0xd4>)
 80038ba:	8019      	strh	r1, [r3, #0]
		writeControlRegister16(ERXSTL, RXSTART_INIT);
 80038bc:	2004      	movs	r0, #4
 80038be:	f7ff ff47 	bl	8003750 <writeControlRegister16>

		
		writeControlRegister16(ERXTAILL, RXSTOP_INIT);
 80038c2:	f645 71ff 	movw	r1, #24575	; 0x5fff
 80038c6:	2006      	movs	r0, #6
 80038c8:	f7ff ff42 	bl	8003750 <writeControlRegister16>
			
 		// USER buffer : EUDAST Pointer at a higher memory address relative to the end address.
 		writeControlRegister16(EUDASTL, 0x5FFF);
 80038cc:	f645 71ff 	movw	r1, #24575	; 0x5fff
 80038d0:	2016      	movs	r0, #22
 80038d2:	f7ff ff3d 	bl	8003750 <writeControlRegister16>
 		writeControlRegister16(EUDANDL, 0x5FFF);
 80038d6:	f645 71ff 	movw	r1, #24575	; 0x5fff
 80038da:	2018      	movs	r0, #24
 80038dc:	f7ff ff38 	bl	8003750 <writeControlRegister16>
		// frames shorter than 64 bits => disabled
		// CRC error rejection => enabled
		// Unicast collection filter => enabled
		// Not me unicast filter => disabled
		// Multicast collection filter 
		writeControlRegister(ERXFCONL,ERXFCON_CRCEN|ERXFCON_RUNTEN|ERXFCON_BCEN|ERXFCON_UCEN);//ERXFCON_CRCEN|ERXFCON_RUNTEN|ERXFCON_UCEN);
 80038e0:	2159      	movs	r1, #89	; 0x59
 80038e2:	2034      	movs	r0, #52	; 0x34
 80038e4:	f7ff ff52 	bl	800378c <writeControlRegister>
		//exact pattern
		//writeControlRegister(ERXFCONH,0x01);
					      
		// 8.6 MAC initialization ...
		//flow control ???
		writeBitField( MACON2L, MACON2_TXCRCEN|MACON2_PADCFG0|MACON2_PADCFG1|MACON2_PADCFG2);
 80038e8:	21f0      	movs	r1, #240	; 0xf0
 80038ea:	2042      	movs	r0, #66	; 0x42
 80038ec:	f7ff ff1e 	bl	800372c <writeBitField>

		writeControlRegister16(MAMXFLL, MAX_FRAMELEN);
 80038f0:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80038f4:	204a      	movs	r0, #74	; 0x4a
 80038f6:	f7ff ff2b 	bl	8003750 <writeControlRegister16>



		writeControlRegister(MAADR1L, macaddr[0]);
 80038fa:	7821      	ldrb	r1, [r4, #0]
 80038fc:	2064      	movs	r0, #100	; 0x64
 80038fe:	f7ff ff45 	bl	800378c <writeControlRegister>
		writeControlRegister(MAADR1H, macaddr[1]);
 8003902:	7861      	ldrb	r1, [r4, #1]
 8003904:	2065      	movs	r0, #101	; 0x65
 8003906:	f7ff ff41 	bl	800378c <writeControlRegister>
		writeControlRegister(MAADR2L, macaddr[2]);
 800390a:	78a1      	ldrb	r1, [r4, #2]
 800390c:	2062      	movs	r0, #98	; 0x62
 800390e:	f7ff ff3d 	bl	800378c <writeControlRegister>
		writeControlRegister(MAADR2H, macaddr[3]);
 8003912:	78e1      	ldrb	r1, [r4, #3]
 8003914:	2063      	movs	r0, #99	; 0x63
 8003916:	f7ff ff39 	bl	800378c <writeControlRegister>
		writeControlRegister(MAADR3L, macaddr[4]);
 800391a:	7921      	ldrb	r1, [r4, #4]
 800391c:	2060      	movs	r0, #96	; 0x60
 800391e:	f7ff ff35 	bl	800378c <writeControlRegister>
		writeControlRegister(MAADR3H, macaddr[5]);
 8003922:	7961      	ldrb	r1, [r4, #5]
 8003924:	2061      	movs	r0, #97	; 0x61
 8003926:	f7ff ff31 	bl	800378c <writeControlRegister>
		// configuration LED
		//		ENC624J600WCRU(EIDLEDH, 0x06);

			 //	ENC624J600PhyWrite(PHCON1,PHCON1_PFULDPX);
		// enable reception
		enc_SBI(ENC624J600_ENABLE_RX,0);
 800392a:	2100      	movs	r1, #0
 800392c:	20e8      	movs	r0, #232	; 0xe8
 800392e:	f7ff fea1 	bl	8003674 <enc_SBI>
 8003932:	bd10      	pop	{r4, pc}
 8003934:	20000aa0 	.word	0x20000aa0

08003938 <enc424j600PacketReceiveP0>:
//    }
//  return (0);
//}

unsigned int enc424j600PacketReceiveP0(unsigned int maxlen, unsigned char* packet)
{
 8003938:	b570      	push	{r4, r5, r6, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	4606      	mov	r6, r0
 800393e:	460d      	mov	r5, r1
    unsigned char rxdata[6];
    unsigned int len;
    uint16_t newRXTail;
    if (!(readControlRegister(EIRL) & EIR_PKTIF))
 8003940:	20fc      	movs	r0, #252	; 0xfc
 8003942:	f7ff fecf 	bl	80036e4 <readControlRegister>
 8003946:	f010 0f40 	tst.w	r0, #64	; 0x40
 800394a:	d041      	beq.n	80039d0 <enc424j600PacketReceiveP0+0x98>
    {
        return (0);
    }
    //printf("Packets 0 %d\n",readControlRegister(ESTATL));
    // Set the RX Read Pointer to the beginning of the next unprocessed packet
    writePointer(ENC624J600_WRITE_ERXRDPT,nextPacketPtr,0);
 800394c:	4c23      	ldr	r4, [pc, #140]	; (80039dc <enc424j600PacketReceiveP0+0xa4>)
 800394e:	2200      	movs	r2, #0
 8003950:	8821      	ldrh	r1, [r4, #0]
 8003952:	2064      	movs	r0, #100	; 0x64
 8003954:	f7ff ff2c 	bl	80037b0 <writePointer>
    readBuffer(2, rxdata);
 8003958:	4669      	mov	r1, sp
 800395a:	2002      	movs	r0, #2
 800395c:	f7ff ff44 	bl	80037e8 <readBuffer>
    nextPacketPtr  =  rxdata[1];
 8003960:	f89d 2001 	ldrb.w	r2, [sp, #1]
    nextPacketPtr  =  nextPacketPtr<<8;
    nextPacketPtr  |=  rxdata[0];
 8003964:	f89d 3000 	ldrb.w	r3, [sp]
 8003968:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800396c:	8023      	strh	r3, [r4, #0]
    readBuffer(6, rxdata);
 800396e:	4669      	mov	r1, sp
 8003970:	2006      	movs	r0, #6
 8003972:	f7ff ff39 	bl	80037e8 <readBuffer>
    len  =  rxdata[1];
 8003976:	f89d 4001 	ldrb.w	r4, [sp, #1]
    len  =  len<<8;
    len  |=  rxdata[0];
 800397a:	f89d 3000 	ldrb.w	r3, [sp]
 800397e:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
    len-=4;
 8003982:	3c04      	subs	r4, #4
    if ((rxdata[2] & 0x80)==0)
 8003984:	f99d 3002 	ldrsb.w	r3, [sp, #2]
 8003988:	2b00      	cmp	r3, #0
 800398a:	db00      	blt.n	800398e <enc424j600PacketReceiveP0+0x56>
    {
        len=0;
 800398c:	2400      	movs	r4, #0
    }
    if(len>maxlen)
 800398e:	42b4      	cmp	r4, r6
 8003990:	d900      	bls.n	8003994 <enc424j600PacketReceiveP0+0x5c>
    	len=0;
 8003992:	2400      	movs	r4, #0
    readBuffer(len,packet);
 8003994:	4629      	mov	r1, r5
 8003996:	b2a0      	uxth	r0, r4
 8003998:	f7ff ff26 	bl	80037e8 <readBuffer>
    newRXTail = nextPacketPtr - 2;
 800399c:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <enc424j600PacketReceiveP0+0xa4>)
 800399e:	881b      	ldrh	r3, [r3, #0]
 80039a0:	1e9d      	subs	r5, r3, #2
 80039a2:	b2ad      	uxth	r5, r5

    if (nextPacketPtr == RXSTART_INIT)
 80039a4:	f5b3 5f9a 	cmp.w	r3, #4928	; 0x1340
 80039a8:	d101      	bne.n	80039ae <enc424j600PacketReceiveP0+0x76>
        newRXTail = 0x5FFE - 2;
 80039aa:	f645 75fc 	movw	r5, #24572	; 0x5ffc
    //Packet decrement
    writeControlRegister(ECON1H, 0x01);
 80039ae:	2101      	movs	r1, #1
 80039b0:	20ff      	movs	r0, #255	; 0xff
 80039b2:	f7ff feeb 	bl	800378c <writeControlRegister>
    //printf("Packets 1 %d\n",readControlRegister(ESTATL));
    //Write new RX tail
    writeControlRegister(ERXTAILL, newRXTail);     //
 80039b6:	b2e9      	uxtb	r1, r5
 80039b8:	2006      	movs	r0, #6
 80039ba:	f7ff fee7 	bl	800378c <writeControlRegister>
    writeControlRegister(ERXTAILH, newRXTail>>8);
 80039be:	0a29      	lsrs	r1, r5, #8
 80039c0:	2007      	movs	r0, #7
 80039c2:	f7ff fee3 	bl	800378c <writeControlRegister>
    if (len>maxlen-1)
 80039c6:	1e70      	subs	r0, r6, #1
 80039c8:	4284      	cmp	r4, r0
 80039ca:	d903      	bls.n	80039d4 <enc424j600PacketReceiveP0+0x9c>
	{
		//len=maxlen-1;
		return 0;
 80039cc:	2000      	movs	r0, #0
 80039ce:	e002      	b.n	80039d6 <enc424j600PacketReceiveP0+0x9e>
    unsigned char rxdata[6];
    unsigned int len;
    uint16_t newRXTail;
    if (!(readControlRegister(EIRL) & EIR_PKTIF))
    {
        return (0);
 80039d0:	2000      	movs	r0, #0
 80039d2:	e000      	b.n	80039d6 <enc424j600PacketReceiveP0+0x9e>
    if (len>maxlen-1)
	{
		//len=maxlen-1;
		return 0;
	}
    return len;
 80039d4:	4620      	mov	r0, r4
}
 80039d6:	b002      	add	sp, #8
 80039d8:	bd70      	pop	{r4, r5, r6, pc}
 80039da:	bf00      	nop
 80039dc:	20000aa0 	.word	0x20000aa0

080039e0 <enc424j600PacketSendP0>:


void enc424j600PacketSendP0(unsigned int len, unsigned char* packet)
{
 80039e0:	b538      	push	{r3, r4, r5, lr}
 80039e2:	4604      	mov	r4, r0
 80039e4:	460d      	mov	r5, r1
	writePointer(ENC624J600_WRITE_EGPWRPT,TXSTART_INIT,0);
 80039e6:	2200      	movs	r2, #0
 80039e8:	2130      	movs	r1, #48	; 0x30
 80039ea:	206c      	movs	r0, #108	; 0x6c
 80039ec:	f7ff fee0 	bl	80037b0 <writePointer>
	writeControlRegister(ETXSTL,(TXSTART_INIT)&0x00FF);
 80039f0:	2130      	movs	r1, #48	; 0x30
 80039f2:	2000      	movs	r0, #0
 80039f4:	f7ff feca 	bl	800378c <writeControlRegister>
	writeControlRegister(ETXSTH,(TXSTART_INIT)>>8);
 80039f8:	2100      	movs	r1, #0
 80039fa:	2001      	movs	r0, #1
 80039fc:	f7ff fec6 	bl	800378c <writeControlRegister>
    writeControlRegister(ETXLENL, len&0xFF);
 8003a00:	b2e1      	uxtb	r1, r4
 8003a02:	2002      	movs	r0, #2
 8003a04:	f7ff fec2 	bl	800378c <writeControlRegister>
    writeControlRegister(ETXLENH, len>>8);
 8003a08:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8003a0c:	2003      	movs	r0, #3
 8003a0e:	f7ff febd 	bl	800378c <writeControlRegister>
    writeBuffer(len, packet);
 8003a12:	4629      	mov	r1, r5
 8003a14:	b2a0      	uxth	r0, r4
 8003a16:	f7ff ff05 	bl	8003824 <writeBuffer>
    //enc_writeOp(ENC624J600_BIT_FIELD_SET, ECON1L, ECON1_TXRTS,1);
    //writeBitField(ECON1L,ECON1_TXRTS);
    writeControlRegister(ECON1L,0x03);
 8003a1a:	2103      	movs	r1, #3
 8003a1c:	20fe      	movs	r0, #254	; 0xfe
 8003a1e:	f7ff feb5 	bl	800378c <writeControlRegister>
 8003a22:	bd38      	pop	{r3, r4, r5, pc}

08003a24 <clock_time>:
#include "sys_timer.h"


clock_time_t
clock_time(void)
{
 8003a24:	b508      	push	{r3, lr}
  return (clock_time_t) Sys_GetTick();
 8003a26:	f7ff f9d5 	bl	8002dd4 <Sys_GetTick>
}
 8003a2a:	bd08      	pop	{r3, pc}

08003a2c <add_msg_type>:
static const u8_t magic_cookie[4] = {99, 130, 83, 99};
/*---------------------------------------------------------------------------*/
static u8_t *
add_msg_type(u8_t *optptr, u8_t type)
{
  *optptr++ = DHCP_OPTION_MSG_TYPE;
 8003a2c:	2335      	movs	r3, #53	; 0x35
 8003a2e:	7003      	strb	r3, [r0, #0]
  *optptr++ = 1;
 8003a30:	2301      	movs	r3, #1
 8003a32:	7043      	strb	r3, [r0, #1]
  *optptr++ = type;
 8003a34:	7081      	strb	r1, [r0, #2]
  return optptr;
}
 8003a36:	3003      	adds	r0, #3
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop

08003a3c <add_server_id>:
/*---------------------------------------------------------------------------*/
static u8_t *
add_server_id(u8_t *optptr)
{
 8003a3c:	4603      	mov	r3, r0
  *optptr++ = DHCP_OPTION_SERVER_ID;
 8003a3e:	2236      	movs	r2, #54	; 0x36
 8003a40:	7002      	strb	r2, [r0, #0]
  *optptr++ = 4;
 8003a42:	2204      	movs	r2, #4
 8003a44:	7042      	strb	r2, [r0, #1]
  memcpy(optptr, s.serverid, 4);
 8003a46:	4a03      	ldr	r2, [pc, #12]	; (8003a54 <add_server_id+0x18>)
 8003a48:	6810      	ldr	r0, [r2, #0]
 8003a4a:	f8c3 0002 	str.w	r0, [r3, #2]
  return optptr + 4;
}
 8003a4e:	1d98      	adds	r0, r3, #6
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	20000ac0 	.word	0x20000ac0

08003a58 <add_req_options>:
}
/*---------------------------------------------------------------------------*/
static u8_t *
add_req_options(u8_t *optptr)
{
  *optptr++ = DHCP_OPTION_REQ_LIST;
 8003a58:	2337      	movs	r3, #55	; 0x37
 8003a5a:	7003      	strb	r3, [r0, #0]
  *optptr++ = 3;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	7043      	strb	r3, [r0, #1]
  *optptr++ = DHCP_OPTION_SUBNET_MASK;
 8003a60:	2201      	movs	r2, #1
 8003a62:	7082      	strb	r2, [r0, #2]
  *optptr++ = DHCP_OPTION_ROUTER;
 8003a64:	70c3      	strb	r3, [r0, #3]
  *optptr++ = DHCP_OPTION_DNS_SERVER;
 8003a66:	2306      	movs	r3, #6
 8003a68:	7103      	strb	r3, [r0, #4]
  return optptr;
}
 8003a6a:	3005      	adds	r0, #5
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop

08003a70 <add_end>:
/*---------------------------------------------------------------------------*/
static u8_t *
add_end(u8_t *optptr)
{
  *optptr++ = DHCP_OPTION_END;
 8003a70:	23ff      	movs	r3, #255	; 0xff
 8003a72:	7003      	strb	r3, [r0, #0]
  return optptr;
}
 8003a74:	3001      	adds	r0, #1
 8003a76:	4770      	bx	lr

08003a78 <add_req_ipaddr>:
  return optptr + 4;
}
/*---------------------------------------------------------------------------*/
static u8_t *
add_req_ipaddr(u8_t *optptr)
{
 8003a78:	4603      	mov	r3, r0
  *optptr++ = DHCP_OPTION_REQ_IPADDR;
 8003a7a:	2232      	movs	r2, #50	; 0x32
 8003a7c:	7002      	strb	r2, [r0, #0]
  *optptr++ = 4;
 8003a7e:	2204      	movs	r2, #4
 8003a80:	7042      	strb	r2, [r0, #1]
  memcpy(optptr, s.ipaddr, 4);
 8003a82:	4a03      	ldr	r2, [pc, #12]	; (8003a90 <add_req_ipaddr+0x18>)
 8003a84:	6810      	ldr	r0, [r2, #0]
 8003a86:	f8c3 0002 	str.w	r0, [r3, #2]
  return optptr + 4;
}
 8003a8a:	1d98      	adds	r0, r3, #6
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20000ac8 	.word	0x20000ac8

08003a94 <parse_options>:
  uip_send(uip_appdata, end - (u8_t *)uip_appdata);
}
/*---------------------------------------------------------------------------*/
static u8_t
parse_options(u8_t *optptr, int len)
{
 8003a94:	b410      	push	{r4}
 8003a96:	4603      	mov	r3, r0
  u8_t *end = optptr + len;
 8003a98:	4401      	add	r1, r0
  u8_t type = 0;
 8003a9a:	2400      	movs	r4, #0

  while(optptr < end) {
 8003a9c:	e02e      	b.n	8003afc <parse_options+0x68>
    switch(*optptr) {
 8003a9e:	781a      	ldrb	r2, [r3, #0]
 8003aa0:	2a33      	cmp	r2, #51	; 0x33
 8003aa2:	d024      	beq.n	8003aee <parse_options+0x5a>
 8003aa4:	d806      	bhi.n	8003ab4 <parse_options+0x20>
 8003aa6:	2a03      	cmp	r2, #3
 8003aa8:	d010      	beq.n	8003acc <parse_options+0x38>
 8003aaa:	2a06      	cmp	r2, #6
 8003aac:	d013      	beq.n	8003ad6 <parse_options+0x42>
 8003aae:	2a01      	cmp	r2, #1
 8003ab0:	d121      	bne.n	8003af6 <parse_options+0x62>
 8003ab2:	e006      	b.n	8003ac2 <parse_options+0x2e>
 8003ab4:	2a36      	cmp	r2, #54	; 0x36
 8003ab6:	d015      	beq.n	8003ae4 <parse_options+0x50>
 8003ab8:	2aff      	cmp	r2, #255	; 0xff
 8003aba:	d021      	beq.n	8003b00 <parse_options+0x6c>
 8003abc:	2a35      	cmp	r2, #53	; 0x35
 8003abe:	d11a      	bne.n	8003af6 <parse_options+0x62>
 8003ac0:	e00e      	b.n	8003ae0 <parse_options+0x4c>
    case DHCP_OPTION_SUBNET_MASK:
      memcpy(s.netmask, optptr + 2, 4);
 8003ac2:	f8d3 0002 	ldr.w	r0, [r3, #2]
 8003ac6:	4a10      	ldr	r2, [pc, #64]	; (8003b08 <parse_options+0x74>)
 8003ac8:	6290      	str	r0, [r2, #40]	; 0x28
      break;
 8003aca:	e014      	b.n	8003af6 <parse_options+0x62>
    case DHCP_OPTION_ROUTER:
      memcpy(s.default_router, optptr + 2, 4);
 8003acc:	f8d3 0002 	ldr.w	r0, [r3, #2]
 8003ad0:	4a0d      	ldr	r2, [pc, #52]	; (8003b08 <parse_options+0x74>)
 8003ad2:	6310      	str	r0, [r2, #48]	; 0x30
      break;
 8003ad4:	e00f      	b.n	8003af6 <parse_options+0x62>
    case DHCP_OPTION_DNS_SERVER:
      memcpy(s.dnsaddr, optptr + 2, 4);
 8003ad6:	f8d3 0002 	ldr.w	r0, [r3, #2]
 8003ada:	4a0b      	ldr	r2, [pc, #44]	; (8003b08 <parse_options+0x74>)
 8003adc:	62d0      	str	r0, [r2, #44]	; 0x2c
      break;
 8003ade:	e00a      	b.n	8003af6 <parse_options+0x62>
    case DHCP_OPTION_MSG_TYPE:
      type = *(optptr + 2);
 8003ae0:	789c      	ldrb	r4, [r3, #2]
      break;
 8003ae2:	e008      	b.n	8003af6 <parse_options+0x62>
    case DHCP_OPTION_SERVER_ID:
      memcpy(s.serverid, optptr + 2, 4);
 8003ae4:	f8d3 0002 	ldr.w	r0, [r3, #2]
 8003ae8:	4a07      	ldr	r2, [pc, #28]	; (8003b08 <parse_options+0x74>)
 8003aea:	61d0      	str	r0, [r2, #28]
      break;
 8003aec:	e003      	b.n	8003af6 <parse_options+0x62>
    case DHCP_OPTION_LEASE_TIME:
      memcpy(s.lease_time, optptr + 2, 4);
 8003aee:	f8d3 0002 	ldr.w	r0, [r3, #2]
 8003af2:	4a05      	ldr	r2, [pc, #20]	; (8003b08 <parse_options+0x74>)
 8003af4:	6210      	str	r0, [r2, #32]
      break;
    case DHCP_OPTION_END:
      return type;
    }

    optptr += optptr[1] + 2;
 8003af6:	785a      	ldrb	r2, [r3, #1]
 8003af8:	3202      	adds	r2, #2
 8003afa:	4413      	add	r3, r2
parse_options(u8_t *optptr, int len)
{
  u8_t *end = optptr + len;
  u8_t type = 0;

  while(optptr < end) {
 8003afc:	428b      	cmp	r3, r1
 8003afe:	d3ce      	bcc.n	8003a9e <parse_options+0xa>
    }

    optptr += optptr[1] + 2;
  }
  return type;
}
 8003b00:	4620      	mov	r0, r4
 8003b02:	bc10      	pop	{r4}
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	20000aa4 	.word	0x20000aa4

08003b0c <create_msg>:
  return optptr;
}
/*---------------------------------------------------------------------------*/
static void
create_msg(register struct dhcp_msg *m)
{
 8003b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b10:	4604      	mov	r4, r0
//	printf("Handle 19\n");
  m->op = DHCP_REQUEST;
 8003b12:	2301      	movs	r3, #1
 8003b14:	7003      	strb	r3, [r0, #0]
  m->htype = DHCP_HTYPE_ETHERNET;
 8003b16:	7043      	strb	r3, [r0, #1]
  m->hlen = s.mac_len;
 8003b18:	4b28      	ldr	r3, [pc, #160]	; (8003bbc <create_msg+0xb0>)
 8003b1a:	699a      	ldr	r2, [r3, #24]
 8003b1c:	7082      	strb	r2, [r0, #2]
  m->hops = 0;
 8003b1e:	2700      	movs	r7, #0
 8003b20:	70c7      	strb	r7, [r0, #3]
//  printf("Handle 20\n");
  memcpy(m->xid, xid, sizeof(m->xid));
 8003b22:	4a27      	ldr	r2, [pc, #156]	; (8003bc0 <create_msg+0xb4>)
 8003b24:	6810      	ldr	r0, [r2, #0]
 8003b26:	6060      	str	r0, [r4, #4]
  m->secs = 0;
 8003b28:	8127      	strh	r7, [r4, #8]
  m->flags = HTONS(BOOTP_BROADCAST); /*  Broadcast bit. */
 8003b2a:	f04f 0980 	mov.w	r9, #128	; 0x80
 8003b2e:	f8a4 900a 	strh.w	r9, [r4, #10]
  /*  uip_ipaddr_copy(m->ciaddr, uip_hostaddr);*/
//  printf("Handle 21\n");
  memcpy(m->ciaddr, uip_hostaddr, sizeof(m->ciaddr));
 8003b32:	4a24      	ldr	r2, [pc, #144]	; (8003bc4 <create_msg+0xb8>)
 8003b34:	6812      	ldr	r2, [r2, #0]
 8003b36:	60e2      	str	r2, [r4, #12]
  memset(m->yiaddr, 0, sizeof(m->yiaddr));
 8003b38:	6127      	str	r7, [r4, #16]
  memset(m->siaddr, 0, sizeof(m->siaddr));
 8003b3a:	6167      	str	r7, [r4, #20]
  memset(m->giaddr, 0, sizeof(m->giaddr));
 8003b3c:	61a7      	str	r7, [r4, #24]
  memcpy(m->chaddr, s.mac_addr, s.mac_len);
 8003b3e:	699d      	ldr	r5, [r3, #24]
 8003b40:	462a      	mov	r2, r5
 8003b42:	6959      	ldr	r1, [r3, #20]
 8003b44:	f104 001c 	add.w	r0, r4, #28
 8003b48:	f001 fbed 	bl	8005326 <memcpy>
  memset(&m->chaddr[s.mac_len], 0, sizeof(m->chaddr) - s.mac_len);
 8003b4c:	f105 0018 	add.w	r0, r5, #24
 8003b50:	4420      	add	r0, r4
 8003b52:	f1c5 0210 	rsb	r2, r5, #16
 8003b56:	4639      	mov	r1, r7
 8003b58:	3004      	adds	r0, #4
 8003b5a:	f001 fbef 	bl	800533c <memset>
//  printf("Handle 22\n");
#ifndef UIP_CONF_DHCP_LIGHT
  memset(m->sname, 0, sizeof(m->sname));
 8003b5e:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8003b62:	2240      	movs	r2, #64	; 0x40
 8003b64:	4639      	mov	r1, r7
 8003b66:	4640      	mov	r0, r8
 8003b68:	f001 fbe8 	bl	800533c <memset>
  memcpy(m->sname,hstname,sizeof(hstname));
 8003b6c:	4d16      	ldr	r5, [pc, #88]	; (8003bc8 <create_msg+0xbc>)
 8003b6e:	462e      	mov	r6, r5
 8003b70:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003b72:	62e0      	str	r0, [r4, #44]	; 0x2c
 8003b74:	6321      	str	r1, [r4, #48]	; 0x30
 8003b76:	6362      	str	r2, [r4, #52]	; 0x34
 8003b78:	63a3      	str	r3, [r4, #56]	; 0x38
 8003b7a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003b7c:	63e0      	str	r0, [r4, #60]	; 0x3c
 8003b7e:	6421      	str	r1, [r4, #64]	; 0x40
 8003b80:	6462      	str	r2, [r4, #68]	; 0x44
 8003b82:	64a3      	str	r3, [r4, #72]	; 0x48
  memset(m->file, 0, sizeof(m->file));
 8003b84:	464a      	mov	r2, r9
 8003b86:	4639      	mov	r1, r7
 8003b88:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8003b8c:	f001 fbd6 	bl	800533c <memset>
#endif
  memcpy(m->options,hstname,sizeof(hstname));
 8003b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b92:	f8c4 10f0 	str.w	r1, [r4, #240]	; 0xf0
 8003b96:	f8c4 20f4 	str.w	r2, [r4, #244]	; 0xf4
 8003b9a:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
 8003b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ba0:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
 8003ba4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003ba8:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
 8003bac:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
  memcpy(m->options, magic_cookie, sizeof(magic_cookie));
 8003bb0:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <create_msg+0xc0>)
 8003bb2:	6818      	ldr	r0, [r3, #0]
 8003bb4:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
 8003bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bbc:	20000aa4 	.word	0x20000aa4
 8003bc0:	080062f8 	.word	0x080062f8
 8003bc4:	20000fac 	.word	0x20000fac
 8003bc8:	080062fc 	.word	0x080062fc
 8003bcc:	0800631c 	.word	0x0800631c

08003bd0 <send_request>:
  uip_send(uip_appdata, end - (u8_t *)uip_appdata);
}
/*---------------------------------------------------------------------------*/
static void
send_request(void)
{
 8003bd0:	b538      	push	{r3, r4, r5, lr}
  u8_t *end;
  struct dhcp_msg *m = (struct dhcp_msg *)uip_appdata;
 8003bd2:	4c0b      	ldr	r4, [pc, #44]	; (8003c00 <send_request+0x30>)
 8003bd4:	6825      	ldr	r5, [r4, #0]

  create_msg(m);
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	f7ff ff98 	bl	8003b0c <create_msg>
  
  end = add_msg_type(&m->options[4], DHCPREQUEST);
 8003bdc:	2103      	movs	r1, #3
 8003bde:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
 8003be2:	f7ff ff23 	bl	8003a2c <add_msg_type>
  end=end+25;
  end = add_server_id(end);
 8003be6:	3019      	adds	r0, #25
 8003be8:	f7ff ff28 	bl	8003a3c <add_server_id>
  end = add_req_ipaddr(end);
 8003bec:	f7ff ff44 	bl	8003a78 <add_req_ipaddr>
  end = add_end(end);
 8003bf0:	f7ff ff3e 	bl	8003a70 <add_end>
  
  uip_send(uip_appdata, end - (u8_t *)uip_appdata);
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	1ac1      	subs	r1, r0, r3
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f001 f933 	bl	8004e64 <uip_send>
 8003bfe:	bd38      	pop	{r3, r4, r5, pc}
 8003c00:	20000f14 	.word	0x20000f14

08003c04 <send_discover>:

}
/*---------------------------------------------------------------------------*/
static void
send_discover(void)
{
 8003c04:	b538      	push	{r3, r4, r5, lr}
  u8_t *end;
  struct dhcp_msg *m = (struct dhcp_msg *)uip_appdata;
 8003c06:	4d0e      	ldr	r5, [pc, #56]	; (8003c40 <send_discover+0x3c>)
 8003c08:	682c      	ldr	r4, [r5, #0]
////  printf("Handle 11\n");
  create_msg(m);
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	f7ff ff7e 	bl	8003b0c <create_msg>

  end = add_msg_type(&m->options[4], DHCPDISCOVER);
 8003c10:	2101      	movs	r1, #1
 8003c12:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
 8003c16:	f7ff ff09 	bl	8003a2c <add_msg_type>
  memcpy(m->options+10, s.mac_addr, 6);
 8003c1a:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <send_discover+0x40>)
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	f8c4 20f6 	str.w	r2, [r4, #246]	; 0xf6
 8003c24:	889b      	ldrh	r3, [r3, #4]
 8003c26:	f8a4 30fa 	strh.w	r3, [r4, #250]	; 0xfa
  //end = add_msg_type(&m->options[20], DHCPDISCOVER);
  end=end+25;//hostname
  end = add_req_options(end);
 8003c2a:	3019      	adds	r0, #25
 8003c2c:	f7ff ff14 	bl	8003a58 <add_req_options>
  end = add_end(end);
 8003c30:	f7ff ff1e 	bl	8003a70 <add_end>
  //printf("Handle 10\n");
  uip_send(uip_appdata, end - (u8_t *)uip_appdata);
 8003c34:	682b      	ldr	r3, [r5, #0]
 8003c36:	1ac1      	subs	r1, r0, r3
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f001 f913 	bl	8004e64 <uip_send>
 8003c3e:	bd38      	pop	{r3, r4, r5, pc}
 8003c40:	20000f14 	.word	0x20000f14
 8003c44:	20000aa4 	.word	0x20000aa4

08003c48 <parse_msg>:
  return type;
}
/*---------------------------------------------------------------------------*/
static u8_t
parse_msg(void)
{
 8003c48:	b510      	push	{r4, lr}
  struct dhcp_msg *m = (struct dhcp_msg *)uip_appdata;
 8003c4a:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <parse_msg+0x48>)
 8003c4c:	681c      	ldr	r4, [r3, #0]
  //printf("\n----PARSE  %d %d %d %d %d %d\n\n",m->op,memcmp(m->xid, xid, sizeof(xid)),memcmp(m->chaddr, s.mac_addr, s.mac_len),m->htype,m->hlen,m->hops);
  if(m->op == DHCP_REPLY &&
 8003c4e:	7823      	ldrb	r3, [r4, #0]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d117      	bne.n	8003c84 <parse_msg+0x3c>
     memcmp(m->xid, xid, sizeof(xid)) == 0 &&
 8003c54:	2204      	movs	r2, #4
 8003c56:	490f      	ldr	r1, [pc, #60]	; (8003c94 <parse_msg+0x4c>)
 8003c58:	18a0      	adds	r0, r4, r2
 8003c5a:	f001 fb55 	bl	8005308 <memcmp>
static u8_t
parse_msg(void)
{
  struct dhcp_msg *m = (struct dhcp_msg *)uip_appdata;
  //printf("\n----PARSE  %d %d %d %d %d %d\n\n",m->op,memcmp(m->xid, xid, sizeof(xid)),memcmp(m->chaddr, s.mac_addr, s.mac_len),m->htype,m->hlen,m->hops);
  if(m->op == DHCP_REPLY &&
 8003c5e:	b998      	cbnz	r0, 8003c88 <parse_msg+0x40>
     memcmp(m->xid, xid, sizeof(xid)) == 0 &&
     memcmp(m->chaddr, s.mac_addr, s.mac_len) == 0) {
 8003c60:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <parse_msg+0x50>)
 8003c62:	699a      	ldr	r2, [r3, #24]
 8003c64:	6959      	ldr	r1, [r3, #20]
 8003c66:	f104 001c 	add.w	r0, r4, #28
 8003c6a:	f001 fb4d 	bl	8005308 <memcmp>
parse_msg(void)
{
  struct dhcp_msg *m = (struct dhcp_msg *)uip_appdata;
  //printf("\n----PARSE  %d %d %d %d %d %d\n\n",m->op,memcmp(m->xid, xid, sizeof(xid)),memcmp(m->chaddr, s.mac_addr, s.mac_len),m->htype,m->hlen,m->hops);
  if(m->op == DHCP_REPLY &&
     memcmp(m->xid, xid, sizeof(xid)) == 0 &&
 8003c6e:	b968      	cbnz	r0, 8003c8c <parse_msg+0x44>
     memcmp(m->chaddr, s.mac_addr, s.mac_len) == 0) {
    memcpy(s.ipaddr, m->yiaddr, 4);
 8003c70:	6920      	ldr	r0, [r4, #16]
 8003c72:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <parse_msg+0x50>)
 8003c74:	6258      	str	r0, [r3, #36]	; 0x24
    return parse_options(&m->options[4], uip_datalen());
 8003c76:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <parse_msg+0x54>)
 8003c78:	8819      	ldrh	r1, [r3, #0]
 8003c7a:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
 8003c7e:	f7ff ff09 	bl	8003a94 <parse_options>
 8003c82:	bd10      	pop	{r4, pc}
  }
  return 0;
 8003c84:	2000      	movs	r0, #0
 8003c86:	bd10      	pop	{r4, pc}
 8003c88:	2000      	movs	r0, #0
 8003c8a:	bd10      	pop	{r4, pc}
 8003c8c:	2000      	movs	r0, #0
}
 8003c8e:	bd10      	pop	{r4, pc}
 8003c90:	20000f14 	.word	0x20000f14
 8003c94:	080062f8 	.word	0x080062f8
 8003c98:	20000aa4 	.word	0x20000aa4
 8003c9c:	20000f00 	.word	0x20000f00

08003ca0 <dhcp_getip>:
/*---------------------------------------------------------------------------*/

uint8_t dhcp_getip(void)
{
 8003ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ca2:	b083      	sub	sp, #12
//	tick();
	s.state = STATE_SENDING;
 8003ca4:	4b4a      	ldr	r3, [pc, #296]	; (8003dd0 <dhcp_getip+0x130>)
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	701a      	strb	r2, [r3, #0]
	s.ticks = CLOCK_SECOND;
 8003caa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cae:	821a      	strh	r2, [r3, #16]

	while(!(s.state == STATE_CONFIG_RECEIVED))
 8003cb0:	e001      	b.n	8003cb6 <dhcp_getip+0x16>
	{
		mac0_tick();
 8003cb2:	f7fe f8d5 	bl	8001e60 <mac0_tick>
{
//	tick();
	s.state = STATE_SENDING;
	s.ticks = CLOCK_SECOND;

	while(!(s.state == STATE_CONFIG_RECEIVED))
 8003cb6:	4b46      	ldr	r3, [pc, #280]	; (8003dd0 <dhcp_getip+0x130>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d1f9      	bne.n	8003cb2 <dhcp_getip+0x12>
	{
		mac0_tick();
	}
	printf("Offer Received State\n");
 8003cbe:	4845      	ldr	r0, [pc, #276]	; (8003dd4 <dhcp_getip+0x134>)
 8003cc0:	f7ff fc5c 	bl	800357c <puts>
//		if(s.state != STATE_CONFIG_RECEIVED)
//			return 0;
//		else
//		{
			printf("Got IP address %d.%d.%d.%d\n",
			 uip_ipaddr1(s.ipaddr), uip_ipaddr2(s.ipaddr),
 8003cc4:	4c42      	ldr	r4, [pc, #264]	; (8003dd0 <dhcp_getip+0x130>)
 8003cc6:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8003cc8:	f000 f992 	bl	8003ff0 <htons>
 8003ccc:	4605      	mov	r5, r0
 8003cce:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8003cd0:	f000 f98e 	bl	8003ff0 <htons>
 8003cd4:	4606      	mov	r6, r0
			 uip_ipaddr3(s.ipaddr), uip_ipaddr4(s.ipaddr));
 8003cd6:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8003cd8:	f000 f98a 	bl	8003ff0 <htons>
 8003cdc:	4607      	mov	r7, r0
 8003cde:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8003ce0:	f000 f986 	bl	8003ff0 <htons>
//		}
//		if(s.state != STATE_CONFIG_RECEIVED)
//			return 0;
//		else
//		{
			printf("Got IP address %d.%d.%d.%d\n",
 8003ce4:	b2c0      	uxtb	r0, r0
 8003ce6:	9000      	str	r0, [sp, #0]
 8003ce8:	f3c7 230f 	ubfx	r3, r7, #8, #16
 8003cec:	b2f2      	uxtb	r2, r6
 8003cee:	f3c5 210f 	ubfx	r1, r5, #8, #16
 8003cf2:	4839      	ldr	r0, [pc, #228]	; (8003dd8 <dhcp_getip+0x138>)
 8003cf4:	f7ff fc1e 	bl	8003534 <iprintf>
			 uip_ipaddr1(s.ipaddr), uip_ipaddr2(s.ipaddr),
			 uip_ipaddr3(s.ipaddr), uip_ipaddr4(s.ipaddr));
			uip_ipaddr_copy(uip_hostaddr,s.ipaddr);
 8003cf8:	4b38      	ldr	r3, [pc, #224]	; (8003ddc <dhcp_getip+0x13c>)
 8003cfa:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 8003cfc:	801a      	strh	r2, [r3, #0]
 8003cfe:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003d00:	805a      	strh	r2, [r3, #2]
			printf("Got netmask %d.%d.%d.%d\n",
			 uip_ipaddr1(s.netmask), uip_ipaddr2(s.netmask),
 8003d02:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8003d04:	f000 f974 	bl	8003ff0 <htons>
 8003d08:	4605      	mov	r5, r0
 8003d0a:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8003d0c:	f000 f970 	bl	8003ff0 <htons>
 8003d10:	4606      	mov	r6, r0
			 uip_ipaddr3(s.netmask), uip_ipaddr4(s.netmask));
 8003d12:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8003d14:	f000 f96c 	bl	8003ff0 <htons>
 8003d18:	4607      	mov	r7, r0
 8003d1a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8003d1c:	f000 f968 	bl	8003ff0 <htons>
//		{
			printf("Got IP address %d.%d.%d.%d\n",
			 uip_ipaddr1(s.ipaddr), uip_ipaddr2(s.ipaddr),
			 uip_ipaddr3(s.ipaddr), uip_ipaddr4(s.ipaddr));
			uip_ipaddr_copy(uip_hostaddr,s.ipaddr);
			printf("Got netmask %d.%d.%d.%d\n",
 8003d20:	b2c0      	uxtb	r0, r0
 8003d22:	9000      	str	r0, [sp, #0]
 8003d24:	f3c7 230f 	ubfx	r3, r7, #8, #16
 8003d28:	b2f2      	uxtb	r2, r6
 8003d2a:	f3c5 210f 	ubfx	r1, r5, #8, #16
 8003d2e:	482c      	ldr	r0, [pc, #176]	; (8003de0 <dhcp_getip+0x140>)
 8003d30:	f7ff fc00 	bl	8003534 <iprintf>
			 uip_ipaddr1(s.netmask), uip_ipaddr2(s.netmask),
			 uip_ipaddr3(s.netmask), uip_ipaddr4(s.netmask));
			uip_ipaddr_copy(uip_netmask,s.netmask);
 8003d34:	4b2b      	ldr	r3, [pc, #172]	; (8003de4 <dhcp_getip+0x144>)
 8003d36:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003d38:	801a      	strh	r2, [r3, #0]
 8003d3a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003d3c:	805a      	strh	r2, [r3, #2]
			printf("Got DNS server %d.%d.%d.%d\n",
			 uip_ipaddr1(s.dnsaddr), uip_ipaddr2(s.dnsaddr),
 8003d3e:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8003d40:	f000 f956 	bl	8003ff0 <htons>
 8003d44:	4605      	mov	r5, r0
 8003d46:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8003d48:	f000 f952 	bl	8003ff0 <htons>
 8003d4c:	4606      	mov	r6, r0
			 uip_ipaddr3(s.dnsaddr), uip_ipaddr4(s.dnsaddr));
 8003d4e:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8003d50:	f000 f94e 	bl	8003ff0 <htons>
 8003d54:	4607      	mov	r7, r0
 8003d56:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8003d58:	f000 f94a 	bl	8003ff0 <htons>
			uip_ipaddr_copy(uip_hostaddr,s.ipaddr);
			printf("Got netmask %d.%d.%d.%d\n",
			 uip_ipaddr1(s.netmask), uip_ipaddr2(s.netmask),
			 uip_ipaddr3(s.netmask), uip_ipaddr4(s.netmask));
			uip_ipaddr_copy(uip_netmask,s.netmask);
			printf("Got DNS server %d.%d.%d.%d\n",
 8003d5c:	b2c0      	uxtb	r0, r0
 8003d5e:	9000      	str	r0, [sp, #0]
 8003d60:	f3c7 230f 	ubfx	r3, r7, #8, #16
 8003d64:	b2f2      	uxtb	r2, r6
 8003d66:	f3c5 210f 	ubfx	r1, r5, #8, #16
 8003d6a:	481f      	ldr	r0, [pc, #124]	; (8003de8 <dhcp_getip+0x148>)
 8003d6c:	f7ff fbe2 	bl	8003534 <iprintf>
			 uip_ipaddr1(s.dnsaddr), uip_ipaddr2(s.dnsaddr),
			 uip_ipaddr3(s.dnsaddr), uip_ipaddr4(s.dnsaddr));
			printf("Got default router %d.%d.%d.%d\n",
			 uip_ipaddr1(s.default_router), uip_ipaddr2(s.default_router),
 8003d70:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8003d72:	f000 f93d 	bl	8003ff0 <htons>
 8003d76:	4605      	mov	r5, r0
 8003d78:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8003d7a:	f000 f939 	bl	8003ff0 <htons>
 8003d7e:	4606      	mov	r6, r0
			 uip_ipaddr3(s.default_router), uip_ipaddr4(s.default_router));
 8003d80:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8003d82:	f000 f935 	bl	8003ff0 <htons>
 8003d86:	4607      	mov	r7, r0
 8003d88:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8003d8a:	f000 f931 	bl	8003ff0 <htons>
			 uip_ipaddr3(s.netmask), uip_ipaddr4(s.netmask));
			uip_ipaddr_copy(uip_netmask,s.netmask);
			printf("Got DNS server %d.%d.%d.%d\n",
			 uip_ipaddr1(s.dnsaddr), uip_ipaddr2(s.dnsaddr),
			 uip_ipaddr3(s.dnsaddr), uip_ipaddr4(s.dnsaddr));
			printf("Got default router %d.%d.%d.%d\n",
 8003d8e:	b2c0      	uxtb	r0, r0
 8003d90:	9000      	str	r0, [sp, #0]
 8003d92:	f3c7 230f 	ubfx	r3, r7, #8, #16
 8003d96:	b2f2      	uxtb	r2, r6
 8003d98:	f3c5 210f 	ubfx	r1, r5, #8, #16
 8003d9c:	4813      	ldr	r0, [pc, #76]	; (8003dec <dhcp_getip+0x14c>)
 8003d9e:	f7ff fbc9 	bl	8003534 <iprintf>
			 uip_ipaddr1(s.default_router), uip_ipaddr2(s.default_router),
			 uip_ipaddr3(s.default_router), uip_ipaddr4(s.default_router));
			uip_ipaddr_copy(uip_draddr,s.default_router);
 8003da2:	4b13      	ldr	r3, [pc, #76]	; (8003df0 <dhcp_getip+0x150>)
 8003da4:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8003da6:	801a      	strh	r2, [r3, #0]
 8003da8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8003daa:	805a      	strh	r2, [r3, #2]
			printf("Lease expires in %ld seconds\n",
			 ntohs(s.lease_time[0])*65536ul + ntohs(s.lease_time[1]));
 8003dac:	8c20      	ldrh	r0, [r4, #32]
 8003dae:	f000 f91f 	bl	8003ff0 <htons>
 8003db2:	0405      	lsls	r5, r0, #16
 8003db4:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8003db6:	f000 f91b 	bl	8003ff0 <htons>
			 uip_ipaddr3(s.dnsaddr), uip_ipaddr4(s.dnsaddr));
			printf("Got default router %d.%d.%d.%d\n",
			 uip_ipaddr1(s.default_router), uip_ipaddr2(s.default_router),
			 uip_ipaddr3(s.default_router), uip_ipaddr4(s.default_router));
			uip_ipaddr_copy(uip_draddr,s.default_router);
			printf("Lease expires in %ld seconds\n",
 8003dba:	1941      	adds	r1, r0, r5
 8003dbc:	480d      	ldr	r0, [pc, #52]	; (8003df4 <dhcp_getip+0x154>)
 8003dbe:	f7ff fbb9 	bl	8003534 <iprintf>
			 ntohs(s.lease_time[0])*65536ul + ntohs(s.lease_time[1]));
			uip_close();
 8003dc2:	2210      	movs	r2, #16
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <dhcp_getip+0x158>)
 8003dc6:	701a      	strb	r2, [r3, #0]
			return 1;
//		}
//	}

}
 8003dc8:	2001      	movs	r0, #1
 8003dca:	b003      	add	sp, #12
 8003dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000aa4 	.word	0x20000aa4
 8003dd4:	08006320 	.word	0x08006320
 8003dd8:	08006338 	.word	0x08006338
 8003ddc:	20000fac 	.word	0x20000fac
 8003de0:	08006354 	.word	0x08006354
 8003de4:	20000fa8 	.word	0x20000fa8
 8003de8:	08006370 	.word	0x08006370
 8003dec:	0800638c 	.word	0x0800638c
 8003df0:	20000fa4 	.word	0x20000fa4
 8003df4:	080063ac 	.word	0x080063ac
 8003df8:	20000f0c 	.word	0x20000f0c

08003dfc <handle_dhcp>:

uint8_t
handle_dhcp(void)
{
 8003dfc:	b510      	push	{r4, lr}
  
  /* try_again:*/

	//printf("Handle dhcp %d %d\n",uip_newdata(),parse_msg());
    if(uip_newdata() && parse_msg() == DHCPOFFER) {
 8003dfe:	4b19      	ldr	r3, [pc, #100]	; (8003e64 <handle_dhcp+0x68>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	f013 0f02 	tst.w	r3, #2
 8003e06:	d00e      	beq.n	8003e26 <handle_dhcp+0x2a>
 8003e08:	f7ff ff1e 	bl	8003c48 <parse_msg>
 8003e0c:	2802      	cmp	r0, #2
 8003e0e:	d10a      	bne.n	8003e26 <handle_dhcp+0x2a>
      s.state = STATE_OFFER_RECEIVED;
 8003e10:	4c15      	ldr	r4, [pc, #84]	; (8003e68 <handle_dhcp+0x6c>)
 8003e12:	2302      	movs	r3, #2
 8003e14:	7023      	strb	r3, [r4, #0]
		send_request();
 8003e16:	f7ff fedb 	bl	8003bd0 <send_request>
		uip_timer_set(&s.timer, s.ticks);
 8003e1a:	8a21      	ldrh	r1, [r4, #16]
 8003e1c:	f104 0008 	add.w	r0, r4, #8
 8003e20:	f001 fa44 	bl	80052ac <uip_timer_set>
 8003e24:	e017      	b.n	8003e56 <handle_dhcp+0x5a>
		//printf("DHCP_OFFER\n");

    }else if(uip_newdata() && parse_msg() == DHCPACK) {
 8003e26:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <handle_dhcp+0x68>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	f013 0f02 	tst.w	r3, #2
 8003e2e:	d007      	beq.n	8003e40 <handle_dhcp+0x44>
 8003e30:	f7ff ff0a 	bl	8003c48 <parse_msg>
 8003e34:	2805      	cmp	r0, #5
 8003e36:	d103      	bne.n	8003e40 <handle_dhcp+0x44>
        s.state = STATE_CONFIG_RECEIVED;
 8003e38:	2203      	movs	r2, #3
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <handle_dhcp+0x6c>)
 8003e3c:	701a      	strb	r2, [r3, #0]
 8003e3e:	e00a      	b.n	8003e56 <handle_dhcp+0x5a>

      }else if(s.state != STATE_OFFER_RECEIVED)
 8003e40:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <handle_dhcp+0x6c>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d006      	beq.n	8003e56 <handle_dhcp+0x5a>
  	{
  		send_discover();
 8003e48:	f7ff fedc 	bl	8003c04 <send_discover>
  		uip_timer_set(&s.timer, s.ticks);
 8003e4c:	4806      	ldr	r0, [pc, #24]	; (8003e68 <handle_dhcp+0x6c>)
 8003e4e:	8a01      	ldrh	r1, [r0, #16]
 8003e50:	3008      	adds	r0, #8
 8003e52:	f001 fa2b 	bl	80052ac <uip_timer_set>
  	}

    s.ticks = CLOCK_SECOND;
 8003e56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e5a:	4b03      	ldr	r3, [pc, #12]	; (8003e68 <handle_dhcp+0x6c>)
 8003e5c:	821a      	strh	r2, [r3, #16]




  return(0);
}
 8003e5e:	2000      	movs	r0, #0
 8003e60:	bd10      	pop	{r4, pc}
 8003e62:	bf00      	nop
 8003e64:	20000f0c 	.word	0x20000f0c
 8003e68:	20000aa4 	.word	0x20000aa4

08003e6c <dhcpc_init>:
/*---------------------------------------------------------------------------*/
void
dhcpc_init(const void *mac_addr, int mac_len)
{
 8003e6c:	b510      	push	{r4, lr}
 8003e6e:	b082      	sub	sp, #8
  uip_ipaddr_t addr;
  
  s.mac_addr = mac_addr;
 8003e70:	4c0b      	ldr	r4, [pc, #44]	; (8003ea0 <dhcpc_init+0x34>)
 8003e72:	6160      	str	r0, [r4, #20]
  s.mac_len  = mac_len;
 8003e74:	61a1      	str	r1, [r4, #24]

  s.state = STATE_INITIAL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	7023      	strb	r3, [r4, #0]
  uip_ipaddr(addr, 255,255,255,255);
 8003e7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e7e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003e82:	f8ad 3006 	strh.w	r3, [sp, #6]
  s.conn = uip_udp_new(&addr, HTONS(DHCPC_SERVER_PORT));
 8003e86:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 8003e8a:	a801      	add	r0, sp, #4
 8003e8c:	f000 ff96 	bl	8004dbc <uip_udp_new>
 8003e90:	6060      	str	r0, [r4, #4]
  if(s.conn != NULL) {
 8003e92:	b110      	cbz	r0, 8003e9a <dhcpc_init+0x2e>
    uip_udp_bind(s.conn, HTONS(DHCPC_CLIENT_PORT));
 8003e94:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8003e98:	8083      	strh	r3, [r0, #4]
  }

}
 8003e9a:	b002      	add	sp, #8
 8003e9c:	bd10      	pop	{r4, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000aa4 	.word	0x20000aa4

08003ea4 <dhcpc_appcall>:
/*---------------------------------------------------------------------------*/
void
dhcpc_appcall(void)
{
 8003ea4:	b508      	push	{r3, lr}
  handle_dhcp();
 8003ea6:	f7ff ffa9 	bl	8003dfc <handle_dhcp>
 8003eaa:	bd08      	pop	{r3, pc}

08003eac <chksum>:

#if ! UIP_ARCH_CHKSUM
/*---------------------------------------------------------------------------*/
static u16_t
chksum(u16_t sum, const u8_t *data, u16_t len)
{
 8003eac:	b410      	push	{r4}
  u16_t t;
  const u8_t *dataptr;
  const u8_t *last_byte;

  dataptr = data;
  last_byte = data + len - 1;
 8003eae:	3a01      	subs	r2, #1
 8003eb0:	440a      	add	r2, r1
  
  while(dataptr < last_byte) {	/* At least two more bytes */
 8003eb2:	e00b      	b.n	8003ecc <chksum+0x20>
    t = (dataptr[0] << 8) + dataptr[1];
 8003eb4:	780c      	ldrb	r4, [r1, #0]
 8003eb6:	784b      	ldrb	r3, [r1, #1]
 8003eb8:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8003ebc:	b29b      	uxth	r3, r3
    sum += t;
 8003ebe:	4418      	add	r0, r3
 8003ec0:	b280      	uxth	r0, r0
    if(sum < t) {
 8003ec2:	4283      	cmp	r3, r0
 8003ec4:	d901      	bls.n	8003eca <chksum+0x1e>
      sum++;		/* carry */
 8003ec6:	3001      	adds	r0, #1
 8003ec8:	b280      	uxth	r0, r0
    }
    dataptr += 2;
 8003eca:	3102      	adds	r1, #2
  const u8_t *last_byte;

  dataptr = data;
  last_byte = data + len - 1;
  
  while(dataptr < last_byte) {	/* At least two more bytes */
 8003ecc:	4291      	cmp	r1, r2
 8003ece:	d3f1      	bcc.n	8003eb4 <chksum+0x8>
      sum++;		/* carry */
    }
    dataptr += 2;
  }
  
  if(dataptr == last_byte) {
 8003ed0:	d107      	bne.n	8003ee2 <chksum+0x36>
    t = (dataptr[0] << 8) + 0;
 8003ed2:	780b      	ldrb	r3, [r1, #0]
 8003ed4:	021b      	lsls	r3, r3, #8
    sum += t;
 8003ed6:	4418      	add	r0, r3
 8003ed8:	b280      	uxth	r0, r0
    if(sum < t) {
 8003eda:	4283      	cmp	r3, r0
 8003edc:	d901      	bls.n	8003ee2 <chksum+0x36>
      sum++;		/* carry */
 8003ede:	3001      	adds	r0, #1
 8003ee0:	b280      	uxth	r0, r0
    }
  }

  /* Return sum in host byte order. */
  return sum;
}
 8003ee2:	bc10      	pop	{r4}
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop

08003ee8 <uip_add32>:
#endif /* UIP_LOGGING == 1 */

#if ! UIP_ARCH_ADD32
void
uip_add32(u8_t *op32, u16_t op16)
{
 8003ee8:	b470      	push	{r4, r5, r6}
  uip_acc32[3] = op32[3] + (op16 & 0xff);
 8003eea:	78c5      	ldrb	r5, [r0, #3]
 8003eec:	440d      	add	r5, r1
 8003eee:	b2ed      	uxtb	r5, r5
 8003ef0:	4c13      	ldr	r4, [pc, #76]	; (8003f40 <uip_add32+0x58>)
 8003ef2:	70e5      	strb	r5, [r4, #3]
  uip_acc32[2] = op32[2] + (op16 >> 8);
 8003ef4:	7883      	ldrb	r3, [r0, #2]
 8003ef6:	0a0e      	lsrs	r6, r1, #8
 8003ef8:	4433      	add	r3, r6
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	70a3      	strb	r3, [r4, #2]
  uip_acc32[1] = op32[1];
 8003efe:	7842      	ldrb	r2, [r0, #1]
 8003f00:	7062      	strb	r2, [r4, #1]
  uip_acc32[0] = op32[0];
 8003f02:	7800      	ldrb	r0, [r0, #0]
 8003f04:	7020      	strb	r0, [r4, #0]
  
  if(uip_acc32[2] < (op16 >> 8)) {
 8003f06:	b29c      	uxth	r4, r3
 8003f08:	42a6      	cmp	r6, r4
 8003f0a:	d906      	bls.n	8003f1a <uip_add32+0x32>
    ++uip_acc32[1];
 8003f0c:	3201      	adds	r2, #1
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	4c0b      	ldr	r4, [pc, #44]	; (8003f40 <uip_add32+0x58>)
 8003f12:	7062      	strb	r2, [r4, #1]
    if(uip_acc32[1] == 0) {
 8003f14:	b90a      	cbnz	r2, 8003f1a <uip_add32+0x32>
      ++uip_acc32[0];
 8003f16:	3001      	adds	r0, #1
 8003f18:	7020      	strb	r0, [r4, #0]
    }
  }
  
  
  if(uip_acc32[3] < (op16 & 0xff)) {
 8003f1a:	b2c9      	uxtb	r1, r1
 8003f1c:	428d      	cmp	r5, r1
 8003f1e:	da0c      	bge.n	8003f3a <uip_add32+0x52>
    ++uip_acc32[2];
 8003f20:	3301      	adds	r3, #1
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	4a06      	ldr	r2, [pc, #24]	; (8003f40 <uip_add32+0x58>)
 8003f26:	7093      	strb	r3, [r2, #2]
    if(uip_acc32[2] == 0) {
 8003f28:	b93b      	cbnz	r3, 8003f3a <uip_add32+0x52>
      ++uip_acc32[1];
 8003f2a:	7853      	ldrb	r3, [r2, #1]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	7053      	strb	r3, [r2, #1]
      if(uip_acc32[1] == 0) {
 8003f32:	b913      	cbnz	r3, 8003f3a <uip_add32+0x52>
	++uip_acc32[0];
 8003f34:	7813      	ldrb	r3, [r2, #0]
 8003f36:	3301      	adds	r3, #1
 8003f38:	7013      	strb	r3, [r2, #0]
      }
    }
  }
}
 8003f3a:	bc70      	pop	{r4, r5, r6}
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	20000f08 	.word	0x20000f08

08003f44 <uip_add_rcv_nxt>:
}
#endif /* UIP_REASSEMBLY */
/*---------------------------------------------------------------------------*/
static void
uip_add_rcv_nxt(u16_t n)
{
 8003f44:	b510      	push	{r4, lr}
  uip_add32(uip_conn->rcv_nxt, n);
 8003f46:	4c09      	ldr	r4, [pc, #36]	; (8003f6c <uip_add_rcv_nxt+0x28>)
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	4601      	mov	r1, r0
 8003f4c:	f103 0008 	add.w	r0, r3, #8
 8003f50:	f7ff ffca 	bl	8003ee8 <uip_add32>
  uip_conn->rcv_nxt[0] = uip_acc32[0];
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	4a06      	ldr	r2, [pc, #24]	; (8003f70 <uip_add_rcv_nxt+0x2c>)
 8003f58:	7811      	ldrb	r1, [r2, #0]
 8003f5a:	7219      	strb	r1, [r3, #8]
  uip_conn->rcv_nxt[1] = uip_acc32[1];
 8003f5c:	7851      	ldrb	r1, [r2, #1]
 8003f5e:	7259      	strb	r1, [r3, #9]
  uip_conn->rcv_nxt[2] = uip_acc32[2];
 8003f60:	7891      	ldrb	r1, [r2, #2]
 8003f62:	7299      	strb	r1, [r3, #10]
  uip_conn->rcv_nxt[3] = uip_acc32[3];
 8003f64:	78d2      	ldrb	r2, [r2, #3]
 8003f66:	72da      	strb	r2, [r3, #11]
 8003f68:	bd10      	pop	{r4, pc}
 8003f6a:	bf00      	nop
 8003f6c:	20000f18 	.word	0x20000f18
 8003f70:	20000f08 	.word	0x20000f08

08003f74 <uip_init>:
/*---------------------------------------------------------------------------*/
//"struct uip_conn {" in uip.h
void
uip_init(void)
{
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
 8003f74:	2200      	movs	r2, #0
 8003f76:	4b19      	ldr	r3, [pc, #100]	; (8003fdc <uip_init+0x68>)
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	e006      	b.n	8003f8a <uip_init+0x16>
    uip_listenports[c] = 0;
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	4a18      	ldr	r2, [pc, #96]	; (8003fe0 <uip_init+0x6c>)
 8003f80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
/*---------------------------------------------------------------------------*/
//"struct uip_conn {" in uip.h
void
uip_init(void)
{
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
 8003f84:	3301      	adds	r3, #1
 8003f86:	4a15      	ldr	r2, [pc, #84]	; (8003fdc <uip_init+0x68>)
 8003f88:	7013      	strb	r3, [r2, #0]
 8003f8a:	4b14      	ldr	r3, [pc, #80]	; (8003fdc <uip_init+0x68>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d9f4      	bls.n	8003f7c <uip_init+0x8>
    uip_listenports[c] = 0;
  }
  for(c = 0; c < UIP_CONNS; ++c) {
 8003f92:	2200      	movs	r2, #0
 8003f94:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <uip_init+0x68>)
 8003f96:	701a      	strb	r2, [r3, #0]
 8003f98:	e007      	b.n	8003faa <uip_init+0x36>
    uip_conns[c].tcpstateflags = UIP_CLOSED;
 8003f9a:	4a12      	ldr	r2, [pc, #72]	; (8003fe4 <uip_init+0x70>)
 8003f9c:	eb02 1243 	add.w	r2, r2, r3, lsl #5
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	7651      	strb	r1, [r2, #25]
uip_init(void)
{
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    uip_listenports[c] = 0;
  }
  for(c = 0; c < UIP_CONNS; ++c) {
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	4a0d      	ldr	r2, [pc, #52]	; (8003fdc <uip_init+0x68>)
 8003fa8:	7013      	strb	r3, [r2, #0]
 8003faa:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <uip_init+0x68>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d9f3      	bls.n	8003f9a <uip_init+0x26>
    uip_conns[c].tcpstateflags = UIP_CLOSED;
  }
#if UIP_ACTIVE_OPEN
  lastport = 1024;
 8003fb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fb6:	4b0c      	ldr	r3, [pc, #48]	; (8003fe8 <uip_init+0x74>)
 8003fb8:	801a      	strh	r2, [r3, #0]
#endif /* UIP_ACTIVE_OPEN */

#if UIP_UDP
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 8003fba:	2200      	movs	r2, #0
 8003fbc:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <uip_init+0x68>)
 8003fbe:	701a      	strb	r2, [r3, #0]
 8003fc0:	e007      	b.n	8003fd2 <uip_init+0x5e>
    uip_udp_conns[c].lport = 0;
 8003fc2:	4a0a      	ldr	r2, [pc, #40]	; (8003fec <uip_init+0x78>)
 8003fc4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8003fc8:	2100      	movs	r1, #0
 8003fca:	8091      	strh	r1, [r2, #4]
#if UIP_ACTIVE_OPEN
  lastport = 1024;
#endif /* UIP_ACTIVE_OPEN */

#if UIP_UDP
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 8003fcc:	3301      	adds	r3, #1
 8003fce:	4a03      	ldr	r2, [pc, #12]	; (8003fdc <uip_init+0x68>)
 8003fd0:	7013      	strb	r3, [r2, #0]
 8003fd2:	4b02      	ldr	r3, [pc, #8]	; (8003fdc <uip_init+0x68>)
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d9f3      	bls.n	8003fc2 <uip_init+0x4e>
  /* IPv4 initialization. */
#if UIP_FIXEDADDR == 0
  /*  uip_hostaddr[0] = uip_hostaddr[1] = 0;*/
#endif /* UIP_FIXEDADDR */

}
 8003fda:	4770      	bx	lr
 8003fdc:	20000ae2 	.word	0x20000ae2
 8003fe0:	20000f9c 	.word	0x20000f9c
 8003fe4:	20000f1c 	.word	0x20000f1c
 8003fe8:	20000ae0 	.word	0x20000ae0
 8003fec:	2000139c 	.word	0x2000139c

08003ff0 <htons>:
}
/*---------------------------------------------------------------------------*/
u16_t
htons(u16_t val)
{
  return HTONS(val);
 8003ff0:	0a03      	lsrs	r3, r0, #8
 8003ff2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 8003ff6:	b280      	uxth	r0, r0
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop

08003ffc <uip_ipchksum>:
}
/*---------------------------------------------------------------------------*/
#ifndef UIP_ARCH_IPCHKSUM
u16_t
uip_ipchksum(void)
{
 8003ffc:	b508      	push	{r3, lr}
  u16_t sum;

  sum = chksum(0, &uip_buf[UIP_LLH_LEN], UIP_IPH_LEN);
 8003ffe:	2214      	movs	r2, #20
 8004000:	4905      	ldr	r1, [pc, #20]	; (8004018 <uip_ipchksum+0x1c>)
 8004002:	2000      	movs	r0, #0
 8004004:	f7ff ff52 	bl	8003eac <chksum>
  DEBUG_PRINTF("uip_ipchksum: sum 0x%04x\n", sum);
  return (sum == 0) ? 0xffff : htons(sum);
 8004008:	b110      	cbz	r0, 8004010 <uip_ipchksum+0x14>
 800400a:	f7ff fff1 	bl	8003ff0 <htons>
 800400e:	bd08      	pop	{r3, pc}
 8004010:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8004014:	bd08      	pop	{r3, pc}
 8004016:	bf00      	nop
 8004018:	20000fbe 	.word	0x20000fbe

0800401c <upper_layer_chksum>:
#endif
/*---------------------------------------------------------------------------*/
static u16_t
upper_layer_chksum(u8_t proto)
{
 800401c:	b538      	push	{r3, r4, r5, lr}
  u16_t sum;
  
#if UIP_CONF_IPV6
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]);
#else /* UIP_CONF_IPV6 */
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]) - UIP_IPH_LEN;
 800401e:	4d0d      	ldr	r5, [pc, #52]	; (8004054 <upper_layer_chksum+0x38>)
 8004020:	7c2c      	ldrb	r4, [r5, #16]
 8004022:	7c6b      	ldrb	r3, [r5, #17]
 8004024:	eb03 2404 	add.w	r4, r3, r4, lsl #8
 8004028:	3c14      	subs	r4, #20
 800402a:	b2a4      	uxth	r4, r4
#endif /* UIP_CONF_IPV6 */
  
  /* First sum pseudoheader. */
  
  /* IP protocol and length fields. This addition cannot carry. */
  sum = upper_layer_len + proto;
 800402c:	4420      	add	r0, r4
  /* Sum IP source and destination addresses. */
  sum = chksum(sum, (u8_t *)&BUF->srcipaddr[0], 2 * sizeof(uip_ipaddr_t));
 800402e:	2208      	movs	r2, #8
 8004030:	f105 011a 	add.w	r1, r5, #26
 8004034:	b280      	uxth	r0, r0
 8004036:	f7ff ff39 	bl	8003eac <chksum>

  /* Sum TCP header and data. */
  sum = chksum(sum, &uip_buf[UIP_IPH_LEN + UIP_LLH_LEN],
 800403a:	4622      	mov	r2, r4
 800403c:	f105 0122 	add.w	r1, r5, #34	; 0x22
 8004040:	f7ff ff34 	bl	8003eac <chksum>
	       upper_layer_len);
    
  return (sum == 0) ? 0xffff : htons(sum);
 8004044:	b110      	cbz	r0, 800404c <upper_layer_chksum+0x30>
 8004046:	f7ff ffd3 	bl	8003ff0 <htons>
 800404a:	bd38      	pop	{r3, r4, r5, pc}
 800404c:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8004050:	bd38      	pop	{r3, r4, r5, pc}
 8004052:	bf00      	nop
 8004054:	20000fb0 	.word	0x20000fb0

08004058 <uip_tcpchksum>:
}
#endif /* UIP_CONF_IPV6 */
/*---------------------------------------------------------------------------*/
u16_t
uip_tcpchksum(void)
{
 8004058:	b508      	push	{r3, lr}
  return upper_layer_chksum(UIP_PROTO_TCP);
 800405a:	2006      	movs	r0, #6
 800405c:	f7ff ffde 	bl	800401c <upper_layer_chksum>
}
 8004060:	bd08      	pop	{r3, pc}
 8004062:	bf00      	nop

08004064 <uip_udpchksum>:
/*---------------------------------------------------------------------------*/
#if UIP_UDP_CHECKSUMS
u16_t
uip_udpchksum(void)
{
 8004064:	b508      	push	{r3, lr}
  return upper_layer_chksum(UIP_PROTO_UDP);
 8004066:	2011      	movs	r0, #17
 8004068:	f7ff ffd8 	bl	800401c <upper_layer_chksum>
}
 800406c:	bd08      	pop	{r3, pc}
 800406e:	bf00      	nop

08004070 <uip_process>:
  uip_conn->rcv_nxt[3] = uip_acc32[3];
}
/*---------------------------------------------------------------------------*/
void
uip_process(u8_t flag)
{
 8004070:	b570      	push	{r4, r5, r6, lr}
  register struct uip_conn *uip_connr = uip_conn;
 8004072:	4ba4      	ldr	r3, [pc, #656]	; (8004304 <uip_process+0x294>)
 8004074:	681c      	ldr	r4, [r3, #0]

#if UIP_UDP
  if(flag == UIP_UDP_SEND_CONN) {
 8004076:	2804      	cmp	r0, #4
 8004078:	f000 8197 	beq.w	80043aa <uip_process+0x33a>
    goto udp_send;
  }
#endif /* UIP_UDP */
  
  uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
 800407c:	4ba2      	ldr	r3, [pc, #648]	; (8004308 <uip_process+0x298>)
 800407e:	4aa3      	ldr	r2, [pc, #652]	; (800430c <uip_process+0x29c>)
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	4aa3      	ldr	r2, [pc, #652]	; (8004310 <uip_process+0x2a0>)
 8004084:	6013      	str	r3, [r2, #0]

  /* Check if we were invoked because of a poll request for a
     particular connection. */
  if(flag == UIP_POLL_REQUEST) {
 8004086:	2803      	cmp	r0, #3
 8004088:	d110      	bne.n	80040ac <uip_process+0x3c>
    if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED &&
 800408a:	7e63      	ldrb	r3, [r4, #25]
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	2b03      	cmp	r3, #3
 8004092:	f040 860d 	bne.w	8004cb0 <uip_process+0xc40>
       !uip_outstanding(uip_connr)) {
 8004096:	8a23      	ldrh	r3, [r4, #16]
  uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];

  /* Check if we were invoked because of a poll request for a
     particular connection. */
  if(flag == UIP_POLL_REQUEST) {
    if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED &&
 8004098:	2b00      	cmp	r3, #0
 800409a:	f040 8609 	bne.w	8004cb0 <uip_process+0xc40>
       !uip_outstanding(uip_connr)) {
	uip_flags = UIP_POLL;
 800409e:	2208      	movs	r2, #8
 80040a0:	4b9c      	ldr	r3, [pc, #624]	; (8004314 <uip_process+0x2a4>)
 80040a2:	701a      	strb	r2, [r3, #0]
	UIP_APPCALL();
 80040a4:	f7fd fe66 	bl	8001d74 <uipclient_appcall>
	goto appsend;
 80040a8:	f000 bcc5 	b.w	8004a36 <uip_process+0x9c6>
    }
    goto drop;
    
    /* Check if we were invoked because of the perodic timer fireing. */
  } else if(flag == UIP_TIMER) {
 80040ac:	2802      	cmp	r0, #2
 80040ae:	d17b      	bne.n	80041a8 <uip_process+0x138>
    if(uip_reasstmr != 0) {
      --uip_reasstmr;
    }
#endif /* UIP_REASSEMBLY */
    /* Increase the initial sequence number. */
    if(++iss[3] == 0) {
 80040b0:	4a99      	ldr	r2, [pc, #612]	; (8004318 <uip_process+0x2a8>)
 80040b2:	78d3      	ldrb	r3, [r2, #3]
 80040b4:	3301      	adds	r3, #1
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	70d3      	strb	r3, [r2, #3]
 80040ba:	b963      	cbnz	r3, 80040d6 <uip_process+0x66>
      if(++iss[2] == 0) {
 80040bc:	7893      	ldrb	r3, [r2, #2]
 80040be:	3301      	adds	r3, #1
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	7093      	strb	r3, [r2, #2]
 80040c4:	b93b      	cbnz	r3, 80040d6 <uip_process+0x66>
	if(++iss[1] == 0) {
 80040c6:	7853      	ldrb	r3, [r2, #1]
 80040c8:	3301      	adds	r3, #1
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	7053      	strb	r3, [r2, #1]
 80040ce:	b913      	cbnz	r3, 80040d6 <uip_process+0x66>
	  ++iss[0];
 80040d0:	7813      	ldrb	r3, [r2, #0]
 80040d2:	3301      	adds	r3, #1
 80040d4:	7013      	strb	r3, [r2, #0]
	}
      }
    }

    /* Reset the length variables. */
    uip_len = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	4a90      	ldr	r2, [pc, #576]	; (800431c <uip_process+0x2ac>)
 80040da:	8013      	strh	r3, [r2, #0]
    uip_slen = 0;
 80040dc:	4a90      	ldr	r2, [pc, #576]	; (8004320 <uip_process+0x2b0>)
 80040de:	8013      	strh	r3, [r2, #0]

    /* Check if the connection is in a state in which we simply wait
       for the connection to time out. If so, we increase the
       connection's timer and remove the connection if it times
       out. */
    if(uip_connr->tcpstateflags == UIP_TIME_WAIT ||
 80040e0:	7e63      	ldrb	r3, [r4, #25]
 80040e2:	2b07      	cmp	r3, #7
 80040e4:	d001      	beq.n	80040ea <uip_process+0x7a>
 80040e6:	2b05      	cmp	r3, #5
 80040e8:	d10a      	bne.n	8004100 <uip_process+0x90>
       uip_connr->tcpstateflags == UIP_FIN_WAIT_2) {
      ++(uip_connr->timer);
 80040ea:	7ea3      	ldrb	r3, [r4, #26]
 80040ec:	3301      	adds	r3, #1
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	76a3      	strb	r3, [r4, #26]
      if(uip_connr->timer == UIP_TIME_WAIT_TIMEOUT) {
 80040f2:	2b1e      	cmp	r3, #30
 80040f4:	f040 85dc 	bne.w	8004cb0 <uip_process+0xc40>
	uip_connr->tcpstateflags = UIP_CLOSED;
 80040f8:	2300      	movs	r3, #0
 80040fa:	7663      	strb	r3, [r4, #25]
 80040fc:	f000 bdd8 	b.w	8004cb0 <uip_process+0xc40>
      }
    } else if(uip_connr->tcpstateflags != UIP_CLOSED) {
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 85d5 	beq.w	8004cb0 <uip_process+0xc40>
      /* If the connection has outstanding data, we increase the
	 connection's timer and see if it has reached the RTO value
	 in which case we retransmit. */
      if(uip_outstanding(uip_connr)) {
 8004106:	8a22      	ldrh	r2, [r4, #16]
 8004108:	2a00      	cmp	r2, #0
 800410a:	d041      	beq.n	8004190 <uip_process+0x120>
	if(uip_connr->timer-- == 0) {
 800410c:	7ea2      	ldrb	r2, [r4, #26]
 800410e:	1e51      	subs	r1, r2, #1
 8004110:	76a1      	strb	r1, [r4, #26]
 8004112:	2a00      	cmp	r2, #0
 8004114:	f040 85cc 	bne.w	8004cb0 <uip_process+0xc40>
	  if(uip_connr->nrtx == UIP_MAXRTX ||
 8004118:	7ee2      	ldrb	r2, [r4, #27]
 800411a:	2a08      	cmp	r2, #8
 800411c:	d005      	beq.n	800412a <uip_process+0xba>
	     ((uip_connr->tcpstateflags == UIP_SYN_SENT ||
 800411e:	1e59      	subs	r1, r3, #1
 8004120:	b2c9      	uxtb	r1, r1
      /* If the connection has outstanding data, we increase the
	 connection's timer and see if it has reached the RTO value
	 in which case we retransmit. */
      if(uip_outstanding(uip_connr)) {
	if(uip_connr->timer-- == 0) {
	  if(uip_connr->nrtx == UIP_MAXRTX ||
 8004122:	2901      	cmp	r1, #1
 8004124:	d80e      	bhi.n	8004144 <uip_process+0xd4>
	     ((uip_connr->tcpstateflags == UIP_SYN_SENT ||
	       uip_connr->tcpstateflags == UIP_SYN_RCVD) &&
 8004126:	2a05      	cmp	r2, #5
 8004128:	d10c      	bne.n	8004144 <uip_process+0xd4>
	      uip_connr->nrtx == UIP_MAXSYNRTX)) {
	    uip_connr->tcpstateflags = UIP_CLOSED;
 800412a:	2300      	movs	r3, #0
 800412c:	7663      	strb	r3, [r4, #25]

	    /* We call UIP_APPCALL() with uip_flags set to
	       UIP_TIMEDOUT to inform the application that the
	       connection has timed out. */
	    uip_flags = UIP_TIMEDOUT;
 800412e:	2280      	movs	r2, #128	; 0x80
 8004130:	4b78      	ldr	r3, [pc, #480]	; (8004314 <uip_process+0x2a4>)
 8004132:	701a      	strb	r2, [r3, #0]
	    UIP_APPCALL();
 8004134:	f7fd fe1e 	bl	8001d74 <uipclient_appcall>

	    /* We also send a reset packet to the remote host. */
	    BUF->flags = TCP_RST | TCP_ACK;
 8004138:	2214      	movs	r2, #20
 800413a:	4b7a      	ldr	r3, [pc, #488]	; (8004324 <uip_process+0x2b4>)
 800413c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	    goto tcp_send_nodata;
 8004140:	f000 bd47 	b.w	8004bd2 <uip_process+0xb62>
	  }

	  /* Exponential backoff. */
	  uip_connr->timer = UIP_RTO << (uip_connr->nrtx > 4?
 8004144:	2a04      	cmp	r2, #4
 8004146:	d803      	bhi.n	8004150 <uip_process+0xe0>
 8004148:	2103      	movs	r1, #3
 800414a:	4091      	lsls	r1, r2
 800414c:	b2c9      	uxtb	r1, r1
 800414e:	e000      	b.n	8004152 <uip_process+0xe2>
 8004150:	2130      	movs	r1, #48	; 0x30
 8004152:	76a1      	strb	r1, [r4, #26]
					 4:
					 uip_connr->nrtx);
	  ++(uip_connr->nrtx);
 8004154:	3201      	adds	r2, #1
 8004156:	76e2      	strb	r2, [r4, #27]
	     call upon the application so that it may prepare the
	     data for the retransmit. In SYN_RCVD, we resend the
	     SYNACK that we sent earlier and in LAST_ACK we have to
	     retransmit our FINACK. */
	  UIP_STAT(++uip_stat.tcp.rexmit);
	  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	3b01      	subs	r3, #1
 800415e:	2b07      	cmp	r3, #7
 8004160:	f200 85a6 	bhi.w	8004cb0 <uip_process+0xc40>
 8004164:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004168:	000802a6 	.word	0x000802a6
 800416c:	0423000d 	.word	0x0423000d
 8004170:	042305a4 	.word	0x042305a4
 8004174:	042305a4 	.word	0x042305a4
	    goto tcp_send_synack;
	    
#if UIP_ACTIVE_OPEN
	  case UIP_SYN_SENT:
	    /* In the SYN_SENT state, we retransmit out SYN. */
	    BUF->flags = 0;
 8004178:	2200      	movs	r2, #0
 800417a:	4b6a      	ldr	r3, [pc, #424]	; (8004324 <uip_process+0x2b4>)
 800417c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	    goto tcp_send_syn;
 8004180:	e29c      	b.n	80046bc <uip_process+0x64c>
	  case UIP_ESTABLISHED:
	    /* In the ESTABLISHED state, we call upon the application
               to do the actual retransmit after which we jump into
               the code for sending out the packet (the apprexmit
               label). */
	    uip_flags = UIP_REXMIT;
 8004182:	2204      	movs	r2, #4
 8004184:	4b63      	ldr	r3, [pc, #396]	; (8004314 <uip_process+0x2a4>)
 8004186:	701a      	strb	r2, [r3, #0]
	    UIP_APPCALL();
 8004188:	f7fd fdf4 	bl	8001d74 <uipclient_appcall>
	    goto apprexmit;
 800418c:	f000 bc88 	b.w	8004aa0 <uip_process+0xa30>
	    /* In all these states we should retransmit a FINACK. */
	    goto tcp_send_finack;
	    
	  }
	}
      } else if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED) {
 8004190:	f003 030f 	and.w	r3, r3, #15
 8004194:	2b03      	cmp	r3, #3
 8004196:	f040 858b 	bne.w	8004cb0 <uip_process+0xc40>
	/* If there was no need for a retransmission, we poll the
           application for new data. */
	uip_flags = UIP_POLL;
 800419a:	2208      	movs	r2, #8
 800419c:	4b5d      	ldr	r3, [pc, #372]	; (8004314 <uip_process+0x2a4>)
 800419e:	701a      	strb	r2, [r3, #0]
	UIP_APPCALL();
 80041a0:	f7fd fde8 	bl	8001d74 <uipclient_appcall>
	goto appsend;
 80041a4:	f000 bc47 	b.w	8004a36 <uip_process+0x9c6>
      }
    }
    goto drop;
  }
#if UIP_UDP
  if(flag == UIP_UDP_TIMER) {
 80041a8:	2805      	cmp	r0, #5
 80041aa:	d117      	bne.n	80041dc <uip_process+0x16c>
    if(uip_udp_conn->lport != 0) {
 80041ac:	4b5e      	ldr	r3, [pc, #376]	; (8004328 <uip_process+0x2b8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	889b      	ldrh	r3, [r3, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 857c 	beq.w	8004cb0 <uip_process+0xc40>
      uip_conn = NULL;
 80041b8:	2300      	movs	r3, #0
 80041ba:	4a52      	ldr	r2, [pc, #328]	; (8004304 <uip_process+0x294>)
 80041bc:	6013      	str	r3, [r2, #0]
      uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
 80041be:	4a5b      	ldr	r2, [pc, #364]	; (800432c <uip_process+0x2bc>)
 80041c0:	4952      	ldr	r1, [pc, #328]	; (800430c <uip_process+0x29c>)
 80041c2:	600a      	str	r2, [r1, #0]
 80041c4:	4952      	ldr	r1, [pc, #328]	; (8004310 <uip_process+0x2a0>)
 80041c6:	600a      	str	r2, [r1, #0]
      uip_len = uip_slen = 0;
 80041c8:	4a55      	ldr	r2, [pc, #340]	; (8004320 <uip_process+0x2b0>)
 80041ca:	8013      	strh	r3, [r2, #0]
 80041cc:	4a53      	ldr	r2, [pc, #332]	; (800431c <uip_process+0x2ac>)
 80041ce:	8013      	strh	r3, [r2, #0]
      uip_flags = UIP_POLL;
 80041d0:	2208      	movs	r2, #8
 80041d2:	4b50      	ldr	r3, [pc, #320]	; (8004314 <uip_process+0x2a4>)
 80041d4:	701a      	strb	r2, [r3, #0]
      UIP_UDP_APPCALL();
 80041d6:	f7fd fe33 	bl	8001e40 <uipudp_appcall>
      //printf("udp_send appcall\n");
      goto udp_send;
 80041da:	e0e6      	b.n	80043aa <uip_process+0x33a>
    UIP_LOG("ipv6: invalid version.");
    goto drop;
  }
#else /* UIP_CONF_IPV6 */
  /* Check validity of the IP header. */
  if(BUF->vhl != 0x45)  { /* IP version and header length. */
 80041dc:	4b51      	ldr	r3, [pc, #324]	; (8004324 <uip_process+0x2b4>)
 80041de:	7b9b      	ldrb	r3, [r3, #14]
 80041e0:	2b45      	cmp	r3, #69	; 0x45
 80041e2:	f040 8565 	bne.w	8004cb0 <uip_process+0xc40>
     that the packet has been corrupted in transit. If the size of
     uip_len is larger than the size reported in the IP packet header,
     the packet has been padded and we set uip_len to the correct
     value.. */

  if((BUF->len[0] << 8) + BUF->len[1] <= uip_len) {
 80041e6:	4a4f      	ldr	r2, [pc, #316]	; (8004324 <uip_process+0x2b4>)
 80041e8:	7c15      	ldrb	r5, [r2, #16]
 80041ea:	7c53      	ldrb	r3, [r2, #17]
 80041ec:	eb03 2105 	add.w	r1, r3, r5, lsl #8
 80041f0:	4a4a      	ldr	r2, [pc, #296]	; (800431c <uip_process+0x2ac>)
 80041f2:	8812      	ldrh	r2, [r2, #0]
 80041f4:	4291      	cmp	r1, r2
 80041f6:	f300 855b 	bgt.w	8004cb0 <uip_process+0xc40>
    uip_len = (BUF->len[0] << 8) + BUF->len[1];
 80041fa:	b28d      	uxth	r5, r1
 80041fc:	4b47      	ldr	r3, [pc, #284]	; (800431c <uip_process+0x2ac>)
 80041fe:	801d      	strh	r5, [r3, #0]
    goto drop;
  }

#if !UIP_CONF_IPV6
  /* Check the fragment flag. */
  if((BUF->ipoffset[0] & 0x3f) != 0 ||
 8004200:	4b48      	ldr	r3, [pc, #288]	; (8004324 <uip_process+0x2b4>)
 8004202:	7d1b      	ldrb	r3, [r3, #20]
 8004204:	f013 0f3f 	tst.w	r3, #63	; 0x3f
 8004208:	f040 8552 	bne.w	8004cb0 <uip_process+0xc40>
     BUF->ipoffset[1] != 0) {
 800420c:	4b45      	ldr	r3, [pc, #276]	; (8004324 <uip_process+0x2b4>)
 800420e:	7d5b      	ldrb	r3, [r3, #21]
    goto drop;
  }

#if !UIP_CONF_IPV6
  /* Check the fragment flag. */
  if((BUF->ipoffset[0] & 0x3f) != 0 ||
 8004210:	2b00      	cmp	r3, #0
 8004212:	f040 854d 	bne.w	8004cb0 <uip_process+0xc40>
    goto drop;
#endif /* UIP_REASSEMBLY */
  }
#endif /* UIP_CONF_IPV6 */

  if(uip_ipaddr_cmp(uip_hostaddr, all_zeroes_addr)) {
 8004216:	4b46      	ldr	r3, [pc, #280]	; (8004330 <uip_process+0x2c0>)
 8004218:	881c      	ldrh	r4, [r3, #0]
 800421a:	b90c      	cbnz	r4, 8004220 <uip_process+0x1b0>
 800421c:	885b      	ldrh	r3, [r3, #2]
 800421e:	b35b      	cbz	r3, 8004278 <uip_process+0x208>
    /* If IP broadcast support is configured, we check for a broadcast
       UDP packet, which may be destined to us. */
#if UIP_BROADCAST
    DEBUG_PRINTF("UDP IP checksum 0x%04x\n", uip_ipchksum());
   // printf("UDP IP checksum 0x%04x\n", uip_ipchksum());
     if(BUF->proto == UIP_PROTO_UDP && (
 8004220:	4b40      	ldr	r3, [pc, #256]	; (8004324 <uip_process+0x2b4>)
 8004222:	7ddb      	ldrb	r3, [r3, #23]
 8004224:	2b11      	cmp	r3, #17
 8004226:	d11b      	bne.n	8004260 <uip_process+0x1f0>
        uip_ipaddr_cmp(BUF->destipaddr, all_ones_addr) // Limited broadcast
 8004228:	4b3e      	ldr	r3, [pc, #248]	; (8004324 <uip_process+0x2b4>)
 800422a:	8bdb      	ldrh	r3, [r3, #30]
    /* If IP broadcast support is configured, we check for a broadcast
       UDP packet, which may be destined to us. */
#if UIP_BROADCAST
    DEBUG_PRINTF("UDP IP checksum 0x%04x\n", uip_ipchksum());
   // printf("UDP IP checksum 0x%04x\n", uip_ipchksum());
     if(BUF->proto == UIP_PROTO_UDP && (
 800422c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004230:	4293      	cmp	r3, r2
 8004232:	d105      	bne.n	8004240 <uip_process+0x1d0>
        uip_ipaddr_cmp(BUF->destipaddr, all_ones_addr) // Limited broadcast
 8004234:	4a3b      	ldr	r2, [pc, #236]	; (8004324 <uip_process+0x2b4>)
 8004236:	8c11      	ldrh	r1, [r2, #32]
 8004238:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800423c:	4291      	cmp	r1, r2
 800423e:	d04d      	beq.n	80042dc <uip_process+0x26c>
        || ((BUF->destipaddr[0]==(uip_hostaddr[0] | (~uip_netmask[0]))) && (BUF->destipaddr[1]==(uip_hostaddr[1] | (~uip_netmask[1])))) // Direct broadcast
 8004240:	4a3c      	ldr	r2, [pc, #240]	; (8004334 <uip_process+0x2c4>)
 8004242:	8812      	ldrh	r2, [r2, #0]
 8004244:	ea64 0202 	orn	r2, r4, r2
 8004248:	4293      	cmp	r3, r2
 800424a:	d109      	bne.n	8004260 <uip_process+0x1f0>
 800424c:	4b35      	ldr	r3, [pc, #212]	; (8004324 <uip_process+0x2b4>)
 800424e:	8c1a      	ldrh	r2, [r3, #32]
 8004250:	4b37      	ldr	r3, [pc, #220]	; (8004330 <uip_process+0x2c0>)
 8004252:	885b      	ldrh	r3, [r3, #2]
 8004254:	4937      	ldr	r1, [pc, #220]	; (8004334 <uip_process+0x2c4>)
 8004256:	8849      	ldrh	r1, [r1, #2]
 8004258:	ea63 0301 	orn	r3, r3, r1
 800425c:	429a      	cmp	r2, r3
 800425e:	d03d      	beq.n	80042dc <uip_process+0x26c>
    }
#endif /* UIP_BROADCAST */
    
    /* Check if the packet is destined for our IP address. */
#if !UIP_CONF_IPV6
    if(!uip_ipaddr_cmp(BUF->destipaddr, uip_hostaddr)) {
 8004260:	4b30      	ldr	r3, [pc, #192]	; (8004324 <uip_process+0x2b4>)
 8004262:	8bdb      	ldrh	r3, [r3, #30]
 8004264:	429c      	cmp	r4, r3
 8004266:	f040 8523 	bne.w	8004cb0 <uip_process+0xc40>
 800426a:	4b2e      	ldr	r3, [pc, #184]	; (8004324 <uip_process+0x2b4>)
 800426c:	8c1a      	ldrh	r2, [r3, #32]
 800426e:	4b30      	ldr	r3, [pc, #192]	; (8004330 <uip_process+0x2c0>)
 8004270:	885b      	ldrh	r3, [r3, #2]
 8004272:	429a      	cmp	r2, r3
 8004274:	f040 851c 	bne.w	8004cb0 <uip_process+0xc40>
    }
#endif /* UIP_CONF_IPV6 */
  }

#if !UIP_CONF_IPV6
  if(uip_ipchksum() != 0xffff) { /* Compute and check the IP header
 8004278:	f7ff fec0 	bl	8003ffc <uip_ipchksum>
 800427c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004280:	4298      	cmp	r0, r3
 8004282:	f040 8515 	bne.w	8004cb0 <uip_process+0xc40>
    UIP_LOG("ip: bad checksum.");
    goto drop;
  }
#endif /* UIP_CONF_IPV6 */

  if(BUF->proto == UIP_PROTO_TCP) { /* Check for TCP packet. If so,
 8004286:	4b27      	ldr	r3, [pc, #156]	; (8004324 <uip_process+0x2b4>)
 8004288:	7ddb      	ldrb	r3, [r3, #23]
 800428a:	2b06      	cmp	r3, #6
 800428c:	f000 80cd 	beq.w	800442a <uip_process+0x3ba>
				       processing. */
    goto tcp_input;
  }

#if UIP_UDP
  if(BUF->proto == UIP_PROTO_UDP) {
 8004290:	2b11      	cmp	r3, #17
 8004292:	d023      	beq.n	80042dc <uip_process+0x26c>
  }
#endif /* UIP_UDP */

#if !UIP_CONF_IPV6
  /* ICMPv4 processing code follows. */
  if(BUF->proto != UIP_PROTO_ICMP) { /* We only allow ICMP packets from
 8004294:	2b01      	cmp	r3, #1
 8004296:	f040 850b 	bne.w	8004cb0 <uip_process+0xc40>
  UIP_STAT(++uip_stat.icmp.recv);

  /* ICMP echo (i.e., ping) processing. This is simple, we only change
     the ICMP type from ECHO to ECHO_REPLY and adjust the ICMP
     checksum before we return the packet. */
  if(ICMPBUF->type != ICMP_ECHO) {
 800429a:	4b22      	ldr	r3, [pc, #136]	; (8004324 <uip_process+0x2b4>)
 800429c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	f040 8505 	bne.w	8004cb0 <uip_process+0xc40>
    uip_hostaddr[0] = BUF->destipaddr[0];
    uip_hostaddr[1] = BUF->destipaddr[1];
  }
#endif /* UIP_PINGADDRCONF */

  ICMPBUF->type = ICMP_ECHO_REPLY;
 80042a6:	4b1f      	ldr	r3, [pc, #124]	; (8004324 <uip_process+0x2b4>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  if(ICMPBUF->icmpchksum >= HTONS(0xffff - (ICMP_ECHO << 8))) {
 80042ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80042b0:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d903      	bls.n	80042c0 <uip_process+0x250>
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8) + 1;
 80042b8:	3309      	adds	r3, #9
 80042ba:	4a1a      	ldr	r2, [pc, #104]	; (8004324 <uip_process+0x2b4>)
 80042bc:	8493      	strh	r3, [r2, #36]	; 0x24
 80042be:	e002      	b.n	80042c6 <uip_process+0x256>
  } else {
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8);
 80042c0:	3308      	adds	r3, #8
 80042c2:	4a18      	ldr	r2, [pc, #96]	; (8004324 <uip_process+0x2b4>)
 80042c4:	8493      	strh	r3, [r2, #36]	; 0x24
  }

  /* Swap IP addresses. */
  uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
 80042c6:	4b17      	ldr	r3, [pc, #92]	; (8004324 <uip_process+0x2b4>)
 80042c8:	8b5a      	ldrh	r2, [r3, #26]
 80042ca:	83da      	strh	r2, [r3, #30]
 80042cc:	8b9a      	ldrh	r2, [r3, #28]
 80042ce:	841a      	strh	r2, [r3, #32]
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
 80042d0:	835c      	strh	r4, [r3, #26]
 80042d2:	4a17      	ldr	r2, [pc, #92]	; (8004330 <uip_process+0x2c0>)
 80042d4:	8852      	ldrh	r2, [r2, #2]
 80042d6:	839a      	strh	r2, [r3, #28]

  UIP_STAT(++uip_stat.icmp.sent);
  goto send;
 80042d8:	f000 bce6 	b.w	8004ca8 <uip_process+0xc38>
  /* UDP processing is really just a hack. We don't do anything to the
     UDP/IP headers, but let the UDP application do all the hard
     work. If the application sets uip_slen, it has a packet to
     send. */
#if UIP_UDP_CHECKSUMS
  uip_len = uip_len - UIP_IPUDPH_LEN;
 80042dc:	3d1c      	subs	r5, #28
 80042de:	4b0f      	ldr	r3, [pc, #60]	; (800431c <uip_process+0x2ac>)
 80042e0:	801d      	strh	r5, [r3, #0]
  uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
 80042e2:	4b12      	ldr	r3, [pc, #72]	; (800432c <uip_process+0x2bc>)
 80042e4:	4a09      	ldr	r2, [pc, #36]	; (800430c <uip_process+0x29c>)
 80042e6:	6013      	str	r3, [r2, #0]
  if(UDPBUF->udpchksum != 0 && uip_udpchksum() != 0xffff) {
 80042e8:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 80042ec:	b133      	cbz	r3, 80042fc <uip_process+0x28c>
 80042ee:	f7ff feb9 	bl	8004064 <uip_udpchksum>
 80042f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042f6:	4298      	cmp	r0, r3
 80042f8:	f040 84da 	bne.w	8004cb0 <uip_process+0xc40>
#else /* UIP_UDP_CHECKSUMS */
  uip_len = uip_len - UIP_IPUDPH_LEN;
#endif /* UIP_UDP_CHECKSUMS */

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
 80042fc:	4a0e      	ldr	r2, [pc, #56]	; (8004338 <uip_process+0x2c8>)
 80042fe:	4b0a      	ldr	r3, [pc, #40]	; (8004328 <uip_process+0x2b8>)
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	e03e      	b.n	8004382 <uip_process+0x312>
 8004304:	20000f18 	.word	0x20000f18
 8004308:	20000fe6 	.word	0x20000fe6
 800430c:	20000f14 	.word	0x20000f14
 8004310:	20000f04 	.word	0x20000f04
 8004314:	20000f0c 	.word	0x20000f0c
 8004318:	20000adc 	.word	0x20000adc
 800431c:	20000f00 	.word	0x20000f00
 8004320:	2000139a 	.word	0x2000139a
 8004324:	20000fb0 	.word	0x20000fb0
 8004328:	20000f10 	.word	0x20000f10
 800432c:	20000fda 	.word	0x20000fda
 8004330:	20000fac 	.word	0x20000fac
 8004334:	20000fa8 	.word	0x20000fa8
 8004338:	2000139c 	.word	0x2000139c
       destination port number in the received packet. If the two port
       numbers match, the remote port number is checked if the
       connection is bound to a remote port. Finally, if the
       connection is bound to a remote IP address, the source IP
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
 800433c:	889a      	ldrh	r2, [r3, #4]
 800433e:	b1ea      	cbz	r2, 800437c <uip_process+0x30c>
       UDPBUF->destport == uip_udp_conn->lport &&
 8004340:	498b      	ldr	r1, [pc, #556]	; (8004570 <uip_process+0x500>)
 8004342:	8c89      	ldrh	r1, [r1, #36]	; 0x24
       destination port number in the received packet. If the two port
       numbers match, the remote port number is checked if the
       connection is bound to a remote port. Finally, if the
       connection is bound to a remote IP address, the source IP
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
 8004344:	428a      	cmp	r2, r1
 8004346:	d119      	bne.n	800437c <uip_process+0x30c>
       UDPBUF->destport == uip_udp_conn->lport &&
       (uip_udp_conn->rport == 0 ||
 8004348:	88da      	ldrh	r2, [r3, #6]
       numbers match, the remote port number is checked if the
       connection is bound to a remote port. Finally, if the
       connection is bound to a remote IP address, the source IP
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
       UDPBUF->destport == uip_udp_conn->lport &&
 800434a:	b11a      	cbz	r2, 8004354 <uip_process+0x2e4>
       (uip_udp_conn->rport == 0 ||
        UDPBUF->srcport == uip_udp_conn->rport) &&
 800434c:	4988      	ldr	r1, [pc, #544]	; (8004570 <uip_process+0x500>)
 800434e:	8c49      	ldrh	r1, [r1, #34]	; 0x22
       connection is bound to a remote port. Finally, if the
       connection is bound to a remote IP address, the source IP
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
       UDPBUF->destport == uip_udp_conn->lport &&
       (uip_udp_conn->rport == 0 ||
 8004350:	428a      	cmp	r2, r1
 8004352:	d113      	bne.n	800437c <uip_process+0x30c>
        UDPBUF->srcport == uip_udp_conn->rport) &&
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
 8004354:	881a      	ldrh	r2, [r3, #0]
       connection is bound to a remote IP address, the source IP
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
       UDPBUF->destport == uip_udp_conn->lport &&
       (uip_udp_conn->rport == 0 ||
        UDPBUF->srcport == uip_udp_conn->rport) &&
 8004356:	b90a      	cbnz	r2, 800435c <uip_process+0x2ec>
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
 8004358:	8859      	ldrh	r1, [r3, #2]
 800435a:	b1c9      	cbz	r1, 8004390 <uip_process+0x320>
 800435c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004360:	428a      	cmp	r2, r1
 8004362:	d102      	bne.n	800436a <uip_process+0x2fa>
	uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_ones_addr) ||
 8004364:	8858      	ldrh	r0, [r3, #2]
 8004366:	4288      	cmp	r0, r1
 8004368:	d012      	beq.n	8004390 <uip_process+0x320>
	uip_ipaddr_cmp(BUF->srcipaddr, uip_udp_conn->ripaddr)))
 800436a:	4981      	ldr	r1, [pc, #516]	; (8004570 <uip_process+0x500>)
 800436c:	8b49      	ldrh	r1, [r1, #26]
    if(uip_udp_conn->lport != 0 &&
       UDPBUF->destport == uip_udp_conn->lport &&
       (uip_udp_conn->rport == 0 ||
        UDPBUF->srcport == uip_udp_conn->rport) &&
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
	uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_ones_addr) ||
 800436e:	428a      	cmp	r2, r1
 8004370:	d104      	bne.n	800437c <uip_process+0x30c>
	uip_ipaddr_cmp(BUF->srcipaddr, uip_udp_conn->ripaddr)))
 8004372:	4a7f      	ldr	r2, [pc, #508]	; (8004570 <uip_process+0x500>)
 8004374:	8b91      	ldrh	r1, [r2, #28]
 8004376:	885a      	ldrh	r2, [r3, #2]
 8004378:	4291      	cmp	r1, r2
 800437a:	d009      	beq.n	8004390 <uip_process+0x320>
#endif /* UIP_UDP_CHECKSUMS */

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
      uip_udp_conn < &uip_udp_conns[UIP_UDP_CONNS];
      ++uip_udp_conn) {
 800437c:	3310      	adds	r3, #16
 800437e:	4a7d      	ldr	r2, [pc, #500]	; (8004574 <uip_process+0x504>)
 8004380:	6013      	str	r3, [r2, #0]
  uip_len = uip_len - UIP_IPUDPH_LEN;
#endif /* UIP_UDP_CHECKSUMS */

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
      uip_udp_conn < &uip_udp_conns[UIP_UDP_CONNS];
 8004382:	4b7c      	ldr	r3, [pc, #496]	; (8004574 <uip_process+0x504>)
 8004384:	681b      	ldr	r3, [r3, #0]
#else /* UIP_UDP_CHECKSUMS */
  uip_len = uip_len - UIP_IPUDPH_LEN;
#endif /* UIP_UDP_CHECKSUMS */

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
 8004386:	4a7c      	ldr	r2, [pc, #496]	; (8004578 <uip_process+0x508>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d3d7      	bcc.n	800433c <uip_process+0x2cc>
 800438c:	f000 bc90 	b.w	8004cb0 <uip_process+0xc40>
  UIP_LOG("udp: no matching connection found");
  //printf("udp: no matching connection found");
  goto drop;
  
 udp_found:
  uip_conn = NULL;
 8004390:	2300      	movs	r3, #0
 8004392:	4a7a      	ldr	r2, [pc, #488]	; (800457c <uip_process+0x50c>)
 8004394:	6013      	str	r3, [r2, #0]
  uip_flags = UIP_NEWDATA;
 8004396:	2102      	movs	r1, #2
 8004398:	4a79      	ldr	r2, [pc, #484]	; (8004580 <uip_process+0x510>)
 800439a:	7011      	strb	r1, [r2, #0]
  uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
 800439c:	4979      	ldr	r1, [pc, #484]	; (8004584 <uip_process+0x514>)
 800439e:	4a7a      	ldr	r2, [pc, #488]	; (8004588 <uip_process+0x518>)
 80043a0:	6011      	str	r1, [r2, #0]
  uip_slen = 0;
 80043a2:	4a7a      	ldr	r2, [pc, #488]	; (800458c <uip_process+0x51c>)
 80043a4:	8013      	strh	r3, [r2, #0]
  UIP_UDP_APPCALL();
 80043a6:	f7fd fd4b 	bl	8001e40 <uipudp_appcall>
  //printf("udp found\n");
 udp_send:
  if(uip_slen == 0) {
 80043aa:	4b78      	ldr	r3, [pc, #480]	; (800458c <uip_process+0x51c>)
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 847e 	beq.w	8004cb0 <uip_process+0xc40>
    goto drop;
  }
  uip_len = uip_slen + UIP_IPUDPH_LEN;
 80043b4:	f103 021c 	add.w	r2, r3, #28
 80043b8:	b292      	uxth	r2, r2
 80043ba:	4975      	ldr	r1, [pc, #468]	; (8004590 <uip_process+0x520>)
 80043bc:	800a      	strh	r2, [r1, #0]
  /* For IPv6, the IP length field does not include the IPv6 IP header
     length. */
  BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
  BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
#else /* UIP_CONF_IPV6 */
  BUF->len[0] = (uip_len >> 8);
 80043be:	4c6c      	ldr	r4, [pc, #432]	; (8004570 <uip_process+0x500>)
 80043c0:	0a11      	lsrs	r1, r2, #8
 80043c2:	7421      	strb	r1, [r4, #16]
  BUF->len[1] = (uip_len & 0xff);
 80043c4:	7462      	strb	r2, [r4, #17]
#endif /* UIP_CONF_IPV6 */

  BUF->ttl = uip_udp_conn->ttl;
 80043c6:	4a6b      	ldr	r2, [pc, #428]	; (8004574 <uip_process+0x504>)
 80043c8:	6812      	ldr	r2, [r2, #0]
 80043ca:	7a11      	ldrb	r1, [r2, #8]
 80043cc:	75a1      	strb	r1, [r4, #22]
  BUF->proto = UIP_PROTO_UDP;
 80043ce:	2111      	movs	r1, #17
 80043d0:	75e1      	strb	r1, [r4, #23]

  UDPBUF->udplen = HTONS(uip_slen + UIP_UDPH_LEN);
 80043d2:	3308      	adds	r3, #8
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	0a19      	lsrs	r1, r3, #8
 80043d8:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 80043dc:	84e3      	strh	r3, [r4, #38]	; 0x26
  UDPBUF->udpchksum = 0;
 80043de:	2300      	movs	r3, #0
 80043e0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80043e4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29

  BUF->srcport  = uip_udp_conn->lport;
 80043e8:	8893      	ldrh	r3, [r2, #4]
 80043ea:	8463      	strh	r3, [r4, #34]	; 0x22
  BUF->destport = uip_udp_conn->rport;
 80043ec:	88d3      	ldrh	r3, [r2, #6]
 80043ee:	84a3      	strh	r3, [r4, #36]	; 0x24

  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
 80043f0:	4b68      	ldr	r3, [pc, #416]	; (8004594 <uip_process+0x524>)
 80043f2:	8819      	ldrh	r1, [r3, #0]
 80043f4:	8361      	strh	r1, [r4, #26]
 80043f6:	885b      	ldrh	r3, [r3, #2]
 80043f8:	83a3      	strh	r3, [r4, #28]
  uip_ipaddr_copy(BUF->destipaddr, uip_udp_conn->ripaddr);
 80043fa:	8813      	ldrh	r3, [r2, #0]
 80043fc:	83e3      	strh	r3, [r4, #30]
 80043fe:	8853      	ldrh	r3, [r2, #2]
 8004400:	8423      	strh	r3, [r4, #32]
   
  uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPTCPH_LEN];
 8004402:	f104 0236 	add.w	r2, r4, #54	; 0x36
 8004406:	4b64      	ldr	r3, [pc, #400]	; (8004598 <uip_process+0x528>)
 8004408:	601a      	str	r2, [r3, #0]

#if UIP_UDP_CHECKSUMS
  /* Calculate UDP checksum. */
  UDPBUF->udpchksum = ~(uip_udpchksum());
 800440a:	f7ff fe2b 	bl	8004064 <uip_udpchksum>
 800440e:	43c0      	mvns	r0, r0
 8004410:	b280      	uxth	r0, r0
 8004412:	8520      	strh	r0, [r4, #40]	; 0x28
  if(UDPBUF->udpchksum == 0) {
 8004414:	2800      	cmp	r0, #0
 8004416:	f040 8432 	bne.w	8004c7e <uip_process+0xc0e>
    UDPBUF->udpchksum = 0xffff;
 800441a:	f04f 32ff 	mov.w	r2, #4294967295
 800441e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
 8004422:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
 8004426:	f000 bc2a 	b.w	8004c7e <uip_process+0xc0e>
 tcp_input:
  UIP_STAT(++uip_stat.tcp.recv);

  /* Start of TCP input header processing code. */
  
  if(uip_tcpchksum() != 0xffff) {   /* Compute and check the TCP
 800442a:	f7ff fe15 	bl	8004058 <uip_tcpchksum>
 800442e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004432:	4298      	cmp	r0, r3
 8004434:	f040 843c 	bne.w	8004cb0 <uip_process+0xc40>
 8004438:	4c58      	ldr	r4, [pc, #352]	; (800459c <uip_process+0x52c>)
 800443a:	e017      	b.n	800446c <uip_process+0x3fc>
  
  /* Demultiplex this segment. */
  /* First check any active connections. */
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
      ++uip_connr) {
    if(uip_connr->tcpstateflags != UIP_CLOSED &&
 800443c:	7e61      	ldrb	r1, [r4, #25]
 800443e:	b1a1      	cbz	r1, 800446a <uip_process+0x3fa>
       BUF->destport == uip_connr->lport &&
 8004440:	4b4b      	ldr	r3, [pc, #300]	; (8004570 <uip_process+0x500>)
 8004442:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8004444:	88a3      	ldrh	r3, [r4, #4]
  
  /* Demultiplex this segment. */
  /* First check any active connections. */
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
      ++uip_connr) {
    if(uip_connr->tcpstateflags != UIP_CLOSED &&
 8004446:	429a      	cmp	r2, r3
 8004448:	d10f      	bne.n	800446a <uip_process+0x3fa>
       BUF->destport == uip_connr->lport &&
       BUF->srcport == uip_connr->rport &&
 800444a:	4b49      	ldr	r3, [pc, #292]	; (8004570 <uip_process+0x500>)
 800444c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800444e:	88e3      	ldrh	r3, [r4, #6]
  /* Demultiplex this segment. */
  /* First check any active connections. */
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
      ++uip_connr) {
    if(uip_connr->tcpstateflags != UIP_CLOSED &&
       BUF->destport == uip_connr->lport &&
 8004450:	429a      	cmp	r2, r3
 8004452:	d10a      	bne.n	800446a <uip_process+0x3fa>
       BUF->srcport == uip_connr->rport &&
       uip_ipaddr_cmp(BUF->srcipaddr, uip_connr->ripaddr)) {
 8004454:	4b46      	ldr	r3, [pc, #280]	; (8004570 <uip_process+0x500>)
 8004456:	8b5a      	ldrh	r2, [r3, #26]
 8004458:	8823      	ldrh	r3, [r4, #0]
  /* First check any active connections. */
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
      ++uip_connr) {
    if(uip_connr->tcpstateflags != UIP_CLOSED &&
       BUF->destport == uip_connr->lport &&
       BUF->srcport == uip_connr->rport &&
 800445a:	429a      	cmp	r2, r3
 800445c:	d105      	bne.n	800446a <uip_process+0x3fa>
       uip_ipaddr_cmp(BUF->srcipaddr, uip_connr->ripaddr)) {
 800445e:	4b44      	ldr	r3, [pc, #272]	; (8004570 <uip_process+0x500>)
 8004460:	8b9a      	ldrh	r2, [r3, #28]
 8004462:	8863      	ldrh	r3, [r4, #2]
 8004464:	429a      	cmp	r2, r3
 8004466:	f000 8145 	beq.w	80046f4 <uip_process+0x684>
  
  
  /* Demultiplex this segment. */
  /* First check any active connections. */
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
      ++uip_connr) {
 800446a:	3420      	adds	r4, #32
  }
  
  
  /* Demultiplex this segment. */
  /* First check any active connections. */
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
 800446c:	4b4c      	ldr	r3, [pc, #304]	; (80045a0 <uip_process+0x530>)
 800446e:	429c      	cmp	r4, r3
 8004470:	d9e4      	bls.n	800443c <uip_process+0x3cc>

  /* If we didn't find and active connection that expected the packet,
     either this packet is an old duplicate, or this is a SYN packet
     destined for a connection in LISTEN. If the SYN flag isn't set,
     it is an old packet and we send a RST. */
  if((BUF->flags & TCP_CTL) != TCP_SYN) {
 8004472:	4b3f      	ldr	r3, [pc, #252]	; (8004570 <uip_process+0x500>)
 8004474:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800447c:	2b02      	cmp	r3, #2
 800447e:	d114      	bne.n	80044aa <uip_process+0x43a>
    goto reset;
  }
  
  tmp16 = BUF->destport;
 8004480:	4b3b      	ldr	r3, [pc, #236]	; (8004570 <uip_process+0x500>)
 8004482:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004484:	b299      	uxth	r1, r3
 8004486:	4a47      	ldr	r2, [pc, #284]	; (80045a4 <uip_process+0x534>)
 8004488:	8013      	strh	r3, [r2, #0]
  /* Next, check listening connections. */
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
 800448a:	2200      	movs	r2, #0
 800448c:	4b46      	ldr	r3, [pc, #280]	; (80045a8 <uip_process+0x538>)
 800448e:	701a      	strb	r2, [r3, #0]
 8004490:	e007      	b.n	80044a2 <uip_process+0x432>
    if(tmp16 == uip_listenports[c])
 8004492:	4a46      	ldr	r2, [pc, #280]	; (80045ac <uip_process+0x53c>)
 8004494:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004498:	4291      	cmp	r1, r2
 800449a:	d05b      	beq.n	8004554 <uip_process+0x4e4>
    goto reset;
  }
  
  tmp16 = BUF->destport;
  /* Next, check listening connections. */
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
 800449c:	3301      	adds	r3, #1
 800449e:	4a42      	ldr	r2, [pc, #264]	; (80045a8 <uip_process+0x538>)
 80044a0:	7013      	strb	r3, [r2, #0]
 80044a2:	4b41      	ldr	r3, [pc, #260]	; (80045a8 <uip_process+0x538>)
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d9f3      	bls.n	8004492 <uip_process+0x422>
  /* No matching connection found, so we send a RST packet. */
  UIP_STAT(++uip_stat.tcp.synrst);
 reset:

  /* We do not send resets in response to resets. */
  if(BUF->flags & TCP_RST) {
 80044aa:	4b31      	ldr	r3, [pc, #196]	; (8004570 <uip_process+0x500>)
 80044ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80044b0:	f013 0f04 	tst.w	r3, #4
 80044b4:	f040 83fc 	bne.w	8004cb0 <uip_process+0xc40>
    goto drop;
  }

  UIP_STAT(++uip_stat.tcp.rst);
  
  BUF->flags = TCP_RST | TCP_ACK;
 80044b8:	4b2d      	ldr	r3, [pc, #180]	; (8004570 <uip_process+0x500>)
 80044ba:	2214      	movs	r2, #20
 80044bc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  uip_len = UIP_IPTCPH_LEN;
 80044c0:	2128      	movs	r1, #40	; 0x28
 80044c2:	4a33      	ldr	r2, [pc, #204]	; (8004590 <uip_process+0x520>)
 80044c4:	8011      	strh	r1, [r2, #0]
  BUF->tcpoffset = 5 << 4;
 80044c6:	2250      	movs	r2, #80	; 0x50
 80044c8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* Flip the seqno and ackno fields in the TCP header. */
  c = BUF->seqno[3];
 80044cc:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
  BUF->seqno[3] = BUF->ackno[3];
 80044d0:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80044d4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BUF->ackno[3] = c;
  
  c = BUF->seqno[2];
 80044d8:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
  BUF->seqno[2] = BUF->ackno[2];
 80044dc:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80044e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  BUF->ackno[2] = c;
 80044e4:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
  
  c = BUF->seqno[1];
 80044e8:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
  BUF->seqno[1] = BUF->ackno[1];
 80044ec:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
 80044f0:	f883 4027 	strb.w	r4, [r3, #39]	; 0x27
  BUF->ackno[1] = c;
 80044f4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  
  c = BUF->seqno[0];
 80044f8:	f893 4026 	ldrb.w	r4, [r3, #38]	; 0x26
 80044fc:	4d2a      	ldr	r5, [pc, #168]	; (80045a8 <uip_process+0x538>)
 80044fe:	702c      	strb	r4, [r5, #0]
  BUF->seqno[0] = BUF->ackno[0];
 8004500:	f893 502a 	ldrb.w	r5, [r3, #42]	; 0x2a
 8004504:	f883 5026 	strb.w	r5, [r3, #38]	; 0x26
  BUF->ackno[0] = c;
 8004508:	f883 402a 	strb.w	r4, [r3, #42]	; 0x2a

  /* We also have to increase the sequence number we are
     acknowledging. If the least significant byte overflowed, we need
     to propagate the carry to the other bytes as well. */
  if(++BUF->ackno[3] == 0) {
 800450c:	3001      	adds	r0, #1
 800450e:	b2c0      	uxtb	r0, r0
 8004510:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
 8004514:	b968      	cbnz	r0, 8004532 <uip_process+0x4c2>
    if(++BUF->ackno[2] == 0) {
 8004516:	1c4b      	adds	r3, r1, #1
 8004518:	b2db      	uxtb	r3, r3
 800451a:	4915      	ldr	r1, [pc, #84]	; (8004570 <uip_process+0x500>)
 800451c:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
 8004520:	b93b      	cbnz	r3, 8004532 <uip_process+0x4c2>
      if(++BUF->ackno[1] == 0) {
 8004522:	1c53      	adds	r3, r2, #1
 8004524:	b2db      	uxtb	r3, r3
 8004526:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b
 800452a:	b913      	cbnz	r3, 8004532 <uip_process+0x4c2>
	++BUF->ackno[0];
 800452c:	3401      	adds	r4, #1
 800452e:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
      }
    }
  }
 
  /* Swap port numbers. */
  tmp16 = BUF->srcport;
 8004532:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <uip_process+0x500>)
 8004534:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8004536:	491b      	ldr	r1, [pc, #108]	; (80045a4 <uip_process+0x534>)
 8004538:	800a      	strh	r2, [r1, #0]
  BUF->srcport = BUF->destport;
 800453a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800453c:	8459      	strh	r1, [r3, #34]	; 0x22
  BUF->destport = tmp16;
 800453e:	849a      	strh	r2, [r3, #36]	; 0x24
  
  /* Swap IP addresses. */
  uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
 8004540:	8b5a      	ldrh	r2, [r3, #26]
 8004542:	83da      	strh	r2, [r3, #30]
 8004544:	8b9a      	ldrh	r2, [r3, #28]
 8004546:	841a      	strh	r2, [r3, #32]
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
 8004548:	4a12      	ldr	r2, [pc, #72]	; (8004594 <uip_process+0x524>)
 800454a:	8811      	ldrh	r1, [r2, #0]
 800454c:	8359      	strh	r1, [r3, #26]
 800454e:	8852      	ldrh	r2, [r2, #2]
 8004550:	839a      	strh	r2, [r3, #28]
  
  /* And send out the RST packet! */
  goto tcp_send_noconn;
 8004552:	e37f      	b.n	8004c54 <uip_process+0xbe4>
     unused ones have the tcpstate set to CLOSED. Also, connections in
     TIME_WAIT are kept track of and we'll use the oldest one if no
     CLOSED connections are found. Thanks to Eddie C. Dost for a very
     nice algorithm for the TIME_WAIT search. */
  uip_connr = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
 8004554:	2400      	movs	r4, #0
 8004556:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <uip_process+0x538>)
 8004558:	701c      	strb	r4, [r3, #0]
 800455a:	e039      	b.n	80045d0 <uip_process+0x560>
    if(uip_conns[c].tcpstateflags == UIP_CLOSED) {
 800455c:	4a0f      	ldr	r2, [pc, #60]	; (800459c <uip_process+0x52c>)
 800455e:	eb02 1243 	add.w	r2, r2, r3, lsl #5
 8004562:	7e52      	ldrb	r2, [r2, #25]
 8004564:	bb22      	cbnz	r2, 80045b0 <uip_process+0x540>
      uip_connr = &uip_conns[c];
 8004566:	4c0d      	ldr	r4, [pc, #52]	; (800459c <uip_process+0x52c>)
 8004568:	eb04 1443 	add.w	r4, r4, r3, lsl #5
      break;
 800456c:	e034      	b.n	80045d8 <uip_process+0x568>
 800456e:	bf00      	nop
 8004570:	20000fb0 	.word	0x20000fb0
 8004574:	20000f10 	.word	0x20000f10
 8004578:	200013dc 	.word	0x200013dc
 800457c:	20000f18 	.word	0x20000f18
 8004580:	20000f0c 	.word	0x20000f0c
 8004584:	20000fda 	.word	0x20000fda
 8004588:	20000f04 	.word	0x20000f04
 800458c:	2000139a 	.word	0x2000139a
 8004590:	20000f00 	.word	0x20000f00
 8004594:	20000fac 	.word	0x20000fac
 8004598:	20000f14 	.word	0x20000f14
 800459c:	20000f1c 	.word	0x20000f1c
 80045a0:	20000f7c 	.word	0x20000f7c
 80045a4:	20000ad8 	.word	0x20000ad8
 80045a8:	20000ae2 	.word	0x20000ae2
 80045ac:	20000f9c 	.word	0x20000f9c
    }
    if(uip_conns[c].tcpstateflags == UIP_TIME_WAIT) {
 80045b0:	2a07      	cmp	r2, #7
 80045b2:	d10a      	bne.n	80045ca <uip_process+0x55a>
      if(uip_connr == 0 ||
 80045b4:	b134      	cbz	r4, 80045c4 <uip_process+0x554>
	 uip_conns[c].timer > uip_connr->timer) {
 80045b6:	4aa6      	ldr	r2, [pc, #664]	; (8004850 <uip_process+0x7e0>)
 80045b8:	eb02 1243 	add.w	r2, r2, r3, lsl #5
 80045bc:	7e91      	ldrb	r1, [r2, #26]
 80045be:	7ea2      	ldrb	r2, [r4, #26]
    if(uip_conns[c].tcpstateflags == UIP_CLOSED) {
      uip_connr = &uip_conns[c];
      break;
    }
    if(uip_conns[c].tcpstateflags == UIP_TIME_WAIT) {
      if(uip_connr == 0 ||
 80045c0:	4291      	cmp	r1, r2
 80045c2:	d902      	bls.n	80045ca <uip_process+0x55a>
	 uip_conns[c].timer > uip_connr->timer) {
	uip_connr = &uip_conns[c];
 80045c4:	4ca2      	ldr	r4, [pc, #648]	; (8004850 <uip_process+0x7e0>)
 80045c6:	eb04 1443 	add.w	r4, r4, r3, lsl #5
     unused ones have the tcpstate set to CLOSED. Also, connections in
     TIME_WAIT are kept track of and we'll use the oldest one if no
     CLOSED connections are found. Thanks to Eddie C. Dost for a very
     nice algorithm for the TIME_WAIT search. */
  uip_connr = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
 80045ca:	3301      	adds	r3, #1
 80045cc:	4aa1      	ldr	r2, [pc, #644]	; (8004854 <uip_process+0x7e4>)
 80045ce:	7013      	strb	r3, [r2, #0]
 80045d0:	4ba0      	ldr	r3, [pc, #640]	; (8004854 <uip_process+0x7e4>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d9c1      	bls.n	800455c <uip_process+0x4ec>
	uip_connr = &uip_conns[c];
      }
    }
  }

  if(uip_connr == 0) {
 80045d8:	2c00      	cmp	r4, #0
 80045da:	f000 8369 	beq.w	8004cb0 <uip_process+0xc40>
       have more spare connections. */
    UIP_STAT(++uip_stat.tcp.syndrop);
    UIP_LOG("tcp: found no unused connections.");
    goto drop;
  }
  uip_conn = uip_connr;
 80045de:	4b9e      	ldr	r3, [pc, #632]	; (8004858 <uip_process+0x7e8>)
 80045e0:	601c      	str	r4, [r3, #0]
  
  /* Fill in the necessary fields for the new connection. */
  uip_connr->rto = uip_connr->timer = UIP_RTO;
 80045e2:	2303      	movs	r3, #3
 80045e4:	76a3      	strb	r3, [r4, #26]
 80045e6:	7623      	strb	r3, [r4, #24]
  uip_connr->sa = 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	75a3      	strb	r3, [r4, #22]
  uip_connr->sv = 4;
 80045ec:	2204      	movs	r2, #4
 80045ee:	75e2      	strb	r2, [r4, #23]
  uip_connr->nrtx = 0;
 80045f0:	76e3      	strb	r3, [r4, #27]
  uip_connr->lport = BUF->destport;
 80045f2:	4d9a      	ldr	r5, [pc, #616]	; (800485c <uip_process+0x7ec>)
 80045f4:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 80045f6:	80a3      	strh	r3, [r4, #4]
  uip_connr->rport = BUF->srcport;
 80045f8:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 80045fa:	80e3      	strh	r3, [r4, #6]
  uip_ipaddr_copy(uip_connr->ripaddr, BUF->srcipaddr);
 80045fc:	8b6b      	ldrh	r3, [r5, #26]
 80045fe:	8023      	strh	r3, [r4, #0]
 8004600:	8bab      	ldrh	r3, [r5, #28]
 8004602:	8063      	strh	r3, [r4, #2]
  uip_connr->tcpstateflags = UIP_SYN_RCVD;
 8004604:	2001      	movs	r0, #1
 8004606:	7660      	strb	r0, [r4, #25]

  uip_connr->snd_nxt[0] = iss[0];
 8004608:	4b95      	ldr	r3, [pc, #596]	; (8004860 <uip_process+0x7f0>)
 800460a:	781a      	ldrb	r2, [r3, #0]
 800460c:	7322      	strb	r2, [r4, #12]
  uip_connr->snd_nxt[1] = iss[1];
 800460e:	785a      	ldrb	r2, [r3, #1]
 8004610:	7362      	strb	r2, [r4, #13]
  uip_connr->snd_nxt[2] = iss[2];
 8004612:	789a      	ldrb	r2, [r3, #2]
 8004614:	73a2      	strb	r2, [r4, #14]
  uip_connr->snd_nxt[3] = iss[3];
 8004616:	78db      	ldrb	r3, [r3, #3]
 8004618:	73e3      	strb	r3, [r4, #15]
  uip_connr->len = 1;
 800461a:	8220      	strh	r0, [r4, #16]

  /* rcv_nxt should be the seqno from the incoming packet + 1. */
  uip_connr->rcv_nxt[3] = BUF->seqno[3];
 800461c:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8004620:	72e3      	strb	r3, [r4, #11]
  uip_connr->rcv_nxt[2] = BUF->seqno[2];
 8004622:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8004626:	72a3      	strb	r3, [r4, #10]
  uip_connr->rcv_nxt[1] = BUF->seqno[1];
 8004628:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 800462c:	7263      	strb	r3, [r4, #9]
  uip_connr->rcv_nxt[0] = BUF->seqno[0];
 800462e:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 8004632:	7223      	strb	r3, [r4, #8]
  uip_add_rcv_nxt(1);
 8004634:	f7ff fc86 	bl	8003f44 <uip_add_rcv_nxt>

  /* Parse the TCP MSS option, if present. */
  if((BUF->tcpoffset & 0xf0) > 0x50) {
 8004638:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
 800463c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8004640:	2b50      	cmp	r3, #80	; 0x50
 8004642:	dd37      	ble.n	80046b4 <uip_process+0x644>
    for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
 8004644:	2200      	movs	r2, #0
 8004646:	4b83      	ldr	r3, [pc, #524]	; (8004854 <uip_process+0x7e4>)
 8004648:	701a      	strb	r2, [r3, #0]
 800464a:	e02b      	b.n	80046a4 <uip_process+0x634>
      opt = uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + c];
 800464c:	f103 0136 	add.w	r1, r3, #54	; 0x36
 8004650:	4d82      	ldr	r5, [pc, #520]	; (800485c <uip_process+0x7ec>)
 8004652:	5c69      	ldrb	r1, [r5, r1]
      if(opt == TCP_OPT_END) {
 8004654:	b371      	cbz	r1, 80046b4 <uip_process+0x644>
	/* End of options. */
	break;
      } else if(opt == TCP_OPT_NOOP) {
 8004656:	2901      	cmp	r1, #1
 8004658:	d103      	bne.n	8004662 <uip_process+0x5f2>
	++c;
 800465a:	3301      	adds	r3, #1
 800465c:	4a7d      	ldr	r2, [pc, #500]	; (8004854 <uip_process+0x7e4>)
 800465e:	7013      	strb	r3, [r2, #0]
 8004660:	e020      	b.n	80046a4 <uip_process+0x634>
	/* NOP option. */
      } else if(opt == TCP_OPT_MSS &&
 8004662:	2902      	cmp	r1, #2
 8004664:	d116      	bne.n	8004694 <uip_process+0x624>
		uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
 8004666:	f103 0137 	add.w	r1, r3, #55	; 0x37
 800466a:	4d7c      	ldr	r5, [pc, #496]	; (800485c <uip_process+0x7ec>)
 800466c:	5c69      	ldrb	r1, [r5, r1]
	/* End of options. */
	break;
      } else if(opt == TCP_OPT_NOOP) {
	++c;
	/* NOP option. */
      } else if(opt == TCP_OPT_MSS &&
 800466e:	2904      	cmp	r1, #4
 8004670:	d110      	bne.n	8004694 <uip_process+0x624>
		uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
	/* An MSS option with the right option length. */
	tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 8004672:	f102 0338 	add.w	r3, r2, #56	; 0x38
 8004676:	5ce8      	ldrb	r0, [r5, r3]
	  (u16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
 8004678:	3239      	adds	r2, #57	; 0x39
 800467a:	5cab      	ldrb	r3, [r5, r2]
	++c;
	/* NOP option. */
      } else if(opt == TCP_OPT_MSS &&
		uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
	/* An MSS option with the right option length. */
	tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 800467c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004680:	4a78      	ldr	r2, [pc, #480]	; (8004864 <uip_process+0x7f4>)
 8004682:	8013      	strh	r3, [r2, #0]
	  (u16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
	uip_connr->initialmss = uip_connr->mss =
 8004684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004688:	bf28      	it	cs
 800468a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800468e:	8263      	strh	r3, [r4, #18]
 8004690:	82a3      	strh	r3, [r4, #20]
	  tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;
	
	/* And we are done processing options. */
	break;
 8004692:	e00f      	b.n	80046b4 <uip_process+0x644>
      } else {
	/* All other options have a length field, so that we easily
	   can skip past them. */
	if(uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
 8004694:	f103 0237 	add.w	r2, r3, #55	; 0x37
 8004698:	4970      	ldr	r1, [pc, #448]	; (800485c <uip_process+0x7ec>)
 800469a:	5c8a      	ldrb	r2, [r1, r2]
 800469c:	b152      	cbz	r2, 80046b4 <uip_process+0x644>
	  /* If the length field is zero, the options are malformed
	     and we don't process them further. */
	  break;
	}
	c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
 800469e:	4413      	add	r3, r2
 80046a0:	4a6c      	ldr	r2, [pc, #432]	; (8004854 <uip_process+0x7e4>)
 80046a2:	7013      	strb	r3, [r2, #0]
  uip_connr->rcv_nxt[0] = BUF->seqno[0];
  uip_add_rcv_nxt(1);

  /* Parse the TCP MSS option, if present. */
  if((BUF->tcpoffset & 0xf0) > 0x50) {
    for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
 80046a4:	4b6b      	ldr	r3, [pc, #428]	; (8004854 <uip_process+0x7e4>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	461a      	mov	r2, r3
 80046aa:	0901      	lsrs	r1, r0, #4
 80046ac:	3905      	subs	r1, #5
 80046ae:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
 80046b2:	dbcb      	blt.n	800464c <uip_process+0x5dc>
  }
  
  /* Our response will be a SYNACK. */
#if UIP_ACTIVE_OPEN
 tcp_send_synack:
  BUF->flags = TCP_ACK;
 80046b4:	2210      	movs	r2, #16
 80046b6:	4b69      	ldr	r3, [pc, #420]	; (800485c <uip_process+0x7ec>)
 80046b8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  
 tcp_send_syn:
  BUF->flags |= TCP_SYN;
 80046bc:	4d67      	ldr	r5, [pc, #412]	; (800485c <uip_process+0x7ec>)
 80046be:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 80046c2:	f043 0302 	orr.w	r3, r3, #2
 80046c6:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
#else /* UIP_ACTIVE_OPEN */
 tcp_send_synack:
  BUF->flags = TCP_SYN | TCP_ACK;
#endif /* UIP_ACTIVE_OPEN */
#ifdef UIPDEBUG
  printf("UIP: TCP Send SYNC State\n");
 80046ca:	4867      	ldr	r0, [pc, #412]	; (8004868 <uip_process+0x7f8>)
 80046cc:	f7fe ff56 	bl	800357c <puts>
 #endif
  /* We send out the TCP Maximum Segment Size option with our
     SYNACK. */
  BUF->optdata[0] = TCP_OPT_MSS;
 80046d0:	2302      	movs	r3, #2
 80046d2:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
  BUF->optdata[1] = TCP_OPT_MSS_LEN;
 80046d6:	2204      	movs	r2, #4
 80046d8:	f885 2037 	strb.w	r2, [r5, #55]	; 0x37
  BUF->optdata[2] = (UIP_TCP_MSS) / 256;
 80046dc:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  BUF->optdata[3] = (UIP_TCP_MSS) & 255;
 80046e0:	2300      	movs	r3, #0
 80046e2:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  uip_len = UIP_IPTCPH_LEN + TCP_OPT_MSS_LEN;
 80046e6:	222c      	movs	r2, #44	; 0x2c
 80046e8:	4b60      	ldr	r3, [pc, #384]	; (800486c <uip_process+0x7fc>)
 80046ea:	801a      	strh	r2, [r3, #0]
  BUF->tcpoffset = ((UIP_TCPH_LEN + TCP_OPT_MSS_LEN) / 4) << 4;
 80046ec:	2360      	movs	r3, #96	; 0x60
 80046ee:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
  goto tcp_send;
 80046f2:	e275      	b.n	8004be0 <uip_process+0xb70>

  /* This label will be jumped to if we found an active connection. */
 found:
  uip_conn = uip_connr;
 80046f4:	4b58      	ldr	r3, [pc, #352]	; (8004858 <uip_process+0x7e8>)
 80046f6:	601c      	str	r4, [r3, #0]
  uip_flags = 0;
 80046f8:	2200      	movs	r2, #0
 80046fa:	4b5d      	ldr	r3, [pc, #372]	; (8004870 <uip_process+0x800>)
 80046fc:	701a      	strb	r2, [r3, #0]
  /* We do a very naive form of TCP reset processing; we just accept
     any RST and kill our connection. We should in fact check if the
     sequence number of this reset is wihtin our advertised window
     before we accept the reset. */
  if(BUF->flags & TCP_RST) {
 80046fe:	4b57      	ldr	r3, [pc, #348]	; (800485c <uip_process+0x7ec>)
 8004700:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8004704:	f012 0f04 	tst.w	r2, #4
 8004708:	d007      	beq.n	800471a <uip_process+0x6aa>
    uip_connr->tcpstateflags = UIP_CLOSED;
 800470a:	2300      	movs	r3, #0
 800470c:	7663      	strb	r3, [r4, #25]
    UIP_LOG("tcp: got reset, aborting connection.");
    uip_flags = UIP_ABORT;
 800470e:	2220      	movs	r2, #32
 8004710:	4b57      	ldr	r3, [pc, #348]	; (8004870 <uip_process+0x800>)
 8004712:	701a      	strb	r2, [r3, #0]
    UIP_APPCALL();
 8004714:	f7fd fb2e 	bl	8001d74 <uipclient_appcall>
    goto drop;
 8004718:	e2ca      	b.n	8004cb0 <uip_process+0xc40>
  }
  /* Calculated the length of the data, if the application has sent
     any data to us. */
  c = (BUF->tcpoffset >> 4) << 2;
 800471a:	4b50      	ldr	r3, [pc, #320]	; (800485c <uip_process+0x7ec>)
 800471c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004720:	091b      	lsrs	r3, r3, #4
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	484b      	ldr	r0, [pc, #300]	; (8004854 <uip_process+0x7e4>)
 8004726:	7003      	strb	r3, [r0, #0]
  /* uip_len will contain the length of the actual TCP data. This is
     calculated by subtracing the length of the TCP header (in
     c) and the length of the IP header (20 bytes). */
  uip_len = uip_len - c - UIP_IPH_LEN;
 8004728:	1aeb      	subs	r3, r5, r3
 800472a:	3b14      	subs	r3, #20
 800472c:	b29b      	uxth	r3, r3
 800472e:	484f      	ldr	r0, [pc, #316]	; (800486c <uip_process+0x7fc>)
 8004730:	8003      	strh	r3, [r0, #0]

  /* First, check if the sequence number of the incoming packet is
     what we're expecting next. If not, we send out an ACK with the
     correct numbers in. */
  if(!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
 8004732:	f001 010f 	and.w	r1, r1, #15
 8004736:	2902      	cmp	r1, #2
 8004738:	d103      	bne.n	8004742 <uip_process+0x6d2>
 800473a:	f002 013f 	and.w	r1, r2, #63	; 0x3f
 800473e:	2912      	cmp	r1, #18
 8004740:	d00f      	beq.n	8004762 <uip_process+0x6f2>
       ((BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)))) {
    if((uip_len > 0 || ((BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
 8004742:	b913      	cbnz	r3, 800474a <uip_process+0x6da>
 8004744:	f012 0f03 	tst.w	r2, #3
 8004748:	d00b      	beq.n	8004762 <uip_process+0x6f2>
       (BUF->seqno[0] != uip_connr->rcv_nxt[0] ||
 800474a:	4b44      	ldr	r3, [pc, #272]	; (800485c <uip_process+0x7ec>)
 800474c:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 800474e:	8923      	ldrh	r3, [r4, #8]
  /* First, check if the sequence number of the incoming packet is
     what we're expecting next. If not, we send out an ACK with the
     correct numbers in. */
  if(!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
       ((BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)))) {
    if((uip_len > 0 || ((BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
 8004750:	4299      	cmp	r1, r3
 8004752:	f040 823a 	bne.w	8004bca <uip_process+0xb5a>
       (BUF->seqno[0] != uip_connr->rcv_nxt[0] ||
	BUF->seqno[1] != uip_connr->rcv_nxt[1] ||
	BUF->seqno[2] != uip_connr->rcv_nxt[2] ||
 8004756:	4b41      	ldr	r3, [pc, #260]	; (800485c <uip_process+0x7ec>)
 8004758:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 800475a:	8963      	ldrh	r3, [r4, #10]
 800475c:	4299      	cmp	r1, r3
 800475e:	f040 8234 	bne.w	8004bca <uip_process+0xb5a>

  /* Next, check if the incoming segment acknowledges any outstanding
     data. If so, we update the sequence number, reset the length of
     the outstanding data, calculate RTT estimations, and reset the
     retransmission timer. */
  if((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
 8004762:	f012 0f10 	tst.w	r2, #16
 8004766:	d047      	beq.n	80047f8 <uip_process+0x788>
 8004768:	8a21      	ldrh	r1, [r4, #16]
 800476a:	2900      	cmp	r1, #0
 800476c:	d044      	beq.n	80047f8 <uip_process+0x788>
    uip_add32(uip_connr->snd_nxt, uip_connr->len);
 800476e:	f104 000c 	add.w	r0, r4, #12
 8004772:	f7ff fbb9 	bl	8003ee8 <uip_add32>

    if(BUF->ackno[0] == uip_acc32[0] &&
 8004776:	4b39      	ldr	r3, [pc, #228]	; (800485c <uip_process+0x7ec>)
 8004778:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800477c:	4a3d      	ldr	r2, [pc, #244]	; (8004874 <uip_process+0x804>)
 800477e:	7810      	ldrb	r0, [r2, #0]
 8004780:	4283      	cmp	r3, r0
 8004782:	d139      	bne.n	80047f8 <uip_process+0x788>
       BUF->ackno[1] == uip_acc32[1] &&
 8004784:	4b35      	ldr	r3, [pc, #212]	; (800485c <uip_process+0x7ec>)
 8004786:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800478a:	7851      	ldrb	r1, [r2, #1]
     the outstanding data, calculate RTT estimations, and reset the
     retransmission timer. */
  if((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
    uip_add32(uip_connr->snd_nxt, uip_connr->len);

    if(BUF->ackno[0] == uip_acc32[0] &&
 800478c:	428b      	cmp	r3, r1
 800478e:	d133      	bne.n	80047f8 <uip_process+0x788>
       BUF->ackno[1] == uip_acc32[1] &&
       BUF->ackno[2] == uip_acc32[2] &&
 8004790:	4b32      	ldr	r3, [pc, #200]	; (800485c <uip_process+0x7ec>)
 8004792:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004796:	7892      	ldrb	r2, [r2, #2]
     retransmission timer. */
  if((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
    uip_add32(uip_connr->snd_nxt, uip_connr->len);

    if(BUF->ackno[0] == uip_acc32[0] &&
       BUF->ackno[1] == uip_acc32[1] &&
 8004798:	4293      	cmp	r3, r2
 800479a:	d12d      	bne.n	80047f8 <uip_process+0x788>
       BUF->ackno[2] == uip_acc32[2] &&
       BUF->ackno[3] == uip_acc32[3]) {
 800479c:	4b2f      	ldr	r3, [pc, #188]	; (800485c <uip_process+0x7ec>)
 800479e:	f893 502d 	ldrb.w	r5, [r3, #45]	; 0x2d
 80047a2:	4b34      	ldr	r3, [pc, #208]	; (8004874 <uip_process+0x804>)
 80047a4:	78db      	ldrb	r3, [r3, #3]
  if((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
    uip_add32(uip_connr->snd_nxt, uip_connr->len);

    if(BUF->ackno[0] == uip_acc32[0] &&
       BUF->ackno[1] == uip_acc32[1] &&
       BUF->ackno[2] == uip_acc32[2] &&
 80047a6:	429d      	cmp	r5, r3
 80047a8:	d126      	bne.n	80047f8 <uip_process+0x788>
       BUF->ackno[3] == uip_acc32[3]) {
      /* Update sequence number. */
      uip_connr->snd_nxt[0] = uip_acc32[0];
 80047aa:	7320      	strb	r0, [r4, #12]
      uip_connr->snd_nxt[1] = uip_acc32[1];
 80047ac:	7361      	strb	r1, [r4, #13]
      uip_connr->snd_nxt[2] = uip_acc32[2];
 80047ae:	73a2      	strb	r2, [r4, #14]
      uip_connr->snd_nxt[3] = uip_acc32[3];
 80047b0:	73e3      	strb	r3, [r4, #15]
	

      /* Do RTT estimation, unless we have done retransmissions. */
      if(uip_connr->nrtx == 0) {
 80047b2:	7ee3      	ldrb	r3, [r4, #27]
 80047b4:	b9cb      	cbnz	r3, 80047ea <uip_process+0x77a>
	signed char m;
	m = uip_connr->rto - uip_connr->timer;
 80047b6:	7e23      	ldrb	r3, [r4, #24]
 80047b8:	7ea2      	ldrb	r2, [r4, #26]
 80047ba:	1a9a      	subs	r2, r3, r2
 80047bc:	b2d2      	uxtb	r2, r2
	/* This is taken directly from VJs original code in his paper */
	m = m - (uip_connr->sa >> 3);
 80047be:	7da1      	ldrb	r1, [r4, #22]
 80047c0:	eba2 02d1 	sub.w	r2, r2, r1, lsr #3
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	b253      	sxtb	r3, r2
	uip_connr->sa += m;
 80047c8:	4411      	add	r1, r2
 80047ca:	b2c9      	uxtb	r1, r1
 80047cc:	75a1      	strb	r1, [r4, #22]
	if(m < 0) {
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	da01      	bge.n	80047d6 <uip_process+0x766>
	  m = -m;
 80047d2:	4252      	negs	r2, r2
 80047d4:	b253      	sxtb	r3, r2
	}
	m = m - (uip_connr->sv >> 2);
 80047d6:	7de0      	ldrb	r0, [r4, #23]
 80047d8:	eba3 0290 	sub.w	r2, r3, r0, lsr #2
 80047dc:	b2d2      	uxtb	r2, r2
	uip_connr->sv += m;
 80047de:	4402      	add	r2, r0
 80047e0:	b2d3      	uxtb	r3, r2
 80047e2:	75e3      	strb	r3, [r4, #23]
	uip_connr->rto = (uip_connr->sa >> 3) + uip_connr->sv;
 80047e4:	eb03 03d1 	add.w	r3, r3, r1, lsr #3
 80047e8:	7623      	strb	r3, [r4, #24]

      }
      /* Set the acknowledged flag. */
      uip_flags = UIP_ACKDATA;
 80047ea:	2201      	movs	r2, #1
 80047ec:	4b20      	ldr	r3, [pc, #128]	; (8004870 <uip_process+0x800>)
 80047ee:	701a      	strb	r2, [r3, #0]
      /* Reset the retransmission timer. */
      uip_connr->timer = uip_connr->rto;
 80047f0:	7e23      	ldrb	r3, [r4, #24]
 80047f2:	76a3      	strb	r3, [r4, #26]

      /* Reset length of outstanding data. */
      uip_connr->len = 0;
 80047f4:	2300      	movs	r3, #0
 80047f6:	8223      	strh	r3, [r4, #16]
    }
    
  }

  /* Do different things depending on in what state the connection is. */
  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
 80047f8:	7e61      	ldrb	r1, [r4, #25]
 80047fa:	f001 030f 	and.w	r3, r1, #15
 80047fe:	3b01      	subs	r3, #1
 8004800:	2b07      	cmp	r3, #7
 8004802:	f200 8255 	bhi.w	8004cb0 <uip_process+0xc40>
 8004806:	e8df f013 	tbh	[pc, r3, lsl #1]
 800480a:	0008      	.short	0x0008
 800480c:	00ac0039 	.word	0x00ac0039
 8004810:	01ba018b 	.word	0x01ba018b
 8004814:	01e001d6 	.word	0x01e001d6
 8004818:	016a      	.short	0x016a
  case UIP_SYN_RCVD:
    /* In SYN_RCVD we have sent out a SYNACK in response to a SYN, and
       we are waiting for an ACK that acknowledges the data we sent
       out the last time. Therefore, we want to have the UIP_ACKDATA
       flag set. If so, we enter the ESTABLISHED state. */
    if(uip_flags & UIP_ACKDATA) {
 800481a:	4b15      	ldr	r3, [pc, #84]	; (8004870 <uip_process+0x800>)
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	f013 0f01 	tst.w	r3, #1
 8004822:	f000 8245 	beq.w	8004cb0 <uip_process+0xc40>
      uip_connr->tcpstateflags = UIP_ESTABLISHED;
 8004826:	2303      	movs	r3, #3
 8004828:	7663      	strb	r3, [r4, #25]
      uip_flags = UIP_CONNECTED;
 800482a:	2240      	movs	r2, #64	; 0x40
 800482c:	4b10      	ldr	r3, [pc, #64]	; (8004870 <uip_process+0x800>)
 800482e:	701a      	strb	r2, [r3, #0]
      uip_connr->len = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	8223      	strh	r3, [r4, #16]
      if(uip_len > 0) {
 8004834:	4b0d      	ldr	r3, [pc, #52]	; (800486c <uip_process+0x7fc>)
 8004836:	8818      	ldrh	r0, [r3, #0]
 8004838:	b120      	cbz	r0, 8004844 <uip_process+0x7d4>
        uip_flags |= UIP_NEWDATA;
 800483a:	2242      	movs	r2, #66	; 0x42
 800483c:	4b0c      	ldr	r3, [pc, #48]	; (8004870 <uip_process+0x800>)
 800483e:	701a      	strb	r2, [r3, #0]
        uip_add_rcv_nxt(uip_len);
 8004840:	f7ff fb80 	bl	8003f44 <uip_add_rcv_nxt>
      }
      uip_slen = 0;
 8004844:	2200      	movs	r2, #0
 8004846:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <uip_process+0x808>)
 8004848:	801a      	strh	r2, [r3, #0]
      UIP_APPCALL();
 800484a:	f7fd fa93 	bl	8001d74 <uipclient_appcall>
      goto appsend;
 800484e:	e0f2      	b.n	8004a36 <uip_process+0x9c6>
 8004850:	20000f1c 	.word	0x20000f1c
 8004854:	20000ae2 	.word	0x20000ae2
 8004858:	20000f18 	.word	0x20000f18
 800485c:	20000fb0 	.word	0x20000fb0
 8004860:	20000adc 	.word	0x20000adc
 8004864:	20000ad8 	.word	0x20000ad8
 8004868:	080063cc 	.word	0x080063cc
 800486c:	20000f00 	.word	0x20000f00
 8004870:	20000f0c 	.word	0x20000f0c
 8004874:	20000f08 	.word	0x20000f08
 8004878:	2000139a 	.word	0x2000139a
  case UIP_SYN_SENT:
    /* In SYN_SENT, we wait for a SYNACK that is sent in response to
       our SYN. The rcv_nxt is set to sequence number in the SYNACK
       plus one, and we send an ACK. We move into the ESTABLISHED
       state. */
    if((uip_flags & UIP_ACKDATA) &&
 800487c:	4b9f      	ldr	r3, [pc, #636]	; (8004afc <uip_process+0xa8c>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	f013 0f01 	tst.w	r3, #1
 8004884:	d063      	beq.n	800494e <uip_process+0x8de>
       (BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)) {
 8004886:	4b9e      	ldr	r3, [pc, #632]	; (8004b00 <uip_process+0xa90>)
 8004888:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
  case UIP_SYN_SENT:
    /* In SYN_SENT, we wait for a SYNACK that is sent in response to
       our SYN. The rcv_nxt is set to sequence number in the SYNACK
       plus one, and we send an ACK. We move into the ESTABLISHED
       state. */
    if((uip_flags & UIP_ACKDATA) &&
 800488c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004890:	2b12      	cmp	r3, #18
 8004892:	d15c      	bne.n	800494e <uip_process+0x8de>
       (BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)) {

      /* Parse the TCP MSS option, if present. */
      if((BUF->tcpoffset & 0xf0) > 0x50) {
 8004894:	4b9a      	ldr	r3, [pc, #616]	; (8004b00 <uip_process+0xa90>)
 8004896:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
 800489a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800489e:	2b50      	cmp	r3, #80	; 0x50
 80048a0:	dd37      	ble.n	8004912 <uip_process+0x8a2>
	for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
 80048a2:	2200      	movs	r2, #0
 80048a4:	4b97      	ldr	r3, [pc, #604]	; (8004b04 <uip_process+0xa94>)
 80048a6:	701a      	strb	r2, [r3, #0]
 80048a8:	e02b      	b.n	8004902 <uip_process+0x892>
	  opt = uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + c];
 80048aa:	f103 0136 	add.w	r1, r3, #54	; 0x36
 80048ae:	4d94      	ldr	r5, [pc, #592]	; (8004b00 <uip_process+0xa90>)
 80048b0:	5c69      	ldrb	r1, [r5, r1]
	  if(opt == TCP_OPT_END) {
 80048b2:	b371      	cbz	r1, 8004912 <uip_process+0x8a2>
	    /* End of options. */
	    break;
	  } else if(opt == TCP_OPT_NOOP) {
 80048b4:	2901      	cmp	r1, #1
 80048b6:	d103      	bne.n	80048c0 <uip_process+0x850>
	    ++c;
 80048b8:	3301      	adds	r3, #1
 80048ba:	4a92      	ldr	r2, [pc, #584]	; (8004b04 <uip_process+0xa94>)
 80048bc:	7013      	strb	r3, [r2, #0]
 80048be:	e020      	b.n	8004902 <uip_process+0x892>
	    /* NOP option. */
	  } else if(opt == TCP_OPT_MSS &&
 80048c0:	2902      	cmp	r1, #2
 80048c2:	d116      	bne.n	80048f2 <uip_process+0x882>
		    uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
 80048c4:	f103 0137 	add.w	r1, r3, #55	; 0x37
 80048c8:	4d8d      	ldr	r5, [pc, #564]	; (8004b00 <uip_process+0xa90>)
 80048ca:	5c69      	ldrb	r1, [r5, r1]
	    /* End of options. */
	    break;
	  } else if(opt == TCP_OPT_NOOP) {
	    ++c;
	    /* NOP option. */
	  } else if(opt == TCP_OPT_MSS &&
 80048cc:	2904      	cmp	r1, #4
 80048ce:	d110      	bne.n	80048f2 <uip_process+0x882>
		    uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
	    /* An MSS option with the right option length. */
	    tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 80048d0:	f102 0338 	add.w	r3, r2, #56	; 0x38
 80048d4:	5ce8      	ldrb	r0, [r5, r3]
	      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 3 + c];
 80048d6:	3239      	adds	r2, #57	; 0x39
 80048d8:	5cab      	ldrb	r3, [r5, r2]
	    ++c;
	    /* NOP option. */
	  } else if(opt == TCP_OPT_MSS &&
		    uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
	    /* An MSS option with the right option length. */
	    tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 80048da:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80048de:	4a8a      	ldr	r2, [pc, #552]	; (8004b08 <uip_process+0xa98>)
 80048e0:	8013      	strh	r3, [r2, #0]
	      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 3 + c];
	    uip_connr->initialmss =
	      uip_connr->mss = tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;
 80048e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e6:	bf28      	it	cs
 80048e8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80048ec:	8263      	strh	r3, [r4, #18]
	  } else if(opt == TCP_OPT_MSS &&
		    uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
	    /* An MSS option with the right option length. */
	    tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
	      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 3 + c];
	    uip_connr->initialmss =
 80048ee:	82a3      	strh	r3, [r4, #20]
	      uip_connr->mss = tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;

	    /* And we are done processing options. */
	    break;
 80048f0:	e00f      	b.n	8004912 <uip_process+0x8a2>
	  } else {
	    /* All other options have a length field, so that we easily
	       can skip past them. */
	    if(uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
 80048f2:	f103 0237 	add.w	r2, r3, #55	; 0x37
 80048f6:	4982      	ldr	r1, [pc, #520]	; (8004b00 <uip_process+0xa90>)
 80048f8:	5c8a      	ldrb	r2, [r1, r2]
 80048fa:	b152      	cbz	r2, 8004912 <uip_process+0x8a2>
	      /* If the length field is zero, the options are malformed
		 and we don't process them further. */
	      break;
	    }
	    c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
 80048fc:	4413      	add	r3, r2
 80048fe:	4a81      	ldr	r2, [pc, #516]	; (8004b04 <uip_process+0xa94>)
 8004900:	7013      	strb	r3, [r2, #0]
    if((uip_flags & UIP_ACKDATA) &&
       (BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)) {

      /* Parse the TCP MSS option, if present. */
      if((BUF->tcpoffset & 0xf0) > 0x50) {
	for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
 8004902:	4b80      	ldr	r3, [pc, #512]	; (8004b04 <uip_process+0xa94>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	461a      	mov	r2, r3
 8004908:	0901      	lsrs	r1, r0, #4
 800490a:	3905      	subs	r1, #5
 800490c:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
 8004910:	dbcb      	blt.n	80048aa <uip_process+0x83a>
	    }
	    c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
	  }
	}
      }
      uip_connr->tcpstateflags = UIP_ESTABLISHED;
 8004912:	2303      	movs	r3, #3
 8004914:	7663      	strb	r3, [r4, #25]
      uip_connr->rcv_nxt[0] = BUF->seqno[0];
 8004916:	4b7a      	ldr	r3, [pc, #488]	; (8004b00 <uip_process+0xa90>)
 8004918:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800491c:	7222      	strb	r2, [r4, #8]
      uip_connr->rcv_nxt[1] = BUF->seqno[1];
 800491e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8004922:	7262      	strb	r2, [r4, #9]
      uip_connr->rcv_nxt[2] = BUF->seqno[2];
 8004924:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8004928:	72a2      	strb	r2, [r4, #10]
      uip_connr->rcv_nxt[3] = BUF->seqno[3];
 800492a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800492e:	72e3      	strb	r3, [r4, #11]
      uip_add_rcv_nxt(1);
 8004930:	2001      	movs	r0, #1
 8004932:	f7ff fb07 	bl	8003f44 <uip_add_rcv_nxt>
      uip_flags = UIP_CONNECTED | UIP_NEWDATA;
 8004936:	2242      	movs	r2, #66	; 0x42
 8004938:	4b70      	ldr	r3, [pc, #448]	; (8004afc <uip_process+0xa8c>)
 800493a:	701a      	strb	r2, [r3, #0]
      uip_connr->len = 0;
 800493c:	2300      	movs	r3, #0
 800493e:	8223      	strh	r3, [r4, #16]
      uip_len = 0;
 8004940:	4a72      	ldr	r2, [pc, #456]	; (8004b0c <uip_process+0xa9c>)
 8004942:	8013      	strh	r3, [r2, #0]
      uip_slen = 0;
 8004944:	4a72      	ldr	r2, [pc, #456]	; (8004b10 <uip_process+0xaa0>)
 8004946:	8013      	strh	r3, [r2, #0]
      UIP_APPCALL();
 8004948:	f7fd fa14 	bl	8001d74 <uipclient_appcall>
      goto appsend;
 800494c:	e073      	b.n	8004a36 <uip_process+0x9c6>
    }
    /* Inform the application that the connection failed */
    uip_flags = UIP_ABORT;
 800494e:	2220      	movs	r2, #32
 8004950:	4b6a      	ldr	r3, [pc, #424]	; (8004afc <uip_process+0xa8c>)
 8004952:	701a      	strb	r2, [r3, #0]
    UIP_APPCALL();
 8004954:	f7fd fa0e 	bl	8001d74 <uipclient_appcall>
    /* The connection is closed after we send the RST */
    uip_conn->tcpstateflags = UIP_CLOSED;
 8004958:	4b6e      	ldr	r3, [pc, #440]	; (8004b14 <uip_process+0xaa4>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2200      	movs	r2, #0
 800495e:	765a      	strb	r2, [r3, #25]
    goto reset;
 8004960:	e5a3      	b.n	80044aa <uip_process+0x43a>
    If the incoming packet is a FIN, we should close the connection on
    this side as well, and we send out a FIN and enter the LAST_ACK
    state. We require that there is no outstanding data; otherwise the
    sequence numbers will be screwed up. */

    if(BUF->flags & TCP_FIN && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
 8004962:	4b67      	ldr	r3, [pc, #412]	; (8004b00 <uip_process+0xa90>)
 8004964:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004968:	f013 0f01 	tst.w	r3, #1
 800496c:	d024      	beq.n	80049b8 <uip_process+0x948>
 800496e:	f011 0f10 	tst.w	r1, #16
 8004972:	d121      	bne.n	80049b8 <uip_process+0x948>
      if(uip_outstanding(uip_connr)) {
 8004974:	8a23      	ldrh	r3, [r4, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	f040 819a 	bne.w	8004cb0 <uip_process+0xc40>
	goto drop;
      }
      uip_add_rcv_nxt(1 + uip_len);
 800497c:	4d63      	ldr	r5, [pc, #396]	; (8004b0c <uip_process+0xa9c>)
 800497e:	8828      	ldrh	r0, [r5, #0]
 8004980:	3001      	adds	r0, #1
 8004982:	b280      	uxth	r0, r0
 8004984:	f7ff fade 	bl	8003f44 <uip_add_rcv_nxt>
      uip_flags |= UIP_CLOSE;
 8004988:	4a5c      	ldr	r2, [pc, #368]	; (8004afc <uip_process+0xa8c>)
 800498a:	7813      	ldrb	r3, [r2, #0]
 800498c:	f043 0310 	orr.w	r3, r3, #16
 8004990:	7013      	strb	r3, [r2, #0]
      if(uip_len > 0) {
 8004992:	882a      	ldrh	r2, [r5, #0]
 8004994:	b11a      	cbz	r2, 800499e <uip_process+0x92e>
	uip_flags |= UIP_NEWDATA;
 8004996:	f043 0302 	orr.w	r3, r3, #2
 800499a:	4a58      	ldr	r2, [pc, #352]	; (8004afc <uip_process+0xa8c>)
 800499c:	7013      	strb	r3, [r2, #0]
      }
      UIP_APPCALL();
 800499e:	f7fd f9e9 	bl	8001d74 <uipclient_appcall>
      uip_connr->len = 1;
 80049a2:	2301      	movs	r3, #1
 80049a4:	8223      	strh	r3, [r4, #16]
      uip_connr->tcpstateflags = UIP_LAST_ACK;
 80049a6:	2308      	movs	r3, #8
 80049a8:	7663      	strb	r3, [r4, #25]
      uip_connr->nrtx = 0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	76e3      	strb	r3, [r4, #27]
    tcp_send_finack:
      BUF->flags = TCP_FIN | TCP_ACK;
 80049ae:	2211      	movs	r2, #17
 80049b0:	4b53      	ldr	r3, [pc, #332]	; (8004b00 <uip_process+0xa90>)
 80049b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
      goto tcp_send_nodata;
 80049b6:	e10c      	b.n	8004bd2 <uip_process+0xb62>
    }

    /* Check the URG flag. If this is set, the segment carries urgent
       data that we must pass to the application. */
    if((BUF->flags & TCP_URG) != 0) {
 80049b8:	f013 0f20 	tst.w	r3, #32
 80049bc:	d010      	beq.n	80049e0 <uip_process+0x970>
      uip_urgdata = uip_appdata;
      uip_appdata += uip_urglen;
    } else {
      uip_urglen = 0;
#else /* UIP_URGDATA > 0 */
      uip_appdata = ((char *)uip_appdata) + ((BUF->urgp[0] << 8) | BUF->urgp[1]);
 80049be:	4850      	ldr	r0, [pc, #320]	; (8004b00 <uip_process+0xa90>)
 80049c0:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80049c4:	021a      	lsls	r2, r3, #8
 80049c6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80049ca:	ea43 0002 	orr.w	r0, r3, r2
 80049ce:	4d52      	ldr	r5, [pc, #328]	; (8004b18 <uip_process+0xaa8>)
 80049d0:	682e      	ldr	r6, [r5, #0]
 80049d2:	4430      	add	r0, r6
 80049d4:	6028      	str	r0, [r5, #0]
      uip_len -= (BUF->urgp[0] << 8) | BUF->urgp[1];
 80049d6:	484d      	ldr	r0, [pc, #308]	; (8004b0c <uip_process+0xa9c>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	8802      	ldrh	r2, [r0, #0]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	8003      	strh	r3, [r0, #0]
    /* If uip_len > 0 we have TCP data in the packet, and we flag this
       by setting the UIP_NEWDATA flag and update the sequence number
       we acknowledge. If the application has stopped the dataflow
       using uip_stop(), we must not accept any data packets from the
       remote host. */
    if(uip_len > 0 && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
 80049e0:	4b4a      	ldr	r3, [pc, #296]	; (8004b0c <uip_process+0xa9c>)
 80049e2:	8818      	ldrh	r0, [r3, #0]
 80049e4:	b148      	cbz	r0, 80049fa <uip_process+0x98a>
 80049e6:	f011 0f10 	tst.w	r1, #16
 80049ea:	d106      	bne.n	80049fa <uip_process+0x98a>
      uip_flags |= UIP_NEWDATA;
 80049ec:	4a43      	ldr	r2, [pc, #268]	; (8004afc <uip_process+0xa8c>)
 80049ee:	7813      	ldrb	r3, [r2, #0]
 80049f0:	f043 0302 	orr.w	r3, r3, #2
 80049f4:	7013      	strb	r3, [r2, #0]
      uip_add_rcv_nxt(uip_len);
 80049f6:	f7ff faa5 	bl	8003f44 <uip_add_rcv_nxt>
       the initial MSS so that the application will send an entire MSS
       of data. This data will not be acknowledged by the receiver,
       and the application will retransmit it. This is called the
       "persistent timer" and uses the retransmission mechanim.
    */
    tmp16 = ((u16_t)BUF->wnd[0] << 8) + (u16_t)BUF->wnd[1];
 80049fa:	4a41      	ldr	r2, [pc, #260]	; (8004b00 <uip_process+0xa90>)
 80049fc:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
 8004a00:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 8004a04:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	4a3f      	ldr	r2, [pc, #252]	; (8004b08 <uip_process+0xa98>)
 8004a0c:	8013      	strh	r3, [r2, #0]
    if(tmp16 > uip_connr->initialmss ||
 8004a0e:	8aa2      	ldrh	r2, [r4, #20]
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d800      	bhi.n	8004a16 <uip_process+0x9a6>
 8004a14:	b90b      	cbnz	r3, 8004a1a <uip_process+0x9aa>
       tmp16 == 0) {
      tmp16 = uip_connr->initialmss;
 8004a16:	4b3c      	ldr	r3, [pc, #240]	; (8004b08 <uip_process+0xa98>)
 8004a18:	801a      	strh	r2, [r3, #0]
    }
    uip_connr->mss = tmp16;
 8004a1a:	4b3b      	ldr	r3, [pc, #236]	; (8004b08 <uip_process+0xa98>)
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	8263      	strh	r3, [r4, #18]

       If the application wishes to send any data, this data should be
       put into the uip_appdata and the length of the data should be
       put into uip_len. If the application don't have any data to
       send, uip_len must be set to 0. */
    if(uip_flags & (UIP_NEWDATA | UIP_ACKDATA)) {
 8004a20:	4b36      	ldr	r3, [pc, #216]	; (8004afc <uip_process+0xa8c>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	f013 0f03 	tst.w	r3, #3
 8004a28:	f000 8142 	beq.w	8004cb0 <uip_process+0xc40>
      uip_slen = 0;
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	4b38      	ldr	r3, [pc, #224]	; (8004b10 <uip_process+0xaa0>)
 8004a30:	801a      	strh	r2, [r3, #0]
      UIP_APPCALL();
 8004a32:	f7fd f99f 	bl	8001d74 <uipclient_appcall>

    appsend:
      
      if(uip_flags & UIP_ABORT) {
 8004a36:	4b31      	ldr	r3, [pc, #196]	; (8004afc <uip_process+0xa8c>)
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	f013 0f20 	tst.w	r3, #32
 8004a3e:	d008      	beq.n	8004a52 <uip_process+0x9e2>
	uip_slen = 0;
 8004a40:	2300      	movs	r3, #0
 8004a42:	4a33      	ldr	r2, [pc, #204]	; (8004b10 <uip_process+0xaa0>)
 8004a44:	8013      	strh	r3, [r2, #0]
	uip_connr->tcpstateflags = UIP_CLOSED;
 8004a46:	7663      	strb	r3, [r4, #25]
	BUF->flags = TCP_RST | TCP_ACK;
 8004a48:	2214      	movs	r2, #20
 8004a4a:	4b2d      	ldr	r3, [pc, #180]	; (8004b00 <uip_process+0xa90>)
 8004a4c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	goto tcp_send_nodata;
 8004a50:	e0bf      	b.n	8004bd2 <uip_process+0xb62>
      }

      if(uip_flags & UIP_CLOSE) {
 8004a52:	f013 0f10 	tst.w	r3, #16
 8004a56:	d00c      	beq.n	8004a72 <uip_process+0xa02>
	uip_slen = 0;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	4a2d      	ldr	r2, [pc, #180]	; (8004b10 <uip_process+0xaa0>)
 8004a5c:	8013      	strh	r3, [r2, #0]
	uip_connr->len = 1;
 8004a5e:	2201      	movs	r2, #1
 8004a60:	8222      	strh	r2, [r4, #16]
	uip_connr->tcpstateflags = UIP_FIN_WAIT_1;
 8004a62:	2204      	movs	r2, #4
 8004a64:	7662      	strb	r2, [r4, #25]
	uip_connr->nrtx = 0;
 8004a66:	76e3      	strb	r3, [r4, #27]
	BUF->flags = TCP_FIN | TCP_ACK;
 8004a68:	2211      	movs	r2, #17
 8004a6a:	4b25      	ldr	r3, [pc, #148]	; (8004b00 <uip_process+0xa90>)
 8004a6c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	goto tcp_send_nodata;
 8004a70:	e0af      	b.n	8004bd2 <uip_process+0xb62>
      }

      /* If uip_slen > 0, the application has data to be sent. */
      if(uip_slen > 0) {
 8004a72:	4a27      	ldr	r2, [pc, #156]	; (8004b10 <uip_process+0xaa0>)
 8004a74:	8812      	ldrh	r2, [r2, #0]
 8004a76:	b18a      	cbz	r2, 8004a9c <uip_process+0xa2c>

	/* If the connection has acknowledged data, the contents of
	   the ->len variable should be discarded. */
	if((uip_flags & UIP_ACKDATA) != 0) {
 8004a78:	f013 0f01 	tst.w	r3, #1
 8004a7c:	d001      	beq.n	8004a82 <uip_process+0xa12>
	  uip_connr->len = 0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	8223      	strh	r3, [r4, #16]
	}

	/* If the ->len variable is non-zero the connection has
	   already data in transit and cannot send anymore right
	   now. */
	if(uip_connr->len == 0) {
 8004a82:	8a23      	ldrh	r3, [r4, #16]
 8004a84:	b943      	cbnz	r3, 8004a98 <uip_process+0xa28>

	  /* The application cannot send more than what is allowed by
	     the mss (the minumum of the MSS and the available
	     window). */
	  if(uip_slen > uip_connr->mss) {
 8004a86:	8a63      	ldrh	r3, [r4, #18]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d901      	bls.n	8004a90 <uip_process+0xa20>
	    uip_slen = uip_connr->mss;
 8004a8c:	4a20      	ldr	r2, [pc, #128]	; (8004b10 <uip_process+0xaa0>)
 8004a8e:	8013      	strh	r3, [r2, #0]
	  }

	  /* Remember how much data we send out now so that we know
	     when everything has been acknowledged. */
	  uip_connr->len = uip_slen;
 8004a90:	4b1f      	ldr	r3, [pc, #124]	; (8004b10 <uip_process+0xaa0>)
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	8223      	strh	r3, [r4, #16]
 8004a96:	e001      	b.n	8004a9c <uip_process+0xa2c>
	} else {

	  /* If the application already had unacknowledged data, we
	     make sure that the application does not send (i.e.,
	     retransmit) out more than it previously sent out. */
	  uip_slen = uip_connr->len;
 8004a98:	4a1d      	ldr	r2, [pc, #116]	; (8004b10 <uip_process+0xaa0>)
 8004a9a:	8013      	strh	r3, [r2, #0]
	}
      }
      uip_connr->nrtx = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	76e3      	strb	r3, [r4, #27]
    apprexmit:
      uip_appdata = uip_sappdata;
 8004aa0:	4b1e      	ldr	r3, [pc, #120]	; (8004b1c <uip_process+0xaac>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	4b1c      	ldr	r3, [pc, #112]	; (8004b18 <uip_process+0xaa8>)
 8004aa6:	601a      	str	r2, [r3, #0]
      
      /* If the application has data to be sent, or if the incoming
         packet had new data in it, we must send out a packet. */
      if(uip_slen > 0 && uip_connr->len > 0) {
 8004aa8:	4b19      	ldr	r3, [pc, #100]	; (8004b10 <uip_process+0xaa0>)
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	b14b      	cbz	r3, 8004ac2 <uip_process+0xa52>
 8004aae:	8a23      	ldrh	r3, [r4, #16]
 8004ab0:	b13b      	cbz	r3, 8004ac2 <uip_process+0xa52>
	/* Add the length of the IP and TCP headers. */
	uip_len = uip_connr->len + UIP_TCPIP_HLEN;
 8004ab2:	3328      	adds	r3, #40	; 0x28
 8004ab4:	4a15      	ldr	r2, [pc, #84]	; (8004b0c <uip_process+0xa9c>)
 8004ab6:	8013      	strh	r3, [r2, #0]
	/* We always set the ACK flag in response packets. */
	BUF->flags = TCP_ACK | TCP_PSH;
 8004ab8:	2218      	movs	r2, #24
 8004aba:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <uip_process+0xa90>)
 8004abc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	/* Send the packet. */
	goto tcp_send_noopts;
 8004ac0:	e08a      	b.n	8004bd8 <uip_process+0xb68>
      }
      /* If there is no data to send, just send out a pure ACK if
	 there is newdata. */
      if(uip_flags & UIP_NEWDATA) {
 8004ac2:	4b0e      	ldr	r3, [pc, #56]	; (8004afc <uip_process+0xa8c>)
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	f013 0f02 	tst.w	r3, #2
 8004aca:	f000 80f1 	beq.w	8004cb0 <uip_process+0xc40>
	uip_len = UIP_TCPIP_HLEN;
 8004ace:	2228      	movs	r2, #40	; 0x28
 8004ad0:	4b0e      	ldr	r3, [pc, #56]	; (8004b0c <uip_process+0xa9c>)
 8004ad2:	801a      	strh	r2, [r3, #0]
	BUF->flags = TCP_ACK;
 8004ad4:	2210      	movs	r2, #16
 8004ad6:	4b0a      	ldr	r3, [pc, #40]	; (8004b00 <uip_process+0xa90>)
 8004ad8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	goto tcp_send_noopts;
 8004adc:	e07c      	b.n	8004bd8 <uip_process+0xb68>
    }
    goto drop;
  case UIP_LAST_ACK:
    /* We can close this connection if the peer has acknowledged our
       FIN. This is indicated by the UIP_ACKDATA flag. */
    if(uip_flags & UIP_ACKDATA) {
 8004ade:	4b07      	ldr	r3, [pc, #28]	; (8004afc <uip_process+0xa8c>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	f013 0f01 	tst.w	r3, #1
 8004ae6:	f000 80e3 	beq.w	8004cb0 <uip_process+0xc40>
      uip_connr->tcpstateflags = UIP_CLOSED;
 8004aea:	2300      	movs	r3, #0
 8004aec:	7663      	strb	r3, [r4, #25]
      uip_flags = UIP_CLOSE;
 8004aee:	2210      	movs	r2, #16
 8004af0:	4b02      	ldr	r3, [pc, #8]	; (8004afc <uip_process+0xa8c>)
 8004af2:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
 8004af4:	f7fd f93e 	bl	8001d74 <uipclient_appcall>
 8004af8:	e0da      	b.n	8004cb0 <uip_process+0xc40>
 8004afa:	bf00      	nop
 8004afc:	20000f0c 	.word	0x20000f0c
 8004b00:	20000fb0 	.word	0x20000fb0
 8004b04:	20000ae2 	.word	0x20000ae2
 8004b08:	20000ad8 	.word	0x20000ad8
 8004b0c:	20000f00 	.word	0x20000f00
 8004b10:	2000139a 	.word	0x2000139a
 8004b14:	20000f18 	.word	0x20000f18
 8004b18:	20000f14 	.word	0x20000f14
 8004b1c:	20000f04 	.word	0x20000f04
    
  case UIP_FIN_WAIT_1:
    /* The application has closed the connection, but the remote host
       hasn't closed its end yet. Thus we do nothing but wait for a
       FIN from the other side. */
    if(uip_len > 0) {
 8004b20:	4b66      	ldr	r3, [pc, #408]	; (8004cbc <uip_process+0xc4c>)
 8004b22:	8818      	ldrh	r0, [r3, #0]
 8004b24:	b108      	cbz	r0, 8004b2a <uip_process+0xaba>
      uip_add_rcv_nxt(uip_len);
 8004b26:	f7ff fa0d 	bl	8003f44 <uip_add_rcv_nxt>
    }
    if(BUF->flags & TCP_FIN) {
 8004b2a:	4b65      	ldr	r3, [pc, #404]	; (8004cc0 <uip_process+0xc50>)
 8004b2c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004b30:	f013 0f01 	tst.w	r3, #1
 8004b34:	d015      	beq.n	8004b62 <uip_process+0xaf2>
      if(uip_flags & UIP_ACKDATA) {
 8004b36:	4b63      	ldr	r3, [pc, #396]	; (8004cc4 <uip_process+0xc54>)
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	f013 0f01 	tst.w	r3, #1
 8004b3e:	d005      	beq.n	8004b4c <uip_process+0xadc>
	uip_connr->tcpstateflags = UIP_TIME_WAIT;
 8004b40:	2307      	movs	r3, #7
 8004b42:	7663      	strb	r3, [r4, #25]
	uip_connr->timer = 0;
 8004b44:	2300      	movs	r3, #0
 8004b46:	76a3      	strb	r3, [r4, #26]
	uip_connr->len = 0;
 8004b48:	8223      	strh	r3, [r4, #16]
 8004b4a:	e001      	b.n	8004b50 <uip_process+0xae0>
      } else {
	uip_connr->tcpstateflags = UIP_CLOSING;
 8004b4c:	2306      	movs	r3, #6
 8004b4e:	7663      	strb	r3, [r4, #25]
      }
      uip_add_rcv_nxt(1);
 8004b50:	2001      	movs	r0, #1
 8004b52:	f7ff f9f7 	bl	8003f44 <uip_add_rcv_nxt>
      uip_flags = UIP_CLOSE;
 8004b56:	2210      	movs	r2, #16
 8004b58:	4b5a      	ldr	r3, [pc, #360]	; (8004cc4 <uip_process+0xc54>)
 8004b5a:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
 8004b5c:	f7fd f90a 	bl	8001d74 <uipclient_appcall>
      goto tcp_send_ack;
 8004b60:	e033      	b.n	8004bca <uip_process+0xb5a>
    } else if(uip_flags & UIP_ACKDATA) {
 8004b62:	4b58      	ldr	r3, [pc, #352]	; (8004cc4 <uip_process+0xc54>)
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	f013 0f01 	tst.w	r3, #1
 8004b6a:	d004      	beq.n	8004b76 <uip_process+0xb06>
      uip_connr->tcpstateflags = UIP_FIN_WAIT_2;
 8004b6c:	2305      	movs	r3, #5
 8004b6e:	7663      	strb	r3, [r4, #25]
      uip_connr->len = 0;
 8004b70:	2300      	movs	r3, #0
 8004b72:	8223      	strh	r3, [r4, #16]
      goto drop;
 8004b74:	e09c      	b.n	8004cb0 <uip_process+0xc40>
    }
    if(uip_len > 0) {
 8004b76:	4b51      	ldr	r3, [pc, #324]	; (8004cbc <uip_process+0xc4c>)
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	bb33      	cbnz	r3, 8004bca <uip_process+0xb5a>
 8004b7c:	e098      	b.n	8004cb0 <uip_process+0xc40>
      goto tcp_send_ack;
    }
    goto drop;
      
  case UIP_FIN_WAIT_2:
    if(uip_len > 0) {
 8004b7e:	4b4f      	ldr	r3, [pc, #316]	; (8004cbc <uip_process+0xc4c>)
 8004b80:	8818      	ldrh	r0, [r3, #0]
 8004b82:	b108      	cbz	r0, 8004b88 <uip_process+0xb18>
      uip_add_rcv_nxt(uip_len);
 8004b84:	f7ff f9de 	bl	8003f44 <uip_add_rcv_nxt>
    }
    if(BUF->flags & TCP_FIN) {
 8004b88:	4b4d      	ldr	r3, [pc, #308]	; (8004cc0 <uip_process+0xc50>)
 8004b8a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004b8e:	f013 0f01 	tst.w	r3, #1
 8004b92:	d00c      	beq.n	8004bae <uip_process+0xb3e>
      uip_connr->tcpstateflags = UIP_TIME_WAIT;
 8004b94:	2307      	movs	r3, #7
 8004b96:	7663      	strb	r3, [r4, #25]
      uip_connr->timer = 0;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	76a3      	strb	r3, [r4, #26]
      uip_add_rcv_nxt(1);
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	f7ff f9d1 	bl	8003f44 <uip_add_rcv_nxt>
      uip_flags = UIP_CLOSE;
 8004ba2:	2210      	movs	r2, #16
 8004ba4:	4b47      	ldr	r3, [pc, #284]	; (8004cc4 <uip_process+0xc54>)
 8004ba6:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
 8004ba8:	f7fd f8e4 	bl	8001d74 <uipclient_appcall>
      goto tcp_send_ack;
 8004bac:	e00d      	b.n	8004bca <uip_process+0xb5a>
    }
    if(uip_len > 0) {
 8004bae:	4b43      	ldr	r3, [pc, #268]	; (8004cbc <uip_process+0xc4c>)
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	b953      	cbnz	r3, 8004bca <uip_process+0xb5a>
 8004bb4:	e07c      	b.n	8004cb0 <uip_process+0xc40>

  case UIP_TIME_WAIT:
    goto tcp_send_ack;
    
  case UIP_CLOSING:
    if(uip_flags & UIP_ACKDATA) {
 8004bb6:	4b43      	ldr	r3, [pc, #268]	; (8004cc4 <uip_process+0xc54>)
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	f013 0f01 	tst.w	r3, #1
 8004bbe:	d077      	beq.n	8004cb0 <uip_process+0xc40>
      uip_connr->tcpstateflags = UIP_TIME_WAIT;
 8004bc0:	2307      	movs	r3, #7
 8004bc2:	7663      	strb	r3, [r4, #25]
      uip_connr->timer = 0;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	76a3      	strb	r3, [r4, #26]
 8004bc8:	e072      	b.n	8004cb0 <uip_process+0xc40>
  

  /* We jump here when we are ready to send the packet, and just want
     to set the appropriate TCP sequence numbers in the TCP header. */
 tcp_send_ack:
  BUF->flags = TCP_ACK;
 8004bca:	2210      	movs	r2, #16
 8004bcc:	4b3c      	ldr	r3, [pc, #240]	; (8004cc0 <uip_process+0xc50>)
 8004bce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 tcp_send_nodata:
  uip_len = UIP_IPTCPH_LEN;
 8004bd2:	2228      	movs	r2, #40	; 0x28
 8004bd4:	4b39      	ldr	r3, [pc, #228]	; (8004cbc <uip_process+0xc4c>)
 8004bd6:	801a      	strh	r2, [r3, #0]
 tcp_send_noopts:
  BUF->tcpoffset = (UIP_TCPH_LEN / 4) << 4;
 8004bd8:	2250      	movs	r2, #80	; 0x50
 8004bda:	4b39      	ldr	r3, [pc, #228]	; (8004cc0 <uip_process+0xc50>)
 8004bdc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 tcp_send:
  /* We're done with the input processing. We are now ready to send a
     reply. Our job is to fill in all the fields of the TCP and IP
     headers before calculating the checksum and finally send the
     packet. */
  BUF->ackno[0] = uip_connr->rcv_nxt[0];
 8004be0:	7a22      	ldrb	r2, [r4, #8]
 8004be2:	4b37      	ldr	r3, [pc, #220]	; (8004cc0 <uip_process+0xc50>)
 8004be4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  BUF->ackno[1] = uip_connr->rcv_nxt[1];
 8004be8:	7a62      	ldrb	r2, [r4, #9]
 8004bea:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  BUF->ackno[2] = uip_connr->rcv_nxt[2];
 8004bee:	7aa2      	ldrb	r2, [r4, #10]
 8004bf0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  BUF->ackno[3] = uip_connr->rcv_nxt[3];
 8004bf4:	7ae2      	ldrb	r2, [r4, #11]
 8004bf6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  BUF->seqno[0] = uip_connr->snd_nxt[0];
 8004bfa:	7b22      	ldrb	r2, [r4, #12]
 8004bfc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  BUF->seqno[1] = uip_connr->snd_nxt[1];
 8004c00:	7b62      	ldrb	r2, [r4, #13]
 8004c02:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  BUF->seqno[2] = uip_connr->snd_nxt[2];
 8004c06:	7ba2      	ldrb	r2, [r4, #14]
 8004c08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  BUF->seqno[3] = uip_connr->snd_nxt[3];
 8004c0c:	7be2      	ldrb	r2, [r4, #15]
 8004c0e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  BUF->proto = UIP_PROTO_TCP;
 8004c12:	2206      	movs	r2, #6
 8004c14:	75da      	strb	r2, [r3, #23]
  
  BUF->srcport  = uip_connr->lport;
 8004c16:	88a2      	ldrh	r2, [r4, #4]
 8004c18:	845a      	strh	r2, [r3, #34]	; 0x22
  BUF->destport = uip_connr->rport;
 8004c1a:	88e2      	ldrh	r2, [r4, #6]
 8004c1c:	849a      	strh	r2, [r3, #36]	; 0x24

  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
 8004c1e:	4a2a      	ldr	r2, [pc, #168]	; (8004cc8 <uip_process+0xc58>)
 8004c20:	8811      	ldrh	r1, [r2, #0]
 8004c22:	8359      	strh	r1, [r3, #26]
 8004c24:	8852      	ldrh	r2, [r2, #2]
 8004c26:	839a      	strh	r2, [r3, #28]
  uip_ipaddr_copy(BUF->destipaddr, uip_connr->ripaddr);
 8004c28:	8822      	ldrh	r2, [r4, #0]
 8004c2a:	83da      	strh	r2, [r3, #30]
 8004c2c:	8862      	ldrh	r2, [r4, #2]
 8004c2e:	841a      	strh	r2, [r3, #32]

  if(uip_connr->tcpstateflags & UIP_STOPPED) {
 8004c30:	7e63      	ldrb	r3, [r4, #25]
 8004c32:	f013 0f10 	tst.w	r3, #16
 8004c36:	d006      	beq.n	8004c46 <uip_process+0xbd6>
    /* If the connection has issued uip_stop(), we advertise a zero
       window so that the remote host will stop sending data. */
    BUF->wnd[0] = BUF->wnd[1] = 0;
 8004c38:	4b21      	ldr	r3, [pc, #132]	; (8004cc0 <uip_process+0xc50>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8004c40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8004c44:	e006      	b.n	8004c54 <uip_process+0xbe4>
  } else {
    BUF->wnd[0] = ((UIP_RECEIVE_WINDOW) >> 8);
 8004c46:	4b1e      	ldr	r3, [pc, #120]	; (8004cc0 <uip_process+0xc50>)
 8004c48:	2202      	movs	r2, #2
 8004c4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    BUF->wnd[1] = ((UIP_RECEIVE_WINDOW) & 0xff);
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

 tcp_send_noconn:
  BUF->ttl = UIP_TTL;
 8004c54:	4c1a      	ldr	r4, [pc, #104]	; (8004cc0 <uip_process+0xc50>)
 8004c56:	2340      	movs	r3, #64	; 0x40
 8004c58:	75a3      	strb	r3, [r4, #22]
  /* For IPv6, the IP length field does not include the IPv6 IP header
     length. */
  BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
  BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
#else /* UIP_CONF_IPV6 */
  BUF->len[0] = (uip_len >> 8);
 8004c5a:	4b18      	ldr	r3, [pc, #96]	; (8004cbc <uip_process+0xc4c>)
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	0a1a      	lsrs	r2, r3, #8
 8004c60:	7422      	strb	r2, [r4, #16]
  BUF->len[1] = (uip_len & 0xff);
 8004c62:	7463      	strb	r3, [r4, #17]
#endif /* UIP_CONF_IPV6 */

  BUF->urgp[0] = BUF->urgp[1] = 0;
 8004c64:	2300      	movs	r3, #0
 8004c66:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8004c6a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  
  /* Calculate TCP checksum. */
  BUF->tcpchksum = 0;
 8004c6e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
 8004c72:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  BUF->tcpchksum = ~(uip_tcpchksum());
 8004c76:	f7ff f9ef 	bl	8004058 <uip_tcpchksum>
 8004c7a:	43c0      	mvns	r0, r0
 8004c7c:	8660      	strh	r0, [r4, #50]	; 0x32
#if UIP_CONF_IPV6
  BUF->vtc = 0x60;
  BUF->tcflow = 0x00;
  BUF->flow = 0x00;
#else /* UIP_CONF_IPV6 */
  BUF->vhl = 0x45;
 8004c7e:	4c10      	ldr	r4, [pc, #64]	; (8004cc0 <uip_process+0xc50>)
 8004c80:	2345      	movs	r3, #69	; 0x45
 8004c82:	73a3      	strb	r3, [r4, #14]
  BUF->tos = 0;
 8004c84:	2200      	movs	r2, #0
 8004c86:	73e2      	strb	r2, [r4, #15]
  BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
 8004c88:	7562      	strb	r2, [r4, #21]
 8004c8a:	7522      	strb	r2, [r4, #20]
  ++ipid;
 8004c8c:	490f      	ldr	r1, [pc, #60]	; (8004ccc <uip_process+0xc5c>)
 8004c8e:	880b      	ldrh	r3, [r1, #0]
 8004c90:	3301      	adds	r3, #1
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	800b      	strh	r3, [r1, #0]
  BUF->ipid[0] = ipid >> 8;
 8004c96:	0a19      	lsrs	r1, r3, #8
 8004c98:	74a1      	strb	r1, [r4, #18]
  BUF->ipid[1] = ipid & 0xff;
 8004c9a:	74e3      	strb	r3, [r4, #19]
  /* Calculate IP checksum. */
  BUF->ipchksum = 0;
 8004c9c:	7622      	strb	r2, [r4, #24]
 8004c9e:	7662      	strb	r2, [r4, #25]
  BUF->ipchksum = ~(uip_ipchksum());
 8004ca0:	f7ff f9ac 	bl	8003ffc <uip_ipchksum>
 8004ca4:	43c0      	mvns	r0, r0
 8004ca6:	8320      	strh	r0, [r4, #24]
  DEBUG_PRINTF("Sending packet with length %d (%d)\n", uip_len,
	       (BUF->len[0] << 8) | BUF->len[1]);
  
  UIP_STAT(++uip_stat.ip.sent);
  /* Return and let the caller do the actual transmission. */
  uip_flags = 0;
 8004ca8:	2200      	movs	r2, #0
 8004caa:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <uip_process+0xc54>)
 8004cac:	701a      	strb	r2, [r3, #0]
  return;
 8004cae:	bd70      	pop	{r4, r5, r6, pc}
 drop:
  uip_len = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	4a02      	ldr	r2, [pc, #8]	; (8004cbc <uip_process+0xc4c>)
 8004cb4:	8013      	strh	r3, [r2, #0]
  uip_flags = 0;
 8004cb6:	4a03      	ldr	r2, [pc, #12]	; (8004cc4 <uip_process+0xc54>)
 8004cb8:	7013      	strb	r3, [r2, #0]
 8004cba:	bd70      	pop	{r4, r5, r6, pc}
 8004cbc:	20000f00 	.word	0x20000f00
 8004cc0:	20000fb0 	.word	0x20000fb0
 8004cc4:	20000f0c 	.word	0x20000f0c
 8004cc8:	20000fac 	.word	0x20000fac
 8004ccc:	20000ada 	.word	0x20000ada

08004cd0 <uip_connect>:
}
/*---------------------------------------------------------------------------*/
#if UIP_ACTIVE_OPEN
struct uip_conn *
uip_connect(uip_ipaddr_t *ripaddr, u16_t rport)
{
 8004cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd2:	4605      	mov	r5, r0
 8004cd4:	460e      	mov	r6, r1
  register struct uip_conn *conn, *cconn;
  
  /* Find an unused local port. */
 again:
  ++lastport;
 8004cd6:	4a35      	ldr	r2, [pc, #212]	; (8004dac <uip_connect+0xdc>)
 8004cd8:	8813      	ldrh	r3, [r2, #0]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	8013      	strh	r3, [r2, #0]

  if(lastport >= 32000) {
 8004ce0:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8004ce4:	d303      	bcc.n	8004cee <uip_connect+0x1e>
    lastport = 4096;
 8004ce6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004cea:	4b30      	ldr	r3, [pc, #192]	; (8004dac <uip_connect+0xdc>)
 8004cec:	801a      	strh	r2, [r3, #0]
  }

  /* Check if this port is already in use, and if so try to find
     another one. */
  for(c = 0; c < UIP_CONNS; ++c) {
 8004cee:	2200      	movs	r2, #0
 8004cf0:	4b2f      	ldr	r3, [pc, #188]	; (8004db0 <uip_connect+0xe0>)
 8004cf2:	701a      	strb	r2, [r3, #0]
 8004cf4:	e011      	b.n	8004d1a <uip_connect+0x4a>
    conn = &uip_conns[c];
    if(conn->tcpstateflags != UIP_CLOSED &&
 8004cf6:	4b2f      	ldr	r3, [pc, #188]	; (8004db4 <uip_connect+0xe4>)
 8004cf8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8004cfc:	7e5b      	ldrb	r3, [r3, #25]
 8004cfe:	b14b      	cbz	r3, 8004d14 <uip_connect+0x44>
       conn->lport == htons(lastport)) {
 8004d00:	4b2c      	ldr	r3, [pc, #176]	; (8004db4 <uip_connect+0xe4>)
 8004d02:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8004d06:	889f      	ldrh	r7, [r3, #4]
 8004d08:	4b28      	ldr	r3, [pc, #160]	; (8004dac <uip_connect+0xdc>)
 8004d0a:	8818      	ldrh	r0, [r3, #0]
 8004d0c:	f7ff f970 	bl	8003ff0 <htons>

  /* Check if this port is already in use, and if so try to find
     another one. */
  for(c = 0; c < UIP_CONNS; ++c) {
    conn = &uip_conns[c];
    if(conn->tcpstateflags != UIP_CLOSED &&
 8004d10:	4287      	cmp	r7, r0
 8004d12:	d0e0      	beq.n	8004cd6 <uip_connect+0x6>
    lastport = 4096;
  }

  /* Check if this port is already in use, and if so try to find
     another one. */
  for(c = 0; c < UIP_CONNS; ++c) {
 8004d14:	3401      	adds	r4, #1
 8004d16:	4b26      	ldr	r3, [pc, #152]	; (8004db0 <uip_connect+0xe0>)
 8004d18:	701c      	strb	r4, [r3, #0]
 8004d1a:	4b25      	ldr	r3, [pc, #148]	; (8004db0 <uip_connect+0xe0>)
 8004d1c:	781c      	ldrb	r4, [r3, #0]
 8004d1e:	2c03      	cmp	r4, #3
 8004d20:	d9e9      	bls.n	8004cf6 <uip_connect+0x26>
      goto again;
    }
  }

  conn = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
 8004d22:	2400      	movs	r4, #0
 8004d24:	701c      	strb	r4, [r3, #0]
 8004d26:	e012      	b.n	8004d4e <uip_connect+0x7e>
    cconn = &uip_conns[c];
 8004d28:	4a22      	ldr	r2, [pc, #136]	; (8004db4 <uip_connect+0xe4>)
 8004d2a:	eb02 1243 	add.w	r2, r2, r3, lsl #5
    if(cconn->tcpstateflags == UIP_CLOSED) {
 8004d2e:	7e51      	ldrb	r1, [r2, #25]
 8004d30:	b191      	cbz	r1, 8004d58 <uip_connect+0x88>
      conn = cconn;
      break;
    }
    if(cconn->tcpstateflags == UIP_TIME_WAIT) {
 8004d32:	2907      	cmp	r1, #7
 8004d34:	d108      	bne.n	8004d48 <uip_connect+0x78>
      if(conn == 0 ||
 8004d36:	b124      	cbz	r4, 8004d42 <uip_connect+0x72>
	 cconn->timer > conn->timer) {
 8004d38:	7e90      	ldrb	r0, [r2, #26]
 8004d3a:	7ea1      	ldrb	r1, [r4, #26]
    if(cconn->tcpstateflags == UIP_CLOSED) {
      conn = cconn;
      break;
    }
    if(cconn->tcpstateflags == UIP_TIME_WAIT) {
      if(conn == 0 ||
 8004d3c:	4288      	cmp	r0, r1
 8004d3e:	d802      	bhi.n	8004d46 <uip_connect+0x76>
 8004d40:	e002      	b.n	8004d48 <uip_connect+0x78>
	 cconn->timer > conn->timer) {
	conn = cconn;
 8004d42:	4614      	mov	r4, r2
 8004d44:	e000      	b.n	8004d48 <uip_connect+0x78>
 8004d46:	4614      	mov	r4, r2
      goto again;
    }
  }

  conn = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
 8004d48:	3301      	adds	r3, #1
 8004d4a:	4a19      	ldr	r2, [pc, #100]	; (8004db0 <uip_connect+0xe0>)
 8004d4c:	7013      	strb	r3, [r2, #0]
 8004d4e:	4b18      	ldr	r3, [pc, #96]	; (8004db0 <uip_connect+0xe0>)
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	2b03      	cmp	r3, #3
 8004d54:	d9e8      	bls.n	8004d28 <uip_connect+0x58>
 8004d56:	e000      	b.n	8004d5a <uip_connect+0x8a>
    cconn = &uip_conns[c];
    if(cconn->tcpstateflags == UIP_CLOSED) {
      conn = cconn;
 8004d58:	4614      	mov	r4, r2
	conn = cconn;
      }
    }
  }

  if(conn == 0) {
 8004d5a:	b324      	cbz	r4, 8004da6 <uip_connect+0xd6>
    return 0;
  }
  
  conn->tcpstateflags = UIP_SYN_SENT;
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	7663      	strb	r3, [r4, #25]

  conn->snd_nxt[0] = iss[0];
 8004d60:	4b15      	ldr	r3, [pc, #84]	; (8004db8 <uip_connect+0xe8>)
 8004d62:	781a      	ldrb	r2, [r3, #0]
 8004d64:	7322      	strb	r2, [r4, #12]
  conn->snd_nxt[1] = iss[1];
 8004d66:	785a      	ldrb	r2, [r3, #1]
 8004d68:	7362      	strb	r2, [r4, #13]
  conn->snd_nxt[2] = iss[2];
 8004d6a:	789a      	ldrb	r2, [r3, #2]
 8004d6c:	73a2      	strb	r2, [r4, #14]
  conn->snd_nxt[3] = iss[3];
 8004d6e:	78db      	ldrb	r3, [r3, #3]
 8004d70:	73e3      	strb	r3, [r4, #15]

  conn->initialmss = conn->mss = UIP_TCP_MSS;
 8004d72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d76:	8263      	strh	r3, [r4, #18]
 8004d78:	82a3      	strh	r3, [r4, #20]
  
  conn->len = 1;   /* TCP length of the SYN is one. */
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	8222      	strh	r2, [r4, #16]
  conn->nrtx = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	76e3      	strb	r3, [r4, #27]
  conn->timer = 1; /* Send the SYN next time around. */
 8004d82:	76a2      	strb	r2, [r4, #26]
  conn->rto = UIP_RTO;
 8004d84:	2203      	movs	r2, #3
 8004d86:	7622      	strb	r2, [r4, #24]
  conn->sa = 0;
 8004d88:	75a3      	strb	r3, [r4, #22]
  conn->sv = 16;   /* Initial value of the RTT variance. */
 8004d8a:	2310      	movs	r3, #16
 8004d8c:	75e3      	strb	r3, [r4, #23]
  conn->lport = htons(lastport);
 8004d8e:	4b07      	ldr	r3, [pc, #28]	; (8004dac <uip_connect+0xdc>)
 8004d90:	8818      	ldrh	r0, [r3, #0]
 8004d92:	f7ff f92d 	bl	8003ff0 <htons>
 8004d96:	80a0      	strh	r0, [r4, #4]
  conn->rport = rport;
 8004d98:	80e6      	strh	r6, [r4, #6]
  uip_ipaddr_copy(&conn->ripaddr, ripaddr);
 8004d9a:	882b      	ldrh	r3, [r5, #0]
 8004d9c:	8023      	strh	r3, [r4, #0]
 8004d9e:	886b      	ldrh	r3, [r5, #2]
 8004da0:	8063      	strh	r3, [r4, #2]
  
  return conn;
 8004da2:	4620      	mov	r0, r4
 8004da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
  }

  if(conn == 0) {
    return 0;
 8004da6:	2000      	movs	r0, #0
  conn->lport = htons(lastport);
  conn->rport = rport;
  uip_ipaddr_copy(&conn->ripaddr, ripaddr);
  
  return conn;
}
 8004da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20000ae0 	.word	0x20000ae0
 8004db0:	20000ae2 	.word	0x20000ae2
 8004db4:	20000f1c 	.word	0x20000f1c
 8004db8:	20000adc 	.word	0x20000adc

08004dbc <uip_udp_new>:
#endif /* UIP_ACTIVE_OPEN */
/*---------------------------------------------------------------------------*/
#if UIP_UDP
struct uip_udp_conn *
uip_udp_new(uip_ipaddr_t *ripaddr, u16_t rport)
{
 8004dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dbe:	4605      	mov	r5, r0
 8004dc0:	460e      	mov	r6, r1
  register struct uip_udp_conn *conn;
  
  /* Find an unused local port. */
 again:
  ++lastport;
 8004dc2:	4a25      	ldr	r2, [pc, #148]	; (8004e58 <uip_udp_new+0x9c>)
 8004dc4:	8813      	ldrh	r3, [r2, #0]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	8013      	strh	r3, [r2, #0]

  if(lastport >= 32000) {
 8004dcc:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8004dd0:	d303      	bcc.n	8004dda <uip_udp_new+0x1e>
    lastport = 4096;
 8004dd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004dd6:	4b20      	ldr	r3, [pc, #128]	; (8004e58 <uip_udp_new+0x9c>)
 8004dd8:	801a      	strh	r2, [r3, #0]
  }
  
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 8004dda:	2200      	movs	r2, #0
 8004ddc:	4b1f      	ldr	r3, [pc, #124]	; (8004e5c <uip_udp_new+0xa0>)
 8004dde:	701a      	strb	r2, [r3, #0]
 8004de0:	e00c      	b.n	8004dfc <uip_udp_new+0x40>
    if(uip_udp_conns[c].lport == htons(lastport)) {
 8004de2:	4b1f      	ldr	r3, [pc, #124]	; (8004e60 <uip_udp_new+0xa4>)
 8004de4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8004de8:	889f      	ldrh	r7, [r3, #4]
 8004dea:	4b1b      	ldr	r3, [pc, #108]	; (8004e58 <uip_udp_new+0x9c>)
 8004dec:	8818      	ldrh	r0, [r3, #0]
 8004dee:	f7ff f8ff 	bl	8003ff0 <htons>
 8004df2:	4287      	cmp	r7, r0
 8004df4:	d0e5      	beq.n	8004dc2 <uip_udp_new+0x6>

  if(lastport >= 32000) {
    lastport = 4096;
  }
  
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 8004df6:	3401      	adds	r4, #1
 8004df8:	4b18      	ldr	r3, [pc, #96]	; (8004e5c <uip_udp_new+0xa0>)
 8004dfa:	701c      	strb	r4, [r3, #0]
 8004dfc:	4b17      	ldr	r3, [pc, #92]	; (8004e5c <uip_udp_new+0xa0>)
 8004dfe:	781c      	ldrb	r4, [r3, #0]
 8004e00:	2c03      	cmp	r4, #3
 8004e02:	d9ee      	bls.n	8004de2 <uip_udp_new+0x26>
    }
  }


  conn = 0;
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 8004e04:	2200      	movs	r2, #0
 8004e06:	701a      	strb	r2, [r3, #0]
 8004e08:	e00b      	b.n	8004e22 <uip_udp_new+0x66>
    if(uip_udp_conns[c].lport == 0) {
 8004e0a:	4a15      	ldr	r2, [pc, #84]	; (8004e60 <uip_udp_new+0xa4>)
 8004e0c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8004e10:	8892      	ldrh	r2, [r2, #4]
 8004e12:	b91a      	cbnz	r2, 8004e1c <uip_udp_new+0x60>
      conn = &uip_udp_conns[c];
 8004e14:	4812      	ldr	r0, [pc, #72]	; (8004e60 <uip_udp_new+0xa4>)
 8004e16:	eb00 1003 	add.w	r0, r0, r3, lsl #4
      break;
 8004e1a:	e007      	b.n	8004e2c <uip_udp_new+0x70>
    }
  }


  conn = 0;
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	4a0f      	ldr	r2, [pc, #60]	; (8004e5c <uip_udp_new+0xa0>)
 8004e20:	7013      	strb	r3, [r2, #0]
 8004e22:	4b0e      	ldr	r3, [pc, #56]	; (8004e5c <uip_udp_new+0xa0>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d9ef      	bls.n	8004e0a <uip_udp_new+0x4e>
      goto again;
    }
  }


  conn = 0;
 8004e2a:	2000      	movs	r0, #0
      conn = &uip_udp_conns[c];
      break;
    }
  }

  if(conn == 0) {
 8004e2c:	b188      	cbz	r0, 8004e52 <uip_udp_new+0x96>
    return 0;
  }
  
  conn->lport = HTONS(lastport);
 8004e2e:	4b0a      	ldr	r3, [pc, #40]	; (8004e58 <uip_udp_new+0x9c>)
 8004e30:	881a      	ldrh	r2, [r3, #0]
 8004e32:	0a13      	lsrs	r3, r2, #8
 8004e34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004e38:	8083      	strh	r3, [r0, #4]
  conn->rport = rport;
 8004e3a:	80c6      	strh	r6, [r0, #6]
  if(ripaddr == NULL) {
 8004e3c:	b915      	cbnz	r5, 8004e44 <uip_udp_new+0x88>
    memset(conn->ripaddr, 0, sizeof(uip_ipaddr_t));
 8004e3e:	2300      	movs	r3, #0
 8004e40:	6003      	str	r3, [r0, #0]
 8004e42:	e003      	b.n	8004e4c <uip_udp_new+0x90>
  } else {
    uip_ipaddr_copy(&conn->ripaddr, ripaddr);
 8004e44:	882b      	ldrh	r3, [r5, #0]
 8004e46:	8003      	strh	r3, [r0, #0]
 8004e48:	886b      	ldrh	r3, [r5, #2]
 8004e4a:	8043      	strh	r3, [r0, #2]
  }
  conn->ttl = UIP_TTL;
 8004e4c:	2340      	movs	r3, #64	; 0x40
 8004e4e:	7203      	strb	r3, [r0, #8]
  
  return conn;
 8004e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      break;
    }
  }

  if(conn == 0) {
    return 0;
 8004e52:	2000      	movs	r0, #0
    uip_ipaddr_copy(&conn->ripaddr, ripaddr);
  }
  conn->ttl = UIP_TTL;
  
  return conn;
}
 8004e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20000ae0 	.word	0x20000ae0
 8004e5c:	20000ae2 	.word	0x20000ae2
 8004e60:	2000139c 	.word	0x2000139c

08004e64 <uip_send>:
  return HTONS(val);
}
/*---------------------------------------------------------------------------*/
void
uip_send(const void *data, int len)
{
 8004e64:	b508      	push	{r3, lr}
  uip_slen = len;
 8004e66:	b28a      	uxth	r2, r1
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <uip_send+0x20>)
 8004e6a:	801a      	strh	r2, [r3, #0]
  if(len > 0) {
 8004e6c:	2900      	cmp	r1, #0
 8004e6e:	dd07      	ble.n	8004e80 <uip_send+0x1c>
    if(data != uip_sappdata) {
 8004e70:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <uip_send+0x24>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4283      	cmp	r3, r0
 8004e76:	d003      	beq.n	8004e80 <uip_send+0x1c>
 8004e78:	4601      	mov	r1, r0
      memcpy(uip_sappdata, (data), uip_slen);
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fa53 	bl	8005326 <memcpy>
 8004e80:	bd08      	pop	{r3, pc}
 8004e82:	bf00      	nop
 8004e84:	2000139a 	.word	0x2000139a
 8004e88:	20000f04 	.word	0x20000f04

08004e8c <uip_arp_update>:

}
/*-----------------------------------------------------------------------------------*/
static void
uip_arp_update(u16_t *ipaddr, struct uip_eth_addr *ethaddr)
{
 8004e8c:	b4f0      	push	{r4, r5, r6, r7}
  register struct arp_entry *tabptr;
  /* Walk through the ARP mapping table and try to find an entry to
     update. If none is found, the IP -> MAC address mapping is
     inserted in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8004e8e:	2200      	movs	r2, #0
 8004e90:	4b3a      	ldr	r3, [pc, #232]	; (8004f7c <uip_arp_update+0xf0>)
 8004e92:	701a      	strb	r2, [r3, #0]
 8004e94:	e01e      	b.n	8004ed4 <uip_arp_update+0x48>

    tabptr = &arp_table[i];
 8004e96:	4d3a      	ldr	r5, [pc, #232]	; (8004f80 <uip_arp_update+0xf4>)
 8004e98:	005a      	lsls	r2, r3, #1
 8004e9a:	441a      	add	r2, r3
 8004e9c:	0094      	lsls	r4, r2, #2
 8004e9e:	192e      	adds	r6, r5, r4
    /* Only check those entries that are actually in use. */
    if(tabptr->ipaddr[0] != 0 &&
 8004ea0:	5b2c      	ldrh	r4, [r5, r4]
 8004ea2:	b1a4      	cbz	r4, 8004ece <uip_arp_update+0x42>
       tabptr->ipaddr[1] != 0) {
 8004ea4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8004ea8:	00aa      	lsls	r2, r5, #2
 8004eaa:	4d35      	ldr	r5, [pc, #212]	; (8004f80 <uip_arp_update+0xf4>)
 8004eac:	442a      	add	r2, r5
 8004eae:	8852      	ldrh	r2, [r2, #2]
     inserted in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {

    tabptr = &arp_table[i];
    /* Only check those entries that are actually in use. */
    if(tabptr->ipaddr[0] != 0 &&
 8004eb0:	b16a      	cbz	r2, 8004ece <uip_arp_update+0x42>
       tabptr->ipaddr[1] != 0) {

      /* Check if the source IP address of the incoming packet matches
         the IP address in this ARP table entry. */
      if(ipaddr[0] == tabptr->ipaddr[0] &&
 8004eb2:	8805      	ldrh	r5, [r0, #0]
 8004eb4:	42ac      	cmp	r4, r5
 8004eb6:	d10a      	bne.n	8004ece <uip_arp_update+0x42>
	 ipaddr[1] == tabptr->ipaddr[1]) {
 8004eb8:	8844      	ldrh	r4, [r0, #2]
    if(tabptr->ipaddr[0] != 0 &&
       tabptr->ipaddr[1] != 0) {

      /* Check if the source IP address of the incoming packet matches
         the IP address in this ARP table entry. */
      if(ipaddr[0] == tabptr->ipaddr[0] &&
 8004eba:	42a2      	cmp	r2, r4
 8004ebc:	d107      	bne.n	8004ece <uip_arp_update+0x42>
	 ipaddr[1] == tabptr->ipaddr[1]) {
	 
	/* An old entry found, update this and return. */
	memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 8004ebe:	680c      	ldr	r4, [r1, #0]
 8004ec0:	6074      	str	r4, [r6, #4]
 8004ec2:	8889      	ldrh	r1, [r1, #4]
 8004ec4:	8131      	strh	r1, [r6, #8]
	tabptr->time = arptime;
 8004ec6:	4a2f      	ldr	r2, [pc, #188]	; (8004f84 <uip_arp_update+0xf8>)
 8004ec8:	7812      	ldrb	r2, [r2, #0]
 8004eca:	72b2      	strb	r2, [r6, #10]

	return;
 8004ecc:	e054      	b.n	8004f78 <uip_arp_update+0xec>
{
  register struct arp_entry *tabptr;
  /* Walk through the ARP mapping table and try to find an entry to
     update. If none is found, the IP -> MAC address mapping is
     inserted in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8004ece:	3301      	adds	r3, #1
 8004ed0:	4a2a      	ldr	r2, [pc, #168]	; (8004f7c <uip_arp_update+0xf0>)
 8004ed2:	7013      	strb	r3, [r2, #0]
 8004ed4:	4b29      	ldr	r3, [pc, #164]	; (8004f7c <uip_arp_update+0xf0>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b07      	cmp	r3, #7
 8004eda:	d9dc      	bls.n	8004e96 <uip_arp_update+0xa>

  /* If we get here, no existing ARP table entry was found, so we
     create one. */

  /* First, we try to find an unused entry in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8004edc:	2200      	movs	r2, #0
 8004ede:	4b27      	ldr	r3, [pc, #156]	; (8004f7c <uip_arp_update+0xf0>)
 8004ee0:	701a      	strb	r2, [r3, #0]
 8004ee2:	e00f      	b.n	8004f04 <uip_arp_update+0x78>
    tabptr = &arp_table[i];
 8004ee4:	4d26      	ldr	r5, [pc, #152]	; (8004f80 <uip_arp_update+0xf4>)
 8004ee6:	005a      	lsls	r2, r3, #1
 8004ee8:	441a      	add	r2, r3
 8004eea:	0094      	lsls	r4, r2, #2
 8004eec:	192e      	adds	r6, r5, r4
    if(tabptr->ipaddr[0] == 0 &&
 8004eee:	5b2a      	ldrh	r2, [r5, r4]
 8004ef0:	b92a      	cbnz	r2, 8004efe <uip_arp_update+0x72>
       tabptr->ipaddr[1] == 0) {
 8004ef2:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8004ef6:	00a2      	lsls	r2, r4, #2
 8004ef8:	442a      	add	r2, r5
 8004efa:	8852      	ldrh	r2, [r2, #2]
     create one. */

  /* First, we try to find an unused entry in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    tabptr = &arp_table[i];
    if(tabptr->ipaddr[0] == 0 &&
 8004efc:	b132      	cbz	r2, 8004f0c <uip_arp_update+0x80>

  /* If we get here, no existing ARP table entry was found, so we
     create one. */

  /* First, we try to find an unused entry in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8004efe:	3301      	adds	r3, #1
 8004f00:	4a1e      	ldr	r2, [pc, #120]	; (8004f7c <uip_arp_update+0xf0>)
 8004f02:	7013      	strb	r3, [r2, #0]
 8004f04:	4b1d      	ldr	r3, [pc, #116]	; (8004f7c <uip_arp_update+0xf0>)
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b07      	cmp	r3, #7
 8004f0a:	d9eb      	bls.n	8004ee4 <uip_arp_update+0x58>
    }
  }

  /* If no unused entry is found, we try to find the oldest entry and
     throw it away. */
  if(i == UIP_ARPTAB_SIZE) {
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d128      	bne.n	8004f62 <uip_arp_update+0xd6>
    tmpage = 0;
 8004f10:	2300      	movs	r3, #0
 8004f12:	4a1d      	ldr	r2, [pc, #116]	; (8004f88 <uip_arp_update+0xfc>)
 8004f14:	7013      	strb	r3, [r2, #0]
    c = 0;
 8004f16:	4a1d      	ldr	r2, [pc, #116]	; (8004f8c <uip_arp_update+0x100>)
 8004f18:	7013      	strb	r3, [r2, #0]
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8004f1a:	4a18      	ldr	r2, [pc, #96]	; (8004f7c <uip_arp_update+0xf0>)
 8004f1c:	7013      	strb	r3, [r2, #0]
 8004f1e:	e013      	b.n	8004f48 <uip_arp_update+0xbc>
      tabptr = &arp_table[i];
      if(arptime - tabptr->time > tmpage) {
 8004f20:	4a18      	ldr	r2, [pc, #96]	; (8004f84 <uip_arp_update+0xf8>)
 8004f22:	7814      	ldrb	r4, [r2, #0]
 8004f24:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8004f28:	00aa      	lsls	r2, r5, #2
 8004f2a:	4d15      	ldr	r5, [pc, #84]	; (8004f80 <uip_arp_update+0xf4>)
 8004f2c:	442a      	add	r2, r5
 8004f2e:	7a92      	ldrb	r2, [r2, #10]
 8004f30:	1aa6      	subs	r6, r4, r2
 8004f32:	4d15      	ldr	r5, [pc, #84]	; (8004f88 <uip_arp_update+0xfc>)
 8004f34:	782d      	ldrb	r5, [r5, #0]
 8004f36:	42ae      	cmp	r6, r5
 8004f38:	dd03      	ble.n	8004f42 <uip_arp_update+0xb6>
	tmpage = arptime - tabptr->time;
 8004f3a:	4a13      	ldr	r2, [pc, #76]	; (8004f88 <uip_arp_update+0xfc>)
 8004f3c:	7016      	strb	r6, [r2, #0]
	c = i;
 8004f3e:	4a13      	ldr	r2, [pc, #76]	; (8004f8c <uip_arp_update+0x100>)
 8004f40:	7013      	strb	r3, [r2, #0]
  /* If no unused entry is found, we try to find the oldest entry and
     throw it away. */
  if(i == UIP_ARPTAB_SIZE) {
    tmpage = 0;
    c = 0;
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8004f42:	3301      	adds	r3, #1
 8004f44:	4a0d      	ldr	r2, [pc, #52]	; (8004f7c <uip_arp_update+0xf0>)
 8004f46:	7013      	strb	r3, [r2, #0]
 8004f48:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <uip_arp_update+0xf0>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	2b07      	cmp	r3, #7
 8004f4e:	d9e7      	bls.n	8004f20 <uip_arp_update+0x94>
      if(arptime - tabptr->time > tmpage) {
	tmpage = arptime - tabptr->time;
	c = i;
      }
    }
    i = c;
 8004f50:	4b0e      	ldr	r3, [pc, #56]	; (8004f8c <uip_arp_update+0x100>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	4a09      	ldr	r2, [pc, #36]	; (8004f7c <uip_arp_update+0xf0>)
 8004f56:	7013      	strb	r3, [r2, #0]
    tabptr = &arp_table[i];
 8004f58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004f5c:	009a      	lsls	r2, r3, #2
 8004f5e:	4e08      	ldr	r6, [pc, #32]	; (8004f80 <uip_arp_update+0xf4>)
 8004f60:	4416      	add	r6, r2
  }

  /* Now, i is the ARP table entry which we will fill with the new
     information. */
  memcpy(tabptr->ipaddr, ipaddr, 4);
 8004f62:	6802      	ldr	r2, [r0, #0]
 8004f64:	4633      	mov	r3, r6
 8004f66:	f843 2b04 	str.w	r2, [r3], #4
  memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 8004f6a:	680a      	ldr	r2, [r1, #0]
 8004f6c:	6072      	str	r2, [r6, #4]
 8004f6e:	888a      	ldrh	r2, [r1, #4]
 8004f70:	809a      	strh	r2, [r3, #4]
  tabptr->time = arptime;
 8004f72:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <uip_arp_update+0xf8>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	72b3      	strb	r3, [r6, #10]
}
 8004f78:	bcf0      	pop	{r4, r5, r6, r7}
 8004f7a:	4770      	bx	lr
 8004f7c:	20000aea 	.word	0x20000aea
 8004f80:	20000aec 	.word	0x20000aec
 8004f84:	20000b4d 	.word	0x20000b4d
 8004f88:	20000aeb 	.word	0x20000aeb
 8004f8c:	20000b4c 	.word	0x20000b4c

08004f90 <uip_arp_init>:
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_init(void)
{
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8004f90:	2200      	movs	r2, #0
 8004f92:	4b08      	ldr	r3, [pc, #32]	; (8004fb4 <uip_arp_init+0x24>)
 8004f94:	701a      	strb	r2, [r3, #0]
 8004f96:	e008      	b.n	8004faa <uip_arp_init+0x1a>
    memset(arp_table[i].ipaddr, 0, 4);
 8004f98:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8004f9c:	008a      	lsls	r2, r1, #2
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	4905      	ldr	r1, [pc, #20]	; (8004fb8 <uip_arp_init+0x28>)
 8004fa2:	5088      	str	r0, [r1, r2]
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_init(void)
{
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	4a03      	ldr	r2, [pc, #12]	; (8004fb4 <uip_arp_init+0x24>)
 8004fa8:	7013      	strb	r3, [r2, #0]
 8004faa:	4b02      	ldr	r3, [pc, #8]	; (8004fb4 <uip_arp_init+0x24>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b07      	cmp	r3, #7
 8004fb0:	d9f2      	bls.n	8004f98 <uip_arp_init+0x8>
    memset(arp_table[i].ipaddr, 0, 4);
  }
}
 8004fb2:	4770      	bx	lr
 8004fb4:	20000aea 	.word	0x20000aea
 8004fb8:	20000aec 	.word	0x20000aec

08004fbc <uip_arp_timer>:
 *
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_timer(void)
{
 8004fbc:	b410      	push	{r4}
  struct arp_entry *tabptr;
  
  ++arptime;
 8004fbe:	4b14      	ldr	r3, [pc, #80]	; (8005010 <uip_arp_timer+0x54>)
 8004fc0:	781c      	ldrb	r4, [r3, #0]
 8004fc2:	3401      	adds	r4, #1
 8004fc4:	b2e4      	uxtb	r4, r4
 8004fc6:	701c      	strb	r4, [r3, #0]
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8004fc8:	2200      	movs	r2, #0
 8004fca:	4b12      	ldr	r3, [pc, #72]	; (8005014 <uip_arp_timer+0x58>)
 8004fcc:	701a      	strb	r2, [r3, #0]
 8004fce:	e019      	b.n	8005004 <uip_arp_timer+0x48>
    tabptr = &arp_table[i];
    if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
 8004fd0:	4811      	ldr	r0, [pc, #68]	; (8005018 <uip_arp_timer+0x5c>)
 8004fd2:	005a      	lsls	r2, r3, #1
 8004fd4:	441a      	add	r2, r3
 8004fd6:	0091      	lsls	r1, r2, #2
 8004fd8:	1842      	adds	r2, r0, r1
 8004fda:	5a41      	ldrh	r1, [r0, r1]
 8004fdc:	8852      	ldrh	r2, [r2, #2]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	d00d      	beq.n	8004ffe <uip_arp_timer+0x42>
       arptime - tabptr->time >= UIP_ARP_MAXAGE) {
 8004fe2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8004fe6:	008a      	lsls	r2, r1, #2
 8004fe8:	4402      	add	r2, r0
 8004fea:	7a92      	ldrb	r2, [r2, #10]
 8004fec:	1aa2      	subs	r2, r4, r2
  struct arp_entry *tabptr;
  
  ++arptime;
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    tabptr = &arp_table[i];
    if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
 8004fee:	2a77      	cmp	r2, #119	; 0x77
 8004ff0:	dd05      	ble.n	8004ffe <uip_arp_timer+0x42>
       arptime - tabptr->time >= UIP_ARP_MAXAGE) {
      memset(tabptr->ipaddr, 0, 4);
 8004ff2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8004ff6:	008a      	lsls	r2, r1, #2
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	4907      	ldr	r1, [pc, #28]	; (8005018 <uip_arp_timer+0x5c>)
 8004ffc:	5088      	str	r0, [r1, r2]
uip_arp_timer(void)
{
  struct arp_entry *tabptr;
  
  ++arptime;
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8004ffe:	3301      	adds	r3, #1
 8005000:	4a04      	ldr	r2, [pc, #16]	; (8005014 <uip_arp_timer+0x58>)
 8005002:	7013      	strb	r3, [r2, #0]
 8005004:	4b03      	ldr	r3, [pc, #12]	; (8005014 <uip_arp_timer+0x58>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b07      	cmp	r3, #7
 800500a:	d9e1      	bls.n	8004fd0 <uip_arp_timer+0x14>
       arptime - tabptr->time >= UIP_ARP_MAXAGE) {
      memset(tabptr->ipaddr, 0, 4);
    }
  }

}
 800500c:	bc10      	pop	{r4}
 800500e:	4770      	bx	lr
 8005010:	20000b4d 	.word	0x20000b4d
 8005014:	20000aea 	.word	0x20000aea
 8005018:	20000aec 	.word	0x20000aec

0800501c <uip_arp_ipin>:
 */
/*-----------------------------------------------------------------------------------*/
//#if 0
void
uip_arp_ipin(void)
{
 800501c:	b508      	push	{r3, lr}
  uip_len -= sizeof(struct uip_eth_hdr);
 800501e:	4a0e      	ldr	r2, [pc, #56]	; (8005058 <uip_arp_ipin+0x3c>)
 8005020:	8813      	ldrh	r3, [r2, #0]
 8005022:	3b0e      	subs	r3, #14
 8005024:	8013      	strh	r3, [r2, #0]
	
  /* Only insert/update an entry if the source IP address of the
     incoming IP packet comes from a host on the local network. */
  if((IPBUF->srcipaddr[0] & uip_netmask[0]) !=
 8005026:	4b0d      	ldr	r3, [pc, #52]	; (800505c <uip_arp_ipin+0x40>)
 8005028:	8b59      	ldrh	r1, [r3, #26]
     (uip_hostaddr[0] & uip_netmask[0])) {
 800502a:	4b0d      	ldr	r3, [pc, #52]	; (8005060 <uip_arp_ipin+0x44>)
 800502c:	881b      	ldrh	r3, [r3, #0]
{
  uip_len -= sizeof(struct uip_eth_hdr);
	
  /* Only insert/update an entry if the source IP address of the
     incoming IP packet comes from a host on the local network. */
  if((IPBUF->srcipaddr[0] & uip_netmask[0]) !=
 800502e:	4a0d      	ldr	r2, [pc, #52]	; (8005064 <uip_arp_ipin+0x48>)
 8005030:	8812      	ldrh	r2, [r2, #0]
 8005032:	404b      	eors	r3, r1
 8005034:	421a      	tst	r2, r3
 8005036:	d10d      	bne.n	8005054 <uip_arp_ipin+0x38>
     (uip_hostaddr[0] & uip_netmask[0])) {
    return;
  }
  if((IPBUF->srcipaddr[1] & uip_netmask[1]) !=
 8005038:	4b08      	ldr	r3, [pc, #32]	; (800505c <uip_arp_ipin+0x40>)
 800503a:	8b99      	ldrh	r1, [r3, #28]
     (uip_hostaddr[1] & uip_netmask[1])) {
 800503c:	4b08      	ldr	r3, [pc, #32]	; (8005060 <uip_arp_ipin+0x44>)
 800503e:	885b      	ldrh	r3, [r3, #2]
     incoming IP packet comes from a host on the local network. */
  if((IPBUF->srcipaddr[0] & uip_netmask[0]) !=
     (uip_hostaddr[0] & uip_netmask[0])) {
    return;
  }
  if((IPBUF->srcipaddr[1] & uip_netmask[1]) !=
 8005040:	4a08      	ldr	r2, [pc, #32]	; (8005064 <uip_arp_ipin+0x48>)
 8005042:	8852      	ldrh	r2, [r2, #2]
 8005044:	404b      	eors	r3, r1
 8005046:	421a      	tst	r2, r3
 8005048:	d104      	bne.n	8005054 <uip_arp_ipin+0x38>
     (uip_hostaddr[1] & uip_netmask[1])) {
    return;
  }
  uip_arp_update(IPBUF->srcipaddr, &(IPBUF->ethhdr.src));
 800504a:	4807      	ldr	r0, [pc, #28]	; (8005068 <uip_arp_ipin+0x4c>)
 800504c:	4601      	mov	r1, r0
 800504e:	3014      	adds	r0, #20
 8005050:	f7ff ff1c 	bl	8004e8c <uip_arp_update>
 8005054:	bd08      	pop	{r3, pc}
 8005056:	bf00      	nop
 8005058:	20000f00 	.word	0x20000f00
 800505c:	20000fb0 	.word	0x20000fb0
 8005060:	20000fac 	.word	0x20000fac
 8005064:	20000fa8 	.word	0x20000fa8
 8005068:	20000fb6 	.word	0x20000fb6

0800506c <uip_arp_arpin>:
 * global variable uip_len.
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_arpin(void)
{
 800506c:	b510      	push	{r4, lr}
  
  if(uip_len < sizeof(struct arp_hdr)) {
 800506e:	4b32      	ldr	r3, [pc, #200]	; (8005138 <uip_arp_arpin+0xcc>)
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	2b29      	cmp	r3, #41	; 0x29
 8005074:	d803      	bhi.n	800507e <uip_arp_arpin+0x12>
    uip_len = 0;
 8005076:	2200      	movs	r2, #0
 8005078:	4b2f      	ldr	r3, [pc, #188]	; (8005138 <uip_arp_arpin+0xcc>)
 800507a:	801a      	strh	r2, [r3, #0]
    return;
 800507c:	bd10      	pop	{r4, pc}
  }
  uip_len = 0;
 800507e:	2200      	movs	r2, #0
 8005080:	4b2d      	ldr	r3, [pc, #180]	; (8005138 <uip_arp_arpin+0xcc>)
 8005082:	801a      	strh	r2, [r3, #0]
  
  switch(BUF->opcode) {
 8005084:	4b2d      	ldr	r3, [pc, #180]	; (800513c <uip_arp_arpin+0xd0>)
 8005086:	8a9b      	ldrh	r3, [r3, #20]
 8005088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800508c:	d003      	beq.n	8005096 <uip_arp_arpin+0x2a>
 800508e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005092:	d03f      	beq.n	8005114 <uip_arp_arpin+0xa8>
 8005094:	bd10      	pop	{r4, pc}
  case HTONS(ARP_REQUEST):
    /* ARP request. If it asked for our address, we send out a
       reply. */
    if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
 8005096:	4b29      	ldr	r3, [pc, #164]	; (800513c <uip_arp_arpin+0xd0>)
 8005098:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800509a:	4b29      	ldr	r3, [pc, #164]	; (8005140 <uip_arp_arpin+0xd4>)
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d149      	bne.n	8005136 <uip_arp_arpin+0xca>
 80050a2:	4b26      	ldr	r3, [pc, #152]	; (800513c <uip_arp_arpin+0xd0>)
 80050a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80050a6:	4b26      	ldr	r3, [pc, #152]	; (8005140 <uip_arp_arpin+0xd4>)
 80050a8:	885b      	ldrh	r3, [r3, #2]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d143      	bne.n	8005136 <uip_arp_arpin+0xca>
      /* First, we register the one who made the request in our ARP
	 table, since it is likely that we will do more communication
	 with this host in the future. */
      uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
 80050ae:	4c25      	ldr	r4, [pc, #148]	; (8005144 <uip_arp_arpin+0xd8>)
 80050b0:	4621      	mov	r1, r4
 80050b2:	1da0      	adds	r0, r4, #6
 80050b4:	f7ff feea 	bl	8004e8c <uip_arp_update>
      
      /* The reply opcode is 2. */
      BUF->opcode = HTONS(2);
 80050b8:	2200      	movs	r2, #0
 80050ba:	f804 2c02 	strb.w	r2, [r4, #-2]
 80050be:	2202      	movs	r2, #2
 80050c0:	f804 2c01 	strb.w	r2, [r4, #-1]

      memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
 80050c4:	6821      	ldr	r1, [r4, #0]
 80050c6:	f8c4 100a 	str.w	r1, [r4, #10]
 80050ca:	88a1      	ldrh	r1, [r4, #4]
 80050cc:	81e1      	strh	r1, [r4, #14]
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
 80050ce:	491e      	ldr	r1, [pc, #120]	; (8005148 <uip_arp_arpin+0xdc>)
 80050d0:	6808      	ldr	r0, [r1, #0]
 80050d2:	6020      	str	r0, [r4, #0]
 80050d4:	8889      	ldrh	r1, [r1, #4]
 80050d6:	80a1      	strh	r1, [r4, #4]
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 80050d8:	f844 0c10 	str.w	r0, [r4, #-16]
 80050dc:	f824 1c0c 	strh.w	r1, [r4, #-12]
      memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
 80050e0:	f8d4 100a 	ldr.w	r1, [r4, #10]
 80050e4:	f844 1c16 	str.w	r1, [r4, #-22]
 80050e8:	89e2      	ldrh	r2, [r4, #14]
 80050ea:	f824 2c12 	strh.w	r2, [r4, #-18]
      
      BUF->dipaddr[0] = BUF->sipaddr[0];
 80050ee:	88e2      	ldrh	r2, [r4, #6]
 80050f0:	8222      	strh	r2, [r4, #16]
      BUF->dipaddr[1] = BUF->sipaddr[1];
 80050f2:	8922      	ldrh	r2, [r4, #8]
 80050f4:	8262      	strh	r2, [r4, #18]
      BUF->sipaddr[0] = uip_hostaddr[0];
 80050f6:	4a12      	ldr	r2, [pc, #72]	; (8005140 <uip_arp_arpin+0xd4>)
 80050f8:	8811      	ldrh	r1, [r2, #0]
 80050fa:	80e1      	strh	r1, [r4, #6]
      BUF->sipaddr[1] = uip_hostaddr[1];
 80050fc:	8852      	ldrh	r2, [r2, #2]
 80050fe:	8122      	strh	r2, [r4, #8]

      BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
 8005100:	2208      	movs	r2, #8
 8005102:	f804 2c0a 	strb.w	r2, [r4, #-10]
 8005106:	2206      	movs	r2, #6
 8005108:	f804 2c09 	strb.w	r2, [r4, #-9]
      uip_len = sizeof(struct arp_hdr);
 800510c:	222a      	movs	r2, #42	; 0x2a
 800510e:	4b0a      	ldr	r3, [pc, #40]	; (8005138 <uip_arp_arpin+0xcc>)
 8005110:	801a      	strh	r2, [r3, #0]
 8005112:	bd10      	pop	{r4, pc}
    }
    break;
  case HTONS(ARP_REPLY):
    /* ARP reply. We insert or update the ARP table if it was meant
       for us. */
    if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
 8005114:	4b09      	ldr	r3, [pc, #36]	; (800513c <uip_arp_arpin+0xd0>)
 8005116:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8005118:	4b09      	ldr	r3, [pc, #36]	; (8005140 <uip_arp_arpin+0xd4>)
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d10a      	bne.n	8005136 <uip_arp_arpin+0xca>
 8005120:	4b06      	ldr	r3, [pc, #24]	; (800513c <uip_arp_arpin+0xd0>)
 8005122:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005124:	4b06      	ldr	r3, [pc, #24]	; (8005140 <uip_arp_arpin+0xd4>)
 8005126:	885b      	ldrh	r3, [r3, #2]
 8005128:	429a      	cmp	r2, r3
 800512a:	d104      	bne.n	8005136 <uip_arp_arpin+0xca>
      uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
 800512c:	4805      	ldr	r0, [pc, #20]	; (8005144 <uip_arp_arpin+0xd8>)
 800512e:	4601      	mov	r1, r0
 8005130:	3006      	adds	r0, #6
 8005132:	f7ff feab 	bl	8004e8c <uip_arp_update>
 8005136:	bd10      	pop	{r4, pc}
 8005138:	20000f00 	.word	0x20000f00
 800513c:	20000fb0 	.word	0x20000fb0
 8005140:	20000fac 	.word	0x20000fac
 8005144:	20000fc6 	.word	0x20000fc6
 8005148:	20000ae4 	.word	0x20000ae4

0800514c <uip_arp_out>:
 * uip_len.
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_out(void)
{
 800514c:	b430      	push	{r4, r5}

     If not ARP table entry is found, we overwrite the original IP
     packet with an ARP request for the IP address. */

  /* First check if destination is a local broadcast. */
  if(uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr)) {
 800514e:	4b4c      	ldr	r3, [pc, #304]	; (8005280 <uip_arp_out+0x134>)
 8005150:	8bd9      	ldrh	r1, [r3, #30]
 8005152:	b28a      	uxth	r2, r1
 8005154:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005158:	429a      	cmp	r2, r3
 800515a:	d10c      	bne.n	8005176 <uip_arp_out+0x2a>
 800515c:	4b48      	ldr	r3, [pc, #288]	; (8005280 <uip_arp_out+0x134>)
 800515e:	8c18      	ldrh	r0, [r3, #32]
 8005160:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005164:	4298      	cmp	r0, r3
 8005166:	d106      	bne.n	8005176 <uip_arp_out+0x2a>
    memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6);
 8005168:	4b45      	ldr	r3, [pc, #276]	; (8005280 <uip_arp_out+0x134>)
 800516a:	4a46      	ldr	r2, [pc, #280]	; (8005284 <uip_arp_out+0x138>)
 800516c:	6810      	ldr	r0, [r2, #0]
 800516e:	6018      	str	r0, [r3, #0]
 8005170:	8892      	ldrh	r2, [r2, #4]
 8005172:	809a      	strh	r2, [r3, #4]
 8005174:	e072      	b.n	800525c <uip_arp_out+0x110>
  } else {
    /* Check if the destination address is on the local network. */
    if(!uip_ipaddr_maskcmp(IPBUF->destipaddr, uip_hostaddr, uip_netmask)) {
 8005176:	4b44      	ldr	r3, [pc, #272]	; (8005288 <uip_arp_out+0x13c>)
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	4844      	ldr	r0, [pc, #272]	; (800528c <uip_arp_out+0x140>)
 800517c:	8800      	ldrh	r0, [r0, #0]
 800517e:	4053      	eors	r3, r2
 8005180:	4218      	tst	r0, r3
 8005182:	d109      	bne.n	8005198 <uip_arp_out+0x4c>
 8005184:	4b3e      	ldr	r3, [pc, #248]	; (8005280 <uip_arp_out+0x134>)
 8005186:	8c1a      	ldrh	r2, [r3, #32]
 8005188:	b294      	uxth	r4, r2
 800518a:	4b3f      	ldr	r3, [pc, #252]	; (8005288 <uip_arp_out+0x13c>)
 800518c:	885b      	ldrh	r3, [r3, #2]
 800518e:	483f      	ldr	r0, [pc, #252]	; (800528c <uip_arp_out+0x140>)
 8005190:	8840      	ldrh	r0, [r0, #2]
 8005192:	4063      	eors	r3, r4
 8005194:	4218      	tst	r0, r3
 8005196:	d006      	beq.n	80051a6 <uip_arp_out+0x5a>
      /* Destination address was not on the local network, so we need to
	 use the default router's IP address instead of the destination
	 address when determining the MAC address. */
      uip_ipaddr_copy(ipaddr, uip_draddr);
 8005198:	4b3d      	ldr	r3, [pc, #244]	; (8005290 <uip_arp_out+0x144>)
 800519a:	4a3e      	ldr	r2, [pc, #248]	; (8005294 <uip_arp_out+0x148>)
 800519c:	8811      	ldrh	r1, [r2, #0]
 800519e:	8019      	strh	r1, [r3, #0]
 80051a0:	8852      	ldrh	r2, [r2, #2]
 80051a2:	805a      	strh	r2, [r3, #2]
 80051a4:	e002      	b.n	80051ac <uip_arp_out+0x60>
    } else {
      /* Else, we use the destination IP address. */
      uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
 80051a6:	4b3a      	ldr	r3, [pc, #232]	; (8005290 <uip_arp_out+0x144>)
 80051a8:	8019      	strh	r1, [r3, #0]
 80051aa:	805a      	strh	r2, [r3, #2]
    }
      
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 80051ac:	2200      	movs	r2, #0
 80051ae:	4b3a      	ldr	r3, [pc, #232]	; (8005298 <uip_arp_out+0x14c>)
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	e016      	b.n	80051e2 <uip_arp_out+0x96>
      tabptr = &arp_table[i];
 80051b4:	4839      	ldr	r0, [pc, #228]	; (800529c <uip_arp_out+0x150>)
 80051b6:	005a      	lsls	r2, r3, #1
 80051b8:	441a      	add	r2, r3
 80051ba:	0091      	lsls	r1, r2, #2
 80051bc:	1845      	adds	r5, r0, r1
      if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
 80051be:	4a34      	ldr	r2, [pc, #208]	; (8005290 <uip_arp_out+0x144>)
 80051c0:	8814      	ldrh	r4, [r2, #0]
 80051c2:	5a42      	ldrh	r2, [r0, r1]
 80051c4:	4294      	cmp	r4, r2
 80051c6:	d109      	bne.n	80051dc <uip_arp_out+0x90>
 80051c8:	4a31      	ldr	r2, [pc, #196]	; (8005290 <uip_arp_out+0x144>)
 80051ca:	8850      	ldrh	r0, [r2, #2]
 80051cc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80051d0:	008a      	lsls	r2, r1, #2
 80051d2:	4932      	ldr	r1, [pc, #200]	; (800529c <uip_arp_out+0x150>)
 80051d4:	440a      	add	r2, r1
 80051d6:	8852      	ldrh	r2, [r2, #2]
 80051d8:	4290      	cmp	r0, r2
 80051da:	d006      	beq.n	80051ea <uip_arp_out+0x9e>
    } else {
      /* Else, we use the destination IP address. */
      uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
    }
      
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 80051dc:	3301      	adds	r3, #1
 80051de:	4a2e      	ldr	r2, [pc, #184]	; (8005298 <uip_arp_out+0x14c>)
 80051e0:	7013      	strb	r3, [r2, #0]
 80051e2:	4b2d      	ldr	r3, [pc, #180]	; (8005298 <uip_arp_out+0x14c>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b07      	cmp	r3, #7
 80051e8:	d9e4      	bls.n	80051b4 <uip_arp_out+0x68>
      if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
	break;
      }
    }

    if(i == UIP_ARPTAB_SIZE) {
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	d130      	bne.n	8005250 <uip_arp_out+0x104>
      /* The destination address was not in our ARP table, so we
	 overwrite the IP packet with an ARP request. */

      memset(BUF->ethhdr.dest.addr, 0xff, 6);
 80051ee:	4b24      	ldr	r3, [pc, #144]	; (8005280 <uip_arp_out+0x134>)
 80051f0:	f04f 32ff 	mov.w	r2, #4294967295
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	809a      	strh	r2, [r3, #4]
      memset(BUF->dhwaddr.addr, 0x00, 6);
 80051f8:	2200      	movs	r2, #0
 80051fa:	621a      	str	r2, [r3, #32]
 80051fc:	849a      	strh	r2, [r3, #36]	; 0x24
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 80051fe:	4928      	ldr	r1, [pc, #160]	; (80052a0 <uip_arp_out+0x154>)
 8005200:	6808      	ldr	r0, [r1, #0]
 8005202:	f8c3 0006 	str.w	r0, [r3, #6]
 8005206:	8889      	ldrh	r1, [r1, #4]
 8005208:	8159      	strh	r1, [r3, #10]
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
 800520a:	f8c3 0016 	str.w	r0, [r3, #22]
 800520e:	8359      	strh	r1, [r3, #26]
    
      uip_ipaddr_copy(BUF->dipaddr, ipaddr);
 8005210:	491f      	ldr	r1, [pc, #124]	; (8005290 <uip_arp_out+0x144>)
 8005212:	8808      	ldrh	r0, [r1, #0]
 8005214:	84d8      	strh	r0, [r3, #38]	; 0x26
 8005216:	8849      	ldrh	r1, [r1, #2]
 8005218:	8519      	strh	r1, [r3, #40]	; 0x28
      uip_ipaddr_copy(BUF->sipaddr, uip_hostaddr);
 800521a:	491b      	ldr	r1, [pc, #108]	; (8005288 <uip_arp_out+0x13c>)
 800521c:	8808      	ldrh	r0, [r1, #0]
 800521e:	8398      	strh	r0, [r3, #28]
 8005220:	8849      	ldrh	r1, [r1, #2]
 8005222:	83d9      	strh	r1, [r3, #30]
      BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
 8005224:	751a      	strb	r2, [r3, #20]
 8005226:	2101      	movs	r1, #1
 8005228:	7559      	strb	r1, [r3, #21]
      BUF->hwtype = HTONS(ARP_HWTYPE_ETH);
 800522a:	739a      	strb	r2, [r3, #14]
 800522c:	73d9      	strb	r1, [r3, #15]
      BUF->protocol = HTONS(UIP_ETHTYPE_IP);
 800522e:	2108      	movs	r1, #8
 8005230:	7419      	strb	r1, [r3, #16]
 8005232:	745a      	strb	r2, [r3, #17]
      BUF->hwlen = 6;
 8005234:	2206      	movs	r2, #6
 8005236:	749a      	strb	r2, [r3, #18]
      BUF->protolen = 4;
 8005238:	2204      	movs	r2, #4
 800523a:	74da      	strb	r2, [r3, #19]
      BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
 800523c:	7319      	strb	r1, [r3, #12]
 800523e:	2206      	movs	r2, #6
 8005240:	735a      	strb	r2, [r3, #13]

      uip_appdata = &uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN];
 8005242:	3336      	adds	r3, #54	; 0x36
 8005244:	4a17      	ldr	r2, [pc, #92]	; (80052a4 <uip_arp_out+0x158>)
 8005246:	6013      	str	r3, [r2, #0]
    
      uip_len = sizeof(struct arp_hdr);
 8005248:	222a      	movs	r2, #42	; 0x2a
 800524a:	4b17      	ldr	r3, [pc, #92]	; (80052a8 <uip_arp_out+0x15c>)
 800524c:	801a      	strh	r2, [r3, #0]
      return;
 800524e:	e014      	b.n	800527a <uip_arp_out+0x12e>
    }

    /* Build an ethernet header. */
    memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
 8005250:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <uip_arp_out+0x134>)
 8005252:	f855 2f04 	ldr.w	r2, [r5, #4]!
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	88aa      	ldrh	r2, [r5, #4]
 800525a:	809a      	strh	r2, [r3, #4]
  }
  memcpy(IPBUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 800525c:	4b08      	ldr	r3, [pc, #32]	; (8005280 <uip_arp_out+0x134>)
 800525e:	4a10      	ldr	r2, [pc, #64]	; (80052a0 <uip_arp_out+0x154>)
 8005260:	6811      	ldr	r1, [r2, #0]
 8005262:	f8c3 1006 	str.w	r1, [r3, #6]
 8005266:	8892      	ldrh	r2, [r2, #4]
 8005268:	815a      	strh	r2, [r3, #10]
  
  IPBUF->ethhdr.type = HTONS(UIP_ETHTYPE_IP);
 800526a:	2208      	movs	r2, #8
 800526c:	731a      	strb	r2, [r3, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	735a      	strb	r2, [r3, #13]

  uip_len += sizeof(struct uip_eth_hdr);
 8005272:	4a0d      	ldr	r2, [pc, #52]	; (80052a8 <uip_arp_out+0x15c>)
 8005274:	8813      	ldrh	r3, [r2, #0]
 8005276:	330e      	adds	r3, #14
 8005278:	8013      	strh	r3, [r2, #0]
}
 800527a:	bc30      	pop	{r4, r5}
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	20000fb0 	.word	0x20000fb0
 8005284:	080063e8 	.word	0x080063e8
 8005288:	20000fac 	.word	0x20000fac
 800528c:	20000fa8 	.word	0x20000fa8
 8005290:	20000b50 	.word	0x20000b50
 8005294:	20000fa4 	.word	0x20000fa4
 8005298:	20000aea 	.word	0x20000aea
 800529c:	20000aec 	.word	0x20000aec
 80052a0:	20000ae4 	.word	0x20000ae4
 80052a4:	20000f14 	.word	0x20000f14
 80052a8:	20000f00 	.word	0x20000f00

080052ac <uip_timer_set>:
 * \param interval The interval before the timer expires.
 *
 */
void
uip_timer_set(struct uip_timer *t, clock_time_t interval)
{
 80052ac:	b510      	push	{r4, lr}
 80052ae:	4604      	mov	r4, r0
  t->interval = interval;
 80052b0:	6041      	str	r1, [r0, #4]
  t->start = clock_time();
 80052b2:	f7fe fbb7 	bl	8003a24 <clock_time>
 80052b6:	6020      	str	r0, [r4, #0]
 80052b8:	bd10      	pop	{r4, pc}
 80052ba:	bf00      	nop

080052bc <__libc_init_array>:
 80052bc:	4b0e      	ldr	r3, [pc, #56]	; (80052f8 <__libc_init_array+0x3c>)
 80052be:	b570      	push	{r4, r5, r6, lr}
 80052c0:	461e      	mov	r6, r3
 80052c2:	4c0e      	ldr	r4, [pc, #56]	; (80052fc <__libc_init_array+0x40>)
 80052c4:	2500      	movs	r5, #0
 80052c6:	1ae4      	subs	r4, r4, r3
 80052c8:	10a4      	asrs	r4, r4, #2
 80052ca:	42a5      	cmp	r5, r4
 80052cc:	d004      	beq.n	80052d8 <__libc_init_array+0x1c>
 80052ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052d2:	4798      	blx	r3
 80052d4:	3501      	adds	r5, #1
 80052d6:	e7f8      	b.n	80052ca <__libc_init_array+0xe>
 80052d8:	f000 fbe4 	bl	8005aa4 <_init>
 80052dc:	4b08      	ldr	r3, [pc, #32]	; (8005300 <__libc_init_array+0x44>)
 80052de:	4c09      	ldr	r4, [pc, #36]	; (8005304 <__libc_init_array+0x48>)
 80052e0:	461e      	mov	r6, r3
 80052e2:	1ae4      	subs	r4, r4, r3
 80052e4:	10a4      	asrs	r4, r4, #2
 80052e6:	2500      	movs	r5, #0
 80052e8:	42a5      	cmp	r5, r4
 80052ea:	d004      	beq.n	80052f6 <__libc_init_array+0x3a>
 80052ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052f0:	4798      	blx	r3
 80052f2:	3501      	adds	r5, #1
 80052f4:	e7f8      	b.n	80052e8 <__libc_init_array+0x2c>
 80052f6:	bd70      	pop	{r4, r5, r6, pc}
 80052f8:	080063f0 	.word	0x080063f0
 80052fc:	080063f0 	.word	0x080063f0
 8005300:	080063f0 	.word	0x080063f0
 8005304:	080063f4 	.word	0x080063f4

08005308 <memcmp>:
 8005308:	b510      	push	{r4, lr}
 800530a:	3901      	subs	r1, #1
 800530c:	4402      	add	r2, r0
 800530e:	4290      	cmp	r0, r2
 8005310:	d007      	beq.n	8005322 <memcmp+0x1a>
 8005312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005316:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800531a:	42a3      	cmp	r3, r4
 800531c:	d0f7      	beq.n	800530e <memcmp+0x6>
 800531e:	1b18      	subs	r0, r3, r4
 8005320:	bd10      	pop	{r4, pc}
 8005322:	2000      	movs	r0, #0
 8005324:	bd10      	pop	{r4, pc}

08005326 <memcpy>:
 8005326:	b510      	push	{r4, lr}
 8005328:	1e43      	subs	r3, r0, #1
 800532a:	440a      	add	r2, r1
 800532c:	4291      	cmp	r1, r2
 800532e:	d004      	beq.n	800533a <memcpy+0x14>
 8005330:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005334:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005338:	e7f8      	b.n	800532c <memcpy+0x6>
 800533a:	bd10      	pop	{r4, pc}

0800533c <memset>:
 800533c:	4603      	mov	r3, r0
 800533e:	4402      	add	r2, r0
 8005340:	4293      	cmp	r3, r2
 8005342:	d002      	beq.n	800534a <memset+0xe>
 8005344:	f803 1b01 	strb.w	r1, [r3], #1
 8005348:	e7fa      	b.n	8005340 <memset+0x4>
 800534a:	4770      	bx	lr

0800534c <srand>:
 800534c:	b538      	push	{r3, r4, r5, lr}
 800534e:	4b12      	ldr	r3, [pc, #72]	; (8005398 <srand+0x4c>)
 8005350:	4605      	mov	r5, r0
 8005352:	681c      	ldr	r4, [r3, #0]
 8005354:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005356:	b9d3      	cbnz	r3, 800538e <srand+0x42>
 8005358:	2018      	movs	r0, #24
 800535a:	f000 f96d 	bl	8005638 <malloc>
 800535e:	f243 330e 	movw	r3, #13070	; 0x330e
 8005362:	63a0      	str	r0, [r4, #56]	; 0x38
 8005364:	8003      	strh	r3, [r0, #0]
 8005366:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 800536a:	8043      	strh	r3, [r0, #2]
 800536c:	f241 2334 	movw	r3, #4660	; 0x1234
 8005370:	8083      	strh	r3, [r0, #4]
 8005372:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8005376:	80c3      	strh	r3, [r0, #6]
 8005378:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 800537c:	8103      	strh	r3, [r0, #8]
 800537e:	2305      	movs	r3, #5
 8005380:	8143      	strh	r3, [r0, #10]
 8005382:	230b      	movs	r3, #11
 8005384:	8183      	strh	r3, [r0, #12]
 8005386:	2201      	movs	r2, #1
 8005388:	2300      	movs	r3, #0
 800538a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800538e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005390:	2200      	movs	r2, #0
 8005392:	611d      	str	r5, [r3, #16]
 8005394:	615a      	str	r2, [r3, #20]
 8005396:	bd38      	pop	{r3, r4, r5, pc}
 8005398:	200005ec 	.word	0x200005ec

0800539c <rand>:
 800539c:	4b19      	ldr	r3, [pc, #100]	; (8005404 <rand+0x68>)
 800539e:	b510      	push	{r4, lr}
 80053a0:	681c      	ldr	r4, [r3, #0]
 80053a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80053a4:	b9d3      	cbnz	r3, 80053dc <rand+0x40>
 80053a6:	2018      	movs	r0, #24
 80053a8:	f000 f946 	bl	8005638 <malloc>
 80053ac:	f243 330e 	movw	r3, #13070	; 0x330e
 80053b0:	63a0      	str	r0, [r4, #56]	; 0x38
 80053b2:	8003      	strh	r3, [r0, #0]
 80053b4:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80053b8:	8043      	strh	r3, [r0, #2]
 80053ba:	f241 2334 	movw	r3, #4660	; 0x1234
 80053be:	8083      	strh	r3, [r0, #4]
 80053c0:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80053c4:	80c3      	strh	r3, [r0, #6]
 80053c6:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80053ca:	8103      	strh	r3, [r0, #8]
 80053cc:	2305      	movs	r3, #5
 80053ce:	8143      	strh	r3, [r0, #10]
 80053d0:	230b      	movs	r3, #11
 80053d2:	8183      	strh	r3, [r0, #12]
 80053d4:	2201      	movs	r2, #1
 80053d6:	2300      	movs	r3, #0
 80053d8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80053dc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80053de:	4c0a      	ldr	r4, [pc, #40]	; (8005408 <rand+0x6c>)
 80053e0:	690b      	ldr	r3, [r1, #16]
 80053e2:	6948      	ldr	r0, [r1, #20]
 80053e4:	435c      	muls	r4, r3
 80053e6:	4a09      	ldr	r2, [pc, #36]	; (800540c <rand+0x70>)
 80053e8:	fb02 4000 	mla	r0, r2, r0, r4
 80053ec:	fba3 2302 	umull	r2, r3, r3, r2
 80053f0:	3201      	adds	r2, #1
 80053f2:	4403      	add	r3, r0
 80053f4:	f143 0300 	adc.w	r3, r3, #0
 80053f8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80053fc:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8005400:	bd10      	pop	{r4, pc}
 8005402:	bf00      	nop
 8005404:	200005ec 	.word	0x200005ec
 8005408:	5851f42d 	.word	0x5851f42d
 800540c:	4c957f2d 	.word	0x4c957f2d

08005410 <_malloc_trim_r>:
 8005410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005414:	4689      	mov	r9, r1
 8005416:	4f25      	ldr	r7, [pc, #148]	; (80054ac <_malloc_trim_r+0x9c>)
 8005418:	4606      	mov	r6, r0
 800541a:	f000 fb31 	bl	8005a80 <__malloc_lock>
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80054b8 <_malloc_trim_r+0xa8>
 8005424:	685d      	ldr	r5, [r3, #4]
 8005426:	f1a8 0411 	sub.w	r4, r8, #17
 800542a:	f025 0503 	bic.w	r5, r5, #3
 800542e:	442c      	add	r4, r5
 8005430:	ebc9 0404 	rsb	r4, r9, r4
 8005434:	fbb4 f4f8 	udiv	r4, r4, r8
 8005438:	3c01      	subs	r4, #1
 800543a:	fb08 f404 	mul.w	r4, r8, r4
 800543e:	4544      	cmp	r4, r8
 8005440:	da05      	bge.n	800544e <_malloc_trim_r+0x3e>
 8005442:	4630      	mov	r0, r6
 8005444:	f000 fb1d 	bl	8005a82 <__malloc_unlock>
 8005448:	2000      	movs	r0, #0
 800544a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800544e:	2100      	movs	r1, #0
 8005450:	4630      	mov	r0, r6
 8005452:	f000 fb17 	bl	8005a84 <_sbrk_r>
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	442b      	add	r3, r5
 800545a:	4298      	cmp	r0, r3
 800545c:	d1f1      	bne.n	8005442 <_malloc_trim_r+0x32>
 800545e:	4261      	negs	r1, r4
 8005460:	4630      	mov	r0, r6
 8005462:	f000 fb0f 	bl	8005a84 <_sbrk_r>
 8005466:	3001      	adds	r0, #1
 8005468:	d110      	bne.n	800548c <_malloc_trim_r+0x7c>
 800546a:	2100      	movs	r1, #0
 800546c:	4630      	mov	r0, r6
 800546e:	f000 fb09 	bl	8005a84 <_sbrk_r>
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	1a83      	subs	r3, r0, r2
 8005476:	2b0f      	cmp	r3, #15
 8005478:	dde3      	ble.n	8005442 <_malloc_trim_r+0x32>
 800547a:	490d      	ldr	r1, [pc, #52]	; (80054b0 <_malloc_trim_r+0xa0>)
 800547c:	f043 0301 	orr.w	r3, r3, #1
 8005480:	6809      	ldr	r1, [r1, #0]
 8005482:	6053      	str	r3, [r2, #4]
 8005484:	1a40      	subs	r0, r0, r1
 8005486:	490b      	ldr	r1, [pc, #44]	; (80054b4 <_malloc_trim_r+0xa4>)
 8005488:	6008      	str	r0, [r1, #0]
 800548a:	e7da      	b.n	8005442 <_malloc_trim_r+0x32>
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	4a09      	ldr	r2, [pc, #36]	; (80054b4 <_malloc_trim_r+0xa4>)
 8005490:	1b2d      	subs	r5, r5, r4
 8005492:	f045 0501 	orr.w	r5, r5, #1
 8005496:	605d      	str	r5, [r3, #4]
 8005498:	6813      	ldr	r3, [r2, #0]
 800549a:	4630      	mov	r0, r6
 800549c:	1b1c      	subs	r4, r3, r4
 800549e:	6014      	str	r4, [r2, #0]
 80054a0:	f000 faef 	bl	8005a82 <__malloc_unlock>
 80054a4:	2001      	movs	r0, #1
 80054a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054aa:	bf00      	nop
 80054ac:	200005f0 	.word	0x200005f0
 80054b0:	200009fc 	.word	0x200009fc
 80054b4:	20000b60 	.word	0x20000b60
 80054b8:	00000080 	.word	0x00000080

080054bc <_free_r>:
 80054bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054c0:	4604      	mov	r4, r0
 80054c2:	4688      	mov	r8, r1
 80054c4:	2900      	cmp	r1, #0
 80054c6:	f000 80ad 	beq.w	8005624 <_free_r+0x168>
 80054ca:	f000 fad9 	bl	8005a80 <__malloc_lock>
 80054ce:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80054d2:	4d55      	ldr	r5, [pc, #340]	; (8005628 <_free_r+0x16c>)
 80054d4:	f022 0001 	bic.w	r0, r2, #1
 80054d8:	f1a8 0308 	sub.w	r3, r8, #8
 80054dc:	181f      	adds	r7, r3, r0
 80054de:	68a9      	ldr	r1, [r5, #8]
 80054e0:	687e      	ldr	r6, [r7, #4]
 80054e2:	428f      	cmp	r7, r1
 80054e4:	f026 0603 	bic.w	r6, r6, #3
 80054e8:	f002 0201 	and.w	r2, r2, #1
 80054ec:	d11b      	bne.n	8005526 <_free_r+0x6a>
 80054ee:	4430      	add	r0, r6
 80054f0:	b93a      	cbnz	r2, 8005502 <_free_r+0x46>
 80054f2:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80054f6:	1a9b      	subs	r3, r3, r2
 80054f8:	6899      	ldr	r1, [r3, #8]
 80054fa:	4410      	add	r0, r2
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	60ca      	str	r2, [r1, #12]
 8005500:	6091      	str	r1, [r2, #8]
 8005502:	f040 0201 	orr.w	r2, r0, #1
 8005506:	605a      	str	r2, [r3, #4]
 8005508:	60ab      	str	r3, [r5, #8]
 800550a:	4b48      	ldr	r3, [pc, #288]	; (800562c <_free_r+0x170>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4298      	cmp	r0, r3
 8005510:	d304      	bcc.n	800551c <_free_r+0x60>
 8005512:	4b47      	ldr	r3, [pc, #284]	; (8005630 <_free_r+0x174>)
 8005514:	4620      	mov	r0, r4
 8005516:	6819      	ldr	r1, [r3, #0]
 8005518:	f7ff ff7a 	bl	8005410 <_malloc_trim_r>
 800551c:	4620      	mov	r0, r4
 800551e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005522:	f000 baae 	b.w	8005a82 <__malloc_unlock>
 8005526:	607e      	str	r6, [r7, #4]
 8005528:	b97a      	cbnz	r2, 800554a <_free_r+0x8e>
 800552a:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800552e:	f105 0e08 	add.w	lr, r5, #8
 8005532:	1a5b      	subs	r3, r3, r1
 8005534:	4408      	add	r0, r1
 8005536:	6899      	ldr	r1, [r3, #8]
 8005538:	4571      	cmp	r1, lr
 800553a:	d008      	beq.n	800554e <_free_r+0x92>
 800553c:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8005540:	f8c1 e00c 	str.w	lr, [r1, #12]
 8005544:	f8ce 1008 	str.w	r1, [lr, #8]
 8005548:	e002      	b.n	8005550 <_free_r+0x94>
 800554a:	2200      	movs	r2, #0
 800554c:	e000      	b.n	8005550 <_free_r+0x94>
 800554e:	2201      	movs	r2, #1
 8005550:	19b9      	adds	r1, r7, r6
 8005552:	6849      	ldr	r1, [r1, #4]
 8005554:	07c9      	lsls	r1, r1, #31
 8005556:	d40e      	bmi.n	8005576 <_free_r+0xba>
 8005558:	4430      	add	r0, r6
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	b942      	cbnz	r2, 8005570 <_free_r+0xb4>
 800555e:	4e35      	ldr	r6, [pc, #212]	; (8005634 <_free_r+0x178>)
 8005560:	42b1      	cmp	r1, r6
 8005562:	d105      	bne.n	8005570 <_free_r+0xb4>
 8005564:	616b      	str	r3, [r5, #20]
 8005566:	612b      	str	r3, [r5, #16]
 8005568:	2201      	movs	r2, #1
 800556a:	60d9      	str	r1, [r3, #12]
 800556c:	6099      	str	r1, [r3, #8]
 800556e:	e002      	b.n	8005576 <_free_r+0xba>
 8005570:	68fe      	ldr	r6, [r7, #12]
 8005572:	60ce      	str	r6, [r1, #12]
 8005574:	60b1      	str	r1, [r6, #8]
 8005576:	f040 0101 	orr.w	r1, r0, #1
 800557a:	6059      	str	r1, [r3, #4]
 800557c:	5018      	str	r0, [r3, r0]
 800557e:	2a00      	cmp	r2, #0
 8005580:	d1cc      	bne.n	800551c <_free_r+0x60>
 8005582:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005586:	d212      	bcs.n	80055ae <_free_r+0xf2>
 8005588:	08c0      	lsrs	r0, r0, #3
 800558a:	1081      	asrs	r1, r0, #2
 800558c:	2201      	movs	r2, #1
 800558e:	fa02 f101 	lsl.w	r1, r2, r1
 8005592:	686a      	ldr	r2, [r5, #4]
 8005594:	3001      	adds	r0, #1
 8005596:	430a      	orrs	r2, r1
 8005598:	606a      	str	r2, [r5, #4]
 800559a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800559e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80055a2:	3a08      	subs	r2, #8
 80055a4:	60da      	str	r2, [r3, #12]
 80055a6:	6099      	str	r1, [r3, #8]
 80055a8:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80055ac:	e038      	b.n	8005620 <_free_r+0x164>
 80055ae:	0a42      	lsrs	r2, r0, #9
 80055b0:	2a04      	cmp	r2, #4
 80055b2:	d802      	bhi.n	80055ba <_free_r+0xfe>
 80055b4:	0982      	lsrs	r2, r0, #6
 80055b6:	3238      	adds	r2, #56	; 0x38
 80055b8:	e015      	b.n	80055e6 <_free_r+0x12a>
 80055ba:	2a14      	cmp	r2, #20
 80055bc:	d801      	bhi.n	80055c2 <_free_r+0x106>
 80055be:	325b      	adds	r2, #91	; 0x5b
 80055c0:	e011      	b.n	80055e6 <_free_r+0x12a>
 80055c2:	2a54      	cmp	r2, #84	; 0x54
 80055c4:	d802      	bhi.n	80055cc <_free_r+0x110>
 80055c6:	0b02      	lsrs	r2, r0, #12
 80055c8:	326e      	adds	r2, #110	; 0x6e
 80055ca:	e00c      	b.n	80055e6 <_free_r+0x12a>
 80055cc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80055d0:	d802      	bhi.n	80055d8 <_free_r+0x11c>
 80055d2:	0bc2      	lsrs	r2, r0, #15
 80055d4:	3277      	adds	r2, #119	; 0x77
 80055d6:	e006      	b.n	80055e6 <_free_r+0x12a>
 80055d8:	f240 5154 	movw	r1, #1364	; 0x554
 80055dc:	428a      	cmp	r2, r1
 80055de:	bf9a      	itte	ls
 80055e0:	0c82      	lsrls	r2, r0, #18
 80055e2:	327c      	addls	r2, #124	; 0x7c
 80055e4:	227e      	movhi	r2, #126	; 0x7e
 80055e6:	1c51      	adds	r1, r2, #1
 80055e8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80055ec:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80055f0:	428e      	cmp	r6, r1
 80055f2:	4f0d      	ldr	r7, [pc, #52]	; (8005628 <_free_r+0x16c>)
 80055f4:	d10b      	bne.n	800560e <_free_r+0x152>
 80055f6:	2101      	movs	r1, #1
 80055f8:	1092      	asrs	r2, r2, #2
 80055fa:	fa01 f202 	lsl.w	r2, r1, r2
 80055fe:	6879      	ldr	r1, [r7, #4]
 8005600:	4311      	orrs	r1, r2
 8005602:	6079      	str	r1, [r7, #4]
 8005604:	4631      	mov	r1, r6
 8005606:	e008      	b.n	800561a <_free_r+0x15e>
 8005608:	6889      	ldr	r1, [r1, #8]
 800560a:	428e      	cmp	r6, r1
 800560c:	d004      	beq.n	8005618 <_free_r+0x15c>
 800560e:	684a      	ldr	r2, [r1, #4]
 8005610:	f022 0203 	bic.w	r2, r2, #3
 8005614:	4290      	cmp	r0, r2
 8005616:	d3f7      	bcc.n	8005608 <_free_r+0x14c>
 8005618:	68ce      	ldr	r6, [r1, #12]
 800561a:	60de      	str	r6, [r3, #12]
 800561c:	6099      	str	r1, [r3, #8]
 800561e:	60b3      	str	r3, [r6, #8]
 8005620:	60cb      	str	r3, [r1, #12]
 8005622:	e77b      	b.n	800551c <_free_r+0x60>
 8005624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005628:	200005f0 	.word	0x200005f0
 800562c:	200009f8 	.word	0x200009f8
 8005630:	20000b5c 	.word	0x20000b5c
 8005634:	200005f8 	.word	0x200005f8

08005638 <malloc>:
 8005638:	4b02      	ldr	r3, [pc, #8]	; (8005644 <malloc+0xc>)
 800563a:	4601      	mov	r1, r0
 800563c:	6818      	ldr	r0, [r3, #0]
 800563e:	f000 b803 	b.w	8005648 <_malloc_r>
 8005642:	bf00      	nop
 8005644:	200005ec 	.word	0x200005ec

08005648 <_malloc_r>:
 8005648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564c:	f101 040b 	add.w	r4, r1, #11
 8005650:	2c16      	cmp	r4, #22
 8005652:	b085      	sub	sp, #20
 8005654:	4681      	mov	r9, r0
 8005656:	d903      	bls.n	8005660 <_malloc_r+0x18>
 8005658:	f034 0407 	bics.w	r4, r4, #7
 800565c:	d501      	bpl.n	8005662 <_malloc_r+0x1a>
 800565e:	e002      	b.n	8005666 <_malloc_r+0x1e>
 8005660:	2410      	movs	r4, #16
 8005662:	428c      	cmp	r4, r1
 8005664:	d203      	bcs.n	800566e <_malloc_r+0x26>
 8005666:	230c      	movs	r3, #12
 8005668:	f8c9 3000 	str.w	r3, [r9]
 800566c:	e1e7      	b.n	8005a3e <_malloc_r+0x3f6>
 800566e:	4648      	mov	r0, r9
 8005670:	f000 fa06 	bl	8005a80 <__malloc_lock>
 8005674:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8005678:	4d9d      	ldr	r5, [pc, #628]	; (80058f0 <_malloc_r+0x2a8>)
 800567a:	d217      	bcs.n	80056ac <_malloc_r+0x64>
 800567c:	f104 0208 	add.w	r2, r4, #8
 8005680:	442a      	add	r2, r5
 8005682:	6856      	ldr	r6, [r2, #4]
 8005684:	f1a2 0108 	sub.w	r1, r2, #8
 8005688:	428e      	cmp	r6, r1
 800568a:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800568e:	d102      	bne.n	8005696 <_malloc_r+0x4e>
 8005690:	68d6      	ldr	r6, [r2, #12]
 8005692:	42b2      	cmp	r2, r6
 8005694:	d008      	beq.n	80056a8 <_malloc_r+0x60>
 8005696:	6873      	ldr	r3, [r6, #4]
 8005698:	68f2      	ldr	r2, [r6, #12]
 800569a:	68b1      	ldr	r1, [r6, #8]
 800569c:	f023 0303 	bic.w	r3, r3, #3
 80056a0:	60ca      	str	r2, [r1, #12]
 80056a2:	4433      	add	r3, r6
 80056a4:	6091      	str	r1, [r2, #8]
 80056a6:	e02f      	b.n	8005708 <_malloc_r+0xc0>
 80056a8:	3302      	adds	r3, #2
 80056aa:	e03d      	b.n	8005728 <_malloc_r+0xe0>
 80056ac:	0a63      	lsrs	r3, r4, #9
 80056ae:	d01a      	beq.n	80056e6 <_malloc_r+0x9e>
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	d802      	bhi.n	80056ba <_malloc_r+0x72>
 80056b4:	09a3      	lsrs	r3, r4, #6
 80056b6:	3338      	adds	r3, #56	; 0x38
 80056b8:	e018      	b.n	80056ec <_malloc_r+0xa4>
 80056ba:	2b14      	cmp	r3, #20
 80056bc:	d801      	bhi.n	80056c2 <_malloc_r+0x7a>
 80056be:	335b      	adds	r3, #91	; 0x5b
 80056c0:	e014      	b.n	80056ec <_malloc_r+0xa4>
 80056c2:	2b54      	cmp	r3, #84	; 0x54
 80056c4:	d802      	bhi.n	80056cc <_malloc_r+0x84>
 80056c6:	0b23      	lsrs	r3, r4, #12
 80056c8:	336e      	adds	r3, #110	; 0x6e
 80056ca:	e00f      	b.n	80056ec <_malloc_r+0xa4>
 80056cc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80056d0:	d802      	bhi.n	80056d8 <_malloc_r+0x90>
 80056d2:	0be3      	lsrs	r3, r4, #15
 80056d4:	3377      	adds	r3, #119	; 0x77
 80056d6:	e009      	b.n	80056ec <_malloc_r+0xa4>
 80056d8:	f240 5254 	movw	r2, #1364	; 0x554
 80056dc:	4293      	cmp	r3, r2
 80056de:	d804      	bhi.n	80056ea <_malloc_r+0xa2>
 80056e0:	0ca3      	lsrs	r3, r4, #18
 80056e2:	337c      	adds	r3, #124	; 0x7c
 80056e4:	e002      	b.n	80056ec <_malloc_r+0xa4>
 80056e6:	233f      	movs	r3, #63	; 0x3f
 80056e8:	e000      	b.n	80056ec <_malloc_r+0xa4>
 80056ea:	237e      	movs	r3, #126	; 0x7e
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80056f2:	f1a2 0008 	sub.w	r0, r2, #8
 80056f6:	6856      	ldr	r6, [r2, #4]
 80056f8:	e00c      	b.n	8005714 <_malloc_r+0xcc>
 80056fa:	2900      	cmp	r1, #0
 80056fc:	68f1      	ldr	r1, [r6, #12]
 80056fe:	db08      	blt.n	8005712 <_malloc_r+0xca>
 8005700:	68b3      	ldr	r3, [r6, #8]
 8005702:	60d9      	str	r1, [r3, #12]
 8005704:	608b      	str	r3, [r1, #8]
 8005706:	18b3      	adds	r3, r6, r2
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	f042 0201 	orr.w	r2, r2, #1
 800570e:	605a      	str	r2, [r3, #4]
 8005710:	e1a0      	b.n	8005a54 <_malloc_r+0x40c>
 8005712:	460e      	mov	r6, r1
 8005714:	4286      	cmp	r6, r0
 8005716:	d006      	beq.n	8005726 <_malloc_r+0xde>
 8005718:	6872      	ldr	r2, [r6, #4]
 800571a:	f022 0203 	bic.w	r2, r2, #3
 800571e:	1b11      	subs	r1, r2, r4
 8005720:	290f      	cmp	r1, #15
 8005722:	ddea      	ble.n	80056fa <_malloc_r+0xb2>
 8005724:	3b01      	subs	r3, #1
 8005726:	3301      	adds	r3, #1
 8005728:	4a71      	ldr	r2, [pc, #452]	; (80058f0 <_malloc_r+0x2a8>)
 800572a:	692e      	ldr	r6, [r5, #16]
 800572c:	f102 0708 	add.w	r7, r2, #8
 8005730:	42be      	cmp	r6, r7
 8005732:	4639      	mov	r1, r7
 8005734:	d079      	beq.n	800582a <_malloc_r+0x1e2>
 8005736:	6870      	ldr	r0, [r6, #4]
 8005738:	f020 0003 	bic.w	r0, r0, #3
 800573c:	ebc4 0e00 	rsb	lr, r4, r0
 8005740:	f1be 0f0f 	cmp.w	lr, #15
 8005744:	dd0d      	ble.n	8005762 <_malloc_r+0x11a>
 8005746:	1933      	adds	r3, r6, r4
 8005748:	f044 0401 	orr.w	r4, r4, #1
 800574c:	6074      	str	r4, [r6, #4]
 800574e:	6153      	str	r3, [r2, #20]
 8005750:	6113      	str	r3, [r2, #16]
 8005752:	f04e 0201 	orr.w	r2, lr, #1
 8005756:	60df      	str	r7, [r3, #12]
 8005758:	609f      	str	r7, [r3, #8]
 800575a:	605a      	str	r2, [r3, #4]
 800575c:	f843 e00e 	str.w	lr, [r3, lr]
 8005760:	e178      	b.n	8005a54 <_malloc_r+0x40c>
 8005762:	f1be 0f00 	cmp.w	lr, #0
 8005766:	6157      	str	r7, [r2, #20]
 8005768:	6117      	str	r7, [r2, #16]
 800576a:	db05      	blt.n	8005778 <_malloc_r+0x130>
 800576c:	4430      	add	r0, r6
 800576e:	6843      	ldr	r3, [r0, #4]
 8005770:	f043 0301 	orr.w	r3, r3, #1
 8005774:	6043      	str	r3, [r0, #4]
 8005776:	e16d      	b.n	8005a54 <_malloc_r+0x40c>
 8005778:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800577c:	d215      	bcs.n	80057aa <_malloc_r+0x162>
 800577e:	08c0      	lsrs	r0, r0, #3
 8005780:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8005784:	2701      	movs	r7, #1
 8005786:	fa07 fe0e 	lsl.w	lr, r7, lr
 800578a:	6857      	ldr	r7, [r2, #4]
 800578c:	3001      	adds	r0, #1
 800578e:	ea4e 0707 	orr.w	r7, lr, r7
 8005792:	6057      	str	r7, [r2, #4]
 8005794:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8005798:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 800579c:	3f08      	subs	r7, #8
 800579e:	60f7      	str	r7, [r6, #12]
 80057a0:	f8c6 e008 	str.w	lr, [r6, #8]
 80057a4:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 80057a8:	e03d      	b.n	8005826 <_malloc_r+0x1de>
 80057aa:	0a42      	lsrs	r2, r0, #9
 80057ac:	2a04      	cmp	r2, #4
 80057ae:	d802      	bhi.n	80057b6 <_malloc_r+0x16e>
 80057b0:	0982      	lsrs	r2, r0, #6
 80057b2:	3238      	adds	r2, #56	; 0x38
 80057b4:	e015      	b.n	80057e2 <_malloc_r+0x19a>
 80057b6:	2a14      	cmp	r2, #20
 80057b8:	d801      	bhi.n	80057be <_malloc_r+0x176>
 80057ba:	325b      	adds	r2, #91	; 0x5b
 80057bc:	e011      	b.n	80057e2 <_malloc_r+0x19a>
 80057be:	2a54      	cmp	r2, #84	; 0x54
 80057c0:	d802      	bhi.n	80057c8 <_malloc_r+0x180>
 80057c2:	0b02      	lsrs	r2, r0, #12
 80057c4:	326e      	adds	r2, #110	; 0x6e
 80057c6:	e00c      	b.n	80057e2 <_malloc_r+0x19a>
 80057c8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80057cc:	d802      	bhi.n	80057d4 <_malloc_r+0x18c>
 80057ce:	0bc2      	lsrs	r2, r0, #15
 80057d0:	3277      	adds	r2, #119	; 0x77
 80057d2:	e006      	b.n	80057e2 <_malloc_r+0x19a>
 80057d4:	f240 5754 	movw	r7, #1364	; 0x554
 80057d8:	42ba      	cmp	r2, r7
 80057da:	bf9a      	itte	ls
 80057dc:	0c82      	lsrls	r2, r0, #18
 80057de:	327c      	addls	r2, #124	; 0x7c
 80057e0:	227e      	movhi	r2, #126	; 0x7e
 80057e2:	1c57      	adds	r7, r2, #1
 80057e4:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80057e8:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80057ec:	45be      	cmp	lr, r7
 80057ee:	f8df c100 	ldr.w	ip, [pc, #256]	; 80058f0 <_malloc_r+0x2a8>
 80057f2:	d10d      	bne.n	8005810 <_malloc_r+0x1c8>
 80057f4:	2001      	movs	r0, #1
 80057f6:	1092      	asrs	r2, r2, #2
 80057f8:	fa00 f202 	lsl.w	r2, r0, r2
 80057fc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8005800:	4310      	orrs	r0, r2
 8005802:	f8cc 0004 	str.w	r0, [ip, #4]
 8005806:	4672      	mov	r2, lr
 8005808:	e009      	b.n	800581e <_malloc_r+0x1d6>
 800580a:	68bf      	ldr	r7, [r7, #8]
 800580c:	45be      	cmp	lr, r7
 800580e:	d004      	beq.n	800581a <_malloc_r+0x1d2>
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	f022 0203 	bic.w	r2, r2, #3
 8005816:	4290      	cmp	r0, r2
 8005818:	d3f7      	bcc.n	800580a <_malloc_r+0x1c2>
 800581a:	46be      	mov	lr, r7
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	60f2      	str	r2, [r6, #12]
 8005820:	f8c6 e008 	str.w	lr, [r6, #8]
 8005824:	6096      	str	r6, [r2, #8]
 8005826:	f8ce 600c 	str.w	r6, [lr, #12]
 800582a:	2001      	movs	r0, #1
 800582c:	109a      	asrs	r2, r3, #2
 800582e:	fa00 f202 	lsl.w	r2, r0, r2
 8005832:	6868      	ldr	r0, [r5, #4]
 8005834:	4282      	cmp	r2, r0
 8005836:	d85d      	bhi.n	80058f4 <_malloc_r+0x2ac>
 8005838:	4202      	tst	r2, r0
 800583a:	d106      	bne.n	800584a <_malloc_r+0x202>
 800583c:	f023 0303 	bic.w	r3, r3, #3
 8005840:	0052      	lsls	r2, r2, #1
 8005842:	4202      	tst	r2, r0
 8005844:	f103 0304 	add.w	r3, r3, #4
 8005848:	d0fa      	beq.n	8005840 <_malloc_r+0x1f8>
 800584a:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 800584e:	46c2      	mov	sl, r8
 8005850:	469c      	mov	ip, r3
 8005852:	f8da 600c 	ldr.w	r6, [sl, #12]
 8005856:	4556      	cmp	r6, sl
 8005858:	d02c      	beq.n	80058b4 <_malloc_r+0x26c>
 800585a:	6870      	ldr	r0, [r6, #4]
 800585c:	68f7      	ldr	r7, [r6, #12]
 800585e:	f020 0003 	bic.w	r0, r0, #3
 8005862:	ebc4 0e00 	rsb	lr, r4, r0
 8005866:	f1be 0f0f 	cmp.w	lr, #15
 800586a:	dd11      	ble.n	8005890 <_malloc_r+0x248>
 800586c:	1933      	adds	r3, r6, r4
 800586e:	f044 0401 	orr.w	r4, r4, #1
 8005872:	6074      	str	r4, [r6, #4]
 8005874:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8005878:	60d7      	str	r7, [r2, #12]
 800587a:	60ba      	str	r2, [r7, #8]
 800587c:	f04e 0201 	orr.w	r2, lr, #1
 8005880:	616b      	str	r3, [r5, #20]
 8005882:	612b      	str	r3, [r5, #16]
 8005884:	60d9      	str	r1, [r3, #12]
 8005886:	6099      	str	r1, [r3, #8]
 8005888:	605a      	str	r2, [r3, #4]
 800588a:	f843 e00e 	str.w	lr, [r3, lr]
 800588e:	e00b      	b.n	80058a8 <_malloc_r+0x260>
 8005890:	f1be 0f00 	cmp.w	lr, #0
 8005894:	db0c      	blt.n	80058b0 <_malloc_r+0x268>
 8005896:	1833      	adds	r3, r6, r0
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	f042 0201 	orr.w	r2, r2, #1
 800589e:	605a      	str	r2, [r3, #4]
 80058a0:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80058a4:	60df      	str	r7, [r3, #12]
 80058a6:	60bb      	str	r3, [r7, #8]
 80058a8:	4648      	mov	r0, r9
 80058aa:	f000 f8ea 	bl	8005a82 <__malloc_unlock>
 80058ae:	e0d5      	b.n	8005a5c <_malloc_r+0x414>
 80058b0:	463e      	mov	r6, r7
 80058b2:	e7d0      	b.n	8005856 <_malloc_r+0x20e>
 80058b4:	f10c 0c01 	add.w	ip, ip, #1
 80058b8:	f01c 0f03 	tst.w	ip, #3
 80058bc:	f10a 0a08 	add.w	sl, sl, #8
 80058c0:	d1c7      	bne.n	8005852 <_malloc_r+0x20a>
 80058c2:	0798      	lsls	r0, r3, #30
 80058c4:	d104      	bne.n	80058d0 <_malloc_r+0x288>
 80058c6:	686b      	ldr	r3, [r5, #4]
 80058c8:	ea23 0302 	bic.w	r3, r3, r2
 80058cc:	606b      	str	r3, [r5, #4]
 80058ce:	e004      	b.n	80058da <_malloc_r+0x292>
 80058d0:	f858 0908 	ldr.w	r0, [r8], #-8
 80058d4:	3b01      	subs	r3, #1
 80058d6:	4580      	cmp	r8, r0
 80058d8:	d0f3      	beq.n	80058c2 <_malloc_r+0x27a>
 80058da:	6868      	ldr	r0, [r5, #4]
 80058dc:	0052      	lsls	r2, r2, #1
 80058de:	4282      	cmp	r2, r0
 80058e0:	d808      	bhi.n	80058f4 <_malloc_r+0x2ac>
 80058e2:	b13a      	cbz	r2, 80058f4 <_malloc_r+0x2ac>
 80058e4:	4663      	mov	r3, ip
 80058e6:	4202      	tst	r2, r0
 80058e8:	d1af      	bne.n	800584a <_malloc_r+0x202>
 80058ea:	3304      	adds	r3, #4
 80058ec:	0052      	lsls	r2, r2, #1
 80058ee:	e7fa      	b.n	80058e6 <_malloc_r+0x29e>
 80058f0:	200005f0 	.word	0x200005f0
 80058f4:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80058f8:	f8db 6004 	ldr.w	r6, [fp, #4]
 80058fc:	f026 0603 	bic.w	r6, r6, #3
 8005900:	42b4      	cmp	r4, r6
 8005902:	d803      	bhi.n	800590c <_malloc_r+0x2c4>
 8005904:	1b33      	subs	r3, r6, r4
 8005906:	2b0f      	cmp	r3, #15
 8005908:	f300 809b 	bgt.w	8005a42 <_malloc_r+0x3fa>
 800590c:	4a55      	ldr	r2, [pc, #340]	; (8005a64 <_malloc_r+0x41c>)
 800590e:	4956      	ldr	r1, [pc, #344]	; (8005a68 <_malloc_r+0x420>)
 8005910:	6812      	ldr	r2, [r2, #0]
 8005912:	6808      	ldr	r0, [r1, #0]
 8005914:	f102 0810 	add.w	r8, r2, #16
 8005918:	4a54      	ldr	r2, [pc, #336]	; (8005a6c <_malloc_r+0x424>)
 800591a:	3001      	adds	r0, #1
 800591c:	9101      	str	r1, [sp, #4]
 800591e:	44a0      	add	r8, r4
 8005920:	bf1f      	itttt	ne
 8005922:	f102 31ff 	addne.w	r1, r2, #4294967295
 8005926:	4488      	addne	r8, r1
 8005928:	4251      	negne	r1, r2
 800592a:	ea01 0808 	andne.w	r8, r1, r8
 800592e:	eb0b 0306 	add.w	r3, fp, r6
 8005932:	4641      	mov	r1, r8
 8005934:	4648      	mov	r0, r9
 8005936:	9203      	str	r2, [sp, #12]
 8005938:	9302      	str	r3, [sp, #8]
 800593a:	f000 f8a3 	bl	8005a84 <_sbrk_r>
 800593e:	1c42      	adds	r2, r0, #1
 8005940:	4607      	mov	r7, r0
 8005942:	d06f      	beq.n	8005a24 <_malloc_r+0x3dc>
 8005944:	9b02      	ldr	r3, [sp, #8]
 8005946:	9a03      	ldr	r2, [sp, #12]
 8005948:	4283      	cmp	r3, r0
 800594a:	d901      	bls.n	8005950 <_malloc_r+0x308>
 800594c:	45ab      	cmp	fp, r5
 800594e:	d169      	bne.n	8005a24 <_malloc_r+0x3dc>
 8005950:	f8df a124 	ldr.w	sl, [pc, #292]	; 8005a78 <_malloc_r+0x430>
 8005954:	42bb      	cmp	r3, r7
 8005956:	f8da 0000 	ldr.w	r0, [sl]
 800595a:	f8df c120 	ldr.w	ip, [pc, #288]	; 8005a7c <_malloc_r+0x434>
 800595e:	4440      	add	r0, r8
 8005960:	f8ca 0000 	str.w	r0, [sl]
 8005964:	d108      	bne.n	8005978 <_malloc_r+0x330>
 8005966:	ea13 0f0c 	tst.w	r3, ip
 800596a:	d105      	bne.n	8005978 <_malloc_r+0x330>
 800596c:	68ab      	ldr	r3, [r5, #8]
 800596e:	4446      	add	r6, r8
 8005970:	f046 0601 	orr.w	r6, r6, #1
 8005974:	605e      	str	r6, [r3, #4]
 8005976:	e049      	b.n	8005a0c <_malloc_r+0x3c4>
 8005978:	9901      	ldr	r1, [sp, #4]
 800597a:	f8d1 e000 	ldr.w	lr, [r1]
 800597e:	f1be 3fff 	cmp.w	lr, #4294967295
 8005982:	bf15      	itete	ne
 8005984:	1afb      	subne	r3, r7, r3
 8005986:	4b38      	ldreq	r3, [pc, #224]	; (8005a68 <_malloc_r+0x420>)
 8005988:	181b      	addne	r3, r3, r0
 800598a:	601f      	streq	r7, [r3, #0]
 800598c:	bf18      	it	ne
 800598e:	f8ca 3000 	strne.w	r3, [sl]
 8005992:	f017 0307 	ands.w	r3, r7, #7
 8005996:	bf1c      	itt	ne
 8005998:	f1c3 0308 	rsbne	r3, r3, #8
 800599c:	18ff      	addne	r7, r7, r3
 800599e:	44b8      	add	r8, r7
 80059a0:	441a      	add	r2, r3
 80059a2:	ea08 080c 	and.w	r8, r8, ip
 80059a6:	ebc8 0802 	rsb	r8, r8, r2
 80059aa:	4641      	mov	r1, r8
 80059ac:	4648      	mov	r0, r9
 80059ae:	f000 f869 	bl	8005a84 <_sbrk_r>
 80059b2:	1c43      	adds	r3, r0, #1
 80059b4:	bf04      	itt	eq
 80059b6:	4638      	moveq	r0, r7
 80059b8:	f04f 0800 	moveq.w	r8, #0
 80059bc:	f8da 3000 	ldr.w	r3, [sl]
 80059c0:	1bc2      	subs	r2, r0, r7
 80059c2:	4442      	add	r2, r8
 80059c4:	4443      	add	r3, r8
 80059c6:	f042 0201 	orr.w	r2, r2, #1
 80059ca:	45ab      	cmp	fp, r5
 80059cc:	60af      	str	r7, [r5, #8]
 80059ce:	f8ca 3000 	str.w	r3, [sl]
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	d01a      	beq.n	8005a0c <_malloc_r+0x3c4>
 80059d6:	2e0f      	cmp	r6, #15
 80059d8:	d802      	bhi.n	80059e0 <_malloc_r+0x398>
 80059da:	2301      	movs	r3, #1
 80059dc:	607b      	str	r3, [r7, #4]
 80059de:	e021      	b.n	8005a24 <_malloc_r+0x3dc>
 80059e0:	f8db 3004 	ldr.w	r3, [fp, #4]
 80059e4:	3e0c      	subs	r6, #12
 80059e6:	f026 0607 	bic.w	r6, r6, #7
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	4333      	orrs	r3, r6
 80059f0:	f8cb 3004 	str.w	r3, [fp, #4]
 80059f4:	2205      	movs	r2, #5
 80059f6:	eb0b 0306 	add.w	r3, fp, r6
 80059fa:	2e0f      	cmp	r6, #15
 80059fc:	605a      	str	r2, [r3, #4]
 80059fe:	609a      	str	r2, [r3, #8]
 8005a00:	d904      	bls.n	8005a0c <_malloc_r+0x3c4>
 8005a02:	f10b 0108 	add.w	r1, fp, #8
 8005a06:	4648      	mov	r0, r9
 8005a08:	f7ff fd58 	bl	80054bc <_free_r>
 8005a0c:	4a18      	ldr	r2, [pc, #96]	; (8005a70 <_malloc_r+0x428>)
 8005a0e:	f8da 3000 	ldr.w	r3, [sl]
 8005a12:	6811      	ldr	r1, [r2, #0]
 8005a14:	428b      	cmp	r3, r1
 8005a16:	bf88      	it	hi
 8005a18:	6013      	strhi	r3, [r2, #0]
 8005a1a:	4a16      	ldr	r2, [pc, #88]	; (8005a74 <_malloc_r+0x42c>)
 8005a1c:	6811      	ldr	r1, [r2, #0]
 8005a1e:	428b      	cmp	r3, r1
 8005a20:	bf88      	it	hi
 8005a22:	6013      	strhi	r3, [r2, #0]
 8005a24:	68ab      	ldr	r3, [r5, #8]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	f022 0203 	bic.w	r2, r2, #3
 8005a2c:	4294      	cmp	r4, r2
 8005a2e:	eba2 0304 	sub.w	r3, r2, r4
 8005a32:	d801      	bhi.n	8005a38 <_malloc_r+0x3f0>
 8005a34:	2b0f      	cmp	r3, #15
 8005a36:	dc04      	bgt.n	8005a42 <_malloc_r+0x3fa>
 8005a38:	4648      	mov	r0, r9
 8005a3a:	f000 f822 	bl	8005a82 <__malloc_unlock>
 8005a3e:	2600      	movs	r6, #0
 8005a40:	e00c      	b.n	8005a5c <_malloc_r+0x414>
 8005a42:	68ae      	ldr	r6, [r5, #8]
 8005a44:	f044 0201 	orr.w	r2, r4, #1
 8005a48:	f043 0301 	orr.w	r3, r3, #1
 8005a4c:	4434      	add	r4, r6
 8005a4e:	6072      	str	r2, [r6, #4]
 8005a50:	60ac      	str	r4, [r5, #8]
 8005a52:	6063      	str	r3, [r4, #4]
 8005a54:	4648      	mov	r0, r9
 8005a56:	f000 f814 	bl	8005a82 <__malloc_unlock>
 8005a5a:	3608      	adds	r6, #8
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	b005      	add	sp, #20
 8005a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a64:	20000b5c 	.word	0x20000b5c
 8005a68:	200009fc 	.word	0x200009fc
 8005a6c:	00000080 	.word	0x00000080
 8005a70:	20000b58 	.word	0x20000b58
 8005a74:	20000b54 	.word	0x20000b54
 8005a78:	20000b60 	.word	0x20000b60
 8005a7c:	0000007f 	.word	0x0000007f

08005a80 <__malloc_lock>:
 8005a80:	4770      	bx	lr

08005a82 <__malloc_unlock>:
 8005a82:	4770      	bx	lr

08005a84 <_sbrk_r>:
 8005a84:	b538      	push	{r3, r4, r5, lr}
 8005a86:	4c06      	ldr	r4, [pc, #24]	; (8005aa0 <_sbrk_r+0x1c>)
 8005a88:	2300      	movs	r3, #0
 8005a8a:	4605      	mov	r5, r0
 8005a8c:	4608      	mov	r0, r1
 8005a8e:	6023      	str	r3, [r4, #0]
 8005a90:	f7fd fbda 	bl	8003248 <_sbrk>
 8005a94:	1c43      	adds	r3, r0, #1
 8005a96:	d102      	bne.n	8005a9e <_sbrk_r+0x1a>
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	b103      	cbz	r3, 8005a9e <_sbrk_r+0x1a>
 8005a9c:	602b      	str	r3, [r5, #0]
 8005a9e:	bd38      	pop	{r3, r4, r5, pc}
 8005aa0:	200013dc 	.word	0x200013dc

08005aa4 <_init>:
 8005aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa6:	bf00      	nop
 8005aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aaa:	bc08      	pop	{r3}
 8005aac:	469e      	mov	lr, r3
 8005aae:	4770      	bx	lr

08005ab0 <_fini>:
 8005ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab2:	bf00      	nop
 8005ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab6:	bc08      	pop	{r3}
 8005ab8:	469e      	mov	lr, r3
 8005aba:	4770      	bx	lr

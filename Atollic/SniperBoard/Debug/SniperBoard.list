
D:\Development\STM32\Atollic\SniperBoard\Debug\SniperBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000683c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f8  08006948  08006948  00016948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007340  08007340  00017340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007344  08007344  00017344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000b60  20000000  08007348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000efc  20000b60  08007ea8  00020b60  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20001a5c  08007ea8  00021a5c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020b60  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012ae9  00000000  00000000  00020b89  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000368b  00000000  00000000  00033672  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000092f1  00000000  00000000  00036cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001198  00000000  00000000  0003fff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000fc8  00000000  00000000  00041188  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000680a  00000000  00000000  00042150  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000482c  00000000  00000000  0004895a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0004d186  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002c40  00000000  00000000  0004d204  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000b60 	.word	0x20000b60
 8000128:	00000000 	.word	0x00000000
 800012c:	08006930 	.word	0x08006930

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000b64 	.word	0x20000b64
 8000148:	08006930 	.word	0x08006930

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000218:	f1a2 0201 	sub.w	r2, r2, #1
 800021c:	d1ed      	bne.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__gesf2>:
 8000618:	f04f 3cff 	mov.w	ip, #4294967295
 800061c:	e006      	b.n	800062c <__cmpsf2+0x4>
 800061e:	bf00      	nop

08000620 <__lesf2>:
 8000620:	f04f 0c01 	mov.w	ip, #1
 8000624:	e002      	b.n	800062c <__cmpsf2+0x4>
 8000626:	bf00      	nop

08000628 <__cmpsf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000630:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000634:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000638:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800063c:	bf18      	it	ne
 800063e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000642:	d011      	beq.n	8000668 <__cmpsf2+0x40>
 8000644:	b001      	add	sp, #4
 8000646:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064a:	bf18      	it	ne
 800064c:	ea90 0f01 	teqne	r0, r1
 8000650:	bf58      	it	pl
 8000652:	ebb2 0003 	subspl.w	r0, r2, r3
 8000656:	bf88      	it	hi
 8000658:	17c8      	asrhi	r0, r1, #31
 800065a:	bf38      	it	cc
 800065c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000660:	bf18      	it	ne
 8000662:	f040 0001 	orrne.w	r0, r0, #1
 8000666:	4770      	bx	lr
 8000668:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800066c:	d102      	bne.n	8000674 <__cmpsf2+0x4c>
 800066e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000672:	d105      	bne.n	8000680 <__cmpsf2+0x58>
 8000674:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000678:	d1e4      	bne.n	8000644 <__cmpsf2+0x1c>
 800067a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800067e:	d0e1      	beq.n	8000644 <__cmpsf2+0x1c>
 8000680:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <__aeabi_cfrcmple>:
 8000688:	4684      	mov	ip, r0
 800068a:	4608      	mov	r0, r1
 800068c:	4661      	mov	r1, ip
 800068e:	e7ff      	b.n	8000690 <__aeabi_cfcmpeq>

08000690 <__aeabi_cfcmpeq>:
 8000690:	b50f      	push	{r0, r1, r2, r3, lr}
 8000692:	f7ff ffc9 	bl	8000628 <__cmpsf2>
 8000696:	2800      	cmp	r0, #0
 8000698:	bf48      	it	mi
 800069a:	f110 0f00 	cmnmi.w	r0, #0
 800069e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a0 <__aeabi_fcmpeq>:
 80006a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a4:	f7ff fff4 	bl	8000690 <__aeabi_cfcmpeq>
 80006a8:	bf0c      	ite	eq
 80006aa:	2001      	moveq	r0, #1
 80006ac:	2000      	movne	r0, #0
 80006ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b2:	bf00      	nop

080006b4 <__aeabi_fcmplt>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff ffea 	bl	8000690 <__aeabi_cfcmpeq>
 80006bc:	bf34      	ite	cc
 80006be:	2001      	movcc	r0, #1
 80006c0:	2000      	movcs	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmple>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffe0 	bl	8000690 <__aeabi_cfcmpeq>
 80006d0:	bf94      	ite	ls
 80006d2:	2001      	movls	r0, #1
 80006d4:	2000      	movhi	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmpge>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffd2 	bl	8000688 <__aeabi_cfrcmple>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpgt>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffc8 	bl	8000688 <__aeabi_cfrcmple>
 80006f8:	bf34      	ite	cc
 80006fa:	2001      	movcc	r0, #1
 80006fc:	2000      	movcs	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_f2uiz>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	d20e      	bcs.n	8000726 <__aeabi_f2uiz+0x22>
 8000708:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800070c:	d30b      	bcc.n	8000726 <__aeabi_f2uiz+0x22>
 800070e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000712:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000716:	d409      	bmi.n	800072c <__aeabi_f2uiz+0x28>
 8000718:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800071c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000720:	fa23 f002 	lsr.w	r0, r3, r2
 8000724:	4770      	bx	lr
 8000726:	f04f 0000 	mov.w	r0, #0
 800072a:	4770      	bx	lr
 800072c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000730:	d101      	bne.n	8000736 <__aeabi_f2uiz+0x32>
 8000732:	0242      	lsls	r2, r0, #9
 8000734:	d102      	bne.n	800073c <__aeabi_f2uiz+0x38>
 8000736:	f04f 30ff 	mov.w	r0, #4294967295
 800073a:	4770      	bx	lr
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop

08000744 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000744:	78c3      	ldrb	r3, [r0, #3]
 8000746:	b1fb      	cbz	r3, 8000788 <NVIC_Init+0x44>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <NVIC_Init+0x5c>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	43db      	mvns	r3, r3
 800074e:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 8000752:	f1c3 0104 	rsb	r1, r3, #4
    tmpsub = tmpsub >> tmppriority;
 8000756:	220f      	movs	r2, #15
 8000758:	40da      	lsrs	r2, r3

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800075a:	7843      	ldrb	r3, [r0, #1]
 800075c:	fa03 f101 	lsl.w	r1, r3, r1
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000760:	7883      	ldrb	r3, [r0, #2]
 8000762:	4013      	ands	r3, r2
 8000764:	430b      	orrs	r3, r1
    tmppriority = tmppriority << 0x04;
 8000766:	011b      	lsls	r3, r3, #4
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000768:	7802      	ldrb	r2, [r0, #0]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	490d      	ldr	r1, [pc, #52]	; (80007a4 <NVIC_Init+0x60>)
 800076e:	440a      	add	r2, r1
 8000770:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000774:	7803      	ldrb	r3, [r0, #0]
 8000776:	0958      	lsrs	r0, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000778:	f003 031f 	and.w	r3, r3, #31
 800077c:	2201      	movs	r2, #1
 800077e:	fa02 f303 	lsl.w	r3, r2, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000782:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
 8000786:	4770      	bx	lr
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000788:	7803      	ldrb	r3, [r0, #0]
 800078a:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800078c:	f003 031f 	and.w	r3, r3, #31
 8000790:	2101      	movs	r1, #1
 8000792:	fa01 f303 	lsl.w	r3, r1, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000796:	3220      	adds	r2, #32
 8000798:	4902      	ldr	r1, [pc, #8]	; (80007a4 <NVIC_Init+0x60>)
 800079a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800079e:	4770      	bx	lr
 80007a0:	e000ed00 	.word	0xe000ed00
 80007a4:	e000e100 	.word	0xe000e100

080007a8 <BKP_DeInit>:
  * @brief  Deinitializes the BKP peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void BKP_DeInit(void)
{
 80007a8:	b508      	push	{r3, lr}
  RCC_BackupResetCmd(ENABLE);
 80007aa:	2001      	movs	r0, #1
 80007ac:	f000 f924 	bl	80009f8 <RCC_BackupResetCmd>
  RCC_BackupResetCmd(DISABLE);
 80007b0:	2000      	movs	r0, #0
 80007b2:	f000 f921 	bl	80009f8 <RCC_BackupResetCmd>
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <BKP_WriteBackupRegister>:
  *   This parameter can be BKP_DRx where x:[1, 42]
  * @param  Data: data to write
  * @retval None
  */
void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data)
{
 80007b8:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_BKP_DR(BKP_DR));

  tmp = (uint32_t)BKP_BASE; 
 80007be:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <BKP_WriteBackupRegister+0x18>)
 80007c0:	9301      	str	r3, [sp, #4]
  tmp += BKP_DR;
 80007c2:	9b01      	ldr	r3, [sp, #4]
 80007c4:	4418      	add	r0, r3
 80007c6:	9001      	str	r0, [sp, #4]

  *(__IO uint32_t *) tmp = Data;
 80007c8:	9b01      	ldr	r3, [sp, #4]
 80007ca:	6019      	str	r1, [r3, #0]
}
 80007cc:	b002      	add	sp, #8
 80007ce:	4770      	bx	lr
 80007d0:	40006c00 	.word	0x40006c00

080007d4 <BKP_ReadBackupRegister>:
  * @param  BKP_DR: specifies the Data Backup Register.
  *   This parameter can be BKP_DRx where x:[1, 42]
  * @retval The content of the specified Data Backup Register
  */
uint16_t BKP_ReadBackupRegister(uint16_t BKP_DR)
{
 80007d4:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_BKP_DR(BKP_DR));

  tmp = (uint32_t)BKP_BASE; 
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <BKP_ReadBackupRegister+0x1c>)
 80007dc:	9301      	str	r3, [sp, #4]
  tmp += BKP_DR;
 80007de:	9b01      	ldr	r3, [sp, #4]
 80007e0:	4418      	add	r0, r3
 80007e2:	9001      	str	r0, [sp, #4]

  return (*(__IO uint16_t *) tmp);
 80007e4:	9b01      	ldr	r3, [sp, #4]
 80007e6:	8818      	ldrh	r0, [r3, #0]
}
 80007e8:	b280      	uxth	r0, r0
 80007ea:	b002      	add	sp, #8
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40006c00 	.word	0x40006c00

080007f4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80007f4:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80007f6:	78cb      	ldrb	r3, [r1, #3]
 80007f8:	f003 020f 	and.w	r2, r3, #15
 80007fc:	4615      	mov	r5, r2
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80007fe:	f013 0f10 	tst.w	r3, #16
 8000802:	d001      	beq.n	8000808 <GPIO_Init+0x14>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000804:	788d      	ldrb	r5, [r1, #2]
 8000806:	4315      	orrs	r5, r2
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000808:	780b      	ldrb	r3, [r1, #0]
 800080a:	b1e3      	cbz	r3, 8000846 <GPIO_Init+0x52>
  {
    tmpreg = GPIOx->CRL;
 800080c:	6806      	ldr	r6, [r0, #0]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800080e:	2300      	movs	r3, #0
 8000810:	e016      	b.n	8000840 <GPIO_Init+0x4c>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000812:	2201      	movs	r2, #1
 8000814:	409a      	lsls	r2, r3
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000816:	880c      	ldrh	r4, [r1, #0]
      if (currentpin == pos)
 8000818:	ea32 0404 	bics.w	r4, r2, r4
 800081c:	d10f      	bne.n	800083e <GPIO_Init+0x4a>
      {
        pos = pinpos << 2;
 800081e:	009c      	lsls	r4, r3, #2
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000820:	270f      	movs	r7, #15
 8000822:	40a7      	lsls	r7, r4
        tmpreg &= ~pinmask;
 8000824:	ea26 0607 	bic.w	r6, r6, r7
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000828:	fa05 f404 	lsl.w	r4, r5, r4
 800082c:	4326      	orrs	r6, r4
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800082e:	78cc      	ldrb	r4, [r1, #3]
 8000830:	2c28      	cmp	r4, #40	; 0x28
 8000832:	d101      	bne.n	8000838 <GPIO_Init+0x44>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000834:	6142      	str	r2, [r0, #20]
 8000836:	e002      	b.n	800083e <GPIO_Init+0x4a>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000838:	2c48      	cmp	r4, #72	; 0x48
 800083a:	d100      	bne.n	800083e <GPIO_Init+0x4a>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800083c:	6102      	str	r2, [r0, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800083e:	3301      	adds	r3, #1
 8000840:	2b07      	cmp	r3, #7
 8000842:	d9e6      	bls.n	8000812 <GPIO_Init+0x1e>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000844:	6006      	str	r6, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000846:	880b      	ldrh	r3, [r1, #0]
 8000848:	2bff      	cmp	r3, #255	; 0xff
 800084a:	d91e      	bls.n	800088a <GPIO_Init+0x96>
  {
    tmpreg = GPIOx->CRH;
 800084c:	6846      	ldr	r6, [r0, #4]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800084e:	2300      	movs	r3, #0
 8000850:	e018      	b.n	8000884 <GPIO_Init+0x90>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000852:	f103 0408 	add.w	r4, r3, #8
 8000856:	2201      	movs	r2, #1
 8000858:	40a2      	lsls	r2, r4
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800085a:	880c      	ldrh	r4, [r1, #0]
      if (currentpin == pos)
 800085c:	ea32 0404 	bics.w	r4, r2, r4
 8000860:	d10f      	bne.n	8000882 <GPIO_Init+0x8e>
      {
        pos = pinpos << 2;
 8000862:	009c      	lsls	r4, r3, #2
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000864:	270f      	movs	r7, #15
 8000866:	40a7      	lsls	r7, r4
        tmpreg &= ~pinmask;
 8000868:	ea26 0607 	bic.w	r6, r6, r7
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800086c:	fa05 f404 	lsl.w	r4, r5, r4
 8000870:	4326      	orrs	r6, r4
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000872:	78cc      	ldrb	r4, [r1, #3]
 8000874:	2c28      	cmp	r4, #40	; 0x28
 8000876:	d100      	bne.n	800087a <GPIO_Init+0x86>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000878:	6142      	str	r2, [r0, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800087a:	78cc      	ldrb	r4, [r1, #3]
 800087c:	2c48      	cmp	r4, #72	; 0x48
 800087e:	d100      	bne.n	8000882 <GPIO_Init+0x8e>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000880:	6102      	str	r2, [r0, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000882:	3301      	adds	r3, #1
 8000884:	2b07      	cmp	r3, #7
 8000886:	d9e4      	bls.n	8000852 <GPIO_Init+0x5e>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000888:	6046      	str	r6, [r0, #4]
  }
}
 800088a:	bcf0      	pop	{r4, r5, r6, r7}
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop

08000890 <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000890:	6883      	ldr	r3, [r0, #8]
 8000892:	4219      	tst	r1, r3
 8000894:	d001      	beq.n	800089a <GPIO_ReadInputDataBit+0xa>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000896:	2001      	movs	r0, #1
 8000898:	4770      	bx	lr
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800089a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop

080008a0 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80008a0:	6101      	str	r1, [r0, #16]
 80008a2:	4770      	bx	lr

080008a4 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80008a4:	6141      	str	r1, [r0, #20]
 80008a6:	4770      	bx	lr

080008a8 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80008a8:	b10a      	cbz	r2, 80008ae <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80008aa:	6101      	str	r1, [r0, #16]
 80008ac:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 80008ae:	6141      	str	r1, [r0, #20]
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop

080008b4 <PWR_BackupAccessCmd>:
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 80008b4:	4b01      	ldr	r3, [pc, #4]	; (80008bc <PWR_BackupAccessCmd+0x8>)
 80008b6:	6018      	str	r0, [r3, #0]
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	420e0020 	.word	0x420e0020

080008c0 <RCC_LSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <RCC_LSEConfig+0x24>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80008c6:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 80008c8:	2801      	cmp	r0, #1
 80008ca:	d002      	beq.n	80008d2 <RCC_LSEConfig+0x12>
 80008cc:	2804      	cmp	r0, #4
 80008ce:	d004      	beq.n	80008da <RCC_LSEConfig+0x1a>
 80008d0:	4770      	bx	lr
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80008d2:	2201      	movs	r2, #1
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <RCC_LSEConfig+0x24>)
 80008d6:	701a      	strb	r2, [r3, #0]
      break;
 80008d8:	4770      	bx	lr
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80008da:	2205      	movs	r2, #5
 80008dc:	4b01      	ldr	r3, [pc, #4]	; (80008e4 <RCC_LSEConfig+0x24>)
 80008de:	701a      	strb	r2, [r3, #0]
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40021020 	.word	0x40021020

080008e8 <RCC_RTCCLKConfig>:
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 80008e8:	4a02      	ldr	r2, [pc, #8]	; (80008f4 <RCC_RTCCLKConfig+0xc>)
 80008ea:	6a13      	ldr	r3, [r2, #32]
 80008ec:	4318      	orrs	r0, r3
 80008ee:	6210      	str	r0, [r2, #32]
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40021000 	.word	0x40021000

080008f8 <RCC_RTCCLKCmd>:
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 80008f8:	4b01      	ldr	r3, [pc, #4]	; (8000900 <RCC_RTCCLKCmd+0x8>)
 80008fa:	6018      	str	r0, [r3, #0]
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	4242043c 	.word	0x4242043c

08000904 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000904:	b410      	push	{r4}
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000906:	4b29      	ldr	r3, [pc, #164]	; (80009ac <RCC_GetClocksFreq+0xa8>)
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 800090e:	2b04      	cmp	r3, #4
 8000910:	d005      	beq.n	800091e <RCC_GetClocksFreq+0x1a>
 8000912:	2b08      	cmp	r3, #8
 8000914:	d006      	beq.n	8000924 <RCC_GetClocksFreq+0x20>
 8000916:	bb13      	cbnz	r3, 800095e <RCC_GetClocksFreq+0x5a>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000918:	4b25      	ldr	r3, [pc, #148]	; (80009b0 <RCC_GetClocksFreq+0xac>)
 800091a:	6003      	str	r3, [r0, #0]
      break;
 800091c:	e021      	b.n	8000962 <RCC_GetClocksFreq+0x5e>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800091e:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <RCC_GetClocksFreq+0xac>)
 8000920:	6003      	str	r3, [r0, #0]
      break;
 8000922:	e01e      	b.n	8000962 <RCC_GetClocksFreq+0x5e>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000924:	4a21      	ldr	r2, [pc, #132]	; (80009ac <RCC_GetClocksFreq+0xa8>)
 8000926:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000928:	6852      	ldr	r2, [r2, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800092a:	f3c3 4383 	ubfx	r3, r3, #18, #4
 800092e:	3302      	adds	r3, #2
      
      if (pllsource == 0x00)
 8000930:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8000934:	d104      	bne.n	8000940 <RCC_GetClocksFreq+0x3c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000936:	4a1f      	ldr	r2, [pc, #124]	; (80009b4 <RCC_GetClocksFreq+0xb0>)
 8000938:	fb02 f303 	mul.w	r3, r2, r3
 800093c:	6003      	str	r3, [r0, #0]
 800093e:	e010      	b.n	8000962 <RCC_GetClocksFreq+0x5e>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000940:	4a1a      	ldr	r2, [pc, #104]	; (80009ac <RCC_GetClocksFreq+0xa8>)
 8000942:	6852      	ldr	r2, [r2, #4]
 8000944:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000948:	d004      	beq.n	8000954 <RCC_GetClocksFreq+0x50>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 800094a:	4a1a      	ldr	r2, [pc, #104]	; (80009b4 <RCC_GetClocksFreq+0xb0>)
 800094c:	fb02 f303 	mul.w	r3, r2, r3
 8000950:	6003      	str	r3, [r0, #0]
 8000952:	e006      	b.n	8000962 <RCC_GetClocksFreq+0x5e>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8000954:	4a16      	ldr	r2, [pc, #88]	; (80009b0 <RCC_GetClocksFreq+0xac>)
 8000956:	fb02 f303 	mul.w	r3, r2, r3
 800095a:	6003      	str	r3, [r0, #0]
 800095c:	e001      	b.n	8000962 <RCC_GetClocksFreq+0x5e>
      }
#endif /* STM32F10X_CL */ 
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <RCC_GetClocksFreq+0xac>)
 8000960:	6003      	str	r3, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000962:	4912      	ldr	r1, [pc, #72]	; (80009ac <RCC_GetClocksFreq+0xa8>)
 8000964:	684b      	ldr	r3, [r1, #4]
  tmp = tmp >> 4;
 8000966:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 800096a:	4c13      	ldr	r4, [pc, #76]	; (80009b8 <RCC_GetClocksFreq+0xb4>)
 800096c:	5ce3      	ldrb	r3, [r4, r3]
 800096e:	b2da      	uxtb	r2, r3
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000970:	6803      	ldr	r3, [r0, #0]
 8000972:	40d3      	lsrs	r3, r2
 8000974:	6043      	str	r3, [r0, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000976:	684a      	ldr	r2, [r1, #4]
  tmp = tmp >> 8;
 8000978:	f3c2 2202 	ubfx	r2, r2, #8, #3
  presc = APBAHBPrescTable[tmp];
 800097c:	5ca2      	ldrb	r2, [r4, r2]
 800097e:	b2d2      	uxtb	r2, r2
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000980:	fa23 f202 	lsr.w	r2, r3, r2
 8000984:	6082      	str	r2, [r0, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000986:	684a      	ldr	r2, [r1, #4]
  tmp = tmp >> 11;
 8000988:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  presc = APBAHBPrescTable[tmp];
 800098c:	5ca2      	ldrb	r2, [r4, r2]
 800098e:	b2d2      	uxtb	r2, r2
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000990:	40d3      	lsrs	r3, r2
 8000992:	60c3      	str	r3, [r0, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000994:	684a      	ldr	r2, [r1, #4]
  tmp = tmp >> 14;
 8000996:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 800099a:	4908      	ldr	r1, [pc, #32]	; (80009bc <RCC_GetClocksFreq+0xb8>)
 800099c:	5c8a      	ldrb	r2, [r1, r2]
 800099e:	b2d2      	uxtb	r2, r2
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80009a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80009a4:	6103      	str	r3, [r0, #16]
}
 80009a6:	bc10      	pop	{r4}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40021000 	.word	0x40021000
 80009b0:	007a1200 	.word	0x007a1200
 80009b4:	003d0900 	.word	0x003d0900
 80009b8:	20000004 	.word	0x20000004
 80009bc:	20000000 	.word	0x20000000

080009c0 <RCC_APB2PeriphClockCmd>:
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009c0:	b121      	cbz	r1, 80009cc <RCC_APB2PeriphClockCmd+0xc>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <RCC_APB2PeriphClockCmd+0x18>)
 80009c4:	699a      	ldr	r2, [r3, #24]
 80009c6:	4310      	orrs	r0, r2
 80009c8:	6198      	str	r0, [r3, #24]
 80009ca:	4770      	bx	lr
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80009cc:	4a02      	ldr	r2, [pc, #8]	; (80009d8 <RCC_APB2PeriphClockCmd+0x18>)
 80009ce:	6993      	ldr	r3, [r2, #24]
 80009d0:	ea23 0000 	bic.w	r0, r3, r0
 80009d4:	6190      	str	r0, [r2, #24]
 80009d6:	4770      	bx	lr
 80009d8:	40021000 	.word	0x40021000

080009dc <RCC_APB1PeriphClockCmd>:
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009dc:	b121      	cbz	r1, 80009e8 <RCC_APB1PeriphClockCmd+0xc>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <RCC_APB1PeriphClockCmd+0x18>)
 80009e0:	69da      	ldr	r2, [r3, #28]
 80009e2:	4310      	orrs	r0, r2
 80009e4:	61d8      	str	r0, [r3, #28]
 80009e6:	4770      	bx	lr
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80009e8:	4a02      	ldr	r2, [pc, #8]	; (80009f4 <RCC_APB1PeriphClockCmd+0x18>)
 80009ea:	69d3      	ldr	r3, [r2, #28]
 80009ec:	ea23 0000 	bic.w	r0, r3, r0
 80009f0:	61d0      	str	r0, [r2, #28]
 80009f2:	4770      	bx	lr
 80009f4:	40021000 	.word	0x40021000

080009f8 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 80009f8:	4b01      	ldr	r3, [pc, #4]	; (8000a00 <RCC_BackupResetCmd+0x8>)
 80009fa:	6018      	str	r0, [r3, #0]
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	42420440 	.word	0x42420440

08000a04 <RCC_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000a04:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d102      	bne.n	8000a10 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <RCC_GetFlagStatus+0x30>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	e006      	b.n	8000a1e <RCC_GetFlagStatus+0x1a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d102      	bne.n	8000a1a <RCC_GetFlagStatus+0x16>
  {
    statusreg = RCC->BDCR;
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <RCC_GetFlagStatus+0x30>)
 8000a16:	6a1b      	ldr	r3, [r3, #32]
 8000a18:	e001      	b.n	8000a1e <RCC_GetFlagStatus+0x1a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <RCC_GetFlagStatus+0x30>)
 8000a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8000a1e:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000a22:	fa23 f000 	lsr.w	r0, r3, r0
 8000a26:	f010 0f01 	tst.w	r0, #1
 8000a2a:	d001      	beq.n	8000a30 <RCC_GetFlagStatus+0x2c>
  {
    bitstatus = SET;
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	4770      	bx	lr
  }
  else
  {
    bitstatus = RESET;
 8000a30:	2000      	movs	r0, #0
  }

  /* Return the flag status */
  return bitstatus;
}
 8000a32:	4770      	bx	lr
 8000a34:	40021000 	.word	0x40021000

08000a38 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 8000a38:	4a02      	ldr	r2, [pc, #8]	; (8000a44 <RCC_ClearFlag+0xc>)
 8000a3a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000a3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a40:	6253      	str	r3, [r2, #36]	; 0x24
 8000a42:	4770      	bx	lr
 8000a44:	40021000 	.word	0x40021000

08000a48 <RTC_ITConfig>:
{
  /* Check the parameters */
  assert_param(IS_RTC_IT(RTC_IT));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a48:	b129      	cbz	r1, 8000a56 <RTC_ITConfig+0xe>
  {
    RTC->CRH |= RTC_IT;
 8000a4a:	4a06      	ldr	r2, [pc, #24]	; (8000a64 <RTC_ITConfig+0x1c>)
 8000a4c:	8813      	ldrh	r3, [r2, #0]
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	4318      	orrs	r0, r3
 8000a52:	8010      	strh	r0, [r2, #0]
 8000a54:	4770      	bx	lr
  }
  else
  {
    RTC->CRH &= (uint16_t)~RTC_IT;
 8000a56:	4a03      	ldr	r2, [pc, #12]	; (8000a64 <RTC_ITConfig+0x1c>)
 8000a58:	8813      	ldrh	r3, [r2, #0]
 8000a5a:	43c0      	mvns	r0, r0
 8000a5c:	b280      	uxth	r0, r0
 8000a5e:	4018      	ands	r0, r3
 8000a60:	8010      	strh	r0, [r2, #0]
 8000a62:	4770      	bx	lr
 8000a64:	40002800 	.word	0x40002800

08000a68 <RTC_EnterConfigMode>:
  * @retval None
  */
void RTC_EnterConfigMode(void)
{
  /* Set the CNF flag to enter in the Configuration Mode */
  RTC->CRL |= RTC_CRL_CNF;
 8000a68:	4a03      	ldr	r2, [pc, #12]	; (8000a78 <RTC_EnterConfigMode+0x10>)
 8000a6a:	8893      	ldrh	r3, [r2, #4]
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	f043 0310 	orr.w	r3, r3, #16
 8000a72:	8093      	strh	r3, [r2, #4]
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40002800 	.word	0x40002800

08000a7c <RTC_ExitConfigMode>:
  * @retval None
  */
void RTC_ExitConfigMode(void)
{
  /* Reset the CNF flag to exit from the Configuration Mode */
  RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); 
 8000a7c:	4a03      	ldr	r2, [pc, #12]	; (8000a8c <RTC_ExitConfigMode+0x10>)
 8000a7e:	8893      	ldrh	r3, [r2, #4]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	f023 0310 	bic.w	r3, r3, #16
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	8093      	strh	r3, [r2, #4]
 8000a8a:	4770      	bx	lr
 8000a8c:	40002800 	.word	0x40002800

08000a90 <RTC_GetCounter>:
  */
uint32_t RTC_GetCounter(void)
{
  uint16_t high1 = 0, high2 = 0, low = 0;

  high1 = RTC->CNTH;
 8000a90:	4908      	ldr	r1, [pc, #32]	; (8000ab4 <RTC_GetCounter+0x24>)
 8000a92:	8b08      	ldrh	r0, [r1, #24]
 8000a94:	b282      	uxth	r2, r0
  low   = RTC->CNTL;
 8000a96:	8b8b      	ldrh	r3, [r1, #28]
 8000a98:	b29b      	uxth	r3, r3
  high2 = RTC->CNTH;
 8000a9a:	8b08      	ldrh	r0, [r1, #24]
 8000a9c:	b280      	uxth	r0, r0

  if (high1 != high2)
 8000a9e:	4282      	cmp	r2, r0
 8000aa0:	d004      	beq.n	8000aac <RTC_GetCounter+0x1c>
  { /* In this case the counter roll over during reading of CNTL and CNTH registers, 
       read again CNTL register then return the counter value */
    return (((uint32_t) high2 << 16 ) | RTC->CNTL);
 8000aa2:	8b8b      	ldrh	r3, [r1, #28]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000aaa:	4770      	bx	lr
  }
  else
  { /* No counter roll over during reading of CNTL and CNTH registers, counter 
       value is equal to first value of CNTL and CNTH */
    return (((uint32_t) high1 << 16 ) | low);
 8000aac:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
  }
}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40002800 	.word	0x40002800

08000ab8 <RTC_SetCounter>:
  * @brief  Sets the RTC counter value.
  * @param  CounterValue: RTC counter new value.
  * @retval None
  */
void RTC_SetCounter(uint32_t CounterValue)
{ 
 8000ab8:	b510      	push	{r4, lr}
 8000aba:	4604      	mov	r4, r0
  RTC_EnterConfigMode();
 8000abc:	f7ff ffd4 	bl	8000a68 <RTC_EnterConfigMode>
  /* Set RTC COUNTER MSB word */
  RTC->CNTH = CounterValue >> 16;
 8000ac0:	0c22      	lsrs	r2, r4, #16
 8000ac2:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <RTC_SetCounter+0x18>)
 8000ac4:	831a      	strh	r2, [r3, #24]
  /* Set RTC COUNTER LSB word */
  RTC->CNTL = (CounterValue & RTC_LSB_MASK);
 8000ac6:	b2a4      	uxth	r4, r4
 8000ac8:	839c      	strh	r4, [r3, #28]
  RTC_ExitConfigMode();
 8000aca:	f7ff ffd7 	bl	8000a7c <RTC_ExitConfigMode>
 8000ace:	bd10      	pop	{r4, pc}
 8000ad0:	40002800 	.word	0x40002800

08000ad4 <RTC_SetPrescaler>:
  * @brief  Sets the RTC prescaler value.
  * @param  PrescalerValue: RTC prescaler new value.
  * @retval None
  */
void RTC_SetPrescaler(uint32_t PrescalerValue)
{
 8000ad4:	b510      	push	{r4, lr}
 8000ad6:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_RTC_PRESCALER(PrescalerValue));
  
  RTC_EnterConfigMode();
 8000ad8:	f7ff ffc6 	bl	8000a68 <RTC_EnterConfigMode>
  /* Set RTC PRESCALER MSB word */
  RTC->PRLH = (PrescalerValue & PRLH_MSB_MASK) >> 16;
 8000adc:	f3c4 4203 	ubfx	r2, r4, #16, #4
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <RTC_SetPrescaler+0x1c>)
 8000ae2:	811a      	strh	r2, [r3, #8]
  /* Set RTC PRESCALER LSB word */
  RTC->PRLL = (PrescalerValue & RTC_LSB_MASK);
 8000ae4:	b2a4      	uxth	r4, r4
 8000ae6:	819c      	strh	r4, [r3, #12]
  RTC_ExitConfigMode();
 8000ae8:	f7ff ffc8 	bl	8000a7c <RTC_ExitConfigMode>
 8000aec:	bd10      	pop	{r4, pc}
 8000aee:	bf00      	nop
 8000af0:	40002800 	.word	0x40002800

08000af4 <RTC_WaitForLastTask>:
  * @retval None
  */
void RTC_WaitForLastTask(void)
{
  /* Loop until RTOFF flag is set */
  while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <RTC_WaitForLastTask+0x10>)
 8000af6:	889b      	ldrh	r3, [r3, #4]
 8000af8:	f003 0320 	and.w	r3, r3, #32
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d0f8      	beq.n	8000af4 <RTC_WaitForLastTask>
  {
  }
}
 8000b02:	4770      	bx	lr
 8000b04:	40002800 	.word	0x40002800

08000b08 <RTC_WaitForSynchro>:
  * @retval None
  */
void RTC_WaitForSynchro(void)
{
  /* Clear RSF flag */
  RTC->CRL &= (uint16_t)~RTC_FLAG_RSF;
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <RTC_WaitForSynchro+0x20>)
 8000b0a:	8893      	ldrh	r3, [r2, #4]
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	f023 0308 	bic.w	r3, r3, #8
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	8093      	strh	r3, [r2, #4]
  /* Loop until RSF flag is set */
  while ((RTC->CRL & RTC_FLAG_RSF) == (uint16_t)RESET)
 8000b16:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <RTC_WaitForSynchro+0x20>)
 8000b18:	889b      	ldrh	r3, [r3, #4]
 8000b1a:	f003 0308 	and.w	r3, r3, #8
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d0f8      	beq.n	8000b16 <RTC_WaitForSynchro+0xe>
  {
  }
}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40002800 	.word	0x40002800

08000b2c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000b30:	8803      	ldrh	r3, [r0, #0]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000b32:	f403 5741 	and.w	r7, r3, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000b36:	880d      	ldrh	r5, [r1, #0]
 8000b38:	884e      	ldrh	r6, [r1, #2]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000b3a:	888c      	ldrh	r4, [r1, #4]
 8000b3c:	f8b1 8006 	ldrh.w	r8, [r1, #6]
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000b40:	890a      	ldrh	r2, [r1, #8]
 8000b42:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000b46:	898b      	ldrh	r3, [r1, #12]
 8000b48:	f8b1 e00e 	ldrh.w	lr, [r1, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000b4c:	4335      	orrs	r5, r6
 8000b4e:	4325      	orrs	r5, r4
 8000b50:	ea48 0405 	orr.w	r4, r8, r5
 8000b54:	4314      	orrs	r4, r2
 8000b56:	ea4c 0204 	orr.w	r2, ip, r4
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	ea4e 0302 	orr.w	r3, lr, r2
 8000b60:	433b      	orrs	r3, r7
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000b62:	8003      	strh	r3, [r0, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8000b64:	8b83      	ldrh	r3, [r0, #28]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	8383      	strh	r3, [r0, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000b70:	8a0b      	ldrh	r3, [r1, #16]
 8000b72:	8203      	strh	r3, [r0, #16]
 8000b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000b78 <SPI_Cmd>:
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b78:	b129      	cbz	r1, 8000b86 <SPI_Cmd+0xe>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8000b7a:	8803      	ldrh	r3, [r0, #0]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b82:	8003      	strh	r3, [r0, #0]
 8000b84:	4770      	bx	lr
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
 8000b86:	8803      	ldrh	r3, [r0, #0]
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	8003      	strh	r3, [r0, #0]
 8000b92:	4770      	bx	lr

08000b94 <TIM_TimeBaseInit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000b94:	8803      	ldrh	r3, [r0, #0]
 8000b96:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8000b98:	4a21      	ldr	r2, [pc, #132]	; (8000c20 <TIM_TimeBaseInit+0x8c>)
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d012      	beq.n	8000bc4 <TIM_TimeBaseInit+0x30>
 8000b9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	d00e      	beq.n	8000bc4 <TIM_TimeBaseInit+0x30>
 8000ba6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000baa:	d00b      	beq.n	8000bc4 <TIM_TimeBaseInit+0x30>
 8000bac:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000bb0:	4290      	cmp	r0, r2
 8000bb2:	d007      	beq.n	8000bc4 <TIM_TimeBaseInit+0x30>
 8000bb4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bb8:	4290      	cmp	r0, r2
 8000bba:	d003      	beq.n	8000bc4 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000bbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bc0:	4290      	cmp	r0, r2
 8000bc2:	d103      	bne.n	8000bcc <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000bc8:	884a      	ldrh	r2, [r1, #2]
 8000bca:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000bcc:	4a15      	ldr	r2, [pc, #84]	; (8000c24 <TIM_TimeBaseInit+0x90>)
 8000bce:	4290      	cmp	r0, r2
 8000bd0:	d008      	beq.n	8000be4 <TIM_TimeBaseInit+0x50>
 8000bd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bd6:	4290      	cmp	r0, r2
 8000bd8:	d004      	beq.n	8000be4 <TIM_TimeBaseInit+0x50>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8000bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bde:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000be0:	88ca      	ldrh	r2, [r1, #6]
 8000be2:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8000be4:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000be6:	888b      	ldrh	r3, [r1, #4]
 8000be8:	8583      	strh	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000bea:	880b      	ldrh	r3, [r1, #0]
 8000bec:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <TIM_TimeBaseInit+0x8c>)
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	d00f      	beq.n	8000c14 <TIM_TimeBaseInit+0x80>
 8000bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000bf8:	4298      	cmp	r0, r3
 8000bfa:	d00b      	beq.n	8000c14 <TIM_TimeBaseInit+0x80>
 8000bfc:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000c00:	4298      	cmp	r0, r3
 8000c02:	d007      	beq.n	8000c14 <TIM_TimeBaseInit+0x80>
 8000c04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c08:	4298      	cmp	r0, r3
 8000c0a:	d003      	beq.n	8000c14 <TIM_TimeBaseInit+0x80>
 8000c0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c10:	4298      	cmp	r0, r3
 8000c12:	d101      	bne.n	8000c18 <TIM_TimeBaseInit+0x84>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000c14:	7a0b      	ldrb	r3, [r1, #8]
 8000c16:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8000c18:	2301      	movs	r3, #1
 8000c1a:	8283      	strh	r3, [r0, #20]
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40012c00 	.word	0x40012c00
 8000c24:	40001000 	.word	0x40001000

08000c28 <TIM_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c28:	b129      	cbz	r1, 8000c36 <TIM_Cmd+0xe>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000c2a:	8803      	ldrh	r3, [r0, #0]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	8003      	strh	r3, [r0, #0]
 8000c34:	4770      	bx	lr
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000c36:	8803      	ldrh	r3, [r0, #0]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	f023 0301 	bic.w	r3, r3, #1
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	8003      	strh	r3, [r0, #0]
 8000c42:	4770      	bx	lr

08000c44 <TIM_ITConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c44:	b122      	cbz	r2, 8000c50 <TIM_ITConfig+0xc>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000c46:	8983      	ldrh	r3, [r0, #12]
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	4319      	orrs	r1, r3
 8000c4c:	8181      	strh	r1, [r0, #12]
 8000c4e:	4770      	bx	lr
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000c50:	8983      	ldrh	r3, [r0, #12]
 8000c52:	43c9      	mvns	r1, r1
 8000c54:	b289      	uxth	r1, r1
 8000c56:	4019      	ands	r1, r3
 8000c58:	8181      	strh	r1, [r0, #12]
 8000c5a:	4770      	bx	lr

08000c5c <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000c5c:	8a02      	ldrh	r2, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8000c5e:	8983      	ldrh	r3, [r0, #12]
 8000c60:	400b      	ands	r3, r1
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000c62:	4211      	tst	r1, r2
 8000c64:	d002      	beq.n	8000c6c <TIM_GetITStatus+0x10>
 8000c66:	b91b      	cbnz	r3, 8000c70 <TIM_GetITStatus+0x14>
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 8000c68:	2000      	movs	r0, #0
 8000c6a:	4770      	bx	lr
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	4770      	bx	lr
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
  {
    bitstatus = SET;
 8000c70:	2001      	movs	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8000c72:	4770      	bx	lr

08000c74 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000c74:	43c9      	mvns	r1, r1
 8000c76:	b289      	uxth	r1, r1
 8000c78:	8201      	strh	r1, [r0, #16]
 8000c7a:	4770      	bx	lr

08000c7c <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000c7c:	b530      	push	{r4, r5, lr}
 8000c7e:	b087      	sub	sp, #28
 8000c80:	4604      	mov	r4, r0
 8000c82:	460d      	mov	r5, r1
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000c84:	8a03      	ldrh	r3, [r0, #16]
 8000c86:	b29b      	uxth	r3, r3
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000c88:	88ca      	ldrh	r2, [r1, #6]
 8000c8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c8e:	4313      	orrs	r3, r2
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000c90:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000c92:	8983      	ldrh	r3, [r0, #12]
 8000c94:	b29b      	uxth	r3, r3
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000c96:	888a      	ldrh	r2, [r1, #4]
 8000c98:	8909      	ldrh	r1, [r1, #8]
            USART_InitStruct->USART_Mode;
 8000c9a:	8968      	ldrh	r0, [r5, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	4302      	orrs	r2, r0
 8000ca0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000ca4:	f023 030c 	bic.w	r3, r3, #12
 8000ca8:	4313      	orrs	r3, r2
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000caa:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000cac:	8aa3      	ldrh	r3, [r4, #20]
 8000cae:	b29b      	uxth	r3, r3
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000cb0:	89aa      	ldrh	r2, [r5, #12]
 8000cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cb6:	4313      	orrs	r3, r2
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000cb8:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000cba:	a801      	add	r0, sp, #4
 8000cbc:	f7ff fe22 	bl	8000904 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <USART_Init+0xc0>)
 8000cc2:	429c      	cmp	r4, r3
 8000cc4:	d101      	bne.n	8000cca <USART_Init+0x4e>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000cc6:	9a04      	ldr	r2, [sp, #16]
 8000cc8:	e000      	b.n	8000ccc <USART_Init+0x50>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000cca:	9a03      	ldr	r2, [sp, #12]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000ccc:	89a3      	ldrh	r3, [r4, #12]
 8000cce:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000cd2:	d008      	beq.n	8000ce6 <USART_Init+0x6a>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000cd4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000cd8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000cdc:	6829      	ldr	r1, [r5, #0]
 8000cde:	0049      	lsls	r1, r1, #1
 8000ce0:	fbb2 f1f1 	udiv	r1, r2, r1
 8000ce4:	e007      	b.n	8000cf6 <USART_Init+0x7a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000ce6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000cea:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000cee:	6829      	ldr	r1, [r5, #0]
 8000cf0:	0089      	lsls	r1, r1, #2
 8000cf2:	fbb2 f1f1 	udiv	r1, r2, r1
  }
  tmpreg = (integerdivider / 100) << 4;
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <USART_Init+0xc4>)
 8000cf8:	fba3 2301 	umull	r2, r3, r3, r1
 8000cfc:	095b      	lsrs	r3, r3, #5
 8000cfe:	011b      	lsls	r3, r3, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000d00:	091a      	lsrs	r2, r3, #4
 8000d02:	2064      	movs	r0, #100	; 0x64
 8000d04:	fb00 1212 	mls	r2, r0, r2, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000d08:	89a1      	ldrh	r1, [r4, #12]
 8000d0a:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8000d0e:	d008      	beq.n	8000d22 <USART_Init+0xa6>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000d10:	00d2      	lsls	r2, r2, #3
 8000d12:	3232      	adds	r2, #50	; 0x32
 8000d14:	490a      	ldr	r1, [pc, #40]	; (8000d40 <USART_Init+0xc4>)
 8000d16:	fba1 1202 	umull	r1, r2, r1, r2
 8000d1a:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	e007      	b.n	8000d32 <USART_Init+0xb6>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	3232      	adds	r2, #50	; 0x32
 8000d26:	4906      	ldr	r1, [pc, #24]	; (8000d40 <USART_Init+0xc4>)
 8000d28:	fba1 1202 	umull	r1, r2, r1, r2
 8000d2c:	f3c2 1243 	ubfx	r2, r2, #5, #4
 8000d30:	431a      	orrs	r2, r3
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000d32:	b292      	uxth	r2, r2
 8000d34:	8122      	strh	r2, [r4, #8]
}
 8000d36:	b007      	add	sp, #28
 8000d38:	bd30      	pop	{r4, r5, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40013800 	.word	0x40013800
 8000d40:	51eb851f 	.word	0x51eb851f

08000d44 <USART_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d44:	b129      	cbz	r1, 8000d52 <USART_Cmd+0xe>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000d46:	8983      	ldrh	r3, [r0, #12]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d4e:	8183      	strh	r3, [r0, #12]
 8000d50:	4770      	bx	lr
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8000d52:	8983      	ldrh	r3, [r0, #12]
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	8183      	strh	r3, [r0, #12]
 8000d5e:	4770      	bx	lr

08000d60 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000d60:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8000d64:	8081      	strh	r1, [r0, #4]
 8000d66:	4770      	bx	lr

08000d68 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000d68:	8880      	ldrh	r0, [r0, #4]
}
 8000d6a:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8000d6e:	4770      	bx	lr

08000d70 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000d70:	8803      	ldrh	r3, [r0, #0]
 8000d72:	4219      	tst	r1, r3
 8000d74:	d001      	beq.n	8000d7a <USART_GetFlagStatus+0xa>
  {
    bitstatus = SET;
 8000d76:	2001      	movs	r0, #1
 8000d78:	4770      	bx	lr
  }
  else
  {
    bitstatus = RESET;
 8000d7a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <check_for_leap_year>:

struct DateTime current_date;

uint8_t check_for_leap_year(uint16_t year)
{
    if(year % 4 == 0)
 8000d80:	f010 0f03 	tst.w	r0, #3
 8000d84:	d114      	bne.n	8000db0 <check_for_leap_year+0x30>
    {
        if(year % 100 == 0)
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <check_for_leap_year+0x3c>)
 8000d88:	fba3 2300 	umull	r2, r3, r3, r0
 8000d8c:	095b      	lsrs	r3, r3, #5
 8000d8e:	2264      	movs	r2, #100	; 0x64
 8000d90:	fb02 0313 	mls	r3, r2, r3, r0
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	b96b      	cbnz	r3, 8000db4 <check_for_leap_year+0x34>
        {
            if(year % 400 == 0)
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <check_for_leap_year+0x3c>)
 8000d9a:	fba3 2300 	umull	r2, r3, r3, r0
 8000d9e:	09db      	lsrs	r3, r3, #7
 8000da0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000da4:	fb02 0013 	mls	r0, r2, r3, r0
 8000da8:	b280      	uxth	r0, r0
 8000daa:	b928      	cbnz	r0, 8000db8 <check_for_leap_year+0x38>
            {
                return 1;
 8000dac:	2001      	movs	r0, #1
 8000dae:	4770      	bx	lr
        }
    }

    else
    {
        return 0;
 8000db0:	2000      	movs	r0, #0
 8000db2:	4770      	bx	lr
            }
        }

        else
        {
            return 1;
 8000db4:	2001      	movs	r0, #1
 8000db6:	4770      	bx	lr
                return 1;
            }

            else
            {
                return 0;
 8000db8:	2000      	movs	r0, #0

    else
    {
        return 0;
    }
}
 8000dba:	4770      	bx	lr
 8000dbc:	51eb851f 	.word	0x51eb851f

08000dc0 <get_RTC>:

void get_RTC()
{
 8000dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     uint32_t counts = 0;

//     counts = RTC_CNTH;
//     counts <<= 16;
//     counts += RTC_CNTL;
     counts = RTC_GetCounter();
 8000dc2:	f7ff fe65 	bl	8000a90 <RTC_GetCounter>
     counts = counts + 14400; // UTC + 4:00 Dubai time
 8000dc6:	f500 5761 	add.w	r7, r0, #14400	; 0x3840
//     uint32_t i = counts;
//     while(i) {
//    	 printf("%d",(uint16_t)(i % 10));
//		i /= 10;
//	}
     temp = (counts / 86400);
 8000dca:	4c35      	ldr	r4, [pc, #212]	; (8000ea0 <get_RTC+0xe0>)
 8000dcc:	fba4 3407 	umull	r3, r4, r4, r7
 8000dd0:	0c24      	lsrs	r4, r4, #16
     //printf("\ndays %d\n",(uint16_t)(temp));
     if(day_count != temp)
 8000dd2:	4b34      	ldr	r3, [pc, #208]	; (8000ea4 <get_RTC+0xe4>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	d034      	beq.n	8000e44 <get_RTC+0x84>
     {
         day_count = temp;
 8000dda:	4b32      	ldr	r3, [pc, #200]	; (8000ea4 <get_RTC+0xe4>)
 8000ddc:	801c      	strh	r4, [r3, #0]
         temp1 = 1970;
 8000dde:	f240 76b2 	movw	r6, #1970	; 0x7b2

         while(temp >= 365)
 8000de2:	e00e      	b.n	8000e02 <get_RTC+0x42>
         {
             if(check_for_leap_year(temp1) == 1)
 8000de4:	4630      	mov	r0, r6
 8000de6:	f7ff ffcb 	bl	8000d80 <check_for_leap_year>
 8000dea:	2801      	cmp	r0, #1
 8000dec:	d105      	bne.n	8000dfa <get_RTC+0x3a>
             {
                 if(temp >= 366)
 8000dee:	f5b4 7fb7 	cmp.w	r4, #366	; 0x16e
 8000df2:	d309      	bcc.n	8000e08 <get_RTC+0x48>
                 {
                     temp -= 366;
 8000df4:	f5a4 74b7 	sub.w	r4, r4, #366	; 0x16e
 8000df8:	e001      	b.n	8000dfe <get_RTC+0x3e>
                 }
             }

             else
             {
                 temp -= 365;
 8000dfa:	f2a4 146d 	subw	r4, r4, #365	; 0x16d
             }

             temp1++;
 8000dfe:	3601      	adds	r6, #1
 8000e00:	b2b6      	uxth	r6, r6
     if(day_count != temp)
     {
         day_count = temp;
         temp1 = 1970;

         while(temp >= 365)
 8000e02:	f5b4 7fb6 	cmp.w	r4, #364	; 0x16c
 8000e06:	d8ed      	bhi.n	8000de4 <get_RTC+0x24>
             }

             temp1++;
         };

         cal_year = temp1;
 8000e08:	4b27      	ldr	r3, [pc, #156]	; (8000ea8 <get_RTC+0xe8>)
 8000e0a:	801e      	strh	r6, [r3, #0]

         temp1 = 0;
 8000e0c:	2500      	movs	r5, #0
         while(temp >= 28)
 8000e0e:	e011      	b.n	8000e34 <get_RTC+0x74>
         {
             if((temp1 == 1) && (check_for_leap_year(cal_year) == 1))
 8000e10:	2d01      	cmp	r5, #1
 8000e12:	d108      	bne.n	8000e26 <get_RTC+0x66>
 8000e14:	4630      	mov	r0, r6
 8000e16:	f7ff ffb3 	bl	8000d80 <check_for_leap_year>
 8000e1a:	2801      	cmp	r0, #1
 8000e1c:	d103      	bne.n	8000e26 <get_RTC+0x66>
             {
                 if(temp >= 29)
 8000e1e:	2c1c      	cmp	r4, #28
 8000e20:	d90a      	bls.n	8000e38 <get_RTC+0x78>
                 {
                     temp -= 29;
 8000e22:	3c1d      	subs	r4, #29
         temp1 = 0;
         while(temp >= 28)
         {
             if((temp1 == 1) && (check_for_leap_year(cal_year) == 1))
             {
                 if(temp >= 29)
 8000e24:	e004      	b.n	8000e30 <get_RTC+0x70>
                 }
             }

             else
             {
                 if(temp >= month_table[temp1])
 8000e26:	4b21      	ldr	r3, [pc, #132]	; (8000eac <get_RTC+0xec>)
 8000e28:	5d5b      	ldrb	r3, [r3, r5]
 8000e2a:	429c      	cmp	r4, r3
 8000e2c:	d304      	bcc.n	8000e38 <get_RTC+0x78>
                 {
                     temp -= ((uint32_t)month_table[temp1]);
 8000e2e:	1ae4      	subs	r4, r4, r3
                 {
                     break;
                 }
             }

             temp1++;
 8000e30:	3501      	adds	r5, #1
 8000e32:	b2ad      	uxth	r5, r5
         };

         cal_year = temp1;

         temp1 = 0;
         while(temp >= 28)
 8000e34:	2c1b      	cmp	r4, #27
 8000e36:	d8eb      	bhi.n	8000e10 <get_RTC+0x50>
             }

             temp1++;
         };

         cal_month = (temp1 + 1);
 8000e38:	3501      	adds	r5, #1
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <get_RTC+0xf0>)
 8000e3c:	701d      	strb	r5, [r3, #0]
         cal_date = (temp + 1);
 8000e3e:	3401      	adds	r4, #1
 8000e40:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <get_RTC+0xf4>)
 8000e42:	701c      	strb	r4, [r3, #0]
     }

     temp = (counts % 86400);
 8000e44:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <get_RTC+0xe0>)
 8000e46:	fba3 2307 	umull	r2, r3, r3, r7
 8000e4a:	0c1b      	lsrs	r3, r3, #16
 8000e4c:	4a1a      	ldr	r2, [pc, #104]	; (8000eb8 <get_RTC+0xf8>)
 8000e4e:	fb02 7313 	mls	r3, r2, r3, r7

     cal_hour = (temp / 3600);
 8000e52:	4a1a      	ldr	r2, [pc, #104]	; (8000ebc <get_RTC+0xfc>)
 8000e54:	fba2 1203 	umull	r1, r2, r2, r3
 8000e58:	0ad2      	lsrs	r2, r2, #11
 8000e5a:	b2d0      	uxtb	r0, r2
 8000e5c:	4918      	ldr	r1, [pc, #96]	; (8000ec0 <get_RTC+0x100>)
 8000e5e:	7008      	strb	r0, [r1, #0]
     cal_minute = ((temp % 3600) / 60);
 8000e60:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8000e64:	fb01 3112 	mls	r1, r1, r2, r3
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <get_RTC+0x104>)
 8000e6a:	fba3 2301 	umull	r2, r3, r3, r1
 8000e6e:	095b      	lsrs	r3, r3, #5
 8000e70:	b2dc      	uxtb	r4, r3
 8000e72:	4a15      	ldr	r2, [pc, #84]	; (8000ec8 <get_RTC+0x108>)
 8000e74:	7014      	strb	r4, [r2, #0]
     cal_second = ((temp % 3600) % 60);
 8000e76:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8000e7a:	009a      	lsls	r2, r3, #2
 8000e7c:	1a8a      	subs	r2, r1, r2
 8000e7e:	b2d3      	uxtb	r3, r2
 8000e80:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <get_RTC+0x10c>)
 8000e82:	7013      	strb	r3, [r2, #0]

     current_date.seconds = cal_second;
 8000e84:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <get_RTC+0x110>)
 8000e86:	7013      	strb	r3, [r2, #0]
     current_date.minutes = cal_minute;
 8000e88:	7054      	strb	r4, [r2, #1]
     current_date.hours   = cal_hour;
 8000e8a:	7090      	strb	r0, [r2, #2]
     current_date.date    = cal_date;
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <get_RTC+0xf4>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	70d3      	strb	r3, [r2, #3]
     current_date.month   = cal_month;
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <get_RTC+0xf0>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	7153      	strb	r3, [r2, #5]
     current_date.year    = cal_year;
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <get_RTC+0xe8>)
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	80d3      	strh	r3, [r2, #6]
 8000e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ea0:	c22e4507 	.word	0xc22e4507
 8000ea4:	20000b7e 	.word	0x20000b7e
 8000ea8:	20000016 	.word	0x20000016
 8000eac:	08006a68 	.word	0x08006a68
 8000eb0:	20000018 	.word	0x20000018
 8000eb4:	20000014 	.word	0x20000014
 8000eb8:	00015180 	.word	0x00015180
 8000ebc:	91a2b3c5 	.word	0x91a2b3c5
 8000ec0:	20000b7c 	.word	0x20000b7c
 8000ec4:	88888889 	.word	0x88888889
 8000ec8:	20000b81 	.word	0x20000b81
 8000ecc:	20000b80 	.word	0x20000b80
 8000ed0:	20000d04 	.word	0x20000d04

08000ed4 <set_RTC>:

}

uint32_t set_RTC(uint16_t year,  uint8_t month,  uint8_t date,  uint8_t hour,  uint8_t minute,  uint8_t second)
{
 8000ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ed8:	4682      	mov	sl, r0
 8000eda:	4689      	mov	r9, r1
 8000edc:	4617      	mov	r7, r2
 8000ede:	4698      	mov	r8, r3
 8000ee0:	f89d 6020 	ldrb.w	r6, [sp, #32]
    uint16_t i = 0;
    uint32_t counts = 0;

    if(year > 2099)
 8000ee4:	f640 0333 	movw	r3, #2099	; 0x833
 8000ee8:	4298      	cmp	r0, r3
 8000eea:	d900      	bls.n	8000eee <set_RTC+0x1a>
    {
        year = 2099;
 8000eec:	469a      	mov	sl, r3
    }

    if(year < 1970)
 8000eee:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8000ef2:	459a      	cmp	sl, r3
 8000ef4:	d801      	bhi.n	8000efa <set_RTC+0x26>
    {
        year = 1970;
 8000ef6:	f240 7ab2 	movw	sl, #1970	; 0x7b2
}

uint32_t set_RTC(uint16_t year,  uint8_t month,  uint8_t date,  uint8_t hour,  uint8_t minute,  uint8_t second)
{
    uint16_t i = 0;
    uint32_t counts = 0;
 8000efa:	2400      	movs	r4, #0
    if(year < 1970)
    {
        year = 1970;
    }

    for(i = 1970; i < year; i++)
 8000efc:	f240 75b2 	movw	r5, #1970	; 0x7b2
 8000f00:	e011      	b.n	8000f26 <set_RTC+0x52>
    {
          if(check_for_leap_year(i) == 1)
 8000f02:	4628      	mov	r0, r5
 8000f04:	f7ff ff3c 	bl	8000d80 <check_for_leap_year>
 8000f08:	2801      	cmp	r0, #1
 8000f0a:	d104      	bne.n	8000f16 <set_RTC+0x42>
          {
              counts += 31622400;
 8000f0c:	f104 74f1 	add.w	r4, r4, #31588352	; 0x1e20000
 8000f10:	f504 4405 	add.w	r4, r4, #34048	; 0x8500
 8000f14:	e005      	b.n	8000f22 <set_RTC+0x4e>
          }

          else
          {
              counts += 31536000;
 8000f16:	f104 74f0 	add.w	r4, r4, #31457280	; 0x1e00000
 8000f1a:	f504 3499 	add.w	r4, r4, #78336	; 0x13200
 8000f1e:	f504 74c0 	add.w	r4, r4, #384	; 0x180
    if(year < 1970)
    {
        year = 1970;
    }

    for(i = 1970; i < year; i++)
 8000f22:	3501      	adds	r5, #1
 8000f24:	b2ad      	uxth	r5, r5
 8000f26:	45aa      	cmp	sl, r5
 8000f28:	d8eb      	bhi.n	8000f02 <set_RTC+0x2e>
          {
              counts += 31536000;
          }
    }

    month -= 1;
 8000f2a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f2e:	b2c9      	uxtb	r1, r1

    for(i = 0; i < month; i++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	e006      	b.n	8000f42 <set_RTC+0x6e>
    {
          counts += (((uint32_t)month_table[i]) * 86400);
 8000f34:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <set_RTC+0xac>)
 8000f36:	5cd2      	ldrb	r2, [r2, r3]
 8000f38:	4812      	ldr	r0, [pc, #72]	; (8000f84 <set_RTC+0xb0>)
 8000f3a:	fb00 4402 	mla	r4, r0, r2, r4
          }
    }

    month -= 1;

    for(i = 0; i < month; i++)
 8000f3e:	3301      	adds	r3, #1
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	b28a      	uxth	r2, r1
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d3f5      	bcc.n	8000f34 <set_RTC+0x60>
    {
          counts += (((uint32_t)month_table[i]) * 86400);
    }

    if(check_for_leap_year(cal_year) == 1)
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <set_RTC+0xb4>)
 8000f4a:	8818      	ldrh	r0, [r3, #0]
 8000f4c:	f7ff ff18 	bl	8000d80 <check_for_leap_year>
 8000f50:	2801      	cmp	r0, #1
 8000f52:	d103      	bne.n	8000f5c <set_RTC+0x88>
    {
        counts += 86400;
 8000f54:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
 8000f58:	f504 74c0 	add.w	r4, r4, #384	; 0x180
    }

    counts += ((uint32_t)(date - 1) * 86400);
 8000f5c:	3f01      	subs	r7, #1
 8000f5e:	4809      	ldr	r0, [pc, #36]	; (8000f84 <set_RTC+0xb0>)
 8000f60:	fb00 4407 	mla	r4, r0, r7, r4
    counts += ((uint32_t)hour * 3600);
 8000f64:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000f68:	fb03 4408 	mla	r4, r3, r8, r4
    counts += ((uint32_t)minute * 60);
 8000f6c:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8000f70:	00b3      	lsls	r3, r6, #2
 8000f72:	4423      	add	r3, r4
//    RTC_SetCounter(counts);
//
//    while(!(RTC->CRL & RTC_CRL_RTOFF));
//
//    PWR->CR &= ~PWR_CR_DBP;
}
 8000f74:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8000f78:	4418      	add	r0, r3
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	bf00      	nop
 8000f80:	08006a68 	.word	0x08006a68
 8000f84:	00015180 	.word	0x00015180
 8000f88:	20000016 	.word	0x20000016

08000f8c <display_date>:
//	printf("minutes : %d   -   ",current_date.minutes);
//	printf("seconds : %d   -   \n",current_date.seconds);
//}

void display_date()
{
 8000f8c:	b538      	push	{r3, r4, r5, lr}
	printf("%d/",current_date.date);
 8000f8e:	4c0e      	ldr	r4, [pc, #56]	; (8000fc8 <display_date+0x3c>)
 8000f90:	4d0e      	ldr	r5, [pc, #56]	; (8000fcc <display_date+0x40>)
 8000f92:	78e1      	ldrb	r1, [r4, #3]
 8000f94:	4628      	mov	r0, r5
 8000f96:	f003 fa15 	bl	80043c4 <iprintf>
	printf("%d/",current_date.month);
 8000f9a:	7961      	ldrb	r1, [r4, #5]
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	f003 fa11 	bl	80043c4 <iprintf>
	printf("%d ",current_date.year);
 8000fa2:	88e1      	ldrh	r1, [r4, #6]
 8000fa4:	480a      	ldr	r0, [pc, #40]	; (8000fd0 <display_date+0x44>)
 8000fa6:	f003 fa0d 	bl	80043c4 <iprintf>
	printf("%d:",current_date.hours);
 8000faa:	4d0a      	ldr	r5, [pc, #40]	; (8000fd4 <display_date+0x48>)
 8000fac:	78a1      	ldrb	r1, [r4, #2]
 8000fae:	4628      	mov	r0, r5
 8000fb0:	f003 fa08 	bl	80043c4 <iprintf>
	printf("%d:",current_date.minutes);
 8000fb4:	7861      	ldrb	r1, [r4, #1]
 8000fb6:	4628      	mov	r0, r5
 8000fb8:	f003 fa04 	bl	80043c4 <iprintf>
	printf("%d",current_date.seconds);
 8000fbc:	7821      	ldrb	r1, [r4, #0]
 8000fbe:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <display_date+0x4c>)
 8000fc0:	f003 fa00 	bl	80043c4 <iprintf>
 8000fc4:	bd38      	pop	{r3, r4, r5, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000d04 	.word	0x20000d04
 8000fcc:	08006a74 	.word	0x08006a74
 8000fd0:	08006a78 	.word	0x08006a78
 8000fd4:	08006a7c 	.word	0x08006a7c
 8000fd8:	08006a80 	.word	0x08006a80

08000fdc <SPISend>:
static uint8_t SPISend(uint8_t data)
{
	//
	//    Setting the Data Register (DR) transmits the byte of data on MOSI.
	//
	SPI1->DR = data;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <SPISend+0x34>)
 8000fde:	8198      	strh	r0, [r3, #12]
	//
	//    Wait until the data has been transmitted.
	//
	while (!(SPI1->SR & SPI_I2S_FLAG_TXE));
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <SPISend+0x34>)
 8000fe2:	891b      	ldrh	r3, [r3, #8]
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0f8      	beq.n	8000fe0 <SPISend+0x4>
	//
	//    Wait for any data on MISO pin to be received.
	//
	while (!(SPI1->SR & SPI_I2S_FLAG_RXNE));
 8000fee:	4b08      	ldr	r3, [pc, #32]	; (8001010 <SPISend+0x34>)
 8000ff0:	891b      	ldrh	r3, [r3, #8]
 8000ff2:	f013 0f01 	tst.w	r3, #1
 8000ff6:	d0fa      	beq.n	8000fee <SPISend+0x12>
	//
	//    All data transmitted/received but SPI may be busy so wait until done.
	//
	while (SPI1->SR & SPI_I2S_FLAG_BSY);
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <SPISend+0x34>)
 8000ffa:	891b      	ldrh	r3, [r3, #8]
 8000ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001000:	b29b      	uxth	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f8      	bne.n	8000ff8 <SPISend+0x1c>
	//
	//    Return the data received on MISO pin.
	//
	//Sys_Delay(1);
	return(SPI1->DR);
 8001006:	4b02      	ldr	r3, [pc, #8]	; (8001010 <SPISend+0x34>)
 8001008:	8998      	ldrh	r0, [r3, #12]

}
 800100a:	b2c0      	uxtb	r0, r0
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40013000 	.word	0x40013000

08001014 <enc_readOp>:
	CSPASSIVE;
}


static void enc_readOp(uint8_t op, uint8_t address, uint8_t* data, uint8_t len)
{
 8001014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001016:	4606      	mov	r6, r0
 8001018:	460c      	mov	r4, r1
 800101a:	4615      	mov	r5, r2
 800101c:	461f      	mov	r7, r3

	CSACTIVE;
 800101e:	2101      	movs	r1, #1
 8001020:	480b      	ldr	r0, [pc, #44]	; (8001050 <enc_readOp+0x3c>)
 8001022:	f7ff fc3f 	bl	80008a4 <GPIO_ResetBits>

	// issue write command
	SPISend( op | (address & ADDR_MASK));
 8001026:	f004 001f 	and.w	r0, r4, #31
 800102a:	4330      	orrs	r0, r6
 800102c:	f7ff ffd6 	bl	8000fdc <SPISend>
	
	for (int i = 0; i< len; i++)
 8001030:	2400      	movs	r4, #0
 8001032:	e006      	b.n	8001042 <enc_readOp+0x2e>
	*data++ = SPISend(  0x00);
 8001034:	1c6e      	adds	r6, r5, #1
 8001036:	2000      	movs	r0, #0
 8001038:	f7ff ffd0 	bl	8000fdc <SPISend>
 800103c:	7028      	strb	r0, [r5, #0]
	CSACTIVE;

	// issue write command
	SPISend( op | (address & ADDR_MASK));
	
	for (int i = 0; i< len; i++)
 800103e:	3401      	adds	r4, #1
	*data++ = SPISend(  0x00);
 8001040:	4635      	mov	r5, r6
	CSACTIVE;

	// issue write command
	SPISend( op | (address & ADDR_MASK));
	
	for (int i = 0; i< len; i++)
 8001042:	42bc      	cmp	r4, r7
 8001044:	dbf6      	blt.n	8001034 <enc_readOp+0x20>
	*data++ = SPISend(  0x00);


	CSPASSIVE;
 8001046:	2101      	movs	r1, #1
 8001048:	4801      	ldr	r0, [pc, #4]	; (8001050 <enc_readOp+0x3c>)
 800104a:	f7ff fc29 	bl	80008a0 <GPIO_SetBits>
 800104e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001050:	40010c00 	.word	0x40010c00

08001054 <enc_writeOp>:
	    CSPASSIVE;
}


static void enc_writeOp(uint8_t op, uint8_t address, uint8_t* data, uint8_t len)
{
 8001054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001056:	4606      	mov	r6, r0
 8001058:	460c      	mov	r4, r1
 800105a:	4615      	mov	r5, r2
 800105c:	461f      	mov	r7, r3
	CSACTIVE;
 800105e:	2101      	movs	r1, #1
 8001060:	480b      	ldr	r0, [pc, #44]	; (8001090 <enc_writeOp+0x3c>)
 8001062:	f7ff fc1f 	bl	80008a4 <GPIO_ResetBits>

	// issue write command
	SPISend( op | (address & ADDR_MASK));
 8001066:	f004 001f 	and.w	r0, r4, #31
 800106a:	4330      	orrs	r0, r6
 800106c:	f7ff ffb6 	bl	8000fdc <SPISend>
	
	for ( int i = 0; i<len; i++)
 8001070:	2400      	movs	r4, #0
 8001072:	e005      	b.n	8001080 <enc_writeOp+0x2c>
	  SPISend(  *data++);
 8001074:	1c6e      	adds	r6, r5, #1
 8001076:	7828      	ldrb	r0, [r5, #0]
 8001078:	f7ff ffb0 	bl	8000fdc <SPISend>
	CSACTIVE;

	// issue write command
	SPISend( op | (address & ADDR_MASK));
	
	for ( int i = 0; i<len; i++)
 800107c:	3401      	adds	r4, #1
	  SPISend(  *data++);
 800107e:	4635      	mov	r5, r6
	CSACTIVE;

	// issue write command
	SPISend( op | (address & ADDR_MASK));
	
	for ( int i = 0; i<len; i++)
 8001080:	42bc      	cmp	r4, r7
 8001082:	dbf7      	blt.n	8001074 <enc_writeOp+0x20>
	  SPISend(  *data++);

	CSPASSIVE;
 8001084:	2101      	movs	r1, #1
 8001086:	4802      	ldr	r0, [pc, #8]	; (8001090 <enc_writeOp+0x3c>)
 8001088:	f7ff fc0a 	bl	80008a0 <GPIO_SetBits>
 800108c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800108e:	bf00      	nop
 8001090:	40010c00 	.word	0x40010c00

08001094 <enc_SBI>:
static void enc_setBank(uint8_t address, bool keepEnabled ); // select the memory bank
static void readBuffer(uint16_t len, uint8_t* data);
  static void writeBuffer(uint16_t len, uint8_t* data);
/* issue an single byte instruction */
static void enc_SBI(uint8_t instruction, bool keepEnabled)
{
 8001094:	b538      	push	{r3, r4, r5, lr}
 8001096:	4605      	mov	r5, r0
 8001098:	460c      	mov	r4, r1

	CSACTIVE;
 800109a:	2101      	movs	r1, #1
 800109c:	4805      	ldr	r0, [pc, #20]	; (80010b4 <enc_SBI+0x20>)
 800109e:	f7ff fc01 	bl	80008a4 <GPIO_ResetBits>

	// issue the instruction
	SPISend(instruction);
 80010a2:	4628      	mov	r0, r5
 80010a4:	f7ff ff9a 	bl	8000fdc <SPISend>

	if (!keepEnabled)
 80010a8:	b91c      	cbnz	r4, 80010b2 <enc_SBI+0x1e>
	    CSPASSIVE;
 80010aa:	2101      	movs	r1, #1
 80010ac:	4801      	ldr	r0, [pc, #4]	; (80010b4 <enc_SBI+0x20>)
 80010ae:	f7ff fbf7 	bl	80008a0 <GPIO_SetBits>
 80010b2:	bd38      	pop	{r3, r4, r5, pc}
 80010b4:	40010c00 	.word	0x40010c00

080010b8 <enc_setBank>:
  enc_writeOp(ENC624J600_BIT_FIELD_SET, address, &data,1);
}


static void enc_setBank(uint8_t address, bool keepEnabled)
{
 80010b8:	b508      	push	{r3, lr}
 80010ba:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
  // set the bank (if needed)
  if (((address & BANK_MASK) != bank) && ((address & BANK_MASK) != 0xE0))
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <enc_setBank+0x44>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	4298      	cmp	r0, r3
 80010c4:	d019      	beq.n	80010fa <enc_setBank+0x42>
 80010c6:	28e0      	cmp	r0, #224	; 0xe0
 80010c8:	d017      	beq.n	80010fa <enc_setBank+0x42>
  {
    // set the bank

    bank = (address & BANK_MASK);
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <enc_setBank+0x44>)
 80010cc:	7018      	strb	r0, [r3, #0]
    
    switch((bank)>>5){
 80010ce:	0940      	lsrs	r0, r0, #5
 80010d0:	2803      	cmp	r0, #3
 80010d2:	d812      	bhi.n	80010fa <enc_setBank+0x42>
 80010d4:	e8df f000 	tbb	[pc, r0]
 80010d8:	0e0a0602 	.word	0x0e0a0602
			case 0 :
				enc_SBI(ENC624J600_BANK0_SELECT, keepEnabled);
 80010dc:	20c0      	movs	r0, #192	; 0xc0
 80010de:	f7ff ffd9 	bl	8001094 <enc_SBI>
				break;
 80010e2:	bd08      	pop	{r3, pc}
			case 1 :
				enc_SBI(ENC624J600_BANK1_SELECT, keepEnabled);
 80010e4:	20c2      	movs	r0, #194	; 0xc2
 80010e6:	f7ff ffd5 	bl	8001094 <enc_SBI>
				break;
 80010ea:	bd08      	pop	{r3, pc}
			case 2 :
				enc_SBI(ENC624J600_BANK2_SELECT, keepEnabled);
 80010ec:	20c4      	movs	r0, #196	; 0xc4
 80010ee:	f7ff ffd1 	bl	8001094 <enc_SBI>
				break;
 80010f2:	bd08      	pop	{r3, pc}
			case 3 :
				enc_SBI(ENC624J600_BANK3_SELECT, keepEnabled);
 80010f4:	20c6      	movs	r0, #198	; 0xc6
 80010f6:	f7ff ffcd 	bl	8001094 <enc_SBI>
 80010fa:	bd08      	pop	{r3, pc}
 80010fc:	20000b84 	.word	0x20000b84

08001100 <readControlRegister>:

/* select bank and write control register
will always put CS high to end operation
*/
static uint8_t readControlRegister(uint8_t address)
{
 8001100:	b510      	push	{r4, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	4604      	mov	r4, r0
  uint16_t retval;
  // set the bank
  enc_setBank(address,true);
 8001106:	2101      	movs	r1, #1
 8001108:	f7ff ffd6 	bl	80010b8 <enc_setBank>
  // do the write
  enc_readOp(ENC624J600_READ_CONTROL_REGISTER, address&0x1F,(uint8_t*) &retval ,1);
 800110c:	2301      	movs	r3, #1
 800110e:	f10d 0206 	add.w	r2, sp, #6
 8001112:	f004 011f 	and.w	r1, r4, #31
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff ff7c 	bl	8001014 <enc_readOp>
  
  return retval;
}
 800111c:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8001120:	b002      	add	sp, #8
 8001122:	bd10      	pop	{r4, pc}

08001124 <readControlRegister16>:

/* select bank and read control register
will always put CS high to end operation
*/
static uint16_t readControlRegister16(uint8_t address)
{
 8001124:	b510      	push	{r4, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	4604      	mov	r4, r0
  uint16_t retval;
  // set the bank
  enc_setBank(address,true);
 800112a:	2101      	movs	r1, #1
 800112c:	f7ff ffc4 	bl	80010b8 <enc_setBank>
  // do the write
  enc_readOp(ENC624J600_READ_CONTROL_REGISTER, address&0x1F,(uint8_t*) &retval ,2);
 8001130:	2302      	movs	r3, #2
 8001132:	f10d 0206 	add.w	r2, sp, #6
 8001136:	f004 011f 	and.w	r1, r4, #31
 800113a:	2000      	movs	r0, #0
 800113c:	f7ff ff6a 	bl	8001014 <enc_readOp>
  
  return retval;
}
 8001140:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8001144:	b002      	add	sp, #8
 8001146:	bd10      	pop	{r4, pc}

08001148 <writeBitField>:


/* select bank and write control register bit
will always put CS high to end operation
*/
static void writeBitField(uint8_t address, uint8_t data) {
 8001148:	b530      	push	{r4, r5, lr}
 800114a:	b083      	sub	sp, #12
 800114c:	4605      	mov	r5, r0
 800114e:	ac02      	add	r4, sp, #8
 8001150:	f804 1d01 	strb.w	r1, [r4, #-1]!
  // set the bank
  enc_setBank(address,true);
 8001154:	2101      	movs	r1, #1
 8001156:	f7ff ffaf 	bl	80010b8 <enc_setBank>
  // do the write
  enc_writeOp(ENC624J600_BIT_FIELD_SET, address, &data,1);
 800115a:	2301      	movs	r3, #1
 800115c:	4622      	mov	r2, r4
 800115e:	4629      	mov	r1, r5
 8001160:	2080      	movs	r0, #128	; 0x80
 8001162:	f7ff ff77 	bl	8001054 <enc_writeOp>
}
 8001166:	b003      	add	sp, #12
 8001168:	bd30      	pop	{r4, r5, pc}
 800116a:	bf00      	nop

0800116c <writeControlRegister16>:
  // do the write
  enc_writeOp(ENC624J600_WRITE_CONTROL_REGISTER, address, &data, 1);
}

static void writeControlRegister16(uint8_t address, uint16_t data)
{
 800116c:	b570      	push	{r4, r5, r6, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	4604      	mov	r4, r0
 8001172:	460e      	mov	r6, r1
  uint8_t dat;
  // set the bank
  enc_setBank(address,true);
 8001174:	2101      	movs	r1, #1
 8001176:	f7ff ff9f 	bl	80010b8 <enc_setBank>
  // do the write
  
  dat = data & 0x00FF;
 800117a:	ad02      	add	r5, sp, #8
 800117c:	f805 6d01 	strb.w	r6, [r5, #-1]!
  enc_writeOp(ENC624J600_WRITE_CONTROL_REGISTER, address&0x1F,(uint8_t*) &dat , 1);
 8001180:	2301      	movs	r3, #1
 8001182:	462a      	mov	r2, r5
 8001184:	f004 011f 	and.w	r1, r4, #31
 8001188:	2040      	movs	r0, #64	; 0x40
 800118a:	f7ff ff63 	bl	8001054 <enc_writeOp>
  dat = (data & 0xFF00) >> 8;
 800118e:	0a36      	lsrs	r6, r6, #8
 8001190:	f88d 6007 	strb.w	r6, [sp, #7]
  enc_writeOp(ENC624J600_WRITE_CONTROL_REGISTER, ((address+1) & 0x1F),(uint8_t*) &dat , 1);
 8001194:	1c61      	adds	r1, r4, #1
 8001196:	2301      	movs	r3, #1
 8001198:	462a      	mov	r2, r5
 800119a:	f001 011f 	and.w	r1, r1, #31
 800119e:	2040      	movs	r0, #64	; 0x40
 80011a0:	f7ff ff58 	bl	8001054 <enc_writeOp>

}
 80011a4:	b002      	add	sp, #8
 80011a6:	bd70      	pop	{r4, r5, r6, pc}

080011a8 <writeControlRegister>:

/* select bank and write control register
will always put CS high to end operation
*/
static void writeControlRegister(uint8_t address, uint8_t data)
{
 80011a8:	b530      	push	{r4, r5, lr}
 80011aa:	b083      	sub	sp, #12
 80011ac:	4605      	mov	r5, r0
 80011ae:	ac02      	add	r4, sp, #8
 80011b0:	f804 1d01 	strb.w	r1, [r4, #-1]!
  // set the bank
  enc_setBank(address,true);
 80011b4:	2101      	movs	r1, #1
 80011b6:	f7ff ff7f 	bl	80010b8 <enc_setBank>
  // do the write
  enc_writeOp(ENC624J600_WRITE_CONTROL_REGISTER, address, &data, 1);
 80011ba:	2301      	movs	r3, #1
 80011bc:	4622      	mov	r2, r4
 80011be:	4629      	mov	r1, r5
 80011c0:	2040      	movs	r0, #64	; 0x40
 80011c2:	f7ff ff47 	bl	8001054 <enc_writeOp>
}
 80011c6:	b003      	add	sp, #12
 80011c8:	bd30      	pop	{r4, r5, pc}
 80011ca:	bf00      	nop

080011cc <writePointer>:
}



static void writePointer(uint8_t instruction, uint16_t address, bool keepEnabled)
{
 80011cc:	b570      	push	{r4, r5, r6, lr}
 80011ce:	4606      	mov	r6, r0
 80011d0:	460c      	mov	r4, r1
 80011d2:	4615      	mov	r5, r2
	CSACTIVE;
 80011d4:	2101      	movs	r1, #1
 80011d6:	4809      	ldr	r0, [pc, #36]	; (80011fc <writePointer+0x30>)
 80011d8:	f7ff fb64 	bl	80008a4 <GPIO_ResetBits>
	
	SPISend(instruction);
 80011dc:	4630      	mov	r0, r6
 80011de:	f7ff fefd 	bl	8000fdc <SPISend>
	SPISend( address&0x00FF);
 80011e2:	b2e0      	uxtb	r0, r4
 80011e4:	f7ff fefa 	bl	8000fdc <SPISend>
	SPISend( address>>8);
 80011e8:	0a20      	lsrs	r0, r4, #8
 80011ea:	f7ff fef7 	bl	8000fdc <SPISend>

  if (!keepEnabled)
 80011ee:	b91d      	cbnz	r5, 80011f8 <writePointer+0x2c>
	  CSPASSIVE;
 80011f0:	2101      	movs	r1, #1
 80011f2:	4802      	ldr	r0, [pc, #8]	; (80011fc <writePointer+0x30>)
 80011f4:	f7ff fb54 	bl	80008a0 <GPIO_SetBits>
 80011f8:	bd70      	pop	{r4, r5, r6, pc}
 80011fa:	bf00      	nop
 80011fc:	40010c00 	.word	0x40010c00

08001200 <readBuffer>:
}


static void
readBuffer(uint16_t len, uint8_t* data)
{
 8001200:	b538      	push	{r3, r4, r5, lr}
 8001202:	4604      	mov	r4, r0
 8001204:	460d      	mov	r5, r1
  CSACTIVE;
 8001206:	2101      	movs	r1, #1
 8001208:	480a      	ldr	r0, [pc, #40]	; (8001234 <readBuffer+0x34>)
 800120a:	f7ff fb4b 	bl	80008a4 <GPIO_ResetBits>
  // issue read command
  SPISend(  ENC624J600_READ_ERXDATA);
 800120e:	202c      	movs	r0, #44	; 0x2c
 8001210:	f7ff fee4 	bl	8000fdc <SPISend>
  
  #ifdef ENC28J60DEBUG
    SerialUSB.print("Readbuffer: ");
  #endif
  while(len)
 8001214:	e006      	b.n	8001224 <readBuffer+0x24>
  {
    len--;
 8001216:	3c01      	subs	r4, #1
 8001218:	b2a4      	uxth	r4, r4
    // read data

    *data = SPISend(0x00);
 800121a:	2000      	movs	r0, #0
 800121c:	f7ff fede 	bl	8000fdc <SPISend>
 8001220:	f805 0b01 	strb.w	r0, [r5], #1
  SPISend(  ENC624J600_READ_ERXDATA);
  
  #ifdef ENC28J60DEBUG
    SerialUSB.print("Readbuffer: ");
  #endif
  while(len)
 8001224:	2c00      	cmp	r4, #0
 8001226:	d1f6      	bne.n	8001216 <readBuffer+0x16>
    SerialUSB.print(*data,HEX);
    #endif
    data++;
  }
  //*data='\0';
  CSPASSIVE;
 8001228:	2101      	movs	r1, #1
 800122a:	4802      	ldr	r0, [pc, #8]	; (8001234 <readBuffer+0x34>)
 800122c:	f7ff fb38 	bl	80008a0 <GPIO_SetBits>
 8001230:	bd38      	pop	{r3, r4, r5, pc}
 8001232:	bf00      	nop
 8001234:	40010c00 	.word	0x40010c00

08001238 <writeBuffer>:
  #endif
}

static void
writeBuffer(uint16_t len, uint8_t* data)
{
 8001238:	b570      	push	{r4, r5, r6, lr}
 800123a:	4605      	mov	r5, r0
 800123c:	460e      	mov	r6, r1
  CSACTIVE;
 800123e:	2101      	movs	r1, #1
 8001240:	480a      	ldr	r0, [pc, #40]	; (800126c <writeBuffer+0x34>)
 8001242:	f7ff fb2f 	bl	80008a4 <GPIO_ResetBits>
  // issue write command
	SPISend(ENC624J600_WRITE_EGPDATA);
 8001246:	202a      	movs	r0, #42	; 0x2a
 8001248:	f7ff fec8 	bl	8000fdc <SPISend>
  //SerialUSB.print("writeBuffer: ");
	while(len--)
 800124c:	e004      	b.n	8001258 <writeBuffer+0x20>
	{
    //SerialUSB.print(*data,HEX);
    //SerialUSB.print(" ");
    SPISend( *data);
 800124e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001252:	f7ff fec3 	bl	8000fdc <SPISend>
{
  CSACTIVE;
  // issue write command
	SPISend(ENC624J600_WRITE_EGPDATA);
  //SerialUSB.print("writeBuffer: ");
	while(len--)
 8001256:	4625      	mov	r5, r4
 8001258:	1e6b      	subs	r3, r5, #1
 800125a:	b29c      	uxth	r4, r3
 800125c:	2d00      	cmp	r5, #0
 800125e:	d1f6      	bne.n	800124e <writeBuffer+0x16>
    //SerialUSB.print(" ");
    SPISend( *data);
    data++;
	}
  //SerialUSB.println("");   
  CSPASSIVE;
 8001260:	2101      	movs	r1, #1
 8001262:	4802      	ldr	r0, [pc, #8]	; (800126c <writeBuffer+0x34>)
 8001264:	f7ff fb1c 	bl	80008a0 <GPIO_SetBits>
 8001268:	bd70      	pop	{r4, r5, r6, pc}
 800126a:	bf00      	nop
 800126c:	40010c00 	.word	0x40010c00

08001270 <Enc424J600Network_initP1>:




void Enc424J600Network_initP1(uint8_t* macaddr)
{
 8001270:	b510      	push	{r4, lr}
 8001272:	4604      	mov	r4, r0
//	digitalWrite(ENC28J60_CONTROL_CS, HIGH);
//  SPI.begin();
  
	//8.1 RESET
	//STEP ONE
	writeControlRegister16(EUDASTL,0x1234);
 8001274:	f241 2134 	movw	r1, #4660	; 0x1234
 8001278:	2016      	movs	r0, #22
 800127a:	f7ff ff77 	bl	800116c <writeControlRegister16>

	//STEP TWO
	while(readControlRegister16(EUDASTL)!=0x1234)
 800127e:	e004      	b.n	800128a <Enc424J600Network_initP1+0x1a>
	{
		writeControlRegister16(EUDASTL,0x1234);
 8001280:	f241 2134 	movw	r1, #4660	; 0x1234
 8001284:	2016      	movs	r0, #22
 8001286:	f7ff ff71 	bl	800116c <writeControlRegister16>
	//8.1 RESET
	//STEP ONE
	writeControlRegister16(EUDASTL,0x1234);

	//STEP TWO
	while(readControlRegister16(EUDASTL)!=0x1234)
 800128a:	2016      	movs	r0, #22
 800128c:	f7ff ff4a 	bl	8001124 <readControlRegister16>
 8001290:	f241 2334 	movw	r3, #4660	; 0x1234
 8001294:	4298      	cmp	r0, r3
 8001296:	d1f3      	bne.n	8001280 <Enc424J600Network_initP1+0x10>
	{
		writeControlRegister16(EUDASTL,0x1234);
	}
  
	//STEP THREE
	while(readControlRegister(ESTATH) & ESTAT_CLKRDY);
 8001298:	20fb      	movs	r0, #251	; 0xfb
 800129a:	f7ff ff31 	bl	8001100 <readControlRegister>
 800129e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80012a2:	d1f9      	bne.n	8001298 <Enc424J600Network_initP1+0x28>

	//STEP FOUR
	// reset command
	enc_SBI(ENC624J600_ETH_RESET,0);
 80012a4:	2100      	movs	r1, #0
 80012a6:	20ca      	movs	r0, #202	; 0xca
 80012a8:	f7ff fef4 	bl	8001094 <enc_SBI>

	//STEP FIVE
	delayMicroseconds(25);
 80012ac:	2019      	movs	r0, #25
 80012ae:	f002 fb7d 	bl	80039ac <delayMicroseconds>
	//STEP SIX
	if (readControlRegister16(EUDASTL)==0x0000)
 80012b2:	2016      	movs	r0, #22
 80012b4:	f7ff ff36 	bl	8001124 <readControlRegister16>
 80012b8:	2800      	cmp	r0, #0
 80012ba:	d146      	bne.n	800134a <Enc424J600Network_initP1+0xda>
	{
		delayMicroseconds(265);		
 80012bc:	f240 1009 	movw	r0, #265	; 0x109
 80012c0:	f002 fb74 	bl	80039ac <delayMicroseconds>
		//8.2 CLKOUT Frequency
		// Arduino : 16MHz =>  COCON=0100 
		// We do not use the clkout
		//writeBitField( ECON2H,ECON2_COCON2>>8);
		//8.3 reception
		nextPacketPtr = RXSTART_INIT;
 80012c4:	f44f 519a 	mov.w	r1, #4928	; 0x1340
 80012c8:	4b20      	ldr	r3, [pc, #128]	; (800134c <Enc424J600Network_initP1+0xdc>)
 80012ca:	8019      	strh	r1, [r3, #0]
		writeControlRegister16(ERXSTL, RXSTART_INIT);
 80012cc:	2004      	movs	r0, #4
 80012ce:	f7ff ff4d 	bl	800116c <writeControlRegister16>

		
		writeControlRegister16(ERXTAILL, RXSTOP_INIT);
 80012d2:	f645 71ff 	movw	r1, #24575	; 0x5fff
 80012d6:	2006      	movs	r0, #6
 80012d8:	f7ff ff48 	bl	800116c <writeControlRegister16>
			
 		// USER buffer : EUDAST Pointer at a higher memory address relative to the end address.
 		writeControlRegister16(EUDASTL, 0x5FFF);
 80012dc:	f645 71ff 	movw	r1, #24575	; 0x5fff
 80012e0:	2016      	movs	r0, #22
 80012e2:	f7ff ff43 	bl	800116c <writeControlRegister16>
 		writeControlRegister16(EUDANDL, 0x5FFF);
 80012e6:	f645 71ff 	movw	r1, #24575	; 0x5fff
 80012ea:	2018      	movs	r0, #24
 80012ec:	f7ff ff3e 	bl	800116c <writeControlRegister16>
		// frames shorter than 64 bits => disabled
		// CRC error rejection => enabled
		// Unicast collection filter => enabled
		// Not me unicast filter => disabled
		// Multicast collection filter 
		writeControlRegister(ERXFCONL,ERXFCON_CRCEN|ERXFCON_RUNTEN|ERXFCON_BCEN|ERXFCON_UCEN);//ERXFCON_CRCEN|ERXFCON_RUNTEN|ERXFCON_UCEN);
 80012f0:	2159      	movs	r1, #89	; 0x59
 80012f2:	2034      	movs	r0, #52	; 0x34
 80012f4:	f7ff ff58 	bl	80011a8 <writeControlRegister>
		//exact pattern
		//writeControlRegister(ERXFCONH,0x01);
					      
		// 8.6 MAC initialization ...
		//flow control ???
		writeBitField( MACON2L, MACON2_TXCRCEN|MACON2_PADCFG0|MACON2_PADCFG1|MACON2_PADCFG2);
 80012f8:	21f0      	movs	r1, #240	; 0xf0
 80012fa:	2042      	movs	r0, #66	; 0x42
 80012fc:	f7ff ff24 	bl	8001148 <writeBitField>

		writeControlRegister16(MAMXFLL, MAX_FRAMELEN);
 8001300:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001304:	204a      	movs	r0, #74	; 0x4a
 8001306:	f7ff ff31 	bl	800116c <writeControlRegister16>



		writeControlRegister(MAADR1L, macaddr[0]);
 800130a:	7821      	ldrb	r1, [r4, #0]
 800130c:	2064      	movs	r0, #100	; 0x64
 800130e:	f7ff ff4b 	bl	80011a8 <writeControlRegister>
		writeControlRegister(MAADR1H, macaddr[1]);
 8001312:	7861      	ldrb	r1, [r4, #1]
 8001314:	2065      	movs	r0, #101	; 0x65
 8001316:	f7ff ff47 	bl	80011a8 <writeControlRegister>
		writeControlRegister(MAADR2L, macaddr[2]);
 800131a:	78a1      	ldrb	r1, [r4, #2]
 800131c:	2062      	movs	r0, #98	; 0x62
 800131e:	f7ff ff43 	bl	80011a8 <writeControlRegister>
		writeControlRegister(MAADR2H, macaddr[3]);
 8001322:	78e1      	ldrb	r1, [r4, #3]
 8001324:	2063      	movs	r0, #99	; 0x63
 8001326:	f7ff ff3f 	bl	80011a8 <writeControlRegister>
		writeControlRegister(MAADR3L, macaddr[4]);
 800132a:	7921      	ldrb	r1, [r4, #4]
 800132c:	2060      	movs	r0, #96	; 0x60
 800132e:	f7ff ff3b 	bl	80011a8 <writeControlRegister>
		writeControlRegister(MAADR3H, macaddr[5]);
 8001332:	7961      	ldrb	r1, [r4, #5]
 8001334:	2061      	movs	r0, #97	; 0x61
 8001336:	f7ff ff37 	bl	80011a8 <writeControlRegister>
		// 8.8 OTHER considerations
		//half-duplex mode
			//writeBitField( MACON2H,MACON2_DEFER|MACON2_BPEN|MACON2_NOBKOFF);$
			
		// enable interuption
		writeControlRegister(EIEL,0x40);
 800133a:	2140      	movs	r1, #64	; 0x40
 800133c:	2072      	movs	r0, #114	; 0x72
 800133e:	f7ff ff33 	bl	80011a8 <writeControlRegister>
		// configuration LED
		//		ENC624J600WCRU(EIDLEDH, 0x06);

			 //	ENC624J600PhyWrite(PHCON1,PHCON1_PFULDPX);
		// enable reception
		enc_SBI(ENC624J600_ENABLE_RX,0);
 8001342:	2100      	movs	r1, #0
 8001344:	20e8      	movs	r0, #232	; 0xe8
 8001346:	f7ff fea5 	bl	8001094 <enc_SBI>
 800134a:	bd10      	pop	{r4, pc}
 800134c:	20000b82 	.word	0x20000b82

08001350 <enc424j600PacketReceiveP1>:
//    }
//  return (0);
//}

unsigned int enc424j600PacketReceiveP1(unsigned int maxlen, unsigned char* packet)
{
 8001350:	b570      	push	{r4, r5, r6, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	4606      	mov	r6, r0
 8001356:	460d      	mov	r5, r1
    unsigned char rxdata[6];
    unsigned int len;
    uint16_t newRXTail;
    if (!(readControlRegister(EIRL) & EIR_PKTIF))
 8001358:	20fc      	movs	r0, #252	; 0xfc
 800135a:	f7ff fed1 	bl	8001100 <readControlRegister>
 800135e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001362:	d041      	beq.n	80013e8 <enc424j600PacketReceiveP1+0x98>
    {
        return (0);
    }
    //printf("Packets 0 %d\n",readControlRegister(ESTATL));
    // Set the RX Read Pointer to the beginning of the next unprocessed packet
    writePointer(ENC624J600_WRITE_ERXRDPT,nextPacketPtr,0);
 8001364:	4c23      	ldr	r4, [pc, #140]	; (80013f4 <enc424j600PacketReceiveP1+0xa4>)
 8001366:	2200      	movs	r2, #0
 8001368:	8821      	ldrh	r1, [r4, #0]
 800136a:	2064      	movs	r0, #100	; 0x64
 800136c:	f7ff ff2e 	bl	80011cc <writePointer>
    readBuffer(2, rxdata);
 8001370:	4669      	mov	r1, sp
 8001372:	2002      	movs	r0, #2
 8001374:	f7ff ff44 	bl	8001200 <readBuffer>
    nextPacketPtr  =  rxdata[1];
 8001378:	f89d 2001 	ldrb.w	r2, [sp, #1]
    nextPacketPtr  =  nextPacketPtr<<8;
    nextPacketPtr  |=  rxdata[0];
 800137c:	f89d 3000 	ldrb.w	r3, [sp]
 8001380:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001384:	8023      	strh	r3, [r4, #0]
    readBuffer(6, rxdata);
 8001386:	4669      	mov	r1, sp
 8001388:	2006      	movs	r0, #6
 800138a:	f7ff ff39 	bl	8001200 <readBuffer>
    len  =  rxdata[1];
 800138e:	f89d 4001 	ldrb.w	r4, [sp, #1]
    len  =  len<<8;
    len  |=  rxdata[0];
 8001392:	f89d 3000 	ldrb.w	r3, [sp]
 8001396:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
    len-=4;
 800139a:	3c04      	subs	r4, #4
    if ((rxdata[2] & 0x80)==0)
 800139c:	f99d 3002 	ldrsb.w	r3, [sp, #2]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db00      	blt.n	80013a6 <enc424j600PacketReceiveP1+0x56>
    {
        len=0;
 80013a4:	2400      	movs	r4, #0
    }
    if(len>maxlen)
 80013a6:	42b4      	cmp	r4, r6
 80013a8:	d900      	bls.n	80013ac <enc424j600PacketReceiveP1+0x5c>
    	len=0;
 80013aa:	2400      	movs	r4, #0
    readBuffer(len,packet);
 80013ac:	4629      	mov	r1, r5
 80013ae:	b2a0      	uxth	r0, r4
 80013b0:	f7ff ff26 	bl	8001200 <readBuffer>
    newRXTail = nextPacketPtr - 2;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <enc424j600PacketReceiveP1+0xa4>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	1e9d      	subs	r5, r3, #2
 80013ba:	b2ad      	uxth	r5, r5

    if (nextPacketPtr == RXSTART_INIT)
 80013bc:	f5b3 5f9a 	cmp.w	r3, #4928	; 0x1340
 80013c0:	d101      	bne.n	80013c6 <enc424j600PacketReceiveP1+0x76>
        newRXTail = 0x5FFE - 2;
 80013c2:	f645 75fc 	movw	r5, #24572	; 0x5ffc
    //Packet decrement
    writeControlRegister(ECON1H, 0x01);
 80013c6:	2101      	movs	r1, #1
 80013c8:	20ff      	movs	r0, #255	; 0xff
 80013ca:	f7ff feed 	bl	80011a8 <writeControlRegister>
    //printf("Packets 1 %d\n",readControlRegister(ESTATL));
    //Write new RX tail
    writeControlRegister(ERXTAILL, newRXTail);     //
 80013ce:	b2e9      	uxtb	r1, r5
 80013d0:	2006      	movs	r0, #6
 80013d2:	f7ff fee9 	bl	80011a8 <writeControlRegister>
    writeControlRegister(ERXTAILH, newRXTail>>8);
 80013d6:	0a29      	lsrs	r1, r5, #8
 80013d8:	2007      	movs	r0, #7
 80013da:	f7ff fee5 	bl	80011a8 <writeControlRegister>
    if (len>maxlen-1)
 80013de:	1e70      	subs	r0, r6, #1
 80013e0:	4284      	cmp	r4, r0
 80013e2:	d903      	bls.n	80013ec <enc424j600PacketReceiveP1+0x9c>
	{
		//len=maxlen-1;
		return 0;
 80013e4:	2000      	movs	r0, #0
 80013e6:	e002      	b.n	80013ee <enc424j600PacketReceiveP1+0x9e>
    unsigned char rxdata[6];
    unsigned int len;
    uint16_t newRXTail;
    if (!(readControlRegister(EIRL) & EIR_PKTIF))
    {
        return (0);
 80013e8:	2000      	movs	r0, #0
 80013ea:	e000      	b.n	80013ee <enc424j600PacketReceiveP1+0x9e>
    if (len>maxlen-1)
	{
		//len=maxlen-1;
		return 0;
	}
    return len;
 80013ec:	4620      	mov	r0, r4
}
 80013ee:	b002      	add	sp, #8
 80013f0:	bd70      	pop	{r4, r5, r6, pc}
 80013f2:	bf00      	nop
 80013f4:	20000b82 	.word	0x20000b82

080013f8 <enc424j600PacketSendP1>:


void enc424j600PacketSendP1(unsigned int len, unsigned char* packet)
{
 80013f8:	b538      	push	{r3, r4, r5, lr}
 80013fa:	4604      	mov	r4, r0
 80013fc:	460d      	mov	r5, r1
	writePointer(ENC624J600_WRITE_EGPWRPT,TXSTART_INIT,0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2130      	movs	r1, #48	; 0x30
 8001402:	206c      	movs	r0, #108	; 0x6c
 8001404:	f7ff fee2 	bl	80011cc <writePointer>
	writeControlRegister(ETXSTL,(TXSTART_INIT)&0x00FF);
 8001408:	2130      	movs	r1, #48	; 0x30
 800140a:	2000      	movs	r0, #0
 800140c:	f7ff fecc 	bl	80011a8 <writeControlRegister>
	writeControlRegister(ETXSTH,(TXSTART_INIT)>>8);
 8001410:	2100      	movs	r1, #0
 8001412:	2001      	movs	r0, #1
 8001414:	f7ff fec8 	bl	80011a8 <writeControlRegister>
    writeControlRegister(ETXLENL, len&0xFF);
 8001418:	b2e1      	uxtb	r1, r4
 800141a:	2002      	movs	r0, #2
 800141c:	f7ff fec4 	bl	80011a8 <writeControlRegister>
    writeControlRegister(ETXLENH, len>>8);
 8001420:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8001424:	2003      	movs	r0, #3
 8001426:	f7ff febf 	bl	80011a8 <writeControlRegister>
    writeBuffer(len, packet);
 800142a:	4629      	mov	r1, r5
 800142c:	b2a0      	uxth	r0, r4
 800142e:	f7ff ff03 	bl	8001238 <writeBuffer>
    //enc_writeOp(ENC624J600_BIT_FIELD_SET, ECON1L, ECON1_TXRTS,1);
    //writeBitField(ECON1L,ECON1_TXRTS);
    writeControlRegister(ECON1L,0x03);
 8001432:	2103      	movs	r1, #3
 8001434:	20fe      	movs	r0, #254	; 0xfe
 8001436:	f7ff feb7 	bl	80011a8 <writeControlRegister>
 800143a:	bd38      	pop	{r3, r4, r5, pc}

0800143c <addToBuf>:
uint16_t currentSecs = 0;
static uint32_t leaseStart = 0;
static uint32_t leaseTime = 0;
static uint8_t* bufPtr;
static void addToBuf(uint8_t b) {
    *bufPtr++ = b;
 800143c:	4a02      	ldr	r2, [pc, #8]	; (8001448 <addToBuf+0xc>)
 800143e:	6813      	ldr	r3, [r2, #0]
 8001440:	1c59      	adds	r1, r3, #1
 8001442:	6011      	str	r1, [r2, #0]
 8001444:	7018      	strb	r0, [r3, #0]
 8001446:	4770      	bx	lr
 8001448:	20000b8c 	.word	0x20000b8c

0800144c <dhcp_state>:
{
        // Check lease and request renew if currently OK and time
        // leaseStart - start time in millis
        // leaseTime - length of lease in millis
        //
        if( dhcpState == DHCP_STATE_OK && (leaseStart + leaseTime) <= HAL_GetTick() ) {
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <dhcp_state+0x30>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b05      	cmp	r3, #5
 8001452:	d10f      	bne.n	8001474 <dhcp_state+0x28>
static void addToBuf(uint8_t b) {
    *bufPtr++ = b;
}

uint8_t dhcp_state(void)
{
 8001454:	b510      	push	{r4, lr}
        // Check lease and request renew if currently OK and time
        // leaseStart - start time in millis
        // leaseTime - length of lease in millis
        //
        if( dhcpState == DHCP_STATE_OK && (leaseStart + leaseTime) <= HAL_GetTick() ) {
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <dhcp_state+0x34>)
 8001458:	681c      	ldr	r4, [r3, #0]
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <dhcp_state+0x38>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	441c      	add	r4, r3
 8001460:	f002 fa92 	bl	8003988 <Sys_GetTick>
 8001464:	4284      	cmp	r4, r0
 8001466:	d802      	bhi.n	800146e <dhcp_state+0x22>
                // Calling app needs to detect this and init renewal
                dhcpState = DHCP_STATE_RENEW;
 8001468:	2206      	movs	r2, #6
 800146a:	4b04      	ldr	r3, [pc, #16]	; (800147c <dhcp_state+0x30>)
 800146c:	701a      	strb	r2, [r3, #0]
        }
        return(dhcpState);
}
 800146e:	4b03      	ldr	r3, [pc, #12]	; (800147c <dhcp_state+0x30>)
 8001470:	7818      	ldrb	r0, [r3, #0]
 8001472:	bd10      	pop	{r4, pc}
 8001474:	4b01      	ldr	r3, [pc, #4]	; (800147c <dhcp_state+0x30>)
 8001476:	7818      	ldrb	r0, [r3, #0]
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000b9a 	.word	0x20000b9a
 8001480:	20000b94 	.word	0x20000b94
 8001484:	20000b9c 	.word	0x20000b9c

08001488 <dhcp_send>:
        dhcpState = DHCP_STATE_REQUEST;
}


// Main DHCP message sending function, either DHCPDISCOVER or DHCPREQUEST
void dhcp_send(uint8_t *buf, uint8_t requestType ) {
 8001488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800148c:	4605      	mov	r5, r0
 800148e:	460e      	mov	r6, r1
        int i=0;
        haveDhcpAnswer=0;
        dhcp_ansError=0;
        dhcptid_l++; // increment for next request, finally wrap
 8001490:	4b60      	ldr	r3, [pc, #384]	; (8001614 <dhcp_send+0x18c>)
 8001492:	781c      	ldrb	r4, [r3, #0]
 8001494:	3401      	adds	r4, #1
 8001496:	b2e4      	uxtb	r4, r4
 8001498:	701c      	strb	r4, [r3, #0]
        // destination IP gets replaced after this call
       
        memset(buf, 0, 400); //XXX OUCH!   
 800149a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800149e:	2100      	movs	r1, #0
 80014a0:	f004 fe92 	bl	80061c8 <memset>
        send_udp_prepare(buf,(DHCPCLIENT_SRC_PORT_H<<8)|(dhcptid_l&0xff),dhcpip,DHCP_DEST_PORT);
 80014a4:	2344      	movs	r3, #68	; 0x44
 80014a6:	4a5c      	ldr	r2, [pc, #368]	; (8001618 <dhcp_send+0x190>)
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	f444 4160 	orr.w	r1, r4, #57344	; 0xe000
 80014ae:	4628      	mov	r0, r5
 80014b0:	f000 fbca 	bl	8001c48 <send_udp_prepare>

        memcpy(buf + ETH_SRC_MAC, macaddr, 6);
 80014b4:	4b59      	ldr	r3, [pc, #356]	; (800161c <dhcp_send+0x194>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	f8c5 2006 	str.w	r2, [r5, #6]
 80014be:	889a      	ldrh	r2, [r3, #4]
 80014c0:	816a      	strh	r2, [r5, #10]
        memset(buf + ETH_DST_MAC, 0xFF, 6);
 80014c2:	f04f 32ff 	mov.w	r2, #4294967295
 80014c6:	602a      	str	r2, [r5, #0]
 80014c8:	80aa      	strh	r2, [r5, #4]
        buf[IP_TOTLEN_L_P]=0x82;
 80014ca:	f04f 0882 	mov.w	r8, #130	; 0x82
 80014ce:	f885 8011 	strb.w	r8, [r5, #17]
        buf[IP_PROTO_P]=IP_PROTO_UDP_V;
 80014d2:	2111      	movs	r1, #17
 80014d4:	75e9      	strb	r1, [r5, #23]
        memset(buf + IP_DST_P, 0xFF, 4);
 80014d6:	f8c5 201e 	str.w	r2, [r5, #30]
        buf[UDP_DST_PORT_L_P]=DHCP_SRC_PORT; 
 80014da:	2243      	movs	r2, #67	; 0x43
 80014dc:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
        buf[UDP_SRC_PORT_H_P]=0;
 80014e0:	2400      	movs	r4, #0
 80014e2:	f885 4022 	strb.w	r4, [r5, #34]	; 0x22
        buf[UDP_SRC_PORT_L_P]=DHCP_DEST_PORT;
 80014e6:	2244      	movs	r2, #68	; 0x44
 80014e8:	f885 2023 	strb.w	r2, [r5, #35]	; 0x23

        // Build DHCP Packet from buf[UDP_DATA_P]
        // Make dhcpPtr start of UDP data buffer
        dhcpData *dhcpPtr = (dhcpData *)&buf[UDP_DATA_P];
        // 0-3 op, htype, hlen, hops
        dhcpPtr->op = DHCP_BOOTREQUEST;
 80014ec:	2701      	movs	r7, #1
 80014ee:	f885 702a 	strb.w	r7, [r5, #42]	; 0x2a
        dhcpPtr->htype = 1;
 80014f2:	f885 702b 	strb.w	r7, [r5, #43]	; 0x2b
        dhcpPtr->hlen = 6;
 80014f6:	2206      	movs	r2, #6
 80014f8:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
        dhcpPtr->hops = 0;
 80014fc:	f885 402d 	strb.w	r4, [r5, #45]	; 0x2d
        // 4-7 xid
        dhcpPtr->xid = currentXid;
 8001500:	4a47      	ldr	r2, [pc, #284]	; (8001620 <dhcp_send+0x198>)
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	f8c5 202e 	str.w	r2, [r5, #46]	; 0x2e
        // 8-9 secs
        dhcpPtr->secs = currentSecs;
 8001508:	4a46      	ldr	r2, [pc, #280]	; (8001624 <dhcp_send+0x19c>)
 800150a:	8812      	ldrh	r2, [r2, #0]
 800150c:	866a      	strh	r2, [r5, #50]	; 0x32
        dhcpPtr->flags = 0x0080;
 800150e:	2280      	movs	r2, #128	; 0x80
 8001510:	86aa      	strh	r2, [r5, #52]	; 0x34
        // 16-19 yiaddr
        memset(dhcpPtr->yiaddr, 0, 4);
 8001512:	f8c5 403a 	str.w	r4, [r5, #58]	; 0x3a
        // 28-43 chaddr(16)
        memcpy(dhcpPtr->chaddr, macaddr, 6);
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	f8c5 2046 	str.w	r2, [r5, #70]	; 0x46
 800151c:	889b      	ldrh	r3, [r3, #4]
 800151e:	f8a5 304a 	strh.w	r3, [r5, #74]	; 0x4a

        // options defined as option, length, value
        bufPtr = buf + UDP_DATA_P + sizeof( dhcpData );
 8001522:	f505 728b 	add.w	r2, r5, #278	; 0x116
 8001526:	4b40      	ldr	r3, [pc, #256]	; (8001628 <dhcp_send+0x1a0>)
 8001528:	601a      	str	r2, [r3, #0]
        // Magic cookie 99, 130, 83 and 99
        addToBuf(99);
 800152a:	2063      	movs	r0, #99	; 0x63
 800152c:	f7ff ff86 	bl	800143c <addToBuf>
        addToBuf(130);
 8001530:	4640      	mov	r0, r8
 8001532:	f7ff ff83 	bl	800143c <addToBuf>
        addToBuf(83);
 8001536:	2053      	movs	r0, #83	; 0x53
 8001538:	f7ff ff80 	bl	800143c <addToBuf>
        addToBuf(99);
 800153c:	2063      	movs	r0, #99	; 0x63
 800153e:	f7ff ff7d 	bl	800143c <addToBuf>
        
        // Set correct options
        // Option 1 - DHCP message type
        addToBuf(53);   // DHCPDISCOVER, DHCPREQUEST
 8001542:	2035      	movs	r0, #53	; 0x35
 8001544:	f7ff ff7a 	bl	800143c <addToBuf>
        addToBuf(1);      // Length 
 8001548:	4638      	mov	r0, r7
 800154a:	f7ff ff77 	bl	800143c <addToBuf>
        addToBuf(requestType);      // Value
 800154e:	4630      	mov	r0, r6
 8001550:	f7ff ff74 	bl	800143c <addToBuf>

        // Client Identifier Option, this is the client mac address
        addToBuf(61);     // Client identifier
 8001554:	203d      	movs	r0, #61	; 0x3d
 8001556:	f7ff ff71 	bl	800143c <addToBuf>
        addToBuf(7);      // Length 
 800155a:	2007      	movs	r0, #7
 800155c:	f7ff ff6e 	bl	800143c <addToBuf>
        addToBuf(0x01);      // Value
 8001560:	4638      	mov	r0, r7
 8001562:	f7ff ff6b 	bl	800143c <addToBuf>
        for( i=0; i<6; i++)
 8001566:	e005      	b.n	8001574 <dhcp_send+0xec>
                addToBuf(macaddr[i]);
 8001568:	4b2c      	ldr	r3, [pc, #176]	; (800161c <dhcp_send+0x194>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	5d18      	ldrb	r0, [r3, r4]
 800156e:	f7ff ff65 	bl	800143c <addToBuf>

        // Client Identifier Option, this is the client mac address
        addToBuf(61);     // Client identifier
        addToBuf(7);      // Length 
        addToBuf(0x01);      // Value
        for( i=0; i<6; i++)
 8001572:	3401      	adds	r4, #1
 8001574:	2c05      	cmp	r4, #5
 8001576:	ddf7      	ble.n	8001568 <dhcp_send+0xe0>
                addToBuf(macaddr[i]);

        // Host name Option
        addToBuf(12);     // Host name
 8001578:	200c      	movs	r0, #12
 800157a:	f7ff ff5f 	bl	800143c <addToBuf>
        addToBuf(10);      // Length 
 800157e:	200a      	movs	r0, #10
 8001580:	f7ff ff5c 	bl	800143c <addToBuf>
        for( i=0; i<10; i++)
 8001584:	2400      	movs	r4, #0
 8001586:	e004      	b.n	8001592 <dhcp_send+0x10a>
                addToBuf(hostname[i]);
 8001588:	4b28      	ldr	r3, [pc, #160]	; (800162c <dhcp_send+0x1a4>)
 800158a:	5d18      	ldrb	r0, [r3, r4]
 800158c:	f7ff ff56 	bl	800143c <addToBuf>
                addToBuf(macaddr[i]);

        // Host name Option
        addToBuf(12);     // Host name
        addToBuf(10);      // Length 
        for( i=0; i<10; i++)
 8001590:	3401      	adds	r4, #1
 8001592:	2c09      	cmp	r4, #9
 8001594:	ddf8      	ble.n	8001588 <dhcp_send+0x100>
                addToBuf(hostname[i]);

        if( requestType == DHCPREQUEST ) {
 8001596:	2e03      	cmp	r6, #3
 8001598:	d11f      	bne.n	80015da <dhcp_send+0x152>
                // Request IP address
                addToBuf(50);     // Requested IP address
 800159a:	2032      	movs	r0, #50	; 0x32
 800159c:	f7ff ff4e 	bl	800143c <addToBuf>
                addToBuf(4);      // Length 
 80015a0:	2004      	movs	r0, #4
 80015a2:	f7ff ff4b 	bl	800143c <addToBuf>
                for( i=0; i<4; i++)
 80015a6:	2400      	movs	r4, #0
 80015a8:	e005      	b.n	80015b6 <dhcp_send+0x12e>
                        addToBuf(dhcpip[i]);
 80015aa:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <dhcp_send+0x190>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	5d18      	ldrb	r0, [r3, r4]
 80015b0:	f7ff ff44 	bl	800143c <addToBuf>

        if( requestType == DHCPREQUEST ) {
                // Request IP address
                addToBuf(50);     // Requested IP address
                addToBuf(4);      // Length 
                for( i=0; i<4; i++)
 80015b4:	3401      	adds	r4, #1
 80015b6:	2c03      	cmp	r4, #3
 80015b8:	ddf7      	ble.n	80015aa <dhcp_send+0x122>
                        addToBuf(dhcpip[i]);

                // Request using server ip address
                addToBuf(54);     // Server IP address
 80015ba:	2036      	movs	r0, #54	; 0x36
 80015bc:	f7ff ff3e 	bl	800143c <addToBuf>
                addToBuf(4);      // Length 
 80015c0:	2004      	movs	r0, #4
 80015c2:	f7ff ff3b 	bl	800143c <addToBuf>
                for( i=0; i<4; i++)
 80015c6:	2400      	movs	r4, #0
 80015c8:	e005      	b.n	80015d6 <dhcp_send+0x14e>
                        addToBuf(dhcpserver[i]);
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <dhcp_send+0x1a8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	5d18      	ldrb	r0, [r3, r4]
 80015d0:	f7ff ff34 	bl	800143c <addToBuf>
                        addToBuf(dhcpip[i]);

                // Request using server ip address
                addToBuf(54);     // Server IP address
                addToBuf(4);      // Length 
                for( i=0; i<4; i++)
 80015d4:	3401      	adds	r4, #1
 80015d6:	2c03      	cmp	r4, #3
 80015d8:	ddf7      	ble.n	80015ca <dhcp_send+0x142>
                        addToBuf(dhcpserver[i]);
        }

        // Additional information in parameter list - minimal list for what we need
        addToBuf(55);     // Parameter request list
 80015da:	2037      	movs	r0, #55	; 0x37
 80015dc:	f7ff ff2e 	bl	800143c <addToBuf>
        addToBuf(3);      // Length 
 80015e0:	2003      	movs	r0, #3
 80015e2:	f7ff ff2b 	bl	800143c <addToBuf>
        addToBuf(1);      // Subnet mask
 80015e6:	2001      	movs	r0, #1
 80015e8:	f7ff ff28 	bl	800143c <addToBuf>
        addToBuf(3);      // Route/Gateway
 80015ec:	2003      	movs	r0, #3
 80015ee:	f7ff ff25 	bl	800143c <addToBuf>
        addToBuf(6);      // DNS Server
 80015f2:	2006      	movs	r0, #6
 80015f4:	f7ff ff22 	bl	800143c <addToBuf>

        // payload len should be around 300
        addToBuf(255);      // end option
 80015f8:	20ff      	movs	r0, #255	; 0xff
 80015fa:	f7ff ff1f 	bl	800143c <addToBuf>
        send_udp_transmit(buf, bufPtr - buf - UDP_DATA_P);
 80015fe:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <dhcp_send+0x1a0>)
 8001600:	6819      	ldr	r1, [r3, #0]
 8001602:	1b49      	subs	r1, r1, r5
 8001604:	392a      	subs	r1, #42	; 0x2a
 8001606:	b289      	uxth	r1, r1
 8001608:	4628      	mov	r0, r5
 800160a:	f000 fb6b 	bl	8001ce4 <send_udp_transmit>
 800160e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001612:	bf00      	nop
 8001614:	20000ba0 	.word	0x20000ba0
 8001618:	20000d10 	.word	0x20000d10
 800161c:	20000b88 	.word	0x20000b88
 8001620:	20000b90 	.word	0x20000b90
 8001624:	20000b98 	.word	0x20000b98
 8001628:	20000b8c 	.word	0x20000b8c
 800162c:	2000001c 	.word	0x2000001c
 8001630:	20000d14 	.word	0x20000d14

08001634 <dhcp_start>:
// Wait for DHCPACK
// All configured
void dhcp_start(uint8_t *buf, uint8_t *macaddrin, uint8_t *ipaddrin,
                uint8_t *maskin, uint8_t *gwipin, uint8_t *dhcpsvrin,
                uint8_t *dnssvrin )
{
 8001634:	b510      	push	{r4, lr}
 8001636:	4604      	mov	r4, r0
        macaddr = macaddrin;
 8001638:	4820      	ldr	r0, [pc, #128]	; (80016bc <dhcp_start+0x88>)
 800163a:	6001      	str	r1, [r0, #0]
        dhcpip = ipaddrin;
 800163c:	4920      	ldr	r1, [pc, #128]	; (80016c0 <dhcp_start+0x8c>)
 800163e:	600a      	str	r2, [r1, #0]
        dhcpmask = maskin;
 8001640:	4a20      	ldr	r2, [pc, #128]	; (80016c4 <dhcp_start+0x90>)
 8001642:	6013      	str	r3, [r2, #0]
        gwaddr = gwipin;
 8001644:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <dhcp_start+0x94>)
 8001646:	9a02      	ldr	r2, [sp, #8]
 8001648:	601a      	str	r2, [r3, #0]
        dhcpserver = dhcpsvrin;
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <dhcp_start+0x98>)
 800164c:	9a03      	ldr	r2, [sp, #12]
 800164e:	601a      	str	r2, [r3, #0]
        dnsserver = dnssvrin;
 8001650:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <dhcp_start+0x9c>)
 8001652:	9a04      	ldr	r2, [sp, #16]
 8001654:	601a      	str	r2, [r3, #0]
        /*srand(analogRead(0));*/ srand(0x13);
 8001656:	2013      	movs	r0, #19
 8001658:	f004 fdbe 	bl	80061d8 <srand>
        currentXid = 0x00654321 + rand();
 800165c:	f004 fde4 	bl	8006228 <rand>
 8001660:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <dhcp_start+0xa0>)
 8001662:	4403      	add	r3, r0
 8001664:	4a1c      	ldr	r2, [pc, #112]	; (80016d8 <dhcp_start+0xa4>)
 8001666:	6013      	str	r3, [r2, #0]
        currentSecs = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	4a1c      	ldr	r2, [pc, #112]	; (80016dc <dhcp_start+0xa8>)
 800166c:	8013      	strh	r3, [r2, #0]
        int n;
        for( n=0; n<4; n++ ) {
 800166e:	e010      	b.n	8001692 <dhcp_start+0x5e>
          dhcpip[n] = 0;
 8001670:	4a13      	ldr	r2, [pc, #76]	; (80016c0 <dhcp_start+0x8c>)
 8001672:	6811      	ldr	r1, [r2, #0]
 8001674:	2200      	movs	r2, #0
 8001676:	54ca      	strb	r2, [r1, r3]
          dhcpmask[n] = 0;
 8001678:	4912      	ldr	r1, [pc, #72]	; (80016c4 <dhcp_start+0x90>)
 800167a:	6809      	ldr	r1, [r1, #0]
 800167c:	54ca      	strb	r2, [r1, r3]
          gwaddr[n] = 0;
 800167e:	4912      	ldr	r1, [pc, #72]	; (80016c8 <dhcp_start+0x94>)
 8001680:	6809      	ldr	r1, [r1, #0]
 8001682:	54ca      	strb	r2, [r1, r3]
          dhcpserver[n] = 0;
 8001684:	4911      	ldr	r1, [pc, #68]	; (80016cc <dhcp_start+0x98>)
 8001686:	6809      	ldr	r1, [r1, #0]
 8001688:	54ca      	strb	r2, [r1, r3]
          dnsserver[n] = 0;
 800168a:	4911      	ldr	r1, [pc, #68]	; (80016d0 <dhcp_start+0x9c>)
 800168c:	6809      	ldr	r1, [r1, #0]
 800168e:	54ca      	strb	r2, [r1, r3]
        dnsserver = dnssvrin;
        /*srand(analogRead(0));*/ srand(0x13);
        currentXid = 0x00654321 + rand();
        currentSecs = 0;
        int n;
        for( n=0; n<4; n++ ) {
 8001690:	3301      	adds	r3, #1
 8001692:	2b03      	cmp	r3, #3
 8001694:	ddec      	ble.n	8001670 <dhcp_start+0x3c>
          gwaddr[n] = 0;
          dhcpserver[n] = 0;
          dnsserver[n] = 0;
        }
        // Set a unique hostname, use Arduino- plus last octet of mac address
        hostname[8] = 'A' + (macaddr[5] >> 4);
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <dhcp_start+0x88>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	795b      	ldrb	r3, [r3, #5]
 800169c:	4910      	ldr	r1, [pc, #64]	; (80016e0 <dhcp_start+0xac>)
 800169e:	091a      	lsrs	r2, r3, #4
 80016a0:	3241      	adds	r2, #65	; 0x41
 80016a2:	720a      	strb	r2, [r1, #8]
        hostname[9] = 'A' + (macaddr[5] & 0x0F);
 80016a4:	f003 030f 	and.w	r3, r3, #15
 80016a8:	3341      	adds	r3, #65	; 0x41
 80016aa:	724b      	strb	r3, [r1, #9]

        // Reception of broadcast packets turned off by default, but
        // it has been shown that some routers send responses as
        // broadcasts. Enable here and disable later
        //enc424j600EnableBroadcast();
        dhcp_send( buf, DHCPDISCOVER );
 80016ac:	2101      	movs	r1, #1
 80016ae:	4620      	mov	r0, r4
 80016b0:	f7ff feea 	bl	8001488 <dhcp_send>
        dhcpState = DHCP_STATE_DISCOVER;
 80016b4:	2201      	movs	r2, #1
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <dhcp_start+0xb0>)
 80016b8:	701a      	strb	r2, [r3, #0]
 80016ba:	bd10      	pop	{r4, pc}
 80016bc:	20000b88 	.word	0x20000b88
 80016c0:	20000d10 	.word	0x20000d10
 80016c4:	20000d1c 	.word	0x20000d1c
 80016c8:	20000d18 	.word	0x20000d18
 80016cc:	20000d14 	.word	0x20000d14
 80016d0:	20000d0c 	.word	0x20000d0c
 80016d4:	00654321 	.word	0x00654321
 80016d8:	20000b90 	.word	0x20000b90
 80016dc:	20000b98 	.word	0x20000b98
 80016e0:	2000001c 	.word	0x2000001c
 80016e4:	20000b9a 	.word	0x20000b9a

080016e8 <dhcp_request_ip>:
}

void dhcp_request_ip(uint8_t *buf )
{
 80016e8:	b508      	push	{r3, lr}
        dhcp_send( buf, DHCPREQUEST );
 80016ea:	2103      	movs	r1, #3
 80016ec:	f7ff fecc 	bl	8001488 <dhcp_send>
        dhcpState = DHCP_STATE_REQUEST;
 80016f0:	2203      	movs	r2, #3
 80016f2:	4b01      	ldr	r3, [pc, #4]	; (80016f8 <dhcp_request_ip+0x10>)
 80016f4:	701a      	strb	r2, [r3, #0]
 80016f6:	bd08      	pop	{r3, pc}
 80016f8:	20000b9a 	.word	0x20000b9a

080016fc <have_dhcpoffer>:
    }
    return 0;
}


uint8_t have_dhcpoffer (uint8_t *buf,uint16_t plen) {
 80016fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Map struct onto payload
    dhcpData *dhcpPtr = (dhcpData *)((uint8_t *)buf + UDP_DATA_P);
    // Offered IP address is in yiaddr
    memcpy(dhcpip, dhcpPtr->yiaddr, 4);
 80016fe:	4b24      	ldr	r3, [pc, #144]	; (8001790 <have_dhcpoffer+0x94>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f8d0 203a 	ldr.w	r2, [r0, #58]	; 0x3a
 8001706:	601a      	str	r2, [r3, #0]
    // Scan through variable length option list identifying options we want
    uint8_t *ptr = (uint8_t*) (dhcpPtr + 1) + 4;
 8001708:	f500 738d 	add.w	r3, r0, #282	; 0x11a
    do {
        uint8_t option = *ptr++;
 800170c:	461a      	mov	r2, r3
 800170e:	f812 4b02 	ldrb.w	r4, [r2], #2
        uint8_t optionLen = *ptr++;
 8001712:	785b      	ldrb	r3, [r3, #1]
        uint8_t i;
        switch (option) {
 8001714:	2c06      	cmp	r4, #6
 8001716:	d014      	beq.n	8001742 <have_dhcpoffer+0x46>
 8001718:	d804      	bhi.n	8001724 <have_dhcpoffer+0x28>
 800171a:	2c01      	cmp	r4, #1
 800171c:	d007      	beq.n	800172e <have_dhcpoffer+0x32>
 800171e:	2c03      	cmp	r4, #3
 8001720:	d00a      	beq.n	8001738 <have_dhcpoffer+0x3c>
 8001722:	e02d      	b.n	8001780 <have_dhcpoffer+0x84>
 8001724:	2c33      	cmp	r4, #51	; 0x33
 8001726:	d011      	beq.n	800174c <have_dhcpoffer+0x50>
 8001728:	2c36      	cmp	r4, #54	; 0x36
 800172a:	d025      	beq.n	8001778 <have_dhcpoffer+0x7c>
 800172c:	e028      	b.n	8001780 <have_dhcpoffer+0x84>
            case 1:  memcpy(dhcpmask, ptr, 4);
 800172e:	4c19      	ldr	r4, [pc, #100]	; (8001794 <have_dhcpoffer+0x98>)
 8001730:	6824      	ldr	r4, [r4, #0]
 8001732:	6815      	ldr	r5, [r2, #0]
 8001734:	6025      	str	r5, [r4, #0]
                     break;
 8001736:	e023      	b.n	8001780 <have_dhcpoffer+0x84>
            case 3:  memcpy(gwaddr, ptr, 4);
 8001738:	4c17      	ldr	r4, [pc, #92]	; (8001798 <have_dhcpoffer+0x9c>)
 800173a:	6824      	ldr	r4, [r4, #0]
 800173c:	6815      	ldr	r5, [r2, #0]
 800173e:	6025      	str	r5, [r4, #0]
                     break;
 8001740:	e01e      	b.n	8001780 <have_dhcpoffer+0x84>
            case 6:  memcpy(dnsserver, ptr, 4);
 8001742:	4c16      	ldr	r4, [pc, #88]	; (800179c <have_dhcpoffer+0xa0>)
 8001744:	6824      	ldr	r4, [r4, #0]
 8001746:	6815      	ldr	r5, [r2, #0]
 8001748:	6025      	str	r5, [r4, #0]
                     break;
 800174a:	e019      	b.n	8001780 <have_dhcpoffer+0x84>
            case 51: leaseTime = 0;
 800174c:	2400      	movs	r4, #0
 800174e:	4d14      	ldr	r5, [pc, #80]	; (80017a0 <have_dhcpoffer+0xa4>)
 8001750:	602c      	str	r4, [r5, #0]
                     for (i = 0; i<4; i++)
 8001752:	e007      	b.n	8001764 <have_dhcpoffer+0x68>
                         leaseTime = (leaseTime + ptr[i]) << 8;
 8001754:	5d17      	ldrb	r7, [r2, r4]
 8001756:	4e12      	ldr	r6, [pc, #72]	; (80017a0 <have_dhcpoffer+0xa4>)
 8001758:	6835      	ldr	r5, [r6, #0]
 800175a:	443d      	add	r5, r7
 800175c:	022d      	lsls	r5, r5, #8
 800175e:	6035      	str	r5, [r6, #0]
            case 3:  memcpy(gwaddr, ptr, 4);
                     break;
            case 6:  memcpy(dnsserver, ptr, 4);
                     break;
            case 51: leaseTime = 0;
                     for (i = 0; i<4; i++)
 8001760:	3401      	adds	r4, #1
 8001762:	b2e4      	uxtb	r4, r4
 8001764:	2c03      	cmp	r4, #3
 8001766:	d9f5      	bls.n	8001754 <have_dhcpoffer+0x58>
                         leaseTime = (leaseTime + ptr[i]) << 8;
                     leaseTime *= 1000;      // milliseconds
 8001768:	4d0d      	ldr	r5, [pc, #52]	; (80017a0 <have_dhcpoffer+0xa4>)
 800176a:	682e      	ldr	r6, [r5, #0]
 800176c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001770:	fb04 f406 	mul.w	r4, r4, r6
 8001774:	602c      	str	r4, [r5, #0]
                     break;
 8001776:	e003      	b.n	8001780 <have_dhcpoffer+0x84>
            case 54: memcpy(dhcpserver, ptr, 4);
 8001778:	4c0a      	ldr	r4, [pc, #40]	; (80017a4 <have_dhcpoffer+0xa8>)
 800177a:	6824      	ldr	r4, [r4, #0]
 800177c:	6815      	ldr	r5, [r2, #0]
 800177e:	6025      	str	r5, [r4, #0]
                     break;
        }
        ptr += optionLen;
 8001780:	4413      	add	r3, r2
    } while (ptr < buf + plen);
 8001782:	1842      	adds	r2, r0, r1
 8001784:	4293      	cmp	r3, r2
 8001786:	d3c1      	bcc.n	800170c <have_dhcpoffer+0x10>
    dhcp_request_ip( buf );
 8001788:	f7ff ffae 	bl	80016e8 <dhcp_request_ip>
    return 1;
}
 800178c:	2001      	movs	r0, #1
 800178e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001790:	20000d10 	.word	0x20000d10
 8001794:	20000d1c 	.word	0x20000d1c
 8001798:	20000d18 	.word	0x20000d18
 800179c:	20000d0c 	.word	0x20000d0c
 80017a0:	20000b9c 	.word	0x20000b9c
 80017a4:	20000d14 	.word	0x20000d14

080017a8 <have_dhcpack>:

uint8_t have_dhcpack (uint8_t *buf,uint16_t plen) {
 80017a8:	b508      	push	{r3, lr}
    dhcpState = DHCP_STATE_OK;
 80017aa:	2205      	movs	r2, #5
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <have_dhcpack+0x14>)
 80017ae:	701a      	strb	r2, [r3, #0]
    leaseStart = HAL_GetTick();
 80017b0:	f002 f8ea 	bl	8003988 <Sys_GetTick>
 80017b4:	4b02      	ldr	r3, [pc, #8]	; (80017c0 <have_dhcpack+0x18>)
 80017b6:	6018      	str	r0, [r3, #0]
    // Turn off broadcast. Application if it needs it can re-enable it
    //enc424j600DisableBroadcast();
    return 2;
}
 80017b8:	2002      	movs	r0, #2
 80017ba:	bd08      	pop	{r3, pc}
 80017bc:	20000b9a 	.word	0x20000b9a
 80017c0:	20000b94 	.word	0x20000b94

080017c4 <check_for_dhcp_answer>:
// Either DHCPOFFER, DHCPACK or DHCPNACK
// Return 0 for nothing processed, 1 for done soemthing
uint8_t check_for_dhcp_answer(uint8_t *buf, uint16_t plen){
    // Map struct onto payload
    dhcpData *dhcpPtr = (dhcpData *)&buf[UDP_DATA_P];
    if (plen >= 70 && buf[UDP_SRC_PORT_L_P] == DHCP_SRC_PORT &&
 80017c4:	2945      	cmp	r1, #69	; 0x45
 80017c6:	d91f      	bls.n	8001808 <check_for_dhcp_answer+0x44>
// process the answer from the dhcp server:
// return 1 on sucessful processing of answer.
// We set also the variable haveDhcpAnswer
// Either DHCPOFFER, DHCPACK or DHCPNACK
// Return 0 for nothing processed, 1 for done soemthing
uint8_t check_for_dhcp_answer(uint8_t *buf, uint16_t plen){
 80017c8:	b508      	push	{r3, lr}
    // Map struct onto payload
    dhcpData *dhcpPtr = (dhcpData *)&buf[UDP_DATA_P];
    if (plen >= 70 && buf[UDP_SRC_PORT_L_P] == DHCP_SRC_PORT &&
 80017ca:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80017ce:	2b43      	cmp	r3, #67	; 0x43
 80017d0:	d11c      	bne.n	800180c <check_for_dhcp_answer+0x48>
            dhcpPtr->op == DHCP_BOOTREPLY && dhcpPtr->xid == currentXid ) {
 80017d2:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
// Either DHCPOFFER, DHCPACK or DHCPNACK
// Return 0 for nothing processed, 1 for done soemthing
uint8_t check_for_dhcp_answer(uint8_t *buf, uint16_t plen){
    // Map struct onto payload
    dhcpData *dhcpPtr = (dhcpData *)&buf[UDP_DATA_P];
    if (plen >= 70 && buf[UDP_SRC_PORT_L_P] == DHCP_SRC_PORT &&
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d11a      	bne.n	8001810 <check_for_dhcp_answer+0x4c>
            dhcpPtr->op == DHCP_BOOTREPLY && dhcpPtr->xid == currentXid ) {
 80017da:	f8d0 202e 	ldr.w	r2, [r0, #46]	; 0x2e
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <check_for_dhcp_answer+0x5c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d116      	bne.n	8001814 <check_for_dhcp_answer+0x50>
        // Check for lease expiry
        // uint32_t currentSecs = millis();
        int optionIndex = UDP_DATA_P + sizeof( dhcpData ) + 4;
        if( buf[optionIndex] == 53 )
 80017e6:	f890 311a 	ldrb.w	r3, [r0, #282]	; 0x11a
 80017ea:	2b35      	cmp	r3, #53	; 0x35
 80017ec:	d114      	bne.n	8001818 <check_for_dhcp_answer+0x54>
            switch( buf[optionIndex+2] ) {
 80017ee:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d002      	beq.n	80017fc <check_for_dhcp_answer+0x38>
 80017f6:	2b05      	cmp	r3, #5
 80017f8:	d003      	beq.n	8001802 <check_for_dhcp_answer+0x3e>
 80017fa:	e00f      	b.n	800181c <check_for_dhcp_answer+0x58>
                case DHCPOFFER: return have_dhcpoffer( buf, plen );
 80017fc:	f7ff ff7e 	bl	80016fc <have_dhcpoffer>
 8001800:	bd08      	pop	{r3, pc}
                case DHCPACK:   return have_dhcpack( buf, plen );
 8001802:	f7ff ffd1 	bl	80017a8 <have_dhcpack>
 8001806:	bd08      	pop	{r3, pc}
            }
    }
    return 0;
 8001808:	2000      	movs	r0, #0
}
 800180a:	4770      	bx	lr
            switch( buf[optionIndex+2] ) {
                case DHCPOFFER: return have_dhcpoffer( buf, plen );
                case DHCPACK:   return have_dhcpack( buf, plen );
            }
    }
    return 0;
 800180c:	2000      	movs	r0, #0
 800180e:	bd08      	pop	{r3, pc}
 8001810:	2000      	movs	r0, #0
 8001812:	bd08      	pop	{r3, pc}
 8001814:	2000      	movs	r0, #0
 8001816:	bd08      	pop	{r3, pc}
 8001818:	2000      	movs	r0, #0
 800181a:	bd08      	pop	{r3, pc}
 800181c:	2000      	movs	r0, #0
}
 800181e:	bd08      	pop	{r3, pc}
 8001820:	20000b90 	.word	0x20000b90

08001824 <checksum>:
//
// For more information on how this algorithm works see:
// http://www.netfor2.com/checksum.html
// http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
 8001824:	b410      	push	{r4}

        //if(type==0){    
        //        // do not add anything, standard IP checksum as described above
        //        // Usable for ICMP and IP header
        //}
        if(type==1){
 8001826:	2a01      	cmp	r2, #1
 8001828:	d102      	bne.n	8001830 <checksum+0xc>
                sum+=IP_PROTO_UDP_V; // protocol udp
                // the length here is the length of udp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real udp len
 800182a:	f101 0309 	add.w	r3, r1, #9
 800182e:	e000      	b.n	8001832 <checksum+0xe>
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
        // type 0=ip , icmp
        //      1=udp
        //      2=tcp
        uint32_t sum = 0;
 8001830:	2300      	movs	r3, #0
                sum+=IP_PROTO_UDP_V; // protocol udp
                // the length here is the length of udp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real udp len
        }
        if(type==2){
 8001832:	2a02      	cmp	r2, #2
 8001834:	d10b      	bne.n	800184e <checksum+0x2a>
                sum+=IP_PROTO_TCP_V; 
 8001836:	3306      	adds	r3, #6
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
 8001838:	440b      	add	r3, r1
 800183a:	3b08      	subs	r3, #8
 800183c:	e007      	b.n	800184e <checksum+0x2a>
        }
        // build the sum of 16bit words
        while(len >1){
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
 800183e:	7804      	ldrb	r4, [r0, #0]
 8001840:	7842      	ldrb	r2, [r0, #1]
 8001842:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8001846:	4413      	add	r3, r2
                buf+=2;
 8001848:	3002      	adds	r0, #2
                len-=2;
 800184a:	3902      	subs	r1, #2
 800184c:	b289      	uxth	r1, r1
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
        }
        // build the sum of 16bit words
        while(len >1){
 800184e:	2901      	cmp	r1, #1
 8001850:	d8f5      	bhi.n	800183e <checksum+0x1a>
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
                buf+=2;
                len-=2;
        }
        // if there is a byte left then add it (padded with zero)
        if (len){
 8001852:	b129      	cbz	r1, 8001860 <checksum+0x3c>
                sum += ((uint32_t)(0xFF & *buf))<<8;
 8001854:	7802      	ldrb	r2, [r0, #0]
 8001856:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800185a:	e001      	b.n	8001860 <checksum+0x3c>
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
                sum = (sum & 0xFFFF)+(sum >> 16);
 800185c:	b29b      	uxth	r3, r3
 800185e:	4413      	add	r3, r2
        if (len){
                sum += ((uint32_t)(0xFF & *buf))<<8;
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
 8001860:	0c1a      	lsrs	r2, r3, #16
 8001862:	d1fb      	bne.n	800185c <checksum+0x38>
                sum = (sum & 0xFFFF)+(sum >> 16);
        }
        // build 1's complement:
        return( (uint16_t) sum ^ 0xFFFF);
 8001864:	43d8      	mvns	r0, r3
}
 8001866:	b280      	uxth	r0, r0
 8001868:	bc10      	pop	{r4}
 800186a:	4770      	bx	lr

0800186c <init_ip_arp_udp_tcp>:

// This initializes the web server
// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint16_t port){
 800186c:	b410      	push	{r4}
        uint8_t i=0;
        wwwport_h=(port>>8)&0xff;
 800186e:	0a14      	lsrs	r4, r2, #8
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <init_ip_arp_udp_tcp+0x34>)
 8001872:	701c      	strb	r4, [r3, #0]
        wwwport_l=(port&0xff);
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <init_ip_arp_udp_tcp+0x38>)
 8001876:	701a      	strb	r2, [r3, #0]
}

// This initializes the web server
// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint16_t port){
        uint8_t i=0;
 8001878:	2300      	movs	r3, #0
        wwwport_h=(port>>8)&0xff;
        wwwport_l=(port&0xff);
        while(i<4){
 800187a:	e004      	b.n	8001886 <init_ip_arp_udp_tcp+0x1a>
                ipaddr[i]=myip[i];
 800187c:	5ccc      	ldrb	r4, [r1, r3]
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <init_ip_arp_udp_tcp+0x3c>)
 8001880:	54d4      	strb	r4, [r2, r3]
                i++;
 8001882:	3301      	adds	r3, #1
 8001884:	b2db      	uxtb	r3, r3
// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint16_t port){
        uint8_t i=0;
        wwwport_h=(port>>8)&0xff;
        wwwport_l=(port&0xff);
        while(i<4){
 8001886:	2b03      	cmp	r3, #3
 8001888:	d9f8      	bls.n	800187c <init_ip_arp_udp_tcp+0x10>
 800188a:	2300      	movs	r3, #0
 800188c:	e004      	b.n	8001898 <init_ip_arp_udp_tcp+0x2c>
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
                macaddr[i]=mymac[i];
 800188e:	5cc1      	ldrb	r1, [r0, r3]
 8001890:	4a06      	ldr	r2, [pc, #24]	; (80018ac <init_ip_arp_udp_tcp+0x40>)
 8001892:	54d1      	strb	r1, [r2, r3]
                i++;
 8001894:	3301      	adds	r3, #1
 8001896:	b2db      	uxtb	r3, r3
        while(i<4){
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
 8001898:	2b05      	cmp	r3, #5
 800189a:	d9f8      	bls.n	800188e <init_ip_arp_udp_tcp+0x22>
                macaddr[i]=mymac[i];
                i++;
        }
}
 800189c:	bc10      	pop	{r4}
 800189e:	4770      	bx	lr
 80018a0:	20000bb2 	.word	0x20000bb2
 80018a4:	2000002c 	.word	0x2000002c
 80018a8:	20000bb4 	.word	0x20000bb4
 80018ac:	20000d20 	.word	0x20000d20

080018b0 <check_ip_message_is_from>:

uint8_t check_ip_message_is_from(uint8_t *buf,uint8_t *ip)
{
 80018b0:	b410      	push	{r4}
        uint8_t i=0;
 80018b2:	2300      	movs	r3, #0
        while(i<4){
 80018b4:	e007      	b.n	80018c6 <check_ip_message_is_from+0x16>
                if(buf[IP_SRC_P+i]!=ip[i]){
 80018b6:	f103 021a 	add.w	r2, r3, #26
 80018ba:	5c84      	ldrb	r4, [r0, r2]
 80018bc:	5cca      	ldrb	r2, [r1, r3]
 80018be:	4294      	cmp	r4, r2
 80018c0:	d105      	bne.n	80018ce <check_ip_message_is_from+0x1e>
                        return(0);
                }
                i++;
 80018c2:	3301      	adds	r3, #1
 80018c4:	b2db      	uxtb	r3, r3
}

uint8_t check_ip_message_is_from(uint8_t *buf,uint8_t *ip)
{
        uint8_t i=0;
        while(i<4){
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d9f5      	bls.n	80018b6 <check_ip_message_is_from+0x6>
                if(buf[IP_SRC_P+i]!=ip[i]){
                        return(0);
                }
                i++;
        }
        return(1);
 80018ca:	2001      	movs	r0, #1
 80018cc:	e000      	b.n	80018d0 <check_ip_message_is_from+0x20>
uint8_t check_ip_message_is_from(uint8_t *buf,uint8_t *ip)
{
        uint8_t i=0;
        while(i<4){
                if(buf[IP_SRC_P+i]!=ip[i]){
                        return(0);
 80018ce:	2000      	movs	r0, #0
                }
                i++;
        }
        return(1);
}
 80018d0:	bc10      	pop	{r4}
 80018d2:	4770      	bx	lr

080018d4 <eth_type_is_arp_and_my_ip>:

uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint16_t len){
        uint8_t i=0;
        //  
        if (len<41){
 80018d4:	2928      	cmp	r1, #40	; 0x28
 80018d6:	d914      	bls.n	8001902 <eth_type_is_arp_and_my_ip+0x2e>
                return(0);
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
 80018d8:	7b03      	ldrb	r3, [r0, #12]
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d113      	bne.n	8001906 <eth_type_is_arp_and_my_ip+0x32>
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
 80018de:	7b43      	ldrb	r3, [r0, #13]
        uint8_t i=0;
        //  
        if (len<41){
                return(0);
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
 80018e0:	2b06      	cmp	r3, #6
 80018e2:	d112      	bne.n	800190a <eth_type_is_arp_and_my_ip+0x36>
 80018e4:	2300      	movs	r3, #0
 80018e6:	e008      	b.n	80018fa <eth_type_is_arp_and_my_ip+0x26>
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
 80018e8:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80018ec:	5c81      	ldrb	r1, [r0, r2]
 80018ee:	4a09      	ldr	r2, [pc, #36]	; (8001914 <eth_type_is_arp_and_my_ip+0x40>)
 80018f0:	5cd2      	ldrb	r2, [r2, r3]
 80018f2:	4291      	cmp	r1, r2
 80018f4:	d10b      	bne.n	800190e <eth_type_is_arp_and_my_ip+0x3a>
                        return(0);
                }
                i++;
 80018f6:	3301      	adds	r3, #1
 80018f8:	b2db      	uxtb	r3, r3
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d9f4      	bls.n	80018e8 <eth_type_is_arp_and_my_ip+0x14>
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
                        return(0);
                }
                i++;
        }
        return(1);
 80018fe:	2001      	movs	r0, #1
 8001900:	4770      	bx	lr

uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint16_t len){
        uint8_t i=0;
        //  
        if (len<41){
                return(0);
 8001902:	2000      	movs	r0, #0
 8001904:	4770      	bx	lr
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
 8001906:	2000      	movs	r0, #0
 8001908:	4770      	bx	lr
 800190a:	2000      	movs	r0, #0
 800190c:	4770      	bx	lr
        }
        while(i<4){
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
                        return(0);
 800190e:	2000      	movs	r0, #0
                }
                i++;
        }
        return(1);
}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20000bb4 	.word	0x20000bb4

08001918 <eth_type_is_ip_and_my_ip>:

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
        uint8_t i=0;
        //eth+ip+udp header is 42
        if (len<42){
 8001918:	2929      	cmp	r1, #41	; 0x29
 800191a:	d917      	bls.n	800194c <eth_type_is_ip_and_my_ip+0x34>
                return(0);
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
 800191c:	7b03      	ldrb	r3, [r0, #12]
 800191e:	2b08      	cmp	r3, #8
 8001920:	d117      	bne.n	8001952 <eth_type_is_ip_and_my_ip+0x3a>
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
 8001922:	7b43      	ldrb	r3, [r0, #13]
        uint8_t i=0;
        //eth+ip+udp header is 42
        if (len<42){
                return(0);
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
 8001924:	b9bb      	cbnz	r3, 8001956 <eth_type_is_ip_and_my_ip+0x3e>
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
        	//printf("Not eth type %d %d\n",buf[ETH_TYPE_H_P],buf[ETH_TYPE_L_P]);
                return(0);
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
 8001926:	7b82      	ldrb	r2, [r0, #14]
 8001928:	2a45      	cmp	r2, #69	; 0x45
 800192a:	d110      	bne.n	800194e <eth_type_is_ip_and_my_ip+0x36>
                i++;
        }
        return(1);
}

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
 800192c:	b410      	push	{r4}
 800192e:	2200      	movs	r2, #0
 8001930:	e008      	b.n	8001944 <eth_type_is_ip_and_my_ip+0x2c>
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
                // must be IP V4 and 20 byte header
                return(0);
        }
        while(i<4){
                if(buf[IP_DST_P+i]!=ipaddr[i]){
 8001932:	f102 011e 	add.w	r1, r2, #30
 8001936:	5c44      	ldrb	r4, [r0, r1]
 8001938:	4909      	ldr	r1, [pc, #36]	; (8001960 <eth_type_is_ip_and_my_ip+0x48>)
 800193a:	5c89      	ldrb	r1, [r1, r2]
 800193c:	428c      	cmp	r4, r1
 800193e:	d10c      	bne.n	800195a <eth_type_is_ip_and_my_ip+0x42>
                	//printf("not my ip %d %d %d \n",buf[IP_DST_P+i],ipaddr[i],i);
                        return(0);
                }
                i++;
 8001940:	3201      	adds	r2, #1
 8001942:	b2d2      	uxtb	r2, r2
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
                // must be IP V4 and 20 byte header
                return(0);
        }
        while(i<4){
 8001944:	2a03      	cmp	r2, #3
 8001946:	d9f4      	bls.n	8001932 <eth_type_is_ip_and_my_ip+0x1a>
                	//printf("not my ip %d %d %d \n",buf[IP_DST_P+i],ipaddr[i],i);
                        return(0);
                }
                i++;
        }
        return(1);
 8001948:	2301      	movs	r3, #1
 800194a:	e006      	b.n	800195a <eth_type_is_ip_and_my_ip+0x42>

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
        uint8_t i=0;
        //eth+ip+udp header is 42
        if (len<42){
                return(0);
 800194c:	2300      	movs	r3, #0
                        return(0);
                }
                i++;
        }
        return(1);
}
 800194e:	4618      	mov	r0, r3
 8001950:	4770      	bx	lr
                return(0);
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
        	//printf("Not eth type %d %d\n",buf[ETH_TYPE_H_P],buf[ETH_TYPE_L_P]);
                return(0);
 8001952:	2300      	movs	r3, #0
 8001954:	e7fb      	b.n	800194e <eth_type_is_ip_and_my_ip+0x36>
 8001956:	2300      	movs	r3, #0
 8001958:	e7f9      	b.n	800194e <eth_type_is_ip_and_my_ip+0x36>
                        return(0);
                }
                i++;
        }
        return(1);
}
 800195a:	4618      	mov	r0, r3
 800195c:	bc10      	pop	{r4}
 800195e:	4770      	bx	lr
 8001960:	20000bb4 	.word	0x20000bb4

08001964 <make_eth>:

// make a return eth header from a received eth packet
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
 8001964:	2300      	movs	r3, #0
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
 8001966:	e007      	b.n	8001978 <make_eth+0x14>
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
 8001968:	1d9a      	adds	r2, r3, #6
 800196a:	5c81      	ldrb	r1, [r0, r2]
 800196c:	54c1      	strb	r1, [r0, r3]
                buf[ETH_SRC_MAC +i]=macaddr[i];
 800196e:	4904      	ldr	r1, [pc, #16]	; (8001980 <make_eth+0x1c>)
 8001970:	5cc9      	ldrb	r1, [r1, r3]
 8001972:	5481      	strb	r1, [r0, r2]
                i++;
 8001974:	3301      	adds	r3, #1
 8001976:	b2db      	uxtb	r3, r3
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
 8001978:	2b05      	cmp	r3, #5
 800197a:	d9f5      	bls.n	8001968 <make_eth+0x4>
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000d20 	.word	0x20000d20

08001984 <fill_ip_hdr_checksum>:
		buf[ ETH_TYPE_L_P ] = ETHTYPE_IP_L_V;
}


void fill_ip_hdr_checksum(uint8_t *buf)
{
 8001984:	b510      	push	{r4, lr}
 8001986:	4604      	mov	r4, r0
        uint16_t ck;
        // clear the 2 byte checksum
        buf[IP_CHECKSUM_P]=0;
 8001988:	2200      	movs	r2, #0
 800198a:	7602      	strb	r2, [r0, #24]
        buf[IP_CHECKSUM_P+1]=0;
 800198c:	7642      	strb	r2, [r0, #25]
        buf[IP_FLAGS_P]=0x40; // don't fragment
 800198e:	2340      	movs	r3, #64	; 0x40
 8001990:	7503      	strb	r3, [r0, #20]
        buf[IP_FLAGS_P+1]=0;  // fragement offset
 8001992:	7542      	strb	r2, [r0, #21]
        buf[IP_TTL_P]=64; // ttl
 8001994:	7583      	strb	r3, [r0, #22]
        // calculate the checksum:
        ck=checksum(&buf[IP_P], IP_HEADER_LEN,0);
 8001996:	2114      	movs	r1, #20
 8001998:	300e      	adds	r0, #14
 800199a:	f7ff ff43 	bl	8001824 <checksum>
        buf[IP_CHECKSUM_P]=ck>>8;
 800199e:	0a03      	lsrs	r3, r0, #8
 80019a0:	7623      	strb	r3, [r4, #24]
        buf[IP_CHECKSUM_P+1]=ck & 0xff;
 80019a2:	7660      	strb	r0, [r4, #25]
 80019a4:	bd10      	pop	{r4, pc}
 80019a6:	bf00      	nop

080019a8 <make_ip>:
        fill_ip_hdr_checksum(buf);
}


void make_ip(uint8_t *buf)
{
 80019a8:	b510      	push	{r4, lr}
        uint8_t i=0;
 80019aa:	2300      	movs	r3, #0
        while(i<4){
 80019ac:	e00a      	b.n	80019c4 <make_ip+0x1c>
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
 80019ae:	f103 011e 	add.w	r1, r3, #30
 80019b2:	f103 021a 	add.w	r2, r3, #26
 80019b6:	5c84      	ldrb	r4, [r0, r2]
 80019b8:	5444      	strb	r4, [r0, r1]
                buf[IP_SRC_P+i]=ipaddr[i];
 80019ba:	4905      	ldr	r1, [pc, #20]	; (80019d0 <make_ip+0x28>)
 80019bc:	5cc9      	ldrb	r1, [r1, r3]
 80019be:	5481      	strb	r1, [r0, r2]
                i++;
 80019c0:	3301      	adds	r3, #1
 80019c2:	b2db      	uxtb	r3, r3


void make_ip(uint8_t *buf)
{
        uint8_t i=0;
        while(i<4){
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d9f2      	bls.n	80019ae <make_ip+0x6>
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        fill_ip_hdr_checksum(buf);
 80019c8:	f7ff ffdc 	bl	8001984 <fill_ip_hdr_checksum>
 80019cc:	bd10      	pop	{r4, pc}
 80019ce:	bf00      	nop
 80019d0:	20000bb4 	.word	0x20000bb4

080019d4 <step_seq>:
}

// swap seq and ack number and count ack number up
void step_seq(uint8_t *buf,uint16_t rel_ack_num,uint8_t cp_seq)
{
 80019d4:	b470      	push	{r4, r5, r6}
        uint8_t i;
        uint8_t tseq;
        i=4;
 80019d6:	2304      	movs	r3, #4
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
 80019d8:	e010      	b.n	80019fc <step_seq+0x28>
                rel_ack_num=buf[TCP_SEQ_H_P+i-1]+rel_ack_num;
 80019da:	f103 0525 	add.w	r5, r3, #37	; 0x25
 80019de:	5d44      	ldrb	r4, [r0, r5]
 80019e0:	4421      	add	r1, r4
 80019e2:	b289      	uxth	r1, r1
                tseq=buf[TCP_SEQACK_H_P+i-1];
 80019e4:	f103 0429 	add.w	r4, r3, #41	; 0x29
 80019e8:	5d06      	ldrb	r6, [r0, r4]
                buf[TCP_SEQACK_H_P+i-1]=0xff&rel_ack_num;
 80019ea:	5501      	strb	r1, [r0, r4]
                if (cp_seq){
 80019ec:	b10a      	cbz	r2, 80019f2 <step_seq+0x1e>
                        // copy the acknum sent to us into the sequence number
                        buf[TCP_SEQ_H_P+i-1]=tseq;
 80019ee:	5546      	strb	r6, [r0, r5]
 80019f0:	e001      	b.n	80019f6 <step_seq+0x22>
                }else{
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset vallue
 80019f2:	2400      	movs	r4, #0
 80019f4:	5544      	strb	r4, [r0, r5]
                }
                rel_ack_num=rel_ack_num>>8;
 80019f6:	0a09      	lsrs	r1, r1, #8
                i--;
 80019f8:	3b01      	subs	r3, #1
 80019fa:	b2db      	uxtb	r3, r3
        uint8_t i;
        uint8_t tseq;
        i=4;
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1ec      	bne.n	80019da <step_seq+0x6>
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset vallue
                }
                rel_ack_num=rel_ack_num>>8;
                i--;
        }
}
 8001a00:	bc70      	pop	{r4, r5, r6}
 8001a02:	4770      	bx	lr

08001a04 <make_tcphead>:
//
// After calling this function you can fill in the first data byte at TCP_OPTIONS_P+4
// If cp_seq=0 then an initial sequence number is used (should be use in synack)
// otherwise it is copied from the packet we received
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t cp_seq)
{
 8001a04:	b538      	push	{r3, r4, r5, lr}
 8001a06:	4604      	mov	r4, r0
        uint8_t i;
        // copy ports:
        i=buf[TCP_DST_PORT_H_P];
 8001a08:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
        buf[TCP_DST_PORT_H_P]=buf[TCP_SRC_PORT_H_P];
 8001a0c:	f890 5022 	ldrb.w	r5, [r0, #34]	; 0x22
 8001a10:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
        buf[TCP_SRC_PORT_H_P]=i;
 8001a14:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
        //
        i=buf[TCP_DST_PORT_L_P];
 8001a18:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
        buf[TCP_DST_PORT_L_P]=buf[TCP_SRC_PORT_L_P];
 8001a1c:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
 8001a20:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
        buf[TCP_SRC_PORT_L_P]=i;
 8001a24:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
        step_seq(buf,rel_ack_num,cp_seq);
 8001a28:	f7ff ffd4 	bl	80019d4 <step_seq>
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
 8001a32:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        // no options:
        // 20 bytes:
        // The tcp header length is only a 4 bit field (the upper 4 bits).
        // It is calculated in units of 4 bytes.
        // E.g 20 bytes: 20/4=6 => 0x50=header len field
        buf[TCP_HEADER_LEN_P]=0x50;
 8001a36:	2350      	movs	r3, #80	; 0x50
 8001a38:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8001a3c:	bd38      	pop	{r3, r4, r5, pc}
 8001a3e:	bf00      	nop

08001a40 <make_arp_answer_from_request>:
}

void make_arp_answer_from_request(uint8_t *buf)
{
 8001a40:	b510      	push	{r4, lr}
 8001a42:	4604      	mov	r4, r0
        uint8_t i=0;
        //
        make_eth(buf);
 8001a44:	f7ff ff8e 	bl	8001964 <make_eth>
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	7523      	strb	r3, [r4, #20]
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	7562      	strb	r2, [r4, #21]
        // fill the mac addresses:
        while(i<6){
 8001a50:	e00a      	b.n	8001a68 <make_arp_answer_from_request+0x28>
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
 8001a52:	f103 0120 	add.w	r1, r3, #32
 8001a56:	f103 0216 	add.w	r2, r3, #22
 8001a5a:	5ca0      	ldrb	r0, [r4, r2]
 8001a5c:	5460      	strb	r0, [r4, r1]
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
 8001a5e:	490d      	ldr	r1, [pc, #52]	; (8001a94 <make_arp_answer_from_request+0x54>)
 8001a60:	5cc9      	ldrb	r1, [r1, r3]
 8001a62:	54a1      	strb	r1, [r4, r2]
                i++;
 8001a64:	3301      	adds	r3, #1
 8001a66:	b2db      	uxtb	r3, r3
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
        // fill the mac addresses:
        while(i<6){
 8001a68:	2b05      	cmp	r3, #5
 8001a6a:	d9f2      	bls.n	8001a52 <make_arp_answer_from_request+0x12>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	e00a      	b.n	8001a86 <make_arp_answer_from_request+0x46>
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
 8001a70:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8001a74:	f103 021c 	add.w	r2, r3, #28
 8001a78:	5ca0      	ldrb	r0, [r4, r2]
 8001a7a:	5460      	strb	r0, [r4, r1]
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
 8001a7c:	4906      	ldr	r1, [pc, #24]	; (8001a98 <make_arp_answer_from_request+0x58>)
 8001a7e:	5cc9      	ldrb	r1, [r1, r3]
 8001a80:	54a1      	strb	r1, [r4, r2]
                i++;
 8001a82:	3301      	adds	r3, #1
 8001a84:	b2db      	uxtb	r3, r3
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d9f2      	bls.n	8001a70 <make_arp_answer_from_request+0x30>
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
                i++;
        }
        // eth+arp is 42 bytes:
        enc424j600PacketSendP1(42,buf);
 8001a8a:	4621      	mov	r1, r4
 8001a8c:	202a      	movs	r0, #42	; 0x2a
 8001a8e:	f7ff fcb3 	bl	80013f8 <enc424j600PacketSendP1>
 8001a92:	bd10      	pop	{r4, pc}
 8001a94:	20000d20 	.word	0x20000d20
 8001a98:	20000bb4 	.word	0x20000bb4

08001a9c <make_echo_reply_from_request>:
}

void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
{
 8001a9c:	b538      	push	{r3, r4, r5, lr}
 8001a9e:	4604      	mov	r4, r0
 8001aa0:	460d      	mov	r5, r1
        make_eth(buf);
 8001aa2:	f7ff ff5f 	bl	8001964 <make_eth>
        make_ip(buf);
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f7ff ff7e 	bl	80019a8 <make_ip>
        buf[ICMP_TYPE_P]=ICMP_TYPE_ECHOREPLY_V;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        // we changed only the icmp.type field from request(=8) to reply(=0).
        // we can therefore easily correct the checksum:
        if (buf[ICMP_CHECKSUM_P] > (0xff-0x08)){
 8001ab2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001ab6:	2bf7      	cmp	r3, #247	; 0xf7
 8001ab8:	d904      	bls.n	8001ac4 <make_echo_reply_from_request+0x28>
                buf[ICMP_CHECKSUM_P+1]++;
 8001aba:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8001abe:	3201      	adds	r2, #1
 8001ac0:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
        }
        buf[ICMP_CHECKSUM_P]+=0x08;
 8001ac4:	3308      	adds	r3, #8
 8001ac6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        //
        enc424j600PacketSendP1(len,buf);
 8001aca:	4621      	mov	r1, r4
 8001acc:	4628      	mov	r0, r5
 8001ace:	f7ff fc93 	bl	80013f8 <enc424j600PacketSendP1>
 8001ad2:	bd38      	pop	{r3, r4, r5, pc}

08001ad4 <make_tcp_synack_from_syn>:
        enc424j600PacketSendP1(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
}

// this is for the server not the client:
void make_tcp_synack_from_syn(uint8_t *buf)
{
 8001ad4:	b538      	push	{r3, r4, r5, lr}
 8001ad6:	4604      	mov	r4, r0
        uint16_t ck;
        make_eth(buf);
 8001ad8:	f7ff ff44 	bl	8001964 <make_eth>
        // total length field in the IP header must be set:
        // 20 bytes IP + 24 bytes (20tcp+4tcp options)
        buf[IP_TOTLEN_H_P]=0;
 8001adc:	2500      	movs	r5, #0
 8001ade:	7425      	strb	r5, [r4, #16]
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
 8001ae0:	232c      	movs	r3, #44	; 0x2c
 8001ae2:	7463      	strb	r3, [r4, #17]
        make_ip(buf);
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	f7ff ff5f 	bl	80019a8 <make_ip>
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYNACK_V;
 8001aea:	2312      	movs	r3, #18
 8001aec:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
        make_tcphead(buf,1,0);
 8001af0:	462a      	mov	r2, r5
 8001af2:	2101      	movs	r1, #1
 8001af4:	4620      	mov	r0, r4
 8001af6:	f7ff ff85 	bl	8001a04 <make_tcphead>
        // put an inital seq number
        buf[TCP_SEQ_H_P+0]= 0;
 8001afa:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
        buf[TCP_SEQ_H_P+1]= 0;
 8001afe:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
        // we step only the second byte, this allows us to send packts 
        // with 255 bytes, 512  or 765 (step by 3) without generating
        // overlapping numbers.
        buf[TCP_SEQ_H_P+2]= seqnum; 
 8001b02:	4a15      	ldr	r2, [pc, #84]	; (8001b58 <make_tcp_synack_from_syn+0x84>)
 8001b04:	7813      	ldrb	r3, [r2, #0]
 8001b06:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        buf[TCP_SEQ_H_P+3]= 0;
 8001b0a:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
        // step the inititial seq num by something we will not use
        // during this tcp session:
        seqnum+=3;
 8001b0e:	3303      	adds	r3, #3
 8001b10:	7013      	strb	r3, [r2, #0]
        // add an mss options field with MSS to 1280:
        // 1280 in hex is 0x500
        buf[TCP_OPTIONS_P]=2;
 8001b12:	2202      	movs	r2, #2
 8001b14:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
        buf[TCP_OPTIONS_P+1]=4;
 8001b18:	2304      	movs	r3, #4
 8001b1a:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
        buf[TCP_OPTIONS_P+2]=0x05;
 8001b1e:	2305      	movs	r3, #5
 8001b20:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        buf[TCP_OPTIONS_P+3]=0x0;
 8001b24:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
        // The tcp header length is only a 4 bit field (the upper 4 bits).
        // It is calculated in units of 4 bytes.
        // E.g 24 bytes: 24/4=6 => 0x60=header len field
        buf[TCP_HEADER_LEN_P]=0x60;
 8001b28:	2160      	movs	r1, #96	; 0x60
 8001b2a:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
        // here we must just be sure that the web browser contacting us
        // will send only one get packet
        buf[TCP_WIN_SIZE]=0x5; // 1400=0x578
 8001b2e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        buf[TCP_WIN_SIZE+1]=0x78;
 8001b32:	2378      	movs	r3, #120	; 0x78
 8001b34:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + 4 (one option: mss)
        ck=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+4,2);
 8001b38:	2120      	movs	r1, #32
 8001b3a:	f104 001a 	add.w	r0, r4, #26
 8001b3e:	f7ff fe71 	bl	8001824 <checksum>
        buf[TCP_CHECKSUM_H_P]=ck>>8;
 8001b42:	0a03      	lsrs	r3, r0, #8
 8001b44:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
 8001b48:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
        // add 4 for option mss:
        enc424j600PacketSendP1(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN,buf);
 8001b4c:	4621      	mov	r1, r4
 8001b4e:	203a      	movs	r0, #58	; 0x3a
 8001b50:	f7ff fc52 	bl	80013f8 <enc424j600PacketSendP1>
 8001b54:	bd38      	pop	{r3, r4, r5, pc}
 8001b56:	bf00      	nop
 8001b58:	2000002b 	.word	0x2000002b

08001b5c <get_tcp_data_len>:

// do some basic length calculations and store the result in static variables
uint16_t get_tcp_data_len(uint8_t *buf)
{
        int16_t i;
        i=(((int16_t)buf[IP_TOTLEN_H_P])<<8)|(buf[IP_TOTLEN_L_P]&0xff);
 8001b5c:	7c02      	ldrb	r2, [r0, #16]
 8001b5e:	7c43      	ldrb	r3, [r0, #17]
 8001b60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b64:	b21b      	sxth	r3, r3
        i-=IP_HEADER_LEN;
 8001b66:	3b14      	subs	r3, #20
 8001b68:	b29b      	uxth	r3, r3
        i-=(buf[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
 8001b6a:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 8001b6e:	0900      	lsrs	r0, r0, #4
 8001b70:	eba3 0080 	sub.w	r0, r3, r0, lsl #2
 8001b74:	b200      	sxth	r0, r0
        if (i<=0){
 8001b76:	2800      	cmp	r0, #0
 8001b78:	dc00      	bgt.n	8001b7c <get_tcp_data_len+0x20>
                i=0;
 8001b7a:	2000      	movs	r0, #0
        }
        return((uint16_t)i);
}
 8001b7c:	b280      	uxth	r0, r0
 8001b7e:	4770      	bx	lr

08001b80 <make_tcp_ack_from_any>:
}

// Make just an ack packet with no tcp data inside
// This will modify the eth/ip/tcp header 
void make_tcp_ack_from_any(uint8_t *buf,int16_t datlentoack,uint8_t addflags)
{
 8001b80:	b570      	push	{r4, r5, r6, lr}
 8001b82:	4604      	mov	r4, r0
 8001b84:	460d      	mov	r5, r1
 8001b86:	4616      	mov	r6, r2
        uint16_t j;
        make_eth(buf);
 8001b88:	f7ff feec 	bl	8001964 <make_eth>
        // fill the header:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|addflags;
 8001b8c:	f046 0310 	orr.w	r3, r6, #16
 8001b90:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
        if (addflags==TCP_FLAGS_RST_V){
 8001b94:	2e04      	cmp	r6, #4
 8001b96:	d105      	bne.n	8001ba4 <make_tcp_ack_from_any+0x24>
                make_tcphead(buf,datlentoack,1); 
 8001b98:	2201      	movs	r2, #1
 8001b9a:	b2a9      	uxth	r1, r5
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	f7ff ff31 	bl	8001a04 <make_tcphead>
 8001ba2:	e006      	b.n	8001bb2 <make_tcp_ack_from_any+0x32>
        } else {
                if (datlentoack==0){
 8001ba4:	b905      	cbnz	r5, 8001ba8 <make_tcp_ack_from_any+0x28>
                        // if there is no data then we must still acknoledge one packet
                        datlentoack = 1;
 8001ba6:	2501      	movs	r5, #1
                }
                make_tcphead(buf,datlentoack,1); // no options
 8001ba8:	2201      	movs	r2, #1
 8001baa:	b2a9      	uxth	r1, r5
 8001bac:	4620      	mov	r0, r4
 8001bae:	f7ff ff29 	bl	8001a04 <make_tcphead>
        }
        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) 
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
        buf[IP_TOTLEN_H_P]=j>>8;
 8001bb2:	2500      	movs	r5, #0
 8001bb4:	7425      	strb	r5, [r4, #16]
        buf[IP_TOTLEN_L_P]=j& 0xff;
 8001bb6:	2328      	movs	r3, #40	; 0x28
 8001bb8:	7463      	strb	r3, [r4, #17]
        make_ip(buf);
 8001bba:	4620      	mov	r0, r4
 8001bbc:	f7ff fef4 	bl	80019a8 <make_ip>
        // use a low window size otherwise we have to have
        // timers and can not just react on every packet.
        buf[TCP_WIN_SIZE]=0x4; // 1024=0x400
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        buf[TCP_WIN_SIZE+1]=0x0;
 8001bc6:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN,2);
 8001bca:	2202      	movs	r2, #2
 8001bcc:	211c      	movs	r1, #28
 8001bce:	f104 001a 	add.w	r0, r4, #26
 8001bd2:	f7ff fe27 	bl	8001824 <checksum>
        buf[TCP_CHECKSUM_H_P]=j>>8;
 8001bd6:	0a03      	lsrs	r3, r0, #8
 8001bd8:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
 8001bdc:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
        enc424j600PacketSendP1(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN,buf);
 8001be0:	4621      	mov	r1, r4
 8001be2:	2036      	movs	r0, #54	; 0x36
 8001be4:	f7ff fc08 	bl	80013f8 <enc424j600PacketSendP1>
 8001be8:	bd70      	pop	{r4, r5, r6, pc}
 8001bea:	bf00      	nop

08001bec <make_tcp_ack_with_data_noflags>:
// You can use this function only immediately after make_tcp_ack_from_any
// This is because this function will NOT modify the eth/ip/tcp header except for
// length and checksum
// You must set TCP_FLAGS before calling this
void make_tcp_ack_with_data_noflags(uint8_t *buf,uint16_t dlen)
{
 8001bec:	b538      	push	{r3, r4, r5, lr}
 8001bee:	4604      	mov	r4, r0
 8001bf0:	460d      	mov	r5, r1
        uint16_t j;
        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) + len of data
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
 8001bf2:	f101 0328 	add.w	r3, r1, #40	; 0x28
 8001bf6:	b29b      	uxth	r3, r3
        buf[IP_TOTLEN_H_P]=j>>8;
 8001bf8:	0a1a      	lsrs	r2, r3, #8
 8001bfa:	7402      	strb	r2, [r0, #16]
        buf[IP_TOTLEN_L_P]=j& 0xff;
 8001bfc:	7443      	strb	r3, [r0, #17]
        fill_ip_hdr_checksum(buf);
 8001bfe:	f7ff fec1 	bl	8001984 <fill_ip_hdr_checksum>
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
 8001c08:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+dlen,2);
 8001c0c:	f105 011c 	add.w	r1, r5, #28
 8001c10:	2202      	movs	r2, #2
 8001c12:	b289      	uxth	r1, r1
 8001c14:	f104 001a 	add.w	r0, r4, #26
 8001c18:	f7ff fe04 	bl	8001824 <checksum>
        buf[TCP_CHECKSUM_H_P]=j>>8;
 8001c1c:	0a03      	lsrs	r3, r0, #8
 8001c1e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
 8001c22:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
        enc424j600PacketSendP1(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN,buf);
 8001c26:	4621      	mov	r1, r4
 8001c28:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8001c2c:	f7ff fbe4 	bl	80013f8 <enc424j600PacketSendP1>
 8001c30:	bd38      	pop	{r3, r4, r5, pc}
 8001c32:	bf00      	nop

08001c34 <fill_buf_p>:
void fill_buf_p(uint8_t *buf,uint16_t len, const char *s)
{   
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (len) {
 8001c34:	e005      	b.n	8001c42 <fill_buf_p+0xe>
                *buf=*s;
 8001c36:	f812 3b01 	ldrb.w	r3, [r2], #1
 8001c3a:	f800 3b01 	strb.w	r3, [r0], #1
                buf++;
                s++;
                len--;
 8001c3e:	3901      	subs	r1, #1
 8001c40:	b289      	uxth	r1, r1
void fill_buf_p(uint8_t *buf,uint16_t len, const char *s)
{   
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (len) {
 8001c42:	2900      	cmp	r1, #0
 8001c44:	d1f7      	bne.n	8001c36 <fill_buf_p+0x2>
                buf++;
                s++;
                len--;
        } 

}
 8001c46:	4770      	bx	lr

08001c48 <send_udp_prepare>:
// 2) You just allocate a large enough buffer for you data and you call send_udp and nothing else
// needs to be done.
//
// send_udp sends via gwip, you must call client_set_gwip at startup
void send_udp_prepare(uint8_t *buf,uint16_t sport, uint8_t *dip, uint16_t dport)
{
 8001c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c4c:	4604      	mov	r4, r0
 8001c4e:	460e      	mov	r6, r1
 8001c50:	4615      	mov	r5, r2
 8001c52:	461f      	mov	r7, r3
        uint8_t i=0;
 8001c54:	2300      	movs	r3, #0
        while(i<6){
 8001c56:	e008      	b.n	8001c6a <send_udp_prepare+0x22>
                buf[ETH_DST_MAC +i]=gwmacaddr[i]; // gw mac in local lan or host mac
 8001c58:	4a1e      	ldr	r2, [pc, #120]	; (8001cd4 <send_udp_prepare+0x8c>)
 8001c5a:	5cd2      	ldrb	r2, [r2, r3]
 8001c5c:	54e2      	strb	r2, [r4, r3]
                buf[ETH_SRC_MAC +i]=macaddr[i];
 8001c5e:	1d9a      	adds	r2, r3, #6
 8001c60:	491d      	ldr	r1, [pc, #116]	; (8001cd8 <send_udp_prepare+0x90>)
 8001c62:	5cc9      	ldrb	r1, [r1, r3]
 8001c64:	54a1      	strb	r1, [r4, r2]
                i++;
 8001c66:	3301      	adds	r3, #1
 8001c68:	b2db      	uxtb	r3, r3
//
// send_udp sends via gwip, you must call client_set_gwip at startup
void send_udp_prepare(uint8_t *buf,uint16_t sport, uint8_t *dip, uint16_t dport)
{
        uint8_t i=0;
        while(i<6){
 8001c6a:	2b05      	cmp	r3, #5
 8001c6c:	d9f4      	bls.n	8001c58 <send_udp_prepare+0x10>
                buf[ETH_DST_MAC +i]=gwmacaddr[i]; // gw mac in local lan or host mac
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8001c6e:	2308      	movs	r3, #8
 8001c70:	7323      	strb	r3, [r4, #12]
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 8001c72:	f04f 0800 	mov.w	r8, #0
 8001c76:	f884 800d 	strb.w	r8, [r4, #13]
        fill_buf_p(&buf[IP_P],9,iphdr);
 8001c7a:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <send_udp_prepare+0x94>)
 8001c7c:	2109      	movs	r1, #9
 8001c7e:	f104 000e 	add.w	r0, r4, #14
 8001c82:	f7ff ffd7 	bl	8001c34 <fill_buf_p>
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
 8001c86:	f884 8010 	strb.w	r8, [r4, #16]
        // done in transmit: buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
        buf[IP_PROTO_P]=IP_PROTO_UDP_V;
 8001c8a:	2311      	movs	r3, #17
 8001c8c:	75e3      	strb	r3, [r4, #23]
        i=0;
 8001c8e:	4643      	mov	r3, r8
        while(i<4){
 8001c90:	e00a      	b.n	8001ca8 <send_udp_prepare+0x60>
                buf[IP_DST_P+i]=dip[i];
 8001c92:	f103 021e 	add.w	r2, r3, #30
 8001c96:	5ce9      	ldrb	r1, [r5, r3]
 8001c98:	54a1      	strb	r1, [r4, r2]
                buf[IP_SRC_P+i]=ipaddr[i];
 8001c9a:	f103 021a 	add.w	r2, r3, #26
 8001c9e:	4910      	ldr	r1, [pc, #64]	; (8001ce0 <send_udp_prepare+0x98>)
 8001ca0:	5cc9      	ldrb	r1, [r1, r3]
 8001ca2:	54a1      	strb	r1, [r4, r2]
                i++;
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	b2db      	uxtb	r3, r3
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
        // done in transmit: buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
        buf[IP_PROTO_P]=IP_PROTO_UDP_V;
        i=0;
        while(i<4){
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	d9f2      	bls.n	8001c92 <send_udp_prepare+0x4a>
                buf[IP_DST_P+i]=dip[i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        // done in transmit: fill_ip_hdr_checksum(buf);
        buf[UDP_DST_PORT_H_P]=(dport>>8);
 8001cac:	0a3b      	lsrs	r3, r7, #8
 8001cae:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        buf[UDP_DST_PORT_L_P]=0xff&dport; 
 8001cb2:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
        buf[UDP_SRC_PORT_H_P]=(sport>>8);
 8001cb6:	0a33      	lsrs	r3, r6, #8
 8001cb8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        buf[UDP_SRC_PORT_L_P]=sport&0xff; 
 8001cbc:	f884 6023 	strb.w	r6, [r4, #35]	; 0x23
        buf[UDP_LEN_H_P]=0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        // done in transmit: buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
 8001cc6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        buf[UDP_CHECKSUM_L_P]=0;
 8001cca:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 8001cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000bc8 	.word	0x20000bc8
 8001cd8:	20000d20 	.word	0x20000d20
 8001cdc:	08006c2c 	.word	0x08006c2c
 8001ce0:	20000bb4 	.word	0x20000bb4

08001ce4 <send_udp_transmit>:
        // copy the data:
        // now starting with the first byte at buf[UDP_DATA_P]
}

void send_udp_transmit(uint8_t *buf,uint16_t datalen)
{
 8001ce4:	b570      	push	{r4, r5, r6, lr}
 8001ce6:	4604      	mov	r4, r0
 8001ce8:	460d      	mov	r5, r1
        uint16_t ck;
        buf[IP_TOTLEN_H_P]=(IP_HEADER_LEN+UDP_HEADER_LEN+datalen) >> 8;
 8001cea:	f101 031c 	add.w	r3, r1, #28
 8001cee:	121b      	asrs	r3, r3, #8
 8001cf0:	7403      	strb	r3, [r0, #16]
        buf[IP_TOTLEN_L_P]=(IP_HEADER_LEN+UDP_HEADER_LEN+datalen) & 0xff;
 8001cf2:	b2ce      	uxtb	r6, r1
 8001cf4:	f106 031c 	add.w	r3, r6, #28
 8001cf8:	7443      	strb	r3, [r0, #17]
        fill_ip_hdr_checksum(buf);
 8001cfa:	f7ff fe43 	bl	8001984 <fill_ip_hdr_checksum>
        //buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        buf[UDP_LEN_H_P]=(UDP_HEADER_LEN+datalen) >>8;
 8001cfe:	f105 0308 	add.w	r3, r5, #8
 8001d02:	121b      	asrs	r3, r3, #8
 8001d04:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        buf[UDP_LEN_L_P]=(UDP_HEADER_LEN+datalen) & 0xff;
 8001d08:	3608      	adds	r6, #8
 8001d0a:	f884 6027 	strb.w	r6, [r4, #39]	; 0x27

        //
        ck=checksum(&buf[IP_SRC_P], 16 + datalen,1);
 8001d0e:	f105 0110 	add.w	r1, r5, #16
 8001d12:	2201      	movs	r2, #1
 8001d14:	b289      	uxth	r1, r1
 8001d16:	f104 001a 	add.w	r0, r4, #26
 8001d1a:	f7ff fd83 	bl	8001824 <checksum>
        buf[UDP_CHECKSUM_H_P]=ck>>8;
 8001d1e:	0a03      	lsrs	r3, r0, #8
 8001d20:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        buf[UDP_CHECKSUM_L_P]=ck& 0xff;
 8001d24:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
        enc424j600PacketSendP1(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
 8001d28:	4621      	mov	r1, r4
 8001d2a:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8001d2e:	f7ff fb63 	bl	80013f8 <enc424j600PacketSendP1>
 8001d32:	bd70      	pop	{r4, r5, r6, pc}

08001d34 <client_arp_whohas>:
#endif // WOL_client

#if defined (NTP_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
// make a arp request
void client_arp_whohas(uint8_t *buf,uint8_t *ip_we_search)
{
 8001d34:	b538      	push	{r3, r4, r5, lr}
 8001d36:	4604      	mov	r4, r0
 8001d38:	460d      	mov	r5, r1
        uint8_t i=0;
 8001d3a:	2300      	movs	r3, #0
        //
        while(i<6){
 8001d3c:	e007      	b.n	8001d4e <client_arp_whohas+0x1a>
                buf[ETH_DST_MAC +i]=0xff;
 8001d3e:	22ff      	movs	r2, #255	; 0xff
 8001d40:	54e2      	strb	r2, [r4, r3]
                buf[ETH_SRC_MAC +i]=macaddr[i];
 8001d42:	1d9a      	adds	r2, r3, #6
 8001d44:	491b      	ldr	r1, [pc, #108]	; (8001db4 <client_arp_whohas+0x80>)
 8001d46:	5cc9      	ldrb	r1, [r1, r3]
 8001d48:	54a1      	strb	r1, [r4, r2]
                i++;
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	b2db      	uxtb	r3, r3
// make a arp request
void client_arp_whohas(uint8_t *buf,uint8_t *ip_we_search)
{
        uint8_t i=0;
        //
        while(i<6){
 8001d4e:	2b05      	cmp	r3, #5
 8001d50:	d9f5      	bls.n	8001d3e <client_arp_whohas+0xa>
                buf[ETH_DST_MAC +i]=0xff;
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
 8001d52:	2108      	movs	r1, #8
 8001d54:	7321      	strb	r1, [r4, #12]
        buf[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
 8001d56:	2306      	movs	r3, #6
 8001d58:	7363      	strb	r3, [r4, #13]
        fill_buf_p(&buf[ETH_ARP_P],8,arpreqhdr);
 8001d5a:	4a17      	ldr	r2, [pc, #92]	; (8001db8 <client_arp_whohas+0x84>)
 8001d5c:	f104 000e 	add.w	r0, r4, #14
 8001d60:	f7ff ff68 	bl	8001c34 <fill_buf_p>
        i=0;
 8001d64:	2300      	movs	r3, #0
        while(i<6){
 8001d66:	e00a      	b.n	8001d7e <client_arp_whohas+0x4a>
                buf[ETH_ARP_SRC_MAC_P +i]=macaddr[i];
 8001d68:	f103 0216 	add.w	r2, r3, #22
 8001d6c:	4911      	ldr	r1, [pc, #68]	; (8001db4 <client_arp_whohas+0x80>)
 8001d6e:	5cc9      	ldrb	r1, [r1, r3]
 8001d70:	54a1      	strb	r1, [r4, r2]
                buf[ETH_ARP_DST_MAC_P+i]=0;
 8001d72:	f103 0220 	add.w	r2, r3, #32
 8001d76:	2100      	movs	r1, #0
 8001d78:	54a1      	strb	r1, [r4, r2]
                i++;
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	b2db      	uxtb	r3, r3
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
        buf[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
        fill_buf_p(&buf[ETH_ARP_P],8,arpreqhdr);
        i=0;
        while(i<6){
 8001d7e:	2b05      	cmp	r3, #5
 8001d80:	d9f2      	bls.n	8001d68 <client_arp_whohas+0x34>
 8001d82:	2300      	movs	r3, #0
 8001d84:	e00a      	b.n	8001d9c <client_arp_whohas+0x68>
                buf[ETH_ARP_DST_MAC_P+i]=0;
                i++;
        }
        i=0;
        while(i<4){
                buf[ETH_ARP_DST_IP_P+i]=*(ip_we_search +i);
 8001d86:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8001d8a:	5ce9      	ldrb	r1, [r5, r3]
 8001d8c:	54a1      	strb	r1, [r4, r2]
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
 8001d8e:	f103 021c 	add.w	r2, r3, #28
 8001d92:	490a      	ldr	r1, [pc, #40]	; (8001dbc <client_arp_whohas+0x88>)
 8001d94:	5cc9      	ldrb	r1, [r1, r3]
 8001d96:	54a1      	strb	r1, [r4, r2]
                i++;
 8001d98:	3301      	adds	r3, #1
 8001d9a:	b2db      	uxtb	r3, r3
                buf[ETH_ARP_SRC_MAC_P +i]=macaddr[i];
                buf[ETH_ARP_DST_MAC_P+i]=0;
                i++;
        }
        i=0;
        while(i<4){
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d9f2      	bls.n	8001d86 <client_arp_whohas+0x52>
                buf[ETH_ARP_DST_IP_P+i]=*(ip_we_search +i);
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
                i++;
        }
       	waitgwmac|=WGW_ACCEPT_ARP_REPLY;
 8001da0:	4a07      	ldr	r2, [pc, #28]	; (8001dc0 <client_arp_whohas+0x8c>)
 8001da2:	7813      	ldrb	r3, [r2, #0]
 8001da4:	f043 0308 	orr.w	r3, r3, #8
 8001da8:	7013      	strb	r3, [r2, #0]

        // 0x2a=42=len of packet
        enc424j600PacketSendP1(0x2a,buf);
 8001daa:	4621      	mov	r1, r4
 8001dac:	202a      	movs	r0, #42	; 0x2a
 8001dae:	f7ff fb23 	bl	80013f8 <enc424j600PacketSendP1>
 8001db2:	bd38      	pop	{r3, r4, r5, pc}
 8001db4:	20000d20 	.word	0x20000d20
 8001db8:	08006c38 	.word	0x08006c38
 8001dbc:	20000bb4 	.word	0x20000bb4
 8001dc0:	2000002d 	.word	0x2000002d

08001dc4 <client_store_gw_mac>:

// store the mac addr from an arp reply
// no len check here, you must first call eth_type_is_arp_and_my_ip
uint8_t client_store_gw_mac(uint8_t *buf)
{
        uint8_t i=0;
 8001dc4:	2300      	movs	r3, #0
        while(i<4){
 8001dc6:	e008      	b.n	8001dda <client_store_gw_mac+0x16>
                if(buf[ETH_ARP_SRC_IP_P+i]!=gwip[i]){
 8001dc8:	f103 021c 	add.w	r2, r3, #28
 8001dcc:	5c81      	ldrb	r1, [r0, r2]
 8001dce:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <client_store_gw_mac+0x38>)
 8001dd0:	5cd2      	ldrb	r2, [r2, r3]
 8001dd2:	4291      	cmp	r1, r2
 8001dd4:	d110      	bne.n	8001df8 <client_store_gw_mac+0x34>
                        return(0);
                }
                i++;
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
// store the mac addr from an arp reply
// no len check here, you must first call eth_type_is_arp_and_my_ip
uint8_t client_store_gw_mac(uint8_t *buf)
{
        uint8_t i=0;
        while(i<4){
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d9f4      	bls.n	8001dc8 <client_store_gw_mac+0x4>
 8001dde:	2300      	movs	r3, #0
 8001de0:	e006      	b.n	8001df0 <client_store_gw_mac+0x2c>
                }
                i++;
        }
        i=0;
        while(i<6){
                gwmacaddr[i]=buf[ETH_ARP_SRC_MAC_P +i];
 8001de2:	f103 0216 	add.w	r2, r3, #22
 8001de6:	5c81      	ldrb	r1, [r0, r2]
 8001de8:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <client_store_gw_mac+0x3c>)
 8001dea:	54d1      	strb	r1, [r2, r3]
                i++;
 8001dec:	3301      	adds	r3, #1
 8001dee:	b2db      	uxtb	r3, r3
                        return(0);
                }
                i++;
        }
        i=0;
        while(i<6){
 8001df0:	2b05      	cmp	r3, #5
 8001df2:	d9f6      	bls.n	8001de2 <client_store_gw_mac+0x1e>
                gwmacaddr[i]=buf[ETH_ARP_SRC_MAC_P +i];
                i++;
        }
        return(1);
 8001df4:	2001      	movs	r0, #1
 8001df6:	4770      	bx	lr
uint8_t client_store_gw_mac(uint8_t *buf)
{
        uint8_t i=0;
        while(i<4){
                if(buf[ETH_ARP_SRC_IP_P+i]!=gwip[i]){
                        return(0);
 8001df8:	2000      	movs	r0, #0
        while(i<6){
                gwmacaddr[i]=buf[ETH_ARP_SRC_MAC_P +i];
                i++;
        }
        return(1);
}
 8001dfa:	4770      	bx	lr
 8001dfc:	20000bc0 	.word	0x20000bc0
 8001e00:	20000bc8 	.word	0x20000bc8

08001e04 <client_set_gwip>:
*/

void client_set_gwip(uint8_t *gwipaddr)
{
        uint8_t i=0;
        delaycnt= 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	4a07      	ldr	r2, [pc, #28]	; (8001e24 <client_set_gwip+0x20>)
 8001e08:	8013      	strh	r3, [r2, #0]
        waitgwmac=WGW_INITIAL_ARP; // causes an arp request in the packet loop
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	4a06      	ldr	r2, [pc, #24]	; (8001e28 <client_set_gwip+0x24>)
 8001e0e:	7011      	strb	r1, [r2, #0]
        while(i<4){
 8001e10:	e004      	b.n	8001e1c <client_set_gwip+0x18>
                gwip[i]=gwipaddr[i];
 8001e12:	5cc1      	ldrb	r1, [r0, r3]
 8001e14:	4a05      	ldr	r2, [pc, #20]	; (8001e2c <client_set_gwip+0x28>)
 8001e16:	54d1      	strb	r1, [r2, r3]
                i++;
 8001e18:	3301      	adds	r3, #1
 8001e1a:	b2db      	uxtb	r3, r3
void client_set_gwip(uint8_t *gwipaddr)
{
        uint8_t i=0;
        delaycnt= 0;
        waitgwmac=WGW_INITIAL_ARP; // causes an arp request in the packet loop
        while(i<4){
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d9f8      	bls.n	8001e12 <client_set_gwip+0xe>
                gwip[i]=gwipaddr[i];
                i++;
        }
}
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000028 	.word	0x20000028
 8001e28:	2000002d 	.word	0x2000002d
 8001e2c:	20000bc0 	.word	0x20000bc0

08001e30 <client_syn>:
}

#if defined (TCP_client)
// Make a tcp syn packet
void client_syn(uint8_t *buf,uint8_t srcport,uint8_t dstport_h,uint8_t dstport_l)
{
 8001e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e34:	4604      	mov	r4, r0
 8001e36:	460d      	mov	r5, r1
 8001e38:	4617      	mov	r7, r2
 8001e3a:	461e      	mov	r6, r3
        uint16_t ck;
        uint8_t i=0;
 8001e3c:	2300      	movs	r3, #0
        // -- make the main part of the eth/IP/tcp header:
        while(i<6){
 8001e3e:	e008      	b.n	8001e52 <client_syn+0x22>
                buf[ETH_DST_MAC +i]=gwmacaddr[i]; // gw mac in local lan or host mac
 8001e40:	4a3b      	ldr	r2, [pc, #236]	; (8001f30 <client_syn+0x100>)
 8001e42:	5cd2      	ldrb	r2, [r2, r3]
 8001e44:	54e2      	strb	r2, [r4, r3]
                buf[ETH_SRC_MAC +i]=macaddr[i];
 8001e46:	1d9a      	adds	r2, r3, #6
 8001e48:	493a      	ldr	r1, [pc, #232]	; (8001f34 <client_syn+0x104>)
 8001e4a:	5cc9      	ldrb	r1, [r1, r3]
 8001e4c:	54a1      	strb	r1, [r4, r2]
                i++;
 8001e4e:	3301      	adds	r3, #1
 8001e50:	b2db      	uxtb	r3, r3
void client_syn(uint8_t *buf,uint8_t srcport,uint8_t dstport_h,uint8_t dstport_l)
{
        uint16_t ck;
        uint8_t i=0;
        // -- make the main part of the eth/IP/tcp header:
        while(i<6){
 8001e52:	2b05      	cmp	r3, #5
 8001e54:	d9f4      	bls.n	8001e40 <client_syn+0x10>
                buf[ETH_DST_MAC +i]=gwmacaddr[i]; // gw mac in local lan or host mac
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
        buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 8001e56:	2308      	movs	r3, #8
 8001e58:	7323      	strb	r3, [r4, #12]
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 8001e5a:	f04f 0800 	mov.w	r8, #0
 8001e5e:	f884 800d 	strb.w	r8, [r4, #13]
        fill_buf_p(&buf[IP_P],9,iphdr);
 8001e62:	4a35      	ldr	r2, [pc, #212]	; (8001f38 <client_syn+0x108>)
 8001e64:	2109      	movs	r1, #9
 8001e66:	f104 000e 	add.w	r0, r4, #14
 8001e6a:	f7ff fee3 	bl	8001c34 <fill_buf_p>
        buf[IP_TOTLEN_L_P]=44; // good for syn
 8001e6e:	232c      	movs	r3, #44	; 0x2c
 8001e70:	7463      	strb	r3, [r4, #17]
        buf[IP_PROTO_P]=IP_PROTO_TCP_V;
 8001e72:	2306      	movs	r3, #6
 8001e74:	75e3      	strb	r3, [r4, #23]
        i=0;
 8001e76:	4643      	mov	r3, r8
        while(i<4){
 8001e78:	e00b      	b.n	8001e92 <client_syn+0x62>
                buf[IP_DST_P+i]=tcpsrvip[i];
 8001e7a:	f103 021e 	add.w	r2, r3, #30
 8001e7e:	492f      	ldr	r1, [pc, #188]	; (8001f3c <client_syn+0x10c>)
 8001e80:	5cc9      	ldrb	r1, [r1, r3]
 8001e82:	54a1      	strb	r1, [r4, r2]
                buf[IP_SRC_P+i]=ipaddr[i];
 8001e84:	f103 021a 	add.w	r2, r3, #26
 8001e88:	492d      	ldr	r1, [pc, #180]	; (8001f40 <client_syn+0x110>)
 8001e8a:	5cc9      	ldrb	r1, [r1, r3]
 8001e8c:	54a1      	strb	r1, [r4, r2]
                i++;
 8001e8e:	3301      	adds	r3, #1
 8001e90:	b2db      	uxtb	r3, r3
        buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
        fill_buf_p(&buf[IP_P],9,iphdr);
        buf[IP_TOTLEN_L_P]=44; // good for syn
        buf[IP_PROTO_P]=IP_PROTO_TCP_V;
        i=0;
        while(i<4){
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d9f1      	bls.n	8001e7a <client_syn+0x4a>
                buf[IP_DST_P+i]=tcpsrvip[i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        fill_ip_hdr_checksum(buf);
 8001e96:	4620      	mov	r0, r4
 8001e98:	f7ff fd74 	bl	8001984 <fill_ip_hdr_checksum>
        buf[TCP_DST_PORT_H_P]=dstport_h;
 8001e9c:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
        buf[TCP_DST_PORT_L_P]=dstport_l;
 8001ea0:	f884 6025 	strb.w	r6, [r4, #37]	; 0x25
        buf[TCP_SRC_PORT_H_P]=TCPCLIENT_SRC_PORT_H;
 8001ea4:	230b      	movs	r3, #11
 8001ea6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        buf[TCP_SRC_PORT_L_P]=srcport; // lower 8 bit of src port
 8001eaa:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
        i=0;
 8001eae:	2300      	movs	r3, #0
        // zero out sequence number and acknowledgement number
        while(i<8){
 8001eb0:	e005      	b.n	8001ebe <client_syn+0x8e>
                buf[TCP_SEQ_H_P+i]=0;
 8001eb2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	54a1      	strb	r1, [r4, r2]
                i++;
 8001eba:	3301      	adds	r3, #1
 8001ebc:	b2db      	uxtb	r3, r3
        buf[TCP_DST_PORT_L_P]=dstport_l;
        buf[TCP_SRC_PORT_H_P]=TCPCLIENT_SRC_PORT_H;
        buf[TCP_SRC_PORT_L_P]=srcport; // lower 8 bit of src port
        i=0;
        // zero out sequence number and acknowledgement number
        while(i<8){
 8001ebe:	2b07      	cmp	r3, #7
 8001ec0:	d9f7      	bls.n	8001eb2 <client_syn+0x82>
        // -- header ready 
        // put inital seq number
        // we step only the second byte, this allows us to send packts 
        // with 255 bytes 512 (if we step the initial seqnum by 2)
        // or 765 (step by 3)
        buf[TCP_SEQ_H_P+2]= seqnum; 
 8001ec2:	4a20      	ldr	r2, [pc, #128]	; (8001f44 <client_syn+0x114>)
 8001ec4:	7813      	ldrb	r3, [r2, #0]
 8001ec6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        // step the inititial seq num by something we will not use
        // during this tcp session:
        seqnum+=3;
 8001eca:	3303      	adds	r3, #3
 8001ecc:	7013      	strb	r3, [r2, #0]
        buf[TCP_HEADER_LEN_P]=0x60; // 0x60=24 len: (0x60>>4) * 4
 8001ece:	2360      	movs	r3, #96	; 0x60
 8001ed0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYN_V;
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
        // use a low window size otherwise we have to have
        // timers and can not just react on every packet.
        buf[TCP_WIN_SIZE]=0x4; // 1024=0x400, 768 = 0x300, initial window
 8001eda:	2104      	movs	r1, #4
 8001edc:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        buf[TCP_WIN_SIZE+1]=0x0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
 8001ee6:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        buf[TCP_CHECKSUM_L_P]=0;
 8001eea:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        // urgent pointer
        buf[TCP_CHECKSUM_L_P+1]=0;
 8001eee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        buf[TCP_CHECKSUM_L_P+2]=0;
 8001ef2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        // MSS=768, must be more than 50% of the window size we use
        // 768 in hex is 0x300
        buf[TCP_OPTIONS_P]=2;
 8001ef6:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
        buf[TCP_OPTIONS_P+1]=4;
 8001efa:	f884 1037 	strb.w	r1, [r4, #55]	; 0x37
        buf[TCP_OPTIONS_P+2]=(CLIENTMSS>>8);
 8001efe:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
        buf[TCP_OPTIONS_P+3]=CLIENTMSS & 0xff;
 8001f02:	2326      	movs	r3, #38	; 0x26
 8001f04:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        ck=checksum(&buf[IP_SRC_P], 8 +TCP_HEADER_LEN_PLAIN+4,2);
 8001f08:	2120      	movs	r1, #32
 8001f0a:	f104 001a 	add.w	r0, r4, #26
 8001f0e:	f7ff fc89 	bl	8001824 <checksum>
        buf[TCP_CHECKSUM_H_P]=ck>>8;
 8001f12:	0a03      	lsrs	r3, r0, #8
 8001f14:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
 8001f18:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
        // 4 is the tcp mss option:
        enc424j600PacketSendP1(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN+4,buf);
 8001f1c:	4621      	mov	r1, r4
 8001f1e:	203a      	movs	r0, #58	; 0x3a
 8001f20:	f7ff fa6a 	bl	80013f8 <enc424j600PacketSendP1>
#ifdef ETHERSHIELD_DEBUG
        ethershieldDebug( "Sent TCP Syn\n");
 8001f24:	4808      	ldr	r0, [pc, #32]	; (8001f48 <client_syn+0x118>)
 8001f26:	f002 fa71 	bl	800440c <puts>
 8001f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000bc8 	.word	0x20000bc8
 8001f34:	20000d20 	.word	0x20000d20
 8001f38:	08006c2c 	.word	0x08006c2c
 8001f3c:	20000ba4 	.word	0x20000ba4
 8001f40:	20000bb4 	.word	0x20000bb4
 8001f44:	2000002b 	.word	0x2000002b
 8001f48:	08006b84 	.word	0x08006b84

08001f4c <packetloop_icmp_tcp>:
#endif // PING_client

// return 0 to just continue in the packet loop and return the position 
// of the tcp/udp data if there is tcp/udp data part
uint16_t packetloop_icmp_tcp(uint8_t *buf,uint16_t plen)
{
 8001f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f50:	4604      	mov	r4, r0
#endif

        //plen will be unequal to zero if there is a valid 
        // packet (without crc error):
#if defined (NTP_client) ||  defined (UDP_client) || defined (TCP_client) || defined (PING_client)
        if(plen==0){
 8001f52:	2900      	cmp	r1, #0
 8001f54:	d132      	bne.n	8001fbc <packetloop_icmp_tcp+0x70>
        	//printf("Delay  %d \n",delaycnt);
                if ((waitgwmac & WGW_INITIAL_ARP||waitgwmac & WGW_REFRESHING) && delaycnt==0){// && Enc424J600Network_linkStatus()){
 8001f56:	4bb2      	ldr	r3, [pc, #712]	; (8002220 <packetloop_icmp_tcp+0x2d4>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	f013 0f01 	tst.w	r3, #1
 8001f5e:	d104      	bne.n	8001f6a <packetloop_icmp_tcp+0x1e>
 8001f60:	4baf      	ldr	r3, [pc, #700]	; (8002220 <packetloop_icmp_tcp+0x2d4>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	f013 0f04 	tst.w	r3, #4
 8001f68:	d007      	beq.n	8001f7a <packetloop_icmp_tcp+0x2e>
 8001f6a:	4bae      	ldr	r3, [pc, #696]	; (8002224 <packetloop_icmp_tcp+0x2d8>)
 8001f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f70:	b91b      	cbnz	r3, 8001f7a <packetloop_icmp_tcp+0x2e>
                        client_arp_whohas(buf,gwip);
 8001f72:	49ad      	ldr	r1, [pc, #692]	; (8002228 <packetloop_icmp_tcp+0x2dc>)
 8001f74:	4620      	mov	r0, r4
 8001f76:	f7ff fedd 	bl	8001d34 <client_arp_whohas>
                        //printf("Running ARP\n");
                }
                delaycnt++;
 8001f7a:	4aaa      	ldr	r2, [pc, #680]	; (8002224 <packetloop_icmp_tcp+0x2d8>)
 8001f7c:	8813      	ldrh	r3, [r2, #0]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	8013      	strh	r3, [r2, #0]
#if defined (TCP_client)
                //USART_Send(tcp_client_state);
                //if (tcp_client_state==1  && (waitgwmac & WGW_HAVE_GW_MAC)){ // send a syn
                	if (tcp_client_state==1  ){ // send a syn
 8001f82:	4baa      	ldr	r3, [pc, #680]	; (800222c <packetloop_icmp_tcp+0x2e0>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	f040 81c2 	bne.w	8002310 <packetloop_icmp_tcp+0x3c4>
                        tcp_client_state= 2;
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	4ba7      	ldr	r3, [pc, #668]	; (800222c <packetloop_icmp_tcp+0x2e0>)
 8001f90:	701a      	strb	r2, [r3, #0]
                        tcpclient_src_port_l++; // allocate a new port
 8001f92:	4aa7      	ldr	r2, [pc, #668]	; (8002230 <packetloop_icmp_tcp+0x2e4>)
 8001f94:	7813      	ldrb	r3, [r2, #0]
 8001f96:	3301      	adds	r3, #1
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	7013      	strb	r3, [r2, #0]
                        // we encode our 3 bit fd into the src port this
                        // way we get it back in every message that comes
                        // from the server:
                        client_syn(buf,((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port_h,tcp_client_port_l);
 8001f9c:	4aa5      	ldr	r2, [pc, #660]	; (8002234 <packetloop_icmp_tcp+0x2e8>)
 8001f9e:	7811      	ldrb	r1, [r2, #0]
 8001fa0:	f003 031f 	and.w	r3, r3, #31
 8001fa4:	ea43 1141 	orr.w	r1, r3, r1, lsl #5
 8001fa8:	4ba3      	ldr	r3, [pc, #652]	; (8002238 <packetloop_icmp_tcp+0x2ec>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	4aa3      	ldr	r2, [pc, #652]	; (800223c <packetloop_icmp_tcp+0x2f0>)
 8001fae:	7812      	ldrb	r2, [r2, #0]
 8001fb0:	b2c9      	uxtb	r1, r1
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f7ff ff3c 	bl	8001e30 <client_syn>
                        //USART_Send(0x44);
                }
#endif
                	//printf("return 0\n");
                	return(0);
 8001fb8:	2500      	movs	r5, #0
 8001fba:	e1c0      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
 8001fbc:	460e      	mov	r6, r1
        }
#endif // NTP_client||UDP_client||TCP_client||PING_client
        // arp is broadcast if unknown but a host may also
        // verify the mac address by sending it to 
        // a unicast address.
        if(eth_type_is_arp_and_my_ip(buf,plen)){
 8001fbe:	f7ff fc89 	bl	80018d4 <eth_type_is_arp_and_my_ip>
 8001fc2:	b1d0      	cbz	r0, 8001ffa <packetloop_icmp_tcp+0xae>
        		//printf("my ip ARP Rx\n");
                if (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V){
 8001fc4:	7d63      	ldrb	r3, [r4, #21]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d102      	bne.n	8001fd0 <packetloop_icmp_tcp+0x84>
                        // is it an arp request 
                        make_arp_answer_from_request(buf);
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f7ff fd38 	bl	8001a40 <make_arp_answer_from_request>
                        //printf("ARP reply created \n");
                }
#if defined (NTP_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
                if (waitgwmac & WGW_ACCEPT_ARP_REPLY && (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V)){
 8001fd0:	4b93      	ldr	r3, [pc, #588]	; (8002220 <packetloop_icmp_tcp+0x2d4>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	f013 0f08 	tst.w	r3, #8
 8001fd8:	f000 819c 	beq.w	8002314 <packetloop_icmp_tcp+0x3c8>
 8001fdc:	7d63      	ldrb	r3, [r4, #21]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	f040 819a 	bne.w	8002318 <packetloop_icmp_tcp+0x3cc>
                        // is it an arp reply 
                	//printf("ARP reply received \n");
                        if (client_store_gw_mac(buf)){
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	f7ff feed 	bl	8001dc4 <client_store_gw_mac>
 8001fea:	2800      	cmp	r0, #0
 8001fec:	f000 8196 	beq.w	800231c <packetloop_icmp_tcp+0x3d0>
                                waitgwmac=WGW_HAVE_GW_MAC;
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	4b8b      	ldr	r3, [pc, #556]	; (8002220 <packetloop_icmp_tcp+0x2d4>)
 8001ff4:	701a      	strb	r2, [r3, #0]
                                //printf("GW Mac stored\n");
                        }
                }
#endif // NTP_client||UDP_client||TCP_client||PING_client
                //printf("return 1\n");
                return(0);
 8001ff6:	2500      	movs	r5, #0
 8001ff8:	e1a1      	b.n	800233e <packetloop_icmp_tcp+0x3f2>

        }
        // check if ip packets are for us:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
 8001ffa:	4631      	mov	r1, r6
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	f7ff fc8b 	bl	8001918 <eth_type_is_ip_and_my_ip>
 8002002:	2800      	cmp	r0, #0
 8002004:	f000 818c 	beq.w	8002320 <packetloop_icmp_tcp+0x3d4>
        }
#endif // NTP_client
#ifdef DNS_client
        // TODO - does this work?
        // If DNS response, drop out to have it processed elsewhere
        if(buf[IP_PROTO_P] == IP_PROTO_UDP_V && buf[UDP_SRC_PORT_H_P]==0 && buf[UDP_SRC_PORT_L_P]== 53 ) {
 8002008:	7de3      	ldrb	r3, [r4, #23]
 800200a:	2b11      	cmp	r3, #17
 800200c:	d107      	bne.n	800201e <packetloop_icmp_tcp+0xd2>
 800200e:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8002012:	b922      	cbnz	r2, 800201e <packetloop_icmp_tcp+0xd2>
 8002014:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8002018:	2a35      	cmp	r2, #53	; 0x35
 800201a:	f000 8183 	beq.w	8002324 <packetloop_icmp_tcp+0x3d8>
                return( UDP_DATA_P );
        }
#endif

        if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
 800201e:	2b01      	cmp	r3, #1
 8002020:	d112      	bne.n	8002048 <packetloop_icmp_tcp+0xfc>
 8002022:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8002026:	2a08      	cmp	r2, #8
 8002028:	d10e      	bne.n	8002048 <packetloop_icmp_tcp+0xfc>
                if (icmp_callback){
 800202a:	4b85      	ldr	r3, [pc, #532]	; (8002240 <packetloop_icmp_tcp+0x2f4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	b113      	cbz	r3, 8002036 <packetloop_icmp_tcp+0xea>
                        (*icmp_callback)(&(buf[IP_SRC_P]));
 8002030:	f104 001a 	add.w	r0, r4, #26
 8002034:	4798      	blx	r3
                }
                // a ping packet, let's send pong
                make_echo_reply_from_request(buf,plen);
 8002036:	4631      	mov	r1, r6
 8002038:	4620      	mov	r0, r4
 800203a:	f7ff fd2f 	bl	8001a9c <make_echo_reply_from_request>
                //ES_PingCallback();
                printf("return 3\n");
 800203e:	4881      	ldr	r0, [pc, #516]	; (8002244 <packetloop_icmp_tcp+0x2f8>)
 8002040:	f002 f9e4 	bl	800440c <puts>
                return(0);
 8002044:	2500      	movs	r5, #0
 8002046:	e17a      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
        }
        if (plen<54 && buf[IP_PROTO_P]!=IP_PROTO_TCP_V ){
 8002048:	2e35      	cmp	r6, #53	; 0x35
 800204a:	d802      	bhi.n	8002052 <packetloop_icmp_tcp+0x106>
 800204c:	2b06      	cmp	r3, #6
 800204e:	f040 816b 	bne.w	8002328 <packetloop_icmp_tcp+0x3dc>
        	//printf("return 4\n");
                return(0);
        }
#if  defined (TCP_client) 
        // a message for the tcp client, client_state is zero if client was never used
        if ( buf[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H){
 8002052:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002056:	2b0b      	cmp	r3, #11
 8002058:	f040 8129 	bne.w	80022ae <packetloop_icmp_tcp+0x362>
#if defined (WWW_client)
                // workaround to pass pointer to www_client_internal..
                bufptr=buf; 
 800205c:	4b7a      	ldr	r3, [pc, #488]	; (8002248 <packetloop_icmp_tcp+0x2fc>)
 800205e:	601c      	str	r4, [r3, #0]
#endif // WWW_client
                if (check_ip_message_is_from(buf,tcpsrvip)==0){
 8002060:	497a      	ldr	r1, [pc, #488]	; (800224c <packetloop_icmp_tcp+0x300>)
 8002062:	4620      	mov	r0, r4
 8002064:	f7ff fc24 	bl	80018b0 <check_ip_message_is_from>
 8002068:	2800      	cmp	r0, #0
 800206a:	f000 815f 	beq.w	800232c <packetloop_icmp_tcp+0x3e0>
                	//printf("return 5\n");
                        return(0);
                }
                // if we get a reset:
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_RST_V){
 800206e:	f894 502f 	ldrb.w	r5, [r4, #47]	; 0x2f
 8002072:	f015 0f04 	tst.w	r5, #4
 8002076:	d013      	beq.n	80020a0 <packetloop_icmp_tcp+0x154>
                        if (client_tcp_result_callback){
 8002078:	4b75      	ldr	r3, [pc, #468]	; (8002250 <packetloop_icmp_tcp+0x304>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	b15b      	cbz	r3, 8002096 <packetloop_icmp_tcp+0x14a>
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "RST: Calling tcp client callback\n");
 800207e:	4875      	ldr	r0, [pc, #468]	; (8002254 <packetloop_icmp_tcp+0x308>)
 8002080:	f002 f9c4 	bl	800440c <puts>
#endif
                                // parameters in client_tcp_result_callback: fd, status, buf_start, len
                                (*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
 8002084:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8002088:	4b71      	ldr	r3, [pc, #452]	; (8002250 <packetloop_icmp_tcp+0x304>)
 800208a:	681c      	ldr	r4, [r3, #0]
 800208c:	2300      	movs	r3, #0
 800208e:	461a      	mov	r2, r3
 8002090:	2103      	movs	r1, #3
 8002092:	0940      	lsrs	r0, r0, #5
 8002094:	47a0      	blx	r4
                        }
                        tcp_client_state=5;
 8002096:	2205      	movs	r2, #5
 8002098:	4b64      	ldr	r3, [pc, #400]	; (800222c <packetloop_icmp_tcp+0x2e0>)
 800209a:	701a      	strb	r2, [r3, #0]
                        return(0);
 800209c:	2500      	movs	r5, #0
 800209e:	e14e      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
                }


                // Determine what to do with packed depending on state
 
                len=get_tcp_data_len(buf);
 80020a0:	4620      	mov	r0, r4
 80020a2:	f7ff fd5b 	bl	8001b5c <get_tcp_data_len>
 80020a6:	4607      	mov	r7, r0
                if (tcp_client_state== 2){
 80020a8:	4b60      	ldr	r3, [pc, #384]	; (800222c <packetloop_icmp_tcp+0x2e0>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d138      	bne.n	8002122 <packetloop_icmp_tcp+0x1d6>
                        if ((buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (buf[TCP_FLAGS_P] &TCP_FLAGS_ACK_V)){
 80020b0:	f005 0312 	and.w	r3, r5, #18
 80020b4:	2b12      	cmp	r3, #18
 80020b6:	d124      	bne.n	8002102 <packetloop_icmp_tcp+0x1b6>
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "Got SYNACK\n");
 80020b8:	4867      	ldr	r0, [pc, #412]	; (8002258 <packetloop_icmp_tcp+0x30c>)
 80020ba:	f002 f9a7 	bl	800440c <puts>
#endif
                                // synack, answer with ack
                                make_tcp_ack_from_any(buf,0,0);
 80020be:	2200      	movs	r2, #0
 80020c0:	4611      	mov	r1, r2
 80020c2:	4620      	mov	r0, r4
 80020c4:	f7ff fd5c 	bl	8001b80 <make_tcp_ack_from_any>
                                buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
 80020c8:	2318      	movs	r3, #24
 80020ca:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f

                                // Make a tcp message with data. When calling this function we must
                                // still have a valid tcp-ack in the buffer. In other words
                                // you have just called make_tcp_ack_from_any(buf,0).
                                if (client_tcp_datafill_callback){
 80020ce:	4b63      	ldr	r3, [pc, #396]	; (800225c <packetloop_icmp_tcp+0x310>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	b153      	cbz	r3, 80020ea <packetloop_icmp_tcp+0x19e>
#ifdef ETHERSHIELD_DEBUG
                                        ethershieldDebug( "Datafil Callback\n");
 80020d4:	4862      	ldr	r0, [pc, #392]	; (8002260 <packetloop_icmp_tcp+0x314>)
 80020d6:	f002 f999 	bl	800440c <puts>
#endif
                                        // in this case it is src port because the above 
                                        // make_tcp_ack_from_any swaps the dst and src port:
                                        len=(*client_tcp_datafill_callback)((buf[TCP_SRC_PORT_L_P]>>5)&0x7);
 80020da:	4b60      	ldr	r3, [pc, #384]	; (800225c <packetloop_icmp_tcp+0x310>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 80020e2:	0940      	lsrs	r0, r0, #5
 80020e4:	4798      	blx	r3
 80020e6:	4601      	mov	r1, r0
 80020e8:	e000      	b.n	80020ec <packetloop_icmp_tcp+0x1a0>
                                }else{
                                        // this is just to prevent a crash
                                        len=0;
 80020ea:	2100      	movs	r1, #0
                                }
                                tcp_client_state=3;
 80020ec:	2203      	movs	r2, #3
 80020ee:	4b4f      	ldr	r3, [pc, #316]	; (800222c <packetloop_icmp_tcp+0x2e0>)
 80020f0:	701a      	strb	r2, [r3, #0]
                                make_tcp_ack_with_data_noflags(buf,len);
 80020f2:	4620      	mov	r0, r4
 80020f4:	f7ff fd7a 	bl	8001bec <make_tcp_ack_with_data_noflags>
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "Send ACK\n");
 80020f8:	485a      	ldr	r0, [pc, #360]	; (8002264 <packetloop_icmp_tcp+0x318>)
 80020fa:	f002 f987 	bl	800440c <puts>
#endif
                                return(0);
 80020fe:	2500      	movs	r5, #0
 8002100:	e11d      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
                        }else{
                                // reset only if we have sent a syn and don't get syn-ack back.
                                // If we connect to a non listen port then we get a RST
                                // which will be handeled above. In other words there is
                                // normally no danger for an endless loop.
                                tcp_client_state=1; // retry
 8002102:	2201      	movs	r2, #1
 8002104:	4b49      	ldr	r3, [pc, #292]	; (800222c <packetloop_icmp_tcp+0x2e0>)
 8002106:	701a      	strb	r2, [r3, #0]
                                // do not inform application layer as we retry.
                                len++;
 8002108:	1881      	adds	r1, r0, r2
 800210a:	b289      	uxth	r1, r1
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
 800210c:	f015 0f10 	tst.w	r5, #16
 8002110:	d000      	beq.n	8002114 <packetloop_icmp_tcp+0x1c8>
                                        // if packet was an ack then do not step the ack number
                                        len=0;
 8002112:	2100      	movs	r1, #0
                                }
                                // refuse and reset the connection
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
 8002114:	2204      	movs	r2, #4
 8002116:	b209      	sxth	r1, r1
 8002118:	4620      	mov	r0, r4
 800211a:	f7ff fd31 	bl	8001b80 <make_tcp_ack_from_any>
                                //printf("return 6\n");
                                return(0);
 800211e:	2500      	movs	r5, #0
 8002120:	e10d      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
                        }
                } 
                // in tcp_client_state==3 we will normally first get an empty
                // ack-packet and then a ack-packet with data.
                if (tcp_client_state==4 ) {     //&& len>0){ 
 8002122:	2b04      	cmp	r3, #4
 8002124:	d137      	bne.n	8002196 <packetloop_icmp_tcp+0x24a>
//                        ethershieldDebug( "First Data Packet\n");
#endif
                        // Removed this as there is no code to handle state 4. Only 1st packet will be available.
                        //tcp_client_state=4;
                        // return the data we received
                        if (client_tcp_result_callback){
 8002126:	4b4a      	ldr	r3, [pc, #296]	; (8002250 <packetloop_icmp_tcp+0x304>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	b1f3      	cbz	r3, 800216a <packetloop_icmp_tcp+0x21e>
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
 800212c:	f894 502e 	ldrb.w	r5, [r4, #46]	; 0x2e
 8002130:	092d      	lsrs	r5, r5, #4
 8002132:	00ad      	lsls	r5, r5, #2
 8002134:	3522      	adds	r5, #34	; 0x22
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
 8002136:	f1a6 0308 	sub.w	r3, r6, #8
 800213a:	429d      	cmp	r5, r3
 800213c:	dd00      	ble.n	8002140 <packetloop_icmp_tcp+0x1f4>
                                        tcpstart=plen-8; // dummy but save
 800213e:	b29d      	uxth	r5, r3
                                }
                                save_len=len;
                                if (tcpstart+len>plen){
 8002140:	19eb      	adds	r3, r5, r7
 8002142:	429e      	cmp	r6, r3
 8002144:	da02      	bge.n	800214c <packetloop_icmp_tcp+0x200>
                                        save_len=plen-tcpstart;
 8002146:	1b76      	subs	r6, r6, r5
 8002148:	b2b6      	uxth	r6, r6
 800214a:	e000      	b.n	800214e <packetloop_icmp_tcp+0x202>
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
                                        tcpstart=plen-8; // dummy but save
                                }
                                save_len=len;
 800214c:	463e      	mov	r6, r7
                                if (tcpstart+len>plen){
                                        save_len=plen-tcpstart;
                                }
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "Calling Result callback\n");
 800214e:	4846      	ldr	r0, [pc, #280]	; (8002268 <packetloop_icmp_tcp+0x31c>)
 8002150:	f002 f95c 	bl	800440c <puts>
#endif
                                send_fin=(*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);
 8002154:	4b3e      	ldr	r3, [pc, #248]	; (8002250 <packetloop_icmp_tcp+0x304>)
 8002156:	f8d3 8000 	ldr.w	r8, [r3]
 800215a:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800215e:	4633      	mov	r3, r6
 8002160:	462a      	mov	r2, r5
 8002162:	2100      	movs	r1, #0
 8002164:	0940      	lsrs	r0, r0, #5
 8002166:	47c0      	blx	r8
 8002168:	e000      	b.n	800216c <packetloop_icmp_tcp+0x220>
// of the tcp/udp data if there is tcp/udp data part
uint16_t packetloop_icmp_tcp(uint8_t *buf,uint16_t plen)
{
        uint16_t len;
#if defined (TCP_client)
        uint8_t send_fin=0;
 800216a:	2000      	movs	r0, #0
                                ethershieldDebug( "Calling Result callback\n");
#endif
                                send_fin=(*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);

                        }
                        if (send_fin){
 800216c:	b160      	cbz	r0, 8002188 <packetloop_icmp_tcp+0x23c>
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "Send FIN\n");
 800216e:	483f      	ldr	r0, [pc, #252]	; (800226c <packetloop_icmp_tcp+0x320>)
 8002170:	f002 f94c 	bl	800440c <puts>
#endif
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
 8002174:	2209      	movs	r2, #9
 8002176:	b239      	sxth	r1, r7
 8002178:	4620      	mov	r0, r4
 800217a:	f7ff fd01 	bl	8001b80 <make_tcp_ack_from_any>
                                tcp_client_state=5;
 800217e:	2205      	movs	r2, #5
 8002180:	4b2a      	ldr	r3, [pc, #168]	; (800222c <packetloop_icmp_tcp+0x2e0>)
 8002182:	701a      	strb	r2, [r3, #0]
                                return(0);
 8002184:	2500      	movs	r5, #0
 8002186:	e0da      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
                        }
                        make_tcp_ack_from_any(buf,len,0);
 8002188:	2200      	movs	r2, #0
 800218a:	b239      	sxth	r1, r7
 800218c:	4620      	mov	r0, r4
 800218e:	f7ff fcf7 	bl	8001b80 <make_tcp_ack_from_any>
                        return(0);
 8002192:	2500      	movs	r5, #0
 8002194:	e0d3      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
                } 
                if (tcp_client_state==3) {      // && len>0){ 
 8002196:	2b03      	cmp	r3, #3
 8002198:	d13a      	bne.n	8002210 <packetloop_icmp_tcp+0x2c4>
                        // our first real data packet
#ifdef ETHERSHIELD_DEBUG
//                        ethershieldDebug( "First Data Packet\n");
#endif
                        // Removed this as there is no code to handle state 4. Only 1st packet will be available.
                        tcp_client_state=4;
 800219a:	2204      	movs	r2, #4
 800219c:	4b23      	ldr	r3, [pc, #140]	; (800222c <packetloop_icmp_tcp+0x2e0>)
 800219e:	701a      	strb	r2, [r3, #0]
                        // return the data we received
                        if (client_tcp_result_callback){
 80021a0:	4b2b      	ldr	r3, [pc, #172]	; (8002250 <packetloop_icmp_tcp+0x304>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	b1f3      	cbz	r3, 80021e4 <packetloop_icmp_tcp+0x298>
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
 80021a6:	f894 502e 	ldrb.w	r5, [r4, #46]	; 0x2e
 80021aa:	40d5      	lsrs	r5, r2
 80021ac:	00ad      	lsls	r5, r5, #2
 80021ae:	3522      	adds	r5, #34	; 0x22
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
 80021b0:	f1a6 0308 	sub.w	r3, r6, #8
 80021b4:	429d      	cmp	r5, r3
 80021b6:	dd00      	ble.n	80021ba <packetloop_icmp_tcp+0x26e>
                                        tcpstart=plen-8; // dummy but save
 80021b8:	b29d      	uxth	r5, r3
                                }
                                save_len=len;
                                if (tcpstart+len>plen){
 80021ba:	19eb      	adds	r3, r5, r7
 80021bc:	429e      	cmp	r6, r3
 80021be:	da02      	bge.n	80021c6 <packetloop_icmp_tcp+0x27a>
                                        save_len=plen-tcpstart;
 80021c0:	1b76      	subs	r6, r6, r5
 80021c2:	b2b6      	uxth	r6, r6
 80021c4:	e000      	b.n	80021c8 <packetloop_icmp_tcp+0x27c>
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
                                        tcpstart=plen-8; // dummy but save
                                }
                                save_len=len;
 80021c6:	463e      	mov	r6, r7
                                if (tcpstart+len>plen){
                                        save_len=plen-tcpstart;
                                }
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "Calling Result callback\n");
 80021c8:	4827      	ldr	r0, [pc, #156]	; (8002268 <packetloop_icmp_tcp+0x31c>)
 80021ca:	f002 f91f 	bl	800440c <puts>
#endif
                                send_fin=(*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);
 80021ce:	4b20      	ldr	r3, [pc, #128]	; (8002250 <packetloop_icmp_tcp+0x304>)
 80021d0:	f8d3 8000 	ldr.w	r8, [r3]
 80021d4:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 80021d8:	4633      	mov	r3, r6
 80021da:	462a      	mov	r2, r5
 80021dc:	2100      	movs	r1, #0
 80021de:	0940      	lsrs	r0, r0, #5
 80021e0:	47c0      	blx	r8
 80021e2:	e000      	b.n	80021e6 <packetloop_icmp_tcp+0x29a>
// of the tcp/udp data if there is tcp/udp data part
uint16_t packetloop_icmp_tcp(uint8_t *buf,uint16_t plen)
{
        uint16_t len;
#if defined (TCP_client)
        uint8_t send_fin=0;
 80021e4:	2000      	movs	r0, #0
                                ethershieldDebug( "Calling Result callback\n");
#endif
                                send_fin=(*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);

                        }
                        if (send_fin){
 80021e6:	b160      	cbz	r0, 8002202 <packetloop_icmp_tcp+0x2b6>
#ifdef ETHERSHIELD_DEBUG
                                ethershieldDebug( "Send FIN\n");
 80021e8:	4820      	ldr	r0, [pc, #128]	; (800226c <packetloop_icmp_tcp+0x320>)
 80021ea:	f002 f90f 	bl	800440c <puts>
#endif
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
 80021ee:	2209      	movs	r2, #9
 80021f0:	b239      	sxth	r1, r7
 80021f2:	4620      	mov	r0, r4
 80021f4:	f7ff fcc4 	bl	8001b80 <make_tcp_ack_from_any>
                                tcp_client_state=5;
 80021f8:	2205      	movs	r2, #5
 80021fa:	4b0c      	ldr	r3, [pc, #48]	; (800222c <packetloop_icmp_tcp+0x2e0>)
 80021fc:	701a      	strb	r2, [r3, #0]
                                return(0);
 80021fe:	2500      	movs	r5, #0
 8002200:	e09d      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
                        }
                        make_tcp_ack_from_any(buf,len,0);
 8002202:	2200      	movs	r2, #0
 8002204:	b239      	sxth	r1, r7
 8002206:	4620      	mov	r0, r4
 8002208:	f7ff fcba 	bl	8001b80 <make_tcp_ack_from_any>
                        return(0);
 800220c:	2500      	movs	r5, #0
 800220e:	e096      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
                }
                if(tcp_client_state==5){
 8002210:	2b05      	cmp	r3, #5
 8002212:	d12f      	bne.n	8002274 <packetloop_icmp_tcp+0x328>
                        // no more ack
#ifdef ETHERSHIELD_DEBUG
                        ethershieldDebug( "No more ACK\n");
 8002214:	4816      	ldr	r0, [pc, #88]	; (8002270 <packetloop_icmp_tcp+0x324>)
 8002216:	f002 f8f9 	bl	800440c <puts>
#endif
                        return(0);
 800221a:	2500      	movs	r5, #0
 800221c:	e08f      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
 800221e:	bf00      	nop
 8002220:	2000002d 	.word	0x2000002d
 8002224:	20000028 	.word	0x20000028
 8002228:	20000bc0 	.word	0x20000bc0
 800222c:	20000bc5 	.word	0x20000bc5
 8002230:	2000002a 	.word	0x2000002a
 8002234:	20000bc6 	.word	0x20000bc6
 8002238:	20000bc4 	.word	0x20000bc4
 800223c:	20000bc7 	.word	0x20000bc7
 8002240:	20000bbc 	.word	0x20000bbc
 8002244:	08006b94 	.word	0x08006b94
 8002248:	20000bb8 	.word	0x20000bb8
 800224c:	20000ba4 	.word	0x20000ba4
 8002250:	20000bac 	.word	0x20000bac
 8002254:	08006ba0 	.word	0x08006ba0
 8002258:	08006bc4 	.word	0x08006bc4
 800225c:	20000ba8 	.word	0x20000ba8
 8002260:	08006bd0 	.word	0x08006bd0
 8002264:	08006be4 	.word	0x08006be4
 8002268:	08006bf0 	.word	0x08006bf0
 800226c:	08006c08 	.word	0x08006c08
 8002270:	08006c14 	.word	0x08006c14
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
 8002274:	f015 0f01 	tst.w	r5, #1
 8002278:	d00d      	beq.n	8002296 <packetloop_icmp_tcp+0x34a>
#ifdef ETHERSHIELD_DEBUG
                        ethershieldDebug( "Terminated\n");
 800227a:	4832      	ldr	r0, [pc, #200]	; (8002344 <packetloop_icmp_tcp+0x3f8>)
 800227c:	f002 f8c6 	bl	800440c <puts>
#endif
                        make_tcp_ack_from_any(buf,len+1,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
 8002280:	1c79      	adds	r1, r7, #1
 8002282:	2209      	movs	r2, #9
 8002284:	b209      	sxth	r1, r1
 8002286:	4620      	mov	r0, r4
 8002288:	f7ff fc7a 	bl	8001b80 <make_tcp_ack_from_any>
                        tcp_client_state=5; // connection terminated
 800228c:	2205      	movs	r2, #5
 800228e:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <packetloop_icmp_tcp+0x3fc>)
 8002290:	701a      	strb	r2, [r3, #0]
                        return(0);
 8002292:	2500      	movs	r5, #0
 8002294:	e053      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
                }
                // ack all data (the web page may be long):
                // if we just get a fragment then len will be zero
                // and we ack only once we have the full packet
                if (len>0){
 8002296:	2800      	cmp	r0, #0
 8002298:	d04a      	beq.n	8002330 <packetloop_icmp_tcp+0x3e4>
                        make_tcp_ack_from_any(buf,len,0);
 800229a:	2200      	movs	r2, #0
 800229c:	b201      	sxth	r1, r0
 800229e:	4620      	mov	r0, r4
 80022a0:	f7ff fc6e 	bl	8001b80 <make_tcp_ack_from_any>
#ifdef ETHERSHIELD_DEBUG
                        ethershieldDebug( "Send ACK\n");
 80022a4:	4829      	ldr	r0, [pc, #164]	; (800234c <packetloop_icmp_tcp+0x400>)
 80022a6:	f002 f8b1 	bl	800440c <puts>
#endif
                }
                return(0);
 80022aa:	2500      	movs	r5, #0
 80022ac:	e047      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
        }
#endif // WWW_client||TCP_client
        //
        // tcp port web server start
        if (buf[TCP_DST_PORT_H_P]==wwwport_h && buf[TCP_DST_PORT_L_P]==wwwport_l){
 80022ae:	4a28      	ldr	r2, [pc, #160]	; (8002350 <packetloop_icmp_tcp+0x404>)
 80022b0:	7812      	ldrb	r2, [r2, #0]
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d13e      	bne.n	8002334 <packetloop_icmp_tcp+0x3e8>
 80022b6:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80022ba:	4b26      	ldr	r3, [pc, #152]	; (8002354 <packetloop_icmp_tcp+0x408>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d13a      	bne.n	8002338 <packetloop_icmp_tcp+0x3ec>
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V){
 80022c2:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
 80022c6:	f017 0f02 	tst.w	r7, #2
 80022ca:	d004      	beq.n	80022d6 <packetloop_icmp_tcp+0x38a>
                        make_tcp_synack_from_syn(buf);
 80022cc:	4620      	mov	r0, r4
 80022ce:	f7ff fc01 	bl	8001ad4 <make_tcp_synack_from_syn>
                        // make_tcp_synack_from_syn does already send the syn,ack
                        return(0);
 80022d2:	2500      	movs	r5, #0
 80022d4:	e033      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
 80022d6:	f017 0f10 	tst.w	r7, #16
 80022da:	d02f      	beq.n	800233c <packetloop_icmp_tcp+0x3f0>
                        info_data_len=get_tcp_data_len(buf);
 80022dc:	4620      	mov	r0, r4
 80022de:	f7ff fc3d 	bl	8001b5c <get_tcp_data_len>
 80022e2:	4605      	mov	r5, r0
 80022e4:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <packetloop_icmp_tcp+0x40c>)
 80022e6:	8018      	strh	r0, [r3, #0]
                        // we can possibly have no data, just ack:
                        // Here we misuse plen for something else to save a variable.
                        // plen is now the position of start of the tcp user data.
                        if (info_data_len==0){
 80022e8:	b940      	cbnz	r0, 80022fc <packetloop_icmp_tcp+0x3b0>
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
 80022ea:	f017 0f01 	tst.w	r7, #1
 80022ee:	d026      	beq.n	800233e <packetloop_icmp_tcp+0x3f2>
                                        // finack, answer with ack
                                        make_tcp_ack_from_any(buf,0,0);
 80022f0:	2200      	movs	r2, #0
 80022f2:	4611      	mov	r1, r2
 80022f4:	4620      	mov	r0, r4
 80022f6:	f7ff fc43 	bl	8001b80 <make_tcp_ack_from_any>
 80022fa:	e020      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
                                }
                                // just an ack with no data, wait for next packet
                                return(0);
                        }
                        // Here we misuse len for something else to save a variable
                        len=TCP_DATA_START; // TCP_DATA_START is a formula
 80022fc:	f894 502e 	ldrb.w	r5, [r4, #46]	; 0x2e
 8002300:	092d      	lsrs	r5, r5, #4
 8002302:	00ad      	lsls	r5, r5, #2
 8002304:	3522      	adds	r5, #34	; 0x22
                        // check for data corruption
                        if (len>plen-8){
 8002306:	3e08      	subs	r6, #8
 8002308:	42b5      	cmp	r5, r6
 800230a:	dd18      	ble.n	800233e <packetloop_icmp_tcp+0x3f2>
                                return(0);
 800230c:	2500      	movs	r5, #0
 800230e:	e016      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
                        client_syn(buf,((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port_h,tcp_client_port_l);
                        //USART_Send(0x44);
                }
#endif
                	//printf("return 0\n");
                	return(0);
 8002310:	2500      	movs	r5, #0
 8002312:	e014      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
                                //printf("GW Mac stored\n");
                        }
                }
#endif // NTP_client||UDP_client||TCP_client||PING_client
                //printf("return 1\n");
                return(0);
 8002314:	2500      	movs	r5, #0
 8002316:	e012      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
 8002318:	2500      	movs	r5, #0
 800231a:	e010      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
 800231c:	2500      	movs	r5, #0
 800231e:	e00e      	b.n	800233e <packetloop_icmp_tcp+0x3f2>

        }
        // check if ip packets are for us:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
        	//printf("return 2\n");
                return(0);
 8002320:	2500      	movs	r5, #0
 8002322:	e00c      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
#endif // NTP_client
#ifdef DNS_client
        // TODO - does this work?
        // If DNS response, drop out to have it processed elsewhere
        if(buf[IP_PROTO_P] == IP_PROTO_UDP_V && buf[UDP_SRC_PORT_H_P]==0 && buf[UDP_SRC_PORT_L_P]== 53 ) {
                return( UDP_DATA_P );
 8002324:	252a      	movs	r5, #42	; 0x2a
 8002326:	e00a      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
                return(0);
        }
        if (plen<54 && buf[IP_PROTO_P]!=IP_PROTO_TCP_V ){
                // smaller than the smallest TCP packet and not tcp port
        	//printf("return 4\n");
                return(0);
 8002328:	2500      	movs	r5, #0
 800232a:	e008      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
                // workaround to pass pointer to www_client_internal..
                bufptr=buf; 
#endif // WWW_client
                if (check_ip_message_is_from(buf,tcpsrvip)==0){
                	//printf("return 5\n");
                        return(0);
 800232c:	2500      	movs	r5, #0
 800232e:	e006      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
                        make_tcp_ack_from_any(buf,len,0);
#ifdef ETHERSHIELD_DEBUG
                        ethershieldDebug( "Send ACK\n");
#endif
                }
                return(0);
 8002330:	2500      	movs	r5, #0
 8002332:	e004      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
                                return(0);
                        }
                        return(len);
                }
        }
        return(0);
 8002334:	2500      	movs	r5, #0
 8002336:	e002      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
 8002338:	2500      	movs	r5, #0
 800233a:	e000      	b.n	800233e <packetloop_icmp_tcp+0x3f2>
 800233c:	2500      	movs	r5, #0
}
 800233e:	4628      	mov	r0, r5
 8002340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002344:	08006c20 	.word	0x08006c20
 8002348:	20000bc5 	.word	0x20000bc5
 800234c:	08006be4 	.word	0x08006be4
 8002350:	20000bb2 	.word	0x20000bb2
 8002354:	2000002c 	.word	0x2000002c
 8002358:	20000bb0 	.word	0x20000bb0

0800235c <uipclient_appcall>:
uint32_t app_timeout=0;
//uint8_t tcp_svr_ip[4] = {144,217,91,32};
uint8_t tcp_svr_ip[4] = {192,99,70,26};//{142,44,211,146};//{192,168,1,30};//{142,44,211,146};  //142.44.211.146
uint16_t tcp_srv_port = 9202;
volatile uint8_t tcp_app_state = 0; //0 - Not connected, 1- TCP Reg State, 2- TCP Alarm state
void uipclient_appcall(void){
 800235c:	b508      	push	{r3, lr}
	//USART3_Send(0x11);
	//printf("uip client call %d \n",tcp_app_state);
	//dhcpc_appcall();
	if(tcp_app_state == 1)
 800235e:	4b1f      	ldr	r3, [pc, #124]	; (80023dc <uipclient_appcall+0x80>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b01      	cmp	r3, #1
 8002366:	d108      	bne.n	800237a <uipclient_appcall+0x1e>
	{
		uip_send(tstreg,sizeof(tstreg));
 8002368:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800236c:	481c      	ldr	r0, [pc, #112]	; (80023e0 <uipclient_appcall+0x84>)
 800236e:	f003 fcbf 	bl	8005cf0 <uip_send>
		//uip_close();
		tcp_app_state = 0;
 8002372:	2200      	movs	r2, #0
 8002374:	4b19      	ldr	r3, [pc, #100]	; (80023dc <uipclient_appcall+0x80>)
 8002376:	701a      	strb	r2, [r3, #0]
 8002378:	bd08      	pop	{r3, pc}
		//printf("uip client send reg \n");
	}else if(tcp_app_state == 2){
 800237a:	4b18      	ldr	r3, [pc, #96]	; (80023dc <uipclient_appcall+0x80>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d108      	bne.n	8002396 <uipclient_appcall+0x3a>
		uip_send(tstpkt0,300);
 8002384:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002388:	4816      	ldr	r0, [pc, #88]	; (80023e4 <uipclient_appcall+0x88>)
 800238a:	f003 fcb1 	bl	8005cf0 <uip_send>
		//uip_stop();
		tcp_app_state = 0;
 800238e:	2200      	movs	r2, #0
 8002390:	4b12      	ldr	r3, [pc, #72]	; (80023dc <uipclient_appcall+0x80>)
 8002392:	701a      	strb	r2, [r3, #0]
 8002394:	bd08      	pop	{r3, pc}
		//printf("uip client send alarm 2\n");
	}else if(tcp_app_state == 3){
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <uipclient_appcall+0x80>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b03      	cmp	r3, #3
 800239e:	d108      	bne.n	80023b2 <uipclient_appcall+0x56>
		uip_send(tstpkt1,300);
 80023a0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80023a4:	4810      	ldr	r0, [pc, #64]	; (80023e8 <uipclient_appcall+0x8c>)
 80023a6:	f003 fca3 	bl	8005cf0 <uip_send>
		//uip_stop();
		tcp_app_state = 0;
 80023aa:	2200      	movs	r2, #0
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <uipclient_appcall+0x80>)
 80023ae:	701a      	strb	r2, [r3, #0]
 80023b0:	bd08      	pop	{r3, pc}
		//printf("uip client send alarm 3\n");
	}else if(tcp_app_state == 4){
 80023b2:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <uipclient_appcall+0x80>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d108      	bne.n	80023ce <uipclient_appcall+0x72>
		uip_send(tcp_buf,bacpktsize);
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <uipclient_appcall+0x90>)
 80023be:	8819      	ldrh	r1, [r3, #0]
 80023c0:	480b      	ldr	r0, [pc, #44]	; (80023f0 <uipclient_appcall+0x94>)
 80023c2:	f003 fc95 	bl	8005cf0 <uip_send>
		//uip_stop();
		tcp_app_state = 0;
 80023c6:	2200      	movs	r2, #0
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <uipclient_appcall+0x80>)
 80023ca:	701a      	strb	r2, [r3, #0]
 80023cc:	bd08      	pop	{r3, pc}
		//printf("uip client send alarm 4\n");
	}else
	{
		uip_close();
 80023ce:	2210      	movs	r2, #16
 80023d0:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <uipclient_appcall+0x98>)
 80023d2:	701a      	strb	r2, [r3, #0]
		tcp_app_state = 0;
 80023d4:	2200      	movs	r2, #0
 80023d6:	4b01      	ldr	r3, [pc, #4]	; (80023dc <uipclient_appcall+0x80>)
 80023d8:	701a      	strb	r2, [r3, #0]
 80023da:	bd08      	pop	{r3, pc}
 80023dc:	20000bd4 	.word	0x20000bd4
 80023e0:	2000046c 	.word	0x2000046c
 80023e4:	200001a8 	.word	0x200001a8
 80023e8:	200002d4 	.word	0x200002d4
 80023ec:	20000bce 	.word	0x20000bce
 80023f0:	20000d30 	.word	0x20000d30
 80023f4:	20001588 	.word	0x20001588

080023f8 <uipudp_appcall>:
		//printf("Closing TCP\n");
	}

}

void uipudp_appcall(void){
 80023f8:	b508      	push	{r3, lr}
//	USART3_Send(0xAD);
//	for(int k=0x28;k<0x30;k++)
//		USART3_Send(uip_buf[k]);
//	USART3_Send(0xAD);
//	USART3_Send(0xAF);
	if(!dhcp_acquired)
 80023fa:	4b05      	ldr	r3, [pc, #20]	; (8002410 <uipudp_appcall+0x18>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	b913      	cbnz	r3, 8002406 <uipudp_appcall+0xe>
		dhcpc_appcall();
 8002400:	f002 fc98 	bl	8004d34 <dhcpc_appcall>
 8002404:	bd08      	pop	{r3, pc}
	else
		uip_close();
 8002406:	2210      	movs	r2, #16
 8002408:	4b02      	ldr	r3, [pc, #8]	; (8002414 <uipudp_appcall+0x1c>)
 800240a:	701a      	strb	r2, [r3, #0]
 800240c:	bd08      	pop	{r3, pc}
 800240e:	bf00      	nop
 8002410:	20000bd5 	.word	0x20000bd5
 8002414:	20001588 	.word	0x20001588

08002418 <mac0_tick>:




void mac0_tick(void)
{
 8002418:	b538      	push	{r3, r4, r5, lr}
	//int k;
	pkt_in_len = enc424j600PacketReceiveP0(800,uip_buf);
 800241a:	493d      	ldr	r1, [pc, #244]	; (8002510 <mac0_tick+0xf8>)
 800241c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002420:	f002 f9d2 	bl	80047c8 <enc424j600PacketReceiveP0>
 8002424:	b280      	uxth	r0, r0
 8002426:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <mac0_tick+0xfc>)
 8002428:	8018      	strh	r0, [r3, #0]
	if(pkt_in_len > 0)
 800242a:	2800      	cmp	r0, #0
 800242c:	d02f      	beq.n	800248e <mac0_tick+0x76>
	{
		pktcount++;
 800242e:	4a3a      	ldr	r2, [pc, #232]	; (8002518 <mac0_tick+0x100>)
 8002430:	8813      	ldrh	r3, [r2, #0]
 8002432:	3301      	adds	r3, #1
 8002434:	8013      	strh	r3, [r2, #0]
		uip_len = pkt_in_len;
 8002436:	4b39      	ldr	r3, [pc, #228]	; (800251c <mac0_tick+0x104>)
 8002438:	8018      	strh	r0, [r3, #0]
		//printf("uip pkt rcvd : %d  pkt count : %d :\n",pkt_in_len,pktcount);

		if(BUF->type == htons(UIP_ETHTYPE_IP))
 800243a:	4b35      	ldr	r3, [pc, #212]	; (8002510 <mac0_tick+0xf8>)
 800243c:	899c      	ldrh	r4, [r3, #12]
 800243e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002442:	f002 fd1d 	bl	8004e80 <htons>
 8002446:	4284      	cmp	r4, r0
 8002448:	d111      	bne.n	800246e <mac0_tick+0x56>
//				printf("\n -- \n");
//				for(k=0;k<uip_len;k++)
//				printf(" %d",uip_buf[k]);
//				printf("\n -- \n");
//			}
			uip_len = pkt_in_len;
 800244a:	4c34      	ldr	r4, [pc, #208]	; (800251c <mac0_tick+0x104>)
 800244c:	4b31      	ldr	r3, [pc, #196]	; (8002514 <mac0_tick+0xfc>)
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	8023      	strh	r3, [r4, #0]
			uip_arp_ipin();
 8002452:	f003 fd29 	bl	8005ea8 <uip_arp_ipin>
			uip_input();
 8002456:	2001      	movs	r0, #1
 8002458:	f002 fd52 	bl	8004f00 <uip_process>
			if(uip_len > 0) {
 800245c:	8823      	ldrh	r3, [r4, #0]
 800245e:	b1b3      	cbz	r3, 800248e <mac0_tick+0x76>
				uip_arp_out();
 8002460:	f003 fdba 	bl	8005fd8 <uip_arp_out>
//					printf("\n -- \n");
//					for(k=0;k<uip_len;k++)
//						printf(" %d",uip_buf[k]);
//					printf("\n -- \n");
//				}
				enc424j600PacketSendP0(uip_len, uip_buf);
 8002464:	492a      	ldr	r1, [pc, #168]	; (8002510 <mac0_tick+0xf8>)
 8002466:	8820      	ldrh	r0, [r4, #0]
 8002468:	f002 fa02 	bl	8004870 <enc424j600PacketSendP0>
 800246c:	e00f      	b.n	800248e <mac0_tick+0x76>
				//printf("uip input reply pkt send %d\n",uip_len);
			}
		}else if(BUF->type == htons(UIP_ETHTYPE_ARP))
 800246e:	4b28      	ldr	r3, [pc, #160]	; (8002510 <mac0_tick+0xf8>)
 8002470:	899c      	ldrh	r4, [r3, #12]
 8002472:	f640 0006 	movw	r0, #2054	; 0x806
 8002476:	f002 fd03 	bl	8004e80 <htons>
 800247a:	4284      	cmp	r4, r0
 800247c:	d107      	bne.n	800248e <mac0_tick+0x76>
		{
			//printf("ARP RECD \n");
			uip_arp_arpin();
 800247e:	f003 fd3b 	bl	8005ef8 <uip_arp_arpin>
			if(uip_len>0)
 8002482:	4b26      	ldr	r3, [pc, #152]	; (800251c <mac0_tick+0x104>)
 8002484:	8818      	ldrh	r0, [r3, #0]
 8002486:	b110      	cbz	r0, 800248e <mac0_tick+0x76>
			{
//				USART3_Send(0xAD);
//				for(k=0;k<uip_len;k++)
//					USART3_Send(uip_buf[k]);
//				USART3_Send(0xAD);
				enc424j600PacketSendP0(uip_len, uip_buf);
 8002488:	4921      	ldr	r1, [pc, #132]	; (8002510 <mac0_tick+0xf8>)
 800248a:	f002 f9f1 	bl	8004870 <enc424j600PacketSendP0>
				//printf("UIP ARP REPLY \n");
			}
		}
	//}else if(periodic_timer < (Sys_GetTick()-500)){
	}
	if(periodic_timer < (Sys_GetTick()-500)){
 800248e:	f001 fa7b 	bl	8003988 <Sys_GetTick>
 8002492:	f5a0 70fa 	sub.w	r0, r0, #500	; 0x1f4
 8002496:	4b22      	ldr	r3, [pc, #136]	; (8002520 <mac0_tick+0x108>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4298      	cmp	r0, r3
 800249c:	d937      	bls.n	800250e <mac0_tick+0xf6>
		periodic_timer = Sys_GetTick();
 800249e:	f001 fa73 	bl	8003988 <Sys_GetTick>
 80024a2:	4b1f      	ldr	r3, [pc, #124]	; (8002520 <mac0_tick+0x108>)
 80024a4:	6018      	str	r0, [r3, #0]
		//printf("periodic trigger\n");
		for(int i = 0; i < UIP_CONNS; ++i) {
 80024a6:	2400      	movs	r4, #0
 80024a8:	e013      	b.n	80024d2 <mac0_tick+0xba>
			uip_len = 0;
 80024aa:	4d1c      	ldr	r5, [pc, #112]	; (800251c <mac0_tick+0x104>)
 80024ac:	2300      	movs	r3, #0
 80024ae:	802b      	strh	r3, [r5, #0]
			uip_periodic(i);
 80024b0:	4b1c      	ldr	r3, [pc, #112]	; (8002524 <mac0_tick+0x10c>)
 80024b2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 80024b6:	4a1c      	ldr	r2, [pc, #112]	; (8002528 <mac0_tick+0x110>)
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	2002      	movs	r0, #2
 80024bc:	f002 fd20 	bl	8004f00 <uip_process>
			if(uip_len > 0) {
 80024c0:	882b      	ldrh	r3, [r5, #0]
 80024c2:	b12b      	cbz	r3, 80024d0 <mac0_tick+0xb8>
//				USART3_Send(0xAE);
//				for(k=0;k<uip_len;k++)
//					USART3_Send(uip_buf[k]);
//				USART3_Send(0xAE);
				uip_arp_out();
 80024c4:	f003 fd88 	bl	8005fd8 <uip_arp_out>
				enc424j600PacketSendP0(uip_len, uip_buf);
 80024c8:	4911      	ldr	r1, [pc, #68]	; (8002510 <mac0_tick+0xf8>)
 80024ca:	8828      	ldrh	r0, [r5, #0]
 80024cc:	f002 f9d0 	bl	8004870 <enc424j600PacketSendP0>
	//}else if(periodic_timer < (Sys_GetTick()-500)){
	}
	if(periodic_timer < (Sys_GetTick()-500)){
		periodic_timer = Sys_GetTick();
		//printf("periodic trigger\n");
		for(int i = 0; i < UIP_CONNS; ++i) {
 80024d0:	3401      	adds	r4, #1
 80024d2:	2c03      	cmp	r4, #3
 80024d4:	dde9      	ble.n	80024aa <mac0_tick+0x92>
				uip_arp_out();
				enc424j600PacketSendP0(uip_len, uip_buf);
				//printf("uip periodic pkt send %d\n",uip_len);
			}
		}
		if(!dhcp_acquired){
 80024d6:	4b15      	ldr	r3, [pc, #84]	; (800252c <mac0_tick+0x114>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b1ab      	cbz	r3, 8002508 <mac0_tick+0xf0>
 80024dc:	bd38      	pop	{r3, r4, r5, pc}
			for(int i = 0; i < UIP_UDP_CONNS; ++i) {
				uip_len = 0;
 80024de:	4d0f      	ldr	r5, [pc, #60]	; (800251c <mac0_tick+0x104>)
 80024e0:	2300      	movs	r3, #0
 80024e2:	802b      	strh	r3, [r5, #0]
				uip_udp_periodic(i);
 80024e4:	4b12      	ldr	r3, [pc, #72]	; (8002530 <mac0_tick+0x118>)
 80024e6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80024ea:	4a12      	ldr	r2, [pc, #72]	; (8002534 <mac0_tick+0x11c>)
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	2005      	movs	r0, #5
 80024f0:	f002 fd06 	bl	8004f00 <uip_process>
				//printf("UIP Periodic\n");
				if(uip_len > 0) {
 80024f4:	882b      	ldrh	r3, [r5, #0]
 80024f6:	b12b      	cbz	r3, 8002504 <mac0_tick+0xec>
	//				for(k=0;k<uip_len;k++)
	//					USART3_Send(uip_buf[k]);
	//				USART3_Send(0xAE);
	//				USART3_Send(0xAF);

					uip_arp_out();
 80024f8:	f003 fd6e 	bl	8005fd8 <uip_arp_out>
					enc424j600PacketSendP0(uip_len, uip_buf);
 80024fc:	4904      	ldr	r1, [pc, #16]	; (8002510 <mac0_tick+0xf8>)
 80024fe:	8828      	ldrh	r0, [r5, #0]
 8002500:	f002 f9b6 	bl	8004870 <enc424j600PacketSendP0>
				enc424j600PacketSendP0(uip_len, uip_buf);
				//printf("uip periodic pkt send %d\n",uip_len);
			}
		}
		if(!dhcp_acquired){
			for(int i = 0; i < UIP_UDP_CONNS; ++i) {
 8002504:	3401      	adds	r4, #1
 8002506:	e000      	b.n	800250a <mac0_tick+0xf2>
 8002508:	2400      	movs	r4, #0
 800250a:	2c03      	cmp	r4, #3
 800250c:	dde7      	ble.n	80024de <mac0_tick+0xc6>
 800250e:	bd38      	pop	{r3, r4, r5, pc}
 8002510:	2000162c 	.word	0x2000162c
 8002514:	20001118 	.word	0x20001118
 8002518:	20000d28 	.word	0x20000d28
 800251c:	2000157c 	.word	0x2000157c
 8002520:	20000d2c 	.word	0x20000d2c
 8002524:	20001598 	.word	0x20001598
 8002528:	20001594 	.word	0x20001594
 800252c:	20000bd5 	.word	0x20000bd5
 8002530:	20001a18 	.word	0x20001a18
 8002534:	2000158c 	.word	0x2000158c

08002538 <connect>:
			}
		}
	}
}
uint8_t connect(uint8_t* ip, uint16_t port)
{
 8002538:	b530      	push	{r4, r5, lr}
 800253a:	b083      	sub	sp, #12

  uip_ipaddr_t ipaddr;
  uip_ip_addr(ipaddr, ip);
 800253c:	7802      	ldrb	r2, [r0, #0]
 800253e:	7843      	ldrb	r3, [r0, #1]
 8002540:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002544:	0a1a      	lsrs	r2, r3, #8
 8002546:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800254a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800254e:	7882      	ldrb	r2, [r0, #2]
 8002550:	78c3      	ldrb	r3, [r0, #3]
 8002552:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002556:	0a1a      	lsrs	r2, r3, #8
 8002558:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800255c:	f8ad 3006 	strh.w	r3, [sp, #6]
  struct uip_conn* conn = uip_connect(&ipaddr, htons(port));
 8002560:	4608      	mov	r0, r1
 8002562:	f002 fc8d 	bl	8004e80 <htons>
 8002566:	4601      	mov	r1, r0
 8002568:	a801      	add	r0, sp, #4
 800256a:	f003 faf7 	bl	8005b5c <uip_connect>
 800256e:	4604      	mov	r4, r0
  uint32_t timeout = Sys_GetTick() + 4000;
 8002570:	f001 fa0a 	bl	8003988 <Sys_GetTick>
 8002574:	f500 657a 	add.w	r5, r0, #4000	; 0xfa0
  //printf("Inside Connect 1\n");
  mac0_tick();
 8002578:	f7ff ff4e 	bl	8002418 <mac0_tick>
  if (conn)
 800257c:	b9ac      	cbnz	r4, 80025aa <connect+0x72>
              break;
            }

        }
    }
  return 0;
 800257e:	2000      	movs	r0, #0
 8002580:	e017      	b.n	80025b2 <connect+0x7a>
  {
	  //printf("Inside Connect 2\n");
	  while((conn->tcpstateflags & UIP_TS_MASK) != UIP_CLOSED)
      {
		  //printf("Inside Connect 3\n");
		  mac0_tick();
 8002582:	f7ff ff49 	bl	8002418 <mac0_tick>
          //printf("tick exit");
          if ((conn->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED)
 8002586:	7e63      	ldrb	r3, [r4, #25]
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	2b03      	cmp	r3, #3
 800258e:	d104      	bne.n	800259a <connect+0x62>
              //printf(", first packet in: ");
              //while((conn->tcpstateflags & UIP_TS_MASK) != UIP_CLOSED){
			//	mac0_tick();
				//printf(".%d\n",conn->tcpstateflags);
             // }
              printf("TCP Close - Success\n");
 8002590:	4809      	ldr	r0, [pc, #36]	; (80025b8 <connect+0x80>)
 8002592:	f001 ff3b 	bl	800440c <puts>
              return 1;
 8002596:	2001      	movs	r0, #1
 8002598:	e00b      	b.n	80025b2 <connect+0x7a>
            }

          if (((int32_t)(Sys_GetTick() - timeout)) > 0)
 800259a:	f001 f9f5 	bl	8003988 <Sys_GetTick>
 800259e:	1b40      	subs	r0, r0, r5
 80025a0:	2800      	cmp	r0, #0
 80025a2:	dd02      	ble.n	80025aa <connect+0x72>
            {
              conn->tcpstateflags = UIP_CLOSED;
 80025a4:	2000      	movs	r0, #0
 80025a6:	7660      	strb	r0, [r4, #25]
              break;
 80025a8:	e003      	b.n	80025b2 <connect+0x7a>
  //printf("Inside Connect 1\n");
  mac0_tick();
  if (conn)
  {
	  //printf("Inside Connect 2\n");
	  while((conn->tcpstateflags & UIP_TS_MASK) != UIP_CLOSED)
 80025aa:	7e60      	ldrb	r0, [r4, #25]
 80025ac:	f010 000f 	ands.w	r0, r0, #15
 80025b0:	d1e7      	bne.n	8002582 <connect+0x4a>
            }

        }
    }
  return 0;
}
 80025b2:	b003      	add	sp, #12
 80025b4:	bd30      	pop	{r4, r5, pc}
 80025b6:	bf00      	nop
 80025b8:	08006c40 	.word	0x08006c40

080025bc <update_timestamp>:


void update_timestamp(uint8_t *tstpkt)
{
 80025bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025be:	b087      	sub	sp, #28
 80025c0:	4605      	mov	r5, r0
	int m,n;
	uint32_t current,i;
	uint8_t buf[20];
	//unsigned char temp;
	unsigned char s = 0;
	for(m=0;m<20;m++)
 80025c2:	2300      	movs	r3, #0
 80025c4:	e005      	b.n	80025d2 <update_timestamp+0x16>
		buf[m] = '0';
 80025c6:	aa06      	add	r2, sp, #24
 80025c8:	441a      	add	r2, r3
 80025ca:	2130      	movs	r1, #48	; 0x30
 80025cc:	f802 1c14 	strb.w	r1, [r2, #-20]
	int m,n;
	uint32_t current,i;
	uint8_t buf[20];
	//unsigned char temp;
	unsigned char s = 0;
	for(m=0;m<20;m++)
 80025d0:	3301      	adds	r3, #1
 80025d2:	2b13      	cmp	r3, #19
 80025d4:	ddf7      	ble.n	80025c6 <update_timestamp+0xa>
 80025d6:	2700      	movs	r7, #0
 80025d8:	463c      	mov	r4, r7
 80025da:	e04f      	b.n	800267c <update_timestamp+0xc0>
		buf[m] = '0';
	for(m=0;m<150;m++)
	{
		if(	(tstpkt[m+0] == 'M') &&
 80025dc:	4626      	mov	r6, r4
 80025de:	5d2b      	ldrb	r3, [r5, r4]
 80025e0:	2b4d      	cmp	r3, #77	; 0x4d
 80025e2:	d14a      	bne.n	800267a <update_timestamp+0xbe>
			(tstpkt[m+1] == 'i') &&
 80025e4:	192b      	adds	r3, r5, r4
 80025e6:	785b      	ldrb	r3, [r3, #1]
	unsigned char s = 0;
	for(m=0;m<20;m++)
		buf[m] = '0';
	for(m=0;m<150;m++)
	{
		if(	(tstpkt[m+0] == 'M') &&
 80025e8:	2b69      	cmp	r3, #105	; 0x69
 80025ea:	d146      	bne.n	800267a <update_timestamp+0xbe>
			(tstpkt[m+1] == 'i') &&
			(tstpkt[m+2] == 'l') &&
 80025ec:	192b      	adds	r3, r5, r4
 80025ee:	789b      	ldrb	r3, [r3, #2]
	for(m=0;m<20;m++)
		buf[m] = '0';
	for(m=0;m<150;m++)
	{
		if(	(tstpkt[m+0] == 'M') &&
			(tstpkt[m+1] == 'i') &&
 80025f0:	2b6c      	cmp	r3, #108	; 0x6c
 80025f2:	d142      	bne.n	800267a <update_timestamp+0xbe>
			(tstpkt[m+2] == 'l') &&
			(tstpkt[m+3] == 'l') &&
 80025f4:	192b      	adds	r3, r5, r4
 80025f6:	78db      	ldrb	r3, [r3, #3]
		buf[m] = '0';
	for(m=0;m<150;m++)
	{
		if(	(tstpkt[m+0] == 'M') &&
			(tstpkt[m+1] == 'i') &&
			(tstpkt[m+2] == 'l') &&
 80025f8:	2b6c      	cmp	r3, #108	; 0x6c
 80025fa:	d13e      	bne.n	800267a <update_timestamp+0xbe>
			(tstpkt[m+3] == 'l') &&
			(tstpkt[m+4] == 'i') &&
 80025fc:	192b      	adds	r3, r5, r4
 80025fe:	791b      	ldrb	r3, [r3, #4]
	for(m=0;m<150;m++)
	{
		if(	(tstpkt[m+0] == 'M') &&
			(tstpkt[m+1] == 'i') &&
			(tstpkt[m+2] == 'l') &&
			(tstpkt[m+3] == 'l') &&
 8002600:	2b69      	cmp	r3, #105	; 0x69
 8002602:	d13a      	bne.n	800267a <update_timestamp+0xbe>
			(tstpkt[m+4] == 'i') &&
			(tstpkt[m+5] == 's') &&
 8002604:	192b      	adds	r3, r5, r4
 8002606:	795b      	ldrb	r3, [r3, #5]
	{
		if(	(tstpkt[m+0] == 'M') &&
			(tstpkt[m+1] == 'i') &&
			(tstpkt[m+2] == 'l') &&
			(tstpkt[m+3] == 'l') &&
			(tstpkt[m+4] == 'i') &&
 8002608:	2b73      	cmp	r3, #115	; 0x73
 800260a:	d136      	bne.n	800267a <update_timestamp+0xbe>
			(tstpkt[m+5] == 's') &&
			(tstpkt[m+6] == '='))
 800260c:	192b      	adds	r3, r5, r4
 800260e:	799b      	ldrb	r3, [r3, #6]
		if(	(tstpkt[m+0] == 'M') &&
			(tstpkt[m+1] == 'i') &&
			(tstpkt[m+2] == 'l') &&
			(tstpkt[m+3] == 'l') &&
			(tstpkt[m+4] == 'i') &&
			(tstpkt[m+5] == 's') &&
 8002610:	2b3d      	cmp	r3, #61	; 0x3d
 8002612:	d132      	bne.n	800267a <update_timestamp+0xbe>
			(tstpkt[m+6] == '='))
		{
			//current = Sys_GetTick() + 8001521711;
			current = RTC_GetCounter();
 8002614:	f7fe fa3c 	bl	8000a90 <RTC_GetCounter>

			//printf("Systick %d\n",current);
			i=current;
			while(i) {
 8002618:	e010      	b.n	800263c <update_timestamp+0x80>
				buf[s++] = i % 10 + '0';
 800261a:	1c79      	adds	r1, r7, #1
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <update_timestamp+0xc8>)
 800261e:	fba3 2300 	umull	r2, r3, r3, r0
 8002622:	08db      	lsrs	r3, r3, #3
 8002624:	469e      	mov	lr, r3
 8002626:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800262a:	005a      	lsls	r2, r3, #1
 800262c:	1a83      	subs	r3, r0, r2
 800262e:	aa06      	add	r2, sp, #24
 8002630:	4417      	add	r7, r2
 8002632:	3330      	adds	r3, #48	; 0x30
 8002634:	f807 3c14 	strb.w	r3, [r7, #-20]
				i /= 10;
 8002638:	4670      	mov	r0, lr
			current = RTC_GetCounter();

			//printf("Systick %d\n",current);
			i=current;
			while(i) {
				buf[s++] = i % 10 + '0';
 800263a:	b2cf      	uxtb	r7, r1
			//current = Sys_GetTick() + 8001521711;
			current = RTC_GetCounter();

			//printf("Systick %d\n",current);
			i=current;
			while(i) {
 800263c:	2800      	cmp	r0, #0
 800263e:	d1ec      	bne.n	800261a <update_timestamp+0x5e>
				buf[s++] = i % 10 + '0';
				i /= 10;
			}
			buf[s] = '0';
 8002640:	ab06      	add	r3, sp, #24
 8002642:	441f      	add	r7, r3
 8002644:	2330      	movs	r3, #48	; 0x30
 8002646:	f807 3c14 	strb.w	r3, [r7, #-20]
//				temp = buf[s];
//				buf[s]=buf[t];
//				buf[t] = temp;
//			}
			//printf("Millis:");
			s= 0;
 800264a:	2700      	movs	r7, #0
//			for(n=0;n<10;n++)
//				printf("%d",buf[n]);
//			printf("\n  millies");
			for(n=9;n>=0;n--){
 800264c:	2309      	movs	r3, #9
 800264e:	e009      	b.n	8002664 <update_timestamp+0xa8>
				//printf("%d",buf[n]);
				tstpkt[m+7+s] = buf[n];
 8002650:	1de2      	adds	r2, r4, #7
 8002652:	443a      	add	r2, r7
 8002654:	a906      	add	r1, sp, #24
 8002656:	4419      	add	r1, r3
 8002658:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800265c:	54a9      	strb	r1, [r5, r2]
				s++;
 800265e:	3701      	adds	r7, #1
 8002660:	b2ff      	uxtb	r7, r7
			//printf("Millis:");
			s= 0;
//			for(n=0;n<10;n++)
//				printf("%d",buf[n]);
//			printf("\n  millies");
			for(n=9;n>=0;n--){
 8002662:	3b01      	subs	r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	daf3      	bge.n	8002650 <update_timestamp+0x94>
				//printf("%d",buf[n]);
				tstpkt[m+7+s] = buf[n];
				s++;
			}
			tstpkt[m+16] = '0';
 8002668:	f106 0210 	add.w	r2, r6, #16
 800266c:	2330      	movs	r3, #48	; 0x30
 800266e:	54ab      	strb	r3, [r5, r2]
			tstpkt[m+17] = '0';
 8002670:	f106 0211 	add.w	r2, r6, #17
 8002674:	54ab      	strb	r3, [r5, r2]
			tstpkt[m+18] = '0';
 8002676:	3612      	adds	r6, #18
 8002678:	55ab      	strb	r3, [r5, r6]
	uint8_t buf[20];
	//unsigned char temp;
	unsigned char s = 0;
	for(m=0;m<20;m++)
		buf[m] = '0';
	for(m=0;m<150;m++)
 800267a:	3401      	adds	r4, #1
 800267c:	2c95      	cmp	r4, #149	; 0x95
 800267e:	ddad      	ble.n	80025dc <update_timestamp+0x20>
//			for(n=0;n<sizeof(tstpkt);n++)
//				USART3_Send(tstpkt[n]);
		}

	}
}
 8002680:	b007      	add	sp, #28
 8002682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002684:	cccccccd 	.word	0xcccccccd

08002688 <mac0_init>:


void mac0_init(void)
{
 8002688:	b510      	push	{r4, lr}
 800268a:	b084      	sub	sp, #16
	Enc424J600Network_initP0(macaddr0);
 800268c:	4c3a      	ldr	r4, [pc, #232]	; (8002778 <mac0_init+0xf0>)
 800268e:	4620      	mov	r0, r4
 8002690:	f002 f82e 	bl	80046f0 <Enc424J600Network_initP0>
	uip_seteth_addr(macaddr0);
 8002694:	7822      	ldrb	r2, [r4, #0]
 8002696:	4b39      	ldr	r3, [pc, #228]	; (800277c <mac0_init+0xf4>)
 8002698:	701a      	strb	r2, [r3, #0]
 800269a:	7862      	ldrb	r2, [r4, #1]
 800269c:	705a      	strb	r2, [r3, #1]
 800269e:	78a2      	ldrb	r2, [r4, #2]
 80026a0:	709a      	strb	r2, [r3, #2]
 80026a2:	78e2      	ldrb	r2, [r4, #3]
 80026a4:	70da      	strb	r2, [r3, #3]
 80026a6:	7922      	ldrb	r2, [r4, #4]
 80026a8:	711a      	strb	r2, [r3, #4]
 80026aa:	7962      	ldrb	r2, [r4, #5]
 80026ac:	715a      	strb	r2, [r3, #5]
	uip_init();
 80026ae:	f002 fba9 	bl	8004e04 <uip_init>
	uip_arp_init();
 80026b2:	f003 fbb3 	bl	8005e1c <uip_arp_init>

#ifdef DHCP
	printf("Initiating DHCP\n");
 80026b6:	4832      	ldr	r0, [pc, #200]	; (8002780 <mac0_init+0xf8>)
 80026b8:	f001 fea8 	bl	800440c <puts>
	dhcpc_init(macaddr0,6);
 80026bc:	2106      	movs	r1, #6
 80026be:	4620      	mov	r0, r4
 80026c0:	f002 fb1c 	bl	8004cfc <dhcpc_init>

	//dhcpc_request();
	while(!dhcp_getip()){
 80026c4:	e00a      	b.n	80026dc <mac0_init+0x54>
		printf("Retrying DHCP...\n");
 80026c6:	482f      	ldr	r0, [pc, #188]	; (8002784 <mac0_init+0xfc>)
 80026c8:	f001 fea0 	bl	800440c <puts>
		Sys_Delay(1000);
 80026cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026d0:	f001 f960 	bl	8003994 <Sys_Delay>
		dhcpc_init(macaddr0,6);
 80026d4:	2106      	movs	r1, #6
 80026d6:	4828      	ldr	r0, [pc, #160]	; (8002778 <mac0_init+0xf0>)
 80026d8:	f002 fb10 	bl	8004cfc <dhcpc_init>
#ifdef DHCP
	printf("Initiating DHCP\n");
	dhcpc_init(macaddr0,6);

	//dhcpc_request();
	while(!dhcp_getip()){
 80026dc:	f002 fa28 	bl	8004b30 <dhcp_getip>
 80026e0:	2800      	cmp	r0, #0
 80026e2:	d0f0      	beq.n	80026c6 <mac0_init+0x3e>
		printf("Retrying DHCP...\n");
		Sys_Delay(1000);
		dhcpc_init(macaddr0,6);
//		dhcp_getip();
	}
	dhcp_acquired = 1;
 80026e4:	2201      	movs	r2, #1
 80026e6:	4b28      	ldr	r3, [pc, #160]	; (8002788 <mac0_init+0x100>)
 80026e8:	701a      	strb	r2, [r3, #0]
//	uip_setdraddr(ipaddr);
//
//	uip_ip_addr(ipaddr, mysn_addr);
//	uip_setnetmask(ipaddr);
	uint8_t dispip[4];
	uip_gethostaddr(dispip);
 80026ea:	4b28      	ldr	r3, [pc, #160]	; (800278c <mac0_init+0x104>)
 80026ec:	881a      	ldrh	r2, [r3, #0]
 80026ee:	f8ad 200c 	strh.w	r2, [sp, #12]
 80026f2:	885b      	ldrh	r3, [r3, #2]
 80026f4:	f8ad 300e 	strh.w	r3, [sp, #14]
	printf("\n--------------------------\n");
 80026f8:	4825      	ldr	r0, [pc, #148]	; (8002790 <mac0_init+0x108>)
 80026fa:	f001 fe87 	bl	800440c <puts>
	printf("IP : %d.%d.%d.%d\n",dispip[0],dispip[1],dispip[2],dispip[3]);
 80026fe:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002702:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8002706:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800270a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800270e:	9000      	str	r0, [sp, #0]
 8002710:	4820      	ldr	r0, [pc, #128]	; (8002794 <mac0_init+0x10c>)
 8002712:	f001 fe57 	bl	80043c4 <iprintf>
	uip_getdraddr(dispip);
 8002716:	4b20      	ldr	r3, [pc, #128]	; (8002798 <mac0_init+0x110>)
 8002718:	8819      	ldrh	r1, [r3, #0]
 800271a:	885b      	ldrh	r3, [r3, #2]
	printf("GWIP : %d.%d.%d.%d\n",dispip[0],dispip[1],dispip[2],dispip[3]);
 800271c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002720:	9200      	str	r2, [sp, #0]
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8002728:	b2c9      	uxtb	r1, r1
 800272a:	481c      	ldr	r0, [pc, #112]	; (800279c <mac0_init+0x114>)
 800272c:	f001 fe4a 	bl	80043c4 <iprintf>
	uip_getnetmask(dispip);
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <mac0_init+0x118>)
 8002732:	8819      	ldrh	r1, [r3, #0]
 8002734:	885b      	ldrh	r3, [r3, #2]
	printf("NETMASK : %d.%d.%d.%d\n",dispip[0],dispip[1],dispip[2],dispip[3]);
 8002736:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800273a:	9200      	str	r2, [sp, #0]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8002742:	b2c9      	uxtb	r1, r1
 8002744:	4817      	ldr	r0, [pc, #92]	; (80027a4 <mac0_init+0x11c>)
 8002746:	f001 fe3d 	bl	80043c4 <iprintf>
	printf("--------------------------\n");
 800274a:	4817      	ldr	r0, [pc, #92]	; (80027a8 <mac0_init+0x120>)
 800274c:	f001 fe5e 	bl	800440c <puts>
	//uip_gethostaddr(uip_netmask);
#endif
	printf("Init Complete Port 0\n");
 8002750:	4816      	ldr	r0, [pc, #88]	; (80027ac <mac0_init+0x124>)
 8002752:	f001 fe5b 	bl	800440c <puts>
	if(SetCfgSrv(tcp_svr_ip, &tcp_srv_port))
 8002756:	4916      	ldr	r1, [pc, #88]	; (80027b0 <mac0_init+0x128>)
 8002758:	4816      	ldr	r0, [pc, #88]	; (80027b4 <mac0_init+0x12c>)
 800275a:	f001 fca5 	bl	80040a8 <SetCfgSrv>
 800275e:	b130      	cbz	r0, 800276e <mac0_init+0xe6>
	app_timeout = Sys_GetTick() + 10000;
 8002760:	f001 f912 	bl	8003988 <Sys_GetTick>
 8002764:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
 8002768:	3010      	adds	r0, #16
 800276a:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <mac0_init+0x130>)
 800276c:	6018      	str	r0, [r3, #0]
	tcp_app_state = 0;
 800276e:	2200      	movs	r2, #0
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <mac0_init+0x134>)
 8002772:	701a      	strb	r2, [r3, #0]

}
 8002774:	b004      	add	sp, #16
 8002776:	bd10      	pop	{r4, pc}
 8002778:	20000030 	.word	0x20000030
 800277c:	20000c60 	.word	0x20000c60
 8002780:	08006c54 	.word	0x08006c54
 8002784:	08006c64 	.word	0x08006c64
 8002788:	20000bd5 	.word	0x20000bd5
 800278c:	20001628 	.word	0x20001628
 8002790:	08006c78 	.word	0x08006c78
 8002794:	08006c94 	.word	0x08006c94
 8002798:	20001620 	.word	0x20001620
 800279c:	08006ca8 	.word	0x08006ca8
 80027a0:	20001624 	.word	0x20001624
 80027a4:	08006cbc 	.word	0x08006cbc
 80027a8:	08006f18 	.word	0x08006f18
 80027ac:	08006cd4 	.word	0x08006cd4
 80027b0:	200001a4 	.word	0x200001a4
 80027b4:	20000038 	.word	0x20000038
 80027b8:	20000bd0 	.word	0x20000bd0
 80027bc:	20000bd4 	.word	0x20000bd4

080027c0 <build_bac_tcp_pkt>:

void build_bac_tcp_pkt(uint8_t tf)
{
 80027c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t i=0;
	uint8_t n,k;
	uint16_t temp;
	uint8_t print=0;
	float tempa;
	if(tf){
 80027c4:	b940      	cbnz	r0, 80027d8 <build_bac_tcp_pkt+0x18>
 80027c6:	2300      	movs	r3, #0
 80027c8:	e010      	b.n	80027ec <build_bac_tcp_pkt+0x2c>
		while(i<sizeof(bacpkt))
		{
			tcp_buf[i] = bacpkt[i];
 80027ca:	4ab6      	ldr	r2, [pc, #728]	; (8002aa4 <build_bac_tcp_pkt+0x2e4>)
 80027cc:	5cd1      	ldrb	r1, [r2, r3]
 80027ce:	4ab6      	ldr	r2, [pc, #728]	; (8002aa8 <build_bac_tcp_pkt+0x2e8>)
 80027d0:	54d1      	strb	r1, [r2, r3]
			i++;
 80027d2:	3301      	adds	r3, #1
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	e000      	b.n	80027da <build_bac_tcp_pkt+0x1a>
 80027d8:	2300      	movs	r3, #0
	uint8_t n,k;
	uint16_t temp;
	uint8_t print=0;
	float tempa;
	if(tf){
		while(i<sizeof(bacpkt))
 80027da:	2bb2      	cmp	r3, #178	; 0xb2
 80027dc:	d9f5      	bls.n	80027ca <build_bac_tcp_pkt+0xa>
 80027de:	e007      	b.n	80027f0 <build_bac_tcp_pkt+0x30>
			i++;
		}
	}else{
		while(i<sizeof(bacpktf))
		{
			tcp_buf[i] = bacpktf[i];
 80027e0:	4ab2      	ldr	r2, [pc, #712]	; (8002aac <build_bac_tcp_pkt+0x2ec>)
 80027e2:	5cd1      	ldrb	r1, [r2, r3]
 80027e4:	4ab0      	ldr	r2, [pc, #704]	; (8002aa8 <build_bac_tcp_pkt+0x2e8>)
 80027e6:	54d1      	strb	r1, [r2, r3]
			i++;
 80027e8:	3301      	adds	r3, #1
 80027ea:	b29b      	uxth	r3, r3
		{
			tcp_buf[i] = bacpkt[i];
			i++;
		}
	}else{
		while(i<sizeof(bacpktf))
 80027ec:	2bb3      	cmp	r3, #179	; 0xb3
 80027ee:	d9f7      	bls.n	80027e0 <build_bac_tcp_pkt+0x20>
		{
			tcp_buf[i] = bacpktf[i];
			i++;
		}
	}
	i-=1;
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29c      	uxth	r4, r3

	for(n=0;n<retrdpcount()-10;n++)
 80027f4:	2500      	movs	r5, #0
 80027f6:	e0ad      	b.n	8002954 <build_bac_tcp_pkt+0x194>
	//for(n=0;n<1;n++)
	{

		// Insert Instance number
		temp = GetBacInstNum(n);
 80027f8:	4628      	mov	r0, r5
 80027fa:	f000 fd87 	bl	800330c <GetBacInstNum>
		//printf("\nTemp  %d\n",temp);
		k=0;
 80027fe:	2300      	movs	r3, #0
		while(temp >= 1000){
 8002800:	e004      	b.n	800280c <build_bac_tcp_pkt+0x4c>
			k++;
 8002802:	3301      	adds	r3, #1
 8002804:	b2db      	uxtb	r3, r3
			temp -= 1000;
 8002806:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
 800280a:	b280      	uxth	r0, r0

		// Insert Instance number
		temp = GetBacInstNum(n);
		//printf("\nTemp  %d\n",temp);
		k=0;
		while(temp >= 1000){
 800280c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002810:	d2f7      	bcs.n	8002802 <build_bac_tcp_pkt+0x42>
			k++;
			temp -= 1000;
		}
		//printf("Test k %d \n",k);
		if(k>0)
 8002812:	b123      	cbz	r3, 800281e <build_bac_tcp_pkt+0x5e>
			tcp_buf[i++] = k + '0';
 8002814:	1c62      	adds	r2, r4, #1
 8002816:	3330      	adds	r3, #48	; 0x30
 8002818:	49a3      	ldr	r1, [pc, #652]	; (8002aa8 <build_bac_tcp_pkt+0x2e8>)
 800281a:	550b      	strb	r3, [r1, r4]
 800281c:	b294      	uxth	r4, r2
		k=0;
 800281e:	2300      	movs	r3, #0
		while(temp >= 100){
 8002820:	e003      	b.n	800282a <build_bac_tcp_pkt+0x6a>
			k++;
 8002822:	3301      	adds	r3, #1
 8002824:	b2db      	uxtb	r3, r3
			temp -= 100;
 8002826:	3864      	subs	r0, #100	; 0x64
 8002828:	b280      	uxth	r0, r0
		}
		//printf("Test k %d \n",k);
		if(k>0)
			tcp_buf[i++] = k + '0';
		k=0;
		while(temp >= 100){
 800282a:	2863      	cmp	r0, #99	; 0x63
 800282c:	d8f9      	bhi.n	8002822 <build_bac_tcp_pkt+0x62>
			k++;
			temp -= 100;
		}
		//printf("Test k %d \n",k);
		if(k>0)
 800282e:	b123      	cbz	r3, 800283a <build_bac_tcp_pkt+0x7a>
			tcp_buf[i++] = k + '0';
 8002830:	1c62      	adds	r2, r4, #1
 8002832:	3330      	adds	r3, #48	; 0x30
 8002834:	499c      	ldr	r1, [pc, #624]	; (8002aa8 <build_bac_tcp_pkt+0x2e8>)
 8002836:	550b      	strb	r3, [r1, r4]
 8002838:	b294      	uxth	r4, r2
		k=0;
 800283a:	2300      	movs	r3, #0
		while(temp >= 10){
 800283c:	e003      	b.n	8002846 <build_bac_tcp_pkt+0x86>
			k++;
 800283e:	3301      	adds	r3, #1
 8002840:	b2db      	uxtb	r3, r3
			temp -= 10;
 8002842:	380a      	subs	r0, #10
 8002844:	b280      	uxth	r0, r0
		}
		//printf("Test k %d \n",k);
		if(k>0)
			tcp_buf[i++] = k + '0';
		k=0;
		while(temp >= 10){
 8002846:	2809      	cmp	r0, #9
 8002848:	d8f9      	bhi.n	800283e <build_bac_tcp_pkt+0x7e>
			k++;
			temp -= 10;
		}
		//printf("Test k %d \n",k);
		if(k>0)
 800284a:	b123      	cbz	r3, 8002856 <build_bac_tcp_pkt+0x96>
			tcp_buf[i++] = k + '0';
 800284c:	1c62      	adds	r2, r4, #1
 800284e:	3330      	adds	r3, #48	; 0x30
 8002850:	4995      	ldr	r1, [pc, #596]	; (8002aa8 <build_bac_tcp_pkt+0x2e8>)
 8002852:	550b      	strb	r3, [r1, r4]
 8002854:	b294      	uxth	r4, r2
		tcp_buf[i++] = temp + '0';
 8002856:	1c61      	adds	r1, r4, #1
 8002858:	b289      	uxth	r1, r1
 800285a:	4b93      	ldr	r3, [pc, #588]	; (8002aa8 <build_bac_tcp_pkt+0x2e8>)
 800285c:	3030      	adds	r0, #48	; 0x30
 800285e:	5518      	strb	r0, [r3, r4]

		tcp_buf[i++] = '%';
 8002860:	1ca2      	adds	r2, r4, #2
 8002862:	b292      	uxth	r2, r2
 8002864:	f04f 0e25 	mov.w	lr, #37	; 0x25
 8002868:	f803 e001 	strb.w	lr, [r3, r1]
		tcp_buf[i++] = '3';
 800286c:	1ce1      	adds	r1, r4, #3
 800286e:	b289      	uxth	r1, r1
 8002870:	2733      	movs	r7, #51	; 0x33
 8002872:	549f      	strb	r7, [r3, r2]
		tcp_buf[i++] = 'A';
 8002874:	1d22      	adds	r2, r4, #4
 8002876:	b292      	uxth	r2, r2
 8002878:	2041      	movs	r0, #65	; 0x41
 800287a:	5458      	strb	r0, [r3, r1]
		tcp_buf[i++] = 'B';
 800287c:	1d61      	adds	r1, r4, #5
 800287e:	b289      	uxth	r1, r1
 8002880:	f04f 0c42 	mov.w	ip, #66	; 0x42
 8002884:	f803 c002 	strb.w	ip, [r3, r2]
		tcp_buf[i++] = 'i';
 8002888:	1da2      	adds	r2, r4, #6
 800288a:	b292      	uxth	r2, r2
 800288c:	f04f 0c69 	mov.w	ip, #105	; 0x69
 8002890:	f803 c001 	strb.w	ip, [r3, r1]
		tcp_buf[i++] = 'n';
 8002894:	1de1      	adds	r1, r4, #7
 8002896:	b289      	uxth	r1, r1
 8002898:	f04f 0c6e 	mov.w	ip, #110	; 0x6e
 800289c:	f803 c002 	strb.w	ip, [r3, r2]
		tcp_buf[i++] = 'a';
 80028a0:	f104 0208 	add.w	r2, r4, #8
 80028a4:	b292      	uxth	r2, r2
 80028a6:	f04f 0c61 	mov.w	ip, #97	; 0x61
 80028aa:	f803 c001 	strb.w	ip, [r3, r1]
		tcp_buf[i++] = 'r';
 80028ae:	f104 0109 	add.w	r1, r4, #9
 80028b2:	b289      	uxth	r1, r1
 80028b4:	f04f 0c72 	mov.w	ip, #114	; 0x72
 80028b8:	f803 c002 	strb.w	ip, [r3, r2]
		tcp_buf[i++] = 'y';
 80028bc:	f104 020a 	add.w	r2, r4, #10
 80028c0:	b292      	uxth	r2, r2
 80028c2:	f04f 0c79 	mov.w	ip, #121	; 0x79
 80028c6:	f803 c001 	strb.w	ip, [r3, r1]
		tcp_buf[i++] = '%';
 80028ca:	f104 010b 	add.w	r1, r4, #11
 80028ce:	b289      	uxth	r1, r1
 80028d0:	f803 e002 	strb.w	lr, [r3, r2]
		tcp_buf[i++] = '3';
 80028d4:	f104 020c 	add.w	r2, r4, #12
 80028d8:	b292      	uxth	r2, r2
 80028da:	545f      	strb	r7, [r3, r1]
		tcp_buf[i++] = 'A';
 80028dc:	340d      	adds	r4, #13
 80028de:	b2a4      	uxth	r4, r4
 80028e0:	5498      	strb	r0, [r3, r2]
		temp = 0;
 80028e2:	2300      	movs	r3, #0
		while(readprop_desc[n][temp] != '\0')
 80028e4:	e005      	b.n	80028f2 <build_bac_tcp_pkt+0x132>
		{
			tcp_buf[i++] = readprop_desc[n][temp++];
 80028e6:	1c61      	adds	r1, r4, #1
 80028e8:	3301      	adds	r3, #1
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	486e      	ldr	r0, [pc, #440]	; (8002aa8 <build_bac_tcp_pkt+0x2e8>)
 80028ee:	5502      	strb	r2, [r0, r4]
 80028f0:	b28c      	uxth	r4, r1
		tcp_buf[i++] = 'y';
		tcp_buf[i++] = '%';
		tcp_buf[i++] = '3';
		tcp_buf[i++] = 'A';
		temp = 0;
		while(readprop_desc[n][temp] != '\0')
 80028f2:	4a6f      	ldr	r2, [pc, #444]	; (8002ab0 <build_bac_tcp_pkt+0x2f0>)
 80028f4:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80028f8:	5cd2      	ldrb	r2, [r2, r3]
 80028fa:	2a00      	cmp	r2, #0
 80028fc:	d1f3      	bne.n	80028e6 <build_bac_tcp_pkt+0x126>
		{
			tcp_buf[i++] = readprop_desc[n][temp++];
		}
		//printf("Test 4 %d \n",n);
		tcp_buf[i++] = '%';
 80028fe:	1c61      	adds	r1, r4, #1
 8002900:	b289      	uxth	r1, r1
 8002902:	4a69      	ldr	r2, [pc, #420]	; (8002aa8 <build_bac_tcp_pkt+0x2e8>)
 8002904:	2325      	movs	r3, #37	; 0x25
 8002906:	5513      	strb	r3, [r2, r4]
		tcp_buf[i++] = '3';
 8002908:	1ca3      	adds	r3, r4, #2
 800290a:	b29b      	uxth	r3, r3
 800290c:	2033      	movs	r0, #51	; 0x33
 800290e:	5450      	strb	r0, [r2, r1]
		tcp_buf[i++] = 'A';
 8002910:	1ce6      	adds	r6, r4, #3
 8002912:	b2b6      	uxth	r6, r6
 8002914:	2141      	movs	r1, #65	; 0x41
 8002916:	54d1      	strb	r1, [r2, r3]
		temp = retrdpval(n);
 8002918:	4628      	mov	r0, r5
 800291a:	f000 fd07 	bl	800332c <retrdpval>
		if(temp>0){
 800291e:	b128      	cbz	r0, 800292c <build_bac_tcp_pkt+0x16c>
			tcp_buf[i++] = '1';
 8002920:	3404      	adds	r4, #4
 8002922:	b2a4      	uxth	r4, r4
 8002924:	2231      	movs	r2, #49	; 0x31
 8002926:	4b60      	ldr	r3, [pc, #384]	; (8002aa8 <build_bac_tcp_pkt+0x2e8>)
 8002928:	559a      	strb	r2, [r3, r6]
 800292a:	e004      	b.n	8002936 <build_bac_tcp_pkt+0x176>
		}else
		{
			tcp_buf[i++] = '0';
 800292c:	3404      	adds	r4, #4
 800292e:	b2a4      	uxth	r4, r4
 8002930:	2230      	movs	r2, #48	; 0x30
 8002932:	4b5d      	ldr	r3, [pc, #372]	; (8002aa8 <build_bac_tcp_pkt+0x2e8>)
 8002934:	559a      	strb	r2, [r3, r6]
		}
		tcp_buf[i++] = '%';
 8002936:	1c61      	adds	r1, r4, #1
 8002938:	b289      	uxth	r1, r1
 800293a:	4a5b      	ldr	r2, [pc, #364]	; (8002aa8 <build_bac_tcp_pkt+0x2e8>)
 800293c:	2325      	movs	r3, #37	; 0x25
 800293e:	5513      	strb	r3, [r2, r4]
		tcp_buf[i++] = '2';
 8002940:	1ca3      	adds	r3, r4, #2
 8002942:	b29b      	uxth	r3, r3
 8002944:	2032      	movs	r0, #50	; 0x32
 8002946:	5450      	strb	r0, [r2, r1]
		tcp_buf[i++] = 'C';
 8002948:	3403      	adds	r4, #3
 800294a:	b2a4      	uxth	r4, r4
 800294c:	2143      	movs	r1, #67	; 0x43
 800294e:	54d1      	strb	r1, [r2, r3]
			i++;
		}
	}
	i-=1;

	for(n=0;n<retrdpcount()-10;n++)
 8002950:	3501      	adds	r5, #1
 8002952:	b2ed      	uxtb	r5, r5
 8002954:	462e      	mov	r6, r5
 8002956:	f000 fce5 	bl	8003324 <retrdpcount>
 800295a:	380a      	subs	r0, #10
 800295c:	4285      	cmp	r5, r0
 800295e:	f6ff af4b 	blt.w	80027f8 <build_bac_tcp_pkt+0x38>
 8002962:	2600      	movs	r6, #0
 8002964:	e14b      	b.n	8002bfe <build_bac_tcp_pkt+0x43e>
	}
	for(n=0;n<retrdpacount();n++)
	{

		// Insert Instance number
		temp = GetBacInstNuma(n);
 8002966:	4630      	mov	r0, r6
 8002968:	f000 fcd6 	bl	8003318 <GetBacInstNuma>
		//printf("\nTemp  %d\n",temp);
		k=0;
 800296c:	2300      	movs	r3, #0
		while(temp >= 1000){
 800296e:	e004      	b.n	800297a <build_bac_tcp_pkt+0x1ba>
			k++;
 8002970:	3301      	adds	r3, #1
 8002972:	b2db      	uxtb	r3, r3
			temp -= 1000;
 8002974:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
 8002978:	b280      	uxth	r0, r0

		// Insert Instance number
		temp = GetBacInstNuma(n);
		//printf("\nTemp  %d\n",temp);
		k=0;
		while(temp >= 1000){
 800297a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800297e:	d2f7      	bcs.n	8002970 <build_bac_tcp_pkt+0x1b0>
			k++;
			temp -= 1000;
		}
		//printf("Test k %d \n",k);
		if(k>0)
 8002980:	b123      	cbz	r3, 800298c <build_bac_tcp_pkt+0x1cc>
			tcp_buf[i++] = k + '0';
 8002982:	1c62      	adds	r2, r4, #1
 8002984:	3330      	adds	r3, #48	; 0x30
 8002986:	4948      	ldr	r1, [pc, #288]	; (8002aa8 <build_bac_tcp_pkt+0x2e8>)
 8002988:	550b      	strb	r3, [r1, r4]
 800298a:	b294      	uxth	r4, r2
		k=0;
 800298c:	2300      	movs	r3, #0
		while(temp >= 100){
 800298e:	e003      	b.n	8002998 <build_bac_tcp_pkt+0x1d8>
			k++;
 8002990:	3301      	adds	r3, #1
 8002992:	b2db      	uxtb	r3, r3
			temp -= 100;
 8002994:	3864      	subs	r0, #100	; 0x64
 8002996:	b280      	uxth	r0, r0
		}
		//printf("Test k %d \n",k);
		if(k>0)
			tcp_buf[i++] = k + '0';
		k=0;
		while(temp >= 100){
 8002998:	2863      	cmp	r0, #99	; 0x63
 800299a:	d8f9      	bhi.n	8002990 <build_bac_tcp_pkt+0x1d0>
			k++;
			temp -= 100;
		}
		//printf("Test k %d \n",k);
		if(k>0)
 800299c:	b123      	cbz	r3, 80029a8 <build_bac_tcp_pkt+0x1e8>
			tcp_buf[i++] = k + '0';
 800299e:	1c62      	adds	r2, r4, #1
 80029a0:	3330      	adds	r3, #48	; 0x30
 80029a2:	4941      	ldr	r1, [pc, #260]	; (8002aa8 <build_bac_tcp_pkt+0x2e8>)
 80029a4:	550b      	strb	r3, [r1, r4]
 80029a6:	b294      	uxth	r4, r2
		k=0;
 80029a8:	2300      	movs	r3, #0
		while(temp >= 10){
 80029aa:	e003      	b.n	80029b4 <build_bac_tcp_pkt+0x1f4>
			k++;
 80029ac:	3301      	adds	r3, #1
 80029ae:	b2db      	uxtb	r3, r3
			temp -= 10;
 80029b0:	380a      	subs	r0, #10
 80029b2:	b280      	uxth	r0, r0
		}
		//printf("Test k %d \n",k);
		if(k>0)
			tcp_buf[i++] = k + '0';
		k=0;
		while(temp >= 10){
 80029b4:	2809      	cmp	r0, #9
 80029b6:	d8f9      	bhi.n	80029ac <build_bac_tcp_pkt+0x1ec>
			k++;
			temp -= 10;
		}
		//printf("Test k %d \n",k);
		if(k>0)
 80029b8:	b123      	cbz	r3, 80029c4 <build_bac_tcp_pkt+0x204>
			tcp_buf[i++] = k + '0';
 80029ba:	1c62      	adds	r2, r4, #1
 80029bc:	3330      	adds	r3, #48	; 0x30
 80029be:	493a      	ldr	r1, [pc, #232]	; (8002aa8 <build_bac_tcp_pkt+0x2e8>)
 80029c0:	550b      	strb	r3, [r1, r4]
 80029c2:	b294      	uxth	r4, r2
		tcp_buf[i++] = temp + '0';
 80029c4:	1c61      	adds	r1, r4, #1
 80029c6:	b289      	uxth	r1, r1
 80029c8:	4b37      	ldr	r3, [pc, #220]	; (8002aa8 <build_bac_tcp_pkt+0x2e8>)
 80029ca:	3030      	adds	r0, #48	; 0x30
 80029cc:	5518      	strb	r0, [r3, r4]

		tcp_buf[i++] = '%';
 80029ce:	1ca2      	adds	r2, r4, #2
 80029d0:	b292      	uxth	r2, r2
 80029d2:	2725      	movs	r7, #37	; 0x25
 80029d4:	545f      	strb	r7, [r3, r1]
		tcp_buf[i++] = '3';
 80029d6:	1ce0      	adds	r0, r4, #3
 80029d8:	b280      	uxth	r0, r0
 80029da:	2533      	movs	r5, #51	; 0x33
 80029dc:	549d      	strb	r5, [r3, r2]
		tcp_buf[i++] = 'A';
 80029de:	1d22      	adds	r2, r4, #4
 80029e0:	b292      	uxth	r2, r2
 80029e2:	2141      	movs	r1, #65	; 0x41
 80029e4:	5419      	strb	r1, [r3, r0]
		tcp_buf[i++] = 'A';
 80029e6:	1d60      	adds	r0, r4, #5
 80029e8:	b280      	uxth	r0, r0
 80029ea:	5499      	strb	r1, [r3, r2]
		tcp_buf[i++] = 'n';
 80029ec:	1da2      	adds	r2, r4, #6
 80029ee:	b292      	uxth	r2, r2
 80029f0:	f04f 0e6e 	mov.w	lr, #110	; 0x6e
 80029f4:	f803 e000 	strb.w	lr, [r3, r0]
		tcp_buf[i++] = 'a';
 80029f8:	1de0      	adds	r0, r4, #7
 80029fa:	b280      	uxth	r0, r0
 80029fc:	f04f 0e61 	mov.w	lr, #97	; 0x61
 8002a00:	f803 e002 	strb.w	lr, [r3, r2]
		tcp_buf[i++] = 'l';
 8002a04:	f104 0208 	add.w	r2, r4, #8
 8002a08:	b292      	uxth	r2, r2
 8002a0a:	f04f 0e6c 	mov.w	lr, #108	; 0x6c
 8002a0e:	f803 e000 	strb.w	lr, [r3, r0]
		tcp_buf[i++] = 'o';
 8002a12:	f104 0009 	add.w	r0, r4, #9
 8002a16:	b280      	uxth	r0, r0
 8002a18:	f04f 0e6f 	mov.w	lr, #111	; 0x6f
 8002a1c:	f803 e002 	strb.w	lr, [r3, r2]
		tcp_buf[i++] = 'g';
 8002a20:	f104 020a 	add.w	r2, r4, #10
 8002a24:	b292      	uxth	r2, r2
 8002a26:	f04f 0e67 	mov.w	lr, #103	; 0x67
 8002a2a:	f803 e000 	strb.w	lr, [r3, r0]
		tcp_buf[i++] = '%';
 8002a2e:	f104 000b 	add.w	r0, r4, #11
 8002a32:	b280      	uxth	r0, r0
 8002a34:	549f      	strb	r7, [r3, r2]
		tcp_buf[i++] = '3';
 8002a36:	f104 020c 	add.w	r2, r4, #12
 8002a3a:	b292      	uxth	r2, r2
 8002a3c:	541d      	strb	r5, [r3, r0]
		tcp_buf[i++] = 'A';
 8002a3e:	340d      	adds	r4, #13
 8002a40:	b2a7      	uxth	r7, r4
 8002a42:	5499      	strb	r1, [r3, r2]
		temp = 0;
 8002a44:	2300      	movs	r3, #0
		while(readpropa_desc[n][temp] != '\0')
 8002a46:	e005      	b.n	8002a54 <build_bac_tcp_pkt+0x294>
		{
			tcp_buf[i++] = readpropa_desc[n][temp++];
 8002a48:	1c79      	adds	r1, r7, #1
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	4816      	ldr	r0, [pc, #88]	; (8002aa8 <build_bac_tcp_pkt+0x2e8>)
 8002a50:	55c2      	strb	r2, [r0, r7]
 8002a52:	b28f      	uxth	r7, r1
		tcp_buf[i++] = 'g';
		tcp_buf[i++] = '%';
		tcp_buf[i++] = '3';
		tcp_buf[i++] = 'A';
		temp = 0;
		while(readpropa_desc[n][temp] != '\0')
 8002a54:	4a17      	ldr	r2, [pc, #92]	; (8002ab4 <build_bac_tcp_pkt+0x2f4>)
 8002a56:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8002a5a:	5cd2      	ldrb	r2, [r2, r3]
 8002a5c:	2a00      	cmp	r2, #0
 8002a5e:	d1f3      	bne.n	8002a48 <build_bac_tcp_pkt+0x288>
		{
			tcp_buf[i++] = readpropa_desc[n][temp++];
		}
		//printf("Test 4 %d \n",n);
		tcp_buf[i++] = '%';
 8002a60:	1c79      	adds	r1, r7, #1
 8002a62:	b289      	uxth	r1, r1
 8002a64:	4a10      	ldr	r2, [pc, #64]	; (8002aa8 <build_bac_tcp_pkt+0x2e8>)
 8002a66:	2325      	movs	r3, #37	; 0x25
 8002a68:	55d3      	strb	r3, [r2, r7]
		tcp_buf[i++] = '3';
 8002a6a:	1cbb      	adds	r3, r7, #2
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2033      	movs	r0, #51	; 0x33
 8002a70:	5450      	strb	r0, [r2, r1]
		tcp_buf[i++] = 'A';
 8002a72:	1cfc      	adds	r4, r7, #3
 8002a74:	b2a4      	uxth	r4, r4
 8002a76:	2141      	movs	r1, #65	; 0x41
 8002a78:	54d1      	strb	r1, [r2, r3]
		tempa = retrdpaval(n);
 8002a7a:	4630      	mov	r0, r6
 8002a7c:	f000 fc5c 	bl	8003338 <retrdpaval>
//				break;
//			else
//				tcp_buf[i++] = tempa[m];
//		}
		//printf("Float %d",(int)tempa);
		tempa *= 10;
 8002a80:	490d      	ldr	r1, [pc, #52]	; (8002ab8 <build_bac_tcp_pkt+0x2f8>)
 8002a82:	f7fd fc79 	bl	8000378 <__aeabi_fmul>
 8002a86:	4605      	mov	r5, r0
		if(tempa<0)
 8002a88:	2100      	movs	r1, #0
 8002a8a:	f7fd fe13 	bl	80006b4 <__aeabi_fcmplt>
 8002a8e:	b130      	cbz	r0, 8002a9e <build_bac_tcp_pkt+0x2de>
		{
			tcp_buf[i++] = '-';
 8002a90:	3704      	adds	r7, #4
 8002a92:	222d      	movs	r2, #45	; 0x2d
 8002a94:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <build_bac_tcp_pkt+0x2e8>)
 8002a96:	551a      	strb	r2, [r3, r4]
			tempa *= -1;
 8002a98:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
//		}
		//printf("Float %d",(int)tempa);
		tempa *= 10;
		if(tempa<0)
		{
			tcp_buf[i++] = '-';
 8002a9c:	b2bc      	uxth	r4, r7
			tempa *= -1;
		}
		//printf("\nTemp  %d\n",temp);
		k=0;
 8002a9e:	2700      	movs	r7, #0
		print =0;
		while(tempa >= 100000){
 8002aa0:	e013      	b.n	8002aca <build_bac_tcp_pkt+0x30a>
 8002aa2:	bf00      	nop
 8002aa4:	200000f0 	.word	0x200000f0
 8002aa8:	20000d30 	.word	0x20000d30
 8002aac:	2000003c 	.word	0x2000003c
 8002ab0:	20000578 	.word	0x20000578
 8002ab4:	200005ec 	.word	0x200005ec
 8002ab8:	41200000 	.word	0x41200000
			k++;
 8002abc:	3701      	adds	r7, #1
 8002abe:	b2ff      	uxtb	r7, r7
			tempa -= 100000;
 8002ac0:	495b      	ldr	r1, [pc, #364]	; (8002c30 <build_bac_tcp_pkt+0x470>)
 8002ac2:	4628      	mov	r0, r5
 8002ac4:	f7fd fb4e 	bl	8000164 <__aeabi_fsub>
 8002ac8:	4605      	mov	r5, r0
			tempa *= -1;
		}
		//printf("\nTemp  %d\n",temp);
		k=0;
		print =0;
		while(tempa >= 100000){
 8002aca:	4959      	ldr	r1, [pc, #356]	; (8002c30 <build_bac_tcp_pkt+0x470>)
 8002acc:	4628      	mov	r0, r5
 8002ace:	f7fd fe05 	bl	80006dc <__aeabi_fcmpge>
 8002ad2:	2800      	cmp	r0, #0
 8002ad4:	d1f2      	bne.n	8002abc <build_bac_tcp_pkt+0x2fc>
			k++;
			tempa -= 100000;
		}
		//printf("Test 1 k %d \n",k);
		if(k>0)
 8002ad6:	b917      	cbnz	r7, 8002ade <build_bac_tcp_pkt+0x31e>
			tcp_buf[i++] = '-';
			tempa *= -1;
		}
		//printf("\nTemp  %d\n",temp);
		k=0;
		print =0;
 8002ad8:	f04f 0800 	mov.w	r8, #0
 8002adc:	e001      	b.n	8002ae2 <build_bac_tcp_pkt+0x322>
			k++;
			tempa -= 100000;
		}
		//printf("Test 1 k %d \n",k);
		if(k>0)
			print = 1;
 8002ade:	f04f 0801 	mov.w	r8, #1
		if(print)
 8002ae2:	f1b8 0f00 	cmp.w	r8, #0
 8002ae6:	d004      	beq.n	8002af2 <build_bac_tcp_pkt+0x332>
			tcp_buf[i++] = k + '0';
 8002ae8:	1c63      	adds	r3, r4, #1
 8002aea:	3730      	adds	r7, #48	; 0x30
 8002aec:	4a51      	ldr	r2, [pc, #324]	; (8002c34 <build_bac_tcp_pkt+0x474>)
 8002aee:	5517      	strb	r7, [r2, r4]
 8002af0:	b29c      	uxth	r4, r3
		k=0;
 8002af2:	2700      	movs	r7, #0
		while(tempa >= 10000){
 8002af4:	e006      	b.n	8002b04 <build_bac_tcp_pkt+0x344>
			k++;
 8002af6:	3701      	adds	r7, #1
 8002af8:	b2ff      	uxtb	r7, r7
			tempa -= 10000;
 8002afa:	494f      	ldr	r1, [pc, #316]	; (8002c38 <build_bac_tcp_pkt+0x478>)
 8002afc:	4628      	mov	r0, r5
 8002afe:	f7fd fb31 	bl	8000164 <__aeabi_fsub>
 8002b02:	4605      	mov	r5, r0
		if(k>0)
			print = 1;
		if(print)
			tcp_buf[i++] = k + '0';
		k=0;
		while(tempa >= 10000){
 8002b04:	494c      	ldr	r1, [pc, #304]	; (8002c38 <build_bac_tcp_pkt+0x478>)
 8002b06:	4628      	mov	r0, r5
 8002b08:	f7fd fde8 	bl	80006dc <__aeabi_fcmpge>
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	d1f2      	bne.n	8002af6 <build_bac_tcp_pkt+0x336>
			k++;
			tempa -= 10000;
		}
		//printf("Test 2 k %d \n",k);
		if(k>0)
 8002b10:	b10f      	cbz	r7, 8002b16 <build_bac_tcp_pkt+0x356>
			print = 1;
 8002b12:	f04f 0801 	mov.w	r8, #1
		if(print)
 8002b16:	f1b8 0f00 	cmp.w	r8, #0
 8002b1a:	d004      	beq.n	8002b26 <build_bac_tcp_pkt+0x366>
			tcp_buf[i++] = k + '0';
 8002b1c:	1c63      	adds	r3, r4, #1
 8002b1e:	3730      	adds	r7, #48	; 0x30
 8002b20:	4a44      	ldr	r2, [pc, #272]	; (8002c34 <build_bac_tcp_pkt+0x474>)
 8002b22:	5517      	strb	r7, [r2, r4]
 8002b24:	b29c      	uxth	r4, r3
		k=0;
 8002b26:	2700      	movs	r7, #0
		while(tempa >= 1000){
 8002b28:	e006      	b.n	8002b38 <build_bac_tcp_pkt+0x378>
			k++;
 8002b2a:	3701      	adds	r7, #1
 8002b2c:	b2ff      	uxtb	r7, r7
			tempa -= 1000;
 8002b2e:	4943      	ldr	r1, [pc, #268]	; (8002c3c <build_bac_tcp_pkt+0x47c>)
 8002b30:	4628      	mov	r0, r5
 8002b32:	f7fd fb17 	bl	8000164 <__aeabi_fsub>
 8002b36:	4605      	mov	r5, r0
		if(k>0)
			print = 1;
		if(print)
			tcp_buf[i++] = k + '0';
		k=0;
		while(tempa >= 1000){
 8002b38:	4940      	ldr	r1, [pc, #256]	; (8002c3c <build_bac_tcp_pkt+0x47c>)
 8002b3a:	4628      	mov	r0, r5
 8002b3c:	f7fd fdce 	bl	80006dc <__aeabi_fcmpge>
 8002b40:	2800      	cmp	r0, #0
 8002b42:	d1f2      	bne.n	8002b2a <build_bac_tcp_pkt+0x36a>
			k++;
			tempa -= 1000;
		}
		//printf("Test 3 k %d \n",k);
		if(k>0)
 8002b44:	b10f      	cbz	r7, 8002b4a <build_bac_tcp_pkt+0x38a>
			print = 1;
 8002b46:	f04f 0801 	mov.w	r8, #1
		if(print)
 8002b4a:	f1b8 0f00 	cmp.w	r8, #0
 8002b4e:	d004      	beq.n	8002b5a <build_bac_tcp_pkt+0x39a>
			tcp_buf[i++] = k + '0';
 8002b50:	1c63      	adds	r3, r4, #1
 8002b52:	3730      	adds	r7, #48	; 0x30
 8002b54:	4a37      	ldr	r2, [pc, #220]	; (8002c34 <build_bac_tcp_pkt+0x474>)
 8002b56:	5517      	strb	r7, [r2, r4]
 8002b58:	b29c      	uxth	r4, r3
		k=0;
 8002b5a:	2700      	movs	r7, #0
		while(tempa >= 100){
 8002b5c:	e006      	b.n	8002b6c <build_bac_tcp_pkt+0x3ac>
			k++;
 8002b5e:	3701      	adds	r7, #1
 8002b60:	b2ff      	uxtb	r7, r7
			tempa -= 100;
 8002b62:	4937      	ldr	r1, [pc, #220]	; (8002c40 <build_bac_tcp_pkt+0x480>)
 8002b64:	4628      	mov	r0, r5
 8002b66:	f7fd fafd 	bl	8000164 <__aeabi_fsub>
 8002b6a:	4605      	mov	r5, r0
		if(k>0)
			print = 1;
		if(print)
			tcp_buf[i++] = k + '0';
		k=0;
		while(tempa >= 100){
 8002b6c:	4934      	ldr	r1, [pc, #208]	; (8002c40 <build_bac_tcp_pkt+0x480>)
 8002b6e:	4628      	mov	r0, r5
 8002b70:	f7fd fdb4 	bl	80006dc <__aeabi_fcmpge>
 8002b74:	2800      	cmp	r0, #0
 8002b76:	d1f2      	bne.n	8002b5e <build_bac_tcp_pkt+0x39e>
			k++;
			tempa -= 100;
		}
		//printf("Test 4 k %d \n",k);
		if(k>0)
 8002b78:	b10f      	cbz	r7, 8002b7e <build_bac_tcp_pkt+0x3be>
			print = 1;
 8002b7a:	f04f 0801 	mov.w	r8, #1
		if(print)
 8002b7e:	f1b8 0f00 	cmp.w	r8, #0
 8002b82:	d004      	beq.n	8002b8e <build_bac_tcp_pkt+0x3ce>
			tcp_buf[i++] = k + '0';
 8002b84:	1c63      	adds	r3, r4, #1
 8002b86:	3730      	adds	r7, #48	; 0x30
 8002b88:	4a2a      	ldr	r2, [pc, #168]	; (8002c34 <build_bac_tcp_pkt+0x474>)
 8002b8a:	5517      	strb	r7, [r2, r4]
 8002b8c:	b29c      	uxth	r4, r3
		k=0;
 8002b8e:	2700      	movs	r7, #0
		while(tempa >= 10){
 8002b90:	e006      	b.n	8002ba0 <build_bac_tcp_pkt+0x3e0>
			k++;
 8002b92:	3701      	adds	r7, #1
 8002b94:	b2ff      	uxtb	r7, r7
			tempa -= 10;
 8002b96:	492b      	ldr	r1, [pc, #172]	; (8002c44 <build_bac_tcp_pkt+0x484>)
 8002b98:	4628      	mov	r0, r5
 8002b9a:	f7fd fae3 	bl	8000164 <__aeabi_fsub>
 8002b9e:	4605      	mov	r5, r0
		if(k>0)
			print = 1;
		if(print)
			tcp_buf[i++] = k + '0';
		k=0;
		while(tempa >= 10){
 8002ba0:	4928      	ldr	r1, [pc, #160]	; (8002c44 <build_bac_tcp_pkt+0x484>)
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	f7fd fd9a 	bl	80006dc <__aeabi_fcmpge>
 8002ba8:	2800      	cmp	r0, #0
 8002baa:	d1f2      	bne.n	8002b92 <build_bac_tcp_pkt+0x3d2>
			k++;
			tempa -= 10;
		}
		//printf("Test 5 k %d \n",k);

		tcp_buf[i++] = k + '0';
 8002bac:	1c63      	adds	r3, r4, #1
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8002c34 <build_bac_tcp_pkt+0x474>
 8002bb4:	3730      	adds	r7, #48	; 0x30
 8002bb6:	f808 7004 	strb.w	r7, [r8, r4]
		tcp_buf[i++] = '.';
 8002bba:	f104 0902 	add.w	r9, r4, #2
 8002bbe:	fa1f f989 	uxth.w	r9, r9
 8002bc2:	222e      	movs	r2, #46	; 0x2e
 8002bc4:	f808 2003 	strb.w	r2, [r8, r3]
		tcp_buf[i++] = tempa + '0';
 8002bc8:	1ce7      	adds	r7, r4, #3
 8002bca:	b2bf      	uxth	r7, r7
 8002bcc:	491e      	ldr	r1, [pc, #120]	; (8002c48 <build_bac_tcp_pkt+0x488>)
 8002bce:	4628      	mov	r0, r5
 8002bd0:	f7fd faca 	bl	8000168 <__addsf3>
 8002bd4:	f7fd fd96 	bl	8000704 <__aeabi_f2uiz>
 8002bd8:	f808 0009 	strb.w	r0, [r8, r9]

		tcp_buf[i++] = '%';
 8002bdc:	1d22      	adds	r2, r4, #4
 8002bde:	b292      	uxth	r2, r2
 8002be0:	2325      	movs	r3, #37	; 0x25
 8002be2:	f808 3007 	strb.w	r3, [r8, r7]
		tcp_buf[i++] = '2';
 8002be6:	1d63      	adds	r3, r4, #5
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2132      	movs	r1, #50	; 0x32
 8002bec:	f808 1002 	strb.w	r1, [r8, r2]
		tcp_buf[i++] = 'C';
 8002bf0:	3406      	adds	r4, #6
 8002bf2:	b2a4      	uxth	r4, r4
 8002bf4:	2243      	movs	r2, #67	; 0x43
 8002bf6:	f808 2003 	strb.w	r2, [r8, r3]
		}
		tcp_buf[i++] = '%';
		tcp_buf[i++] = '2';
		tcp_buf[i++] = 'C';
	}
	for(n=0;n<retrdpacount();n++)
 8002bfa:	3601      	adds	r6, #1
 8002bfc:	b2f6      	uxtb	r6, r6
 8002bfe:	f000 fb93 	bl	8003328 <retrdpacount>
 8002c02:	4286      	cmp	r6, r0
 8002c04:	f4ff aeaf 	bcc.w	8002966 <build_bac_tcp_pkt+0x1a6>

		tcp_buf[i++] = '%';
		tcp_buf[i++] = '2';
		tcp_buf[i++] = 'C';
	}
	tcp_buf[i-1] = '0';
 8002c08:	1e63      	subs	r3, r4, #1
 8002c0a:	2130      	movs	r1, #48	; 0x30
 8002c0c:	4a09      	ldr	r2, [pc, #36]	; (8002c34 <build_bac_tcp_pkt+0x474>)
 8002c0e:	54d1      	strb	r1, [r2, r3]
	uint16_t p=0;
 8002c10:	2300      	movs	r3, #0
	while(p<(sizeof(trail)-1))
 8002c12:	e007      	b.n	8002c24 <build_bac_tcp_pkt+0x464>
	{
		tcp_buf[i++] = trail[p++];
 8002c14:	1c62      	adds	r2, r4, #1
 8002c16:	1c59      	adds	r1, r3, #1
 8002c18:	480c      	ldr	r0, [pc, #48]	; (8002c4c <build_bac_tcp_pkt+0x48c>)
 8002c1a:	5cc0      	ldrb	r0, [r0, r3]
 8002c1c:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <build_bac_tcp_pkt+0x474>)
 8002c1e:	5518      	strb	r0, [r3, r4]
 8002c20:	b28b      	uxth	r3, r1
 8002c22:	b294      	uxth	r4, r2
		tcp_buf[i++] = '2';
		tcp_buf[i++] = 'C';
	}
	tcp_buf[i-1] = '0';
	uint16_t p=0;
	while(p<(sizeof(trail)-1))
 8002c24:	2b6a      	cmp	r3, #106	; 0x6a
 8002c26:	d9f5      	bls.n	8002c14 <build_bac_tcp_pkt+0x454>
	{
		tcp_buf[i++] = trail[p++];
	}
	bacpktsize = i;
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <build_bac_tcp_pkt+0x490>)
 8002c2a:	801c      	strh	r4, [r3, #0]
 8002c2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c30:	47c35000 	.word	0x47c35000
 8002c34:	20000d30 	.word	0x20000d30
 8002c38:	461c4000 	.word	0x461c4000
 8002c3c:	447a0000 	.word	0x447a0000
 8002c40:	42c80000 	.word	0x42c80000
 8002c44:	41200000 	.word	0x41200000
 8002c48:	42400000 	.word	0x42400000
 8002c4c:	20000400 	.word	0x20000400
 8002c50:	20000bce 	.word	0x20000bce

08002c54 <mac0_service>:
	//printf("\n pkt size : %d\n",bacpktsize);
}
void mac0_service(uint8_t tcp_service_enable, uint8_t reg, uint8_t alarm_id)
{
 8002c54:	b510      	push	{r4, lr}
	uint8_t conn_stat;
	if(tcp_service_enable)
 8002c56:	2800      	cmp	r0, #0
 8002c58:	f000 80ab 	beq.w	8002db2 <mac0_service+0x15e>
	{
		//if((app_timeout < Sys_GetTick()) && (tcp_app_state == 0) && (reg == 1)){
		if((tcp_app_state == 0) && (reg == 1)){
 8002c5c:	4b56      	ldr	r3, [pc, #344]	; (8002db8 <mac0_service+0x164>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002c64:	d121      	bne.n	8002caa <mac0_service+0x56>
 8002c66:	2901      	cmp	r1, #1
 8002c68:	d11f      	bne.n	8002caa <mac0_service+0x56>
			printf("Connecting tcp server for periodic reg pkt - ");
 8002c6a:	4854      	ldr	r0, [pc, #336]	; (8002dbc <mac0_service+0x168>)
 8002c6c:	f001 fbaa 	bl	80043c4 <iprintf>
			tcp_app_state = 1;
 8002c70:	2201      	movs	r2, #1
 8002c72:	4b51      	ldr	r3, [pc, #324]	; (8002db8 <mac0_service+0x164>)
 8002c74:	701a      	strb	r2, [r3, #0]
			conn_stat = connect(tcp_svr_ip, tcp_srv_port);
 8002c76:	4b52      	ldr	r3, [pc, #328]	; (8002dc0 <mac0_service+0x16c>)
 8002c78:	8819      	ldrh	r1, [r3, #0]
 8002c7a:	4852      	ldr	r0, [pc, #328]	; (8002dc4 <mac0_service+0x170>)
 8002c7c:	f7ff fc5c 	bl	8002538 <connect>
			if(!conn_stat){
 8002c80:	b958      	cbnz	r0, 8002c9a <mac0_service+0x46>
				printf("Failed connection. Retrying..\n");
 8002c82:	4851      	ldr	r0, [pc, #324]	; (8002dc8 <mac0_service+0x174>)
 8002c84:	f001 fbc2 	bl	800440c <puts>
				if(!connect(tcp_svr_ip, tcp_srv_port)){
 8002c88:	4b4d      	ldr	r3, [pc, #308]	; (8002dc0 <mac0_service+0x16c>)
 8002c8a:	8819      	ldrh	r1, [r3, #0]
 8002c8c:	484d      	ldr	r0, [pc, #308]	; (8002dc4 <mac0_service+0x170>)
 8002c8e:	f7ff fc53 	bl	8002538 <connect>
 8002c92:	b910      	cbnz	r0, 8002c9a <mac0_service+0x46>
					printf("Failed Exiting\n");
 8002c94:	484d      	ldr	r0, [pc, #308]	; (8002dcc <mac0_service+0x178>)
 8002c96:	f001 fbb9 	bl	800440c <puts>
				}
			}
			app_timeout = Sys_GetTick() + 50000;
 8002c9a:	f000 fe75 	bl	8003988 <Sys_GetTick>
 8002c9e:	f500 4043 	add.w	r0, r0, #49920	; 0xc300
 8002ca2:	3050      	adds	r0, #80	; 0x50
 8002ca4:	4b4a      	ldr	r3, [pc, #296]	; (8002dd0 <mac0_service+0x17c>)
 8002ca6:	6018      	str	r0, [r3, #0]
 8002ca8:	e083      	b.n	8002db2 <mac0_service+0x15e>
		}else if(alarm_id == 2){
 8002caa:	2a02      	cmp	r2, #2
 8002cac:	d113      	bne.n	8002cd6 <mac0_service+0x82>
			printf("Connecting tcp server for fire alarm pkt - ");
 8002cae:	4849      	ldr	r0, [pc, #292]	; (8002dd4 <mac0_service+0x180>)
 8002cb0:	f001 fb88 	bl	80043c4 <iprintf>
			update_timestamp(tstpkt0);
 8002cb4:	4848      	ldr	r0, [pc, #288]	; (8002dd8 <mac0_service+0x184>)
 8002cb6:	f7ff fc81 	bl	80025bc <update_timestamp>
			tcp_app_state = 2;
 8002cba:	2202      	movs	r2, #2
 8002cbc:	4b3e      	ldr	r3, [pc, #248]	; (8002db8 <mac0_service+0x164>)
 8002cbe:	701a      	strb	r2, [r3, #0]
			while(!connect(tcp_svr_ip, tcp_srv_port));
 8002cc0:	4b3f      	ldr	r3, [pc, #252]	; (8002dc0 <mac0_service+0x16c>)
 8002cc2:	8819      	ldrh	r1, [r3, #0]
 8002cc4:	483f      	ldr	r0, [pc, #252]	; (8002dc4 <mac0_service+0x170>)
 8002cc6:	f7ff fc37 	bl	8002538 <connect>
 8002cca:	2800      	cmp	r0, #0
 8002ccc:	d0f8      	beq.n	8002cc0 <mac0_service+0x6c>
			printf("Connected\n");
 8002cce:	4843      	ldr	r0, [pc, #268]	; (8002ddc <mac0_service+0x188>)
 8002cd0:	f001 fb9c 	bl	800440c <puts>
 8002cd4:	e06d      	b.n	8002db2 <mac0_service+0x15e>

		}else if(alarm_id == 4){
 8002cd6:	2a04      	cmp	r2, #4
 8002cd8:	d11e      	bne.n	8002d18 <mac0_service+0xc4>
			printf("Connecting tcp server for fire alarm pkt - ");
 8002cda:	483e      	ldr	r0, [pc, #248]	; (8002dd4 <mac0_service+0x180>)
 8002cdc:	f001 fb72 	bl	80043c4 <iprintf>
			update_timestamp(tstpkt1);
 8002ce0:	483f      	ldr	r0, [pc, #252]	; (8002de0 <mac0_service+0x18c>)
 8002ce2:	f7ff fc6b 	bl	80025bc <update_timestamp>
			tcp_app_state = 3;
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	4b33      	ldr	r3, [pc, #204]	; (8002db8 <mac0_service+0x164>)
 8002cea:	701a      	strb	r2, [r3, #0]
			conn_stat = connect(tcp_svr_ip, tcp_srv_port);
 8002cec:	4b34      	ldr	r3, [pc, #208]	; (8002dc0 <mac0_service+0x16c>)
 8002cee:	8819      	ldrh	r1, [r3, #0]
 8002cf0:	4834      	ldr	r0, [pc, #208]	; (8002dc4 <mac0_service+0x170>)
 8002cf2:	f7ff fc21 	bl	8002538 <connect>
			if(!conn_stat){
 8002cf6:	b958      	cbnz	r0, 8002d10 <mac0_service+0xbc>
				printf("Failed connection. Retrying..\n");
 8002cf8:	4833      	ldr	r0, [pc, #204]	; (8002dc8 <mac0_service+0x174>)
 8002cfa:	f001 fb87 	bl	800440c <puts>
				if(!connect(tcp_svr_ip, tcp_srv_port)){
 8002cfe:	4b30      	ldr	r3, [pc, #192]	; (8002dc0 <mac0_service+0x16c>)
 8002d00:	8819      	ldrh	r1, [r3, #0]
 8002d02:	4830      	ldr	r0, [pc, #192]	; (8002dc4 <mac0_service+0x170>)
 8002d04:	f7ff fc18 	bl	8002538 <connect>
 8002d08:	b910      	cbnz	r0, 8002d10 <mac0_service+0xbc>
					printf("Failed Exiting\n");
 8002d0a:	4830      	ldr	r0, [pc, #192]	; (8002dcc <mac0_service+0x178>)
 8002d0c:	f001 fb7e 	bl	800440c <puts>
				}
			}
			//while(!connect(tcp_svr_ip, tcp_srv_port));
			printf("Connected\n");
 8002d10:	4832      	ldr	r0, [pc, #200]	; (8002ddc <mac0_service+0x188>)
 8002d12:	f001 fb7b 	bl	800440c <puts>
 8002d16:	e04c      	b.n	8002db2 <mac0_service+0x15e>
		 }else if(alarm_id == 8){
 8002d18:	2a08      	cmp	r2, #8
 8002d1a:	d12a      	bne.n	8002d72 <mac0_service+0x11e>
			printf("Connecting tcp server for Periodic bacnet status - ");
 8002d1c:	4831      	ldr	r0, [pc, #196]	; (8002de4 <mac0_service+0x190>)
 8002d1e:	f001 fb51 	bl	80043c4 <iprintf>
			update_timestamp(bacpkt);
 8002d22:	4831      	ldr	r0, [pc, #196]	; (8002de8 <mac0_service+0x194>)
 8002d24:	f7ff fc4a 	bl	80025bc <update_timestamp>
			build_bac_tcp_pkt(1);
 8002d28:	2001      	movs	r0, #1
 8002d2a:	f7ff fd49 	bl	80027c0 <build_bac_tcp_pkt>
			tcp_app_state = 4;
 8002d2e:	2204      	movs	r2, #4
 8002d30:	4b21      	ldr	r3, [pc, #132]	; (8002db8 <mac0_service+0x164>)
 8002d32:	701a      	strb	r2, [r3, #0]
			//while(!connect(tcp_svr_ip, tcp_srv_port));
			conn_stat = connect(tcp_svr_ip, tcp_srv_port);
 8002d34:	4b22      	ldr	r3, [pc, #136]	; (8002dc0 <mac0_service+0x16c>)
 8002d36:	8819      	ldrh	r1, [r3, #0]
 8002d38:	4822      	ldr	r0, [pc, #136]	; (8002dc4 <mac0_service+0x170>)
 8002d3a:	f7ff fbfd 	bl	8002538 <connect>
			if(!conn_stat){
 8002d3e:	b958      	cbnz	r0, 8002d58 <mac0_service+0x104>
				printf("Failed connection. Retrying..\n");
 8002d40:	4821      	ldr	r0, [pc, #132]	; (8002dc8 <mac0_service+0x174>)
 8002d42:	f001 fb63 	bl	800440c <puts>
				if(!connect(tcp_svr_ip, tcp_srv_port)){
 8002d46:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <mac0_service+0x16c>)
 8002d48:	8819      	ldrh	r1, [r3, #0]
 8002d4a:	481e      	ldr	r0, [pc, #120]	; (8002dc4 <mac0_service+0x170>)
 8002d4c:	f7ff fbf4 	bl	8002538 <connect>
 8002d50:	b910      	cbnz	r0, 8002d58 <mac0_service+0x104>
					printf("Failed Exiting\n");
 8002d52:	481e      	ldr	r0, [pc, #120]	; (8002dcc <mac0_service+0x178>)
 8002d54:	f001 fb5a 	bl	800440c <puts>
	}
	bacpktsize = i;
	//printf("\n pkt size : %d\n",bacpktsize);
}
void mac0_service(uint8_t tcp_service_enable, uint8_t reg, uint8_t alarm_id)
{
 8002d58:	2400      	movs	r4, #0
 8002d5a:	e005      	b.n	8002d68 <mac0_service+0x114>
				if(!connect(tcp_svr_ip, tcp_srv_port)){
					printf("Failed Exiting\n");
				}
			}
			for(uint16_t l=0; l<bacpktsize;l++)
				USART1_Send(tcp_buf[l]);
 8002d5c:	4b23      	ldr	r3, [pc, #140]	; (8002dec <mac0_service+0x198>)
 8002d5e:	5d18      	ldrb	r0, [r3, r4]
 8002d60:	f001 f83c 	bl	8003ddc <USART1_Send>
				printf("Failed connection. Retrying..\n");
				if(!connect(tcp_svr_ip, tcp_srv_port)){
					printf("Failed Exiting\n");
				}
			}
			for(uint16_t l=0; l<bacpktsize;l++)
 8002d64:	3401      	adds	r4, #1
 8002d66:	b2a4      	uxth	r4, r4
 8002d68:	4b21      	ldr	r3, [pc, #132]	; (8002df0 <mac0_service+0x19c>)
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	429c      	cmp	r4, r3
 8002d6e:	d3f5      	bcc.n	8002d5c <mac0_service+0x108>
 8002d70:	e01f      	b.n	8002db2 <mac0_service+0x15e>
				USART1_Send(tcp_buf[l]);
//			printf("\nConnected\n");
		 }else if(alarm_id == 9){
 8002d72:	2a09      	cmp	r2, #9
 8002d74:	d11d      	bne.n	8002db2 <mac0_service+0x15e>
				printf("Connecting tcp server for bacnet registration - ");
 8002d76:	481f      	ldr	r0, [pc, #124]	; (8002df4 <mac0_service+0x1a0>)
 8002d78:	f001 fb24 	bl	80043c4 <iprintf>
				update_timestamp(bacpkt);
 8002d7c:	481a      	ldr	r0, [pc, #104]	; (8002de8 <mac0_service+0x194>)
 8002d7e:	f7ff fc1d 	bl	80025bc <update_timestamp>
				build_bac_tcp_pkt(0);
 8002d82:	2000      	movs	r0, #0
 8002d84:	f7ff fd1c 	bl	80027c0 <build_bac_tcp_pkt>
				tcp_app_state = 4;
 8002d88:	2204      	movs	r2, #4
 8002d8a:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <mac0_service+0x164>)
 8002d8c:	701a      	strb	r2, [r3, #0]
				//while(!connect(tcp_svr_ip, tcp_srv_port));
				conn_stat = connect(tcp_svr_ip, tcp_srv_port);
 8002d8e:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <mac0_service+0x16c>)
 8002d90:	8819      	ldrh	r1, [r3, #0]
 8002d92:	480c      	ldr	r0, [pc, #48]	; (8002dc4 <mac0_service+0x170>)
 8002d94:	f7ff fbd0 	bl	8002538 <connect>
				if(!conn_stat){
 8002d98:	b958      	cbnz	r0, 8002db2 <mac0_service+0x15e>
					printf("Failed connection. Retrying..\n");
 8002d9a:	480b      	ldr	r0, [pc, #44]	; (8002dc8 <mac0_service+0x174>)
 8002d9c:	f001 fb36 	bl	800440c <puts>
					if(!connect(tcp_svr_ip, tcp_srv_port)){
 8002da0:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <mac0_service+0x16c>)
 8002da2:	8819      	ldrh	r1, [r3, #0]
 8002da4:	4807      	ldr	r0, [pc, #28]	; (8002dc4 <mac0_service+0x170>)
 8002da6:	f7ff fbc7 	bl	8002538 <connect>
 8002daa:	b910      	cbnz	r0, 8002db2 <mac0_service+0x15e>
						printf("Failed Exiting\n");
 8002dac:	4807      	ldr	r0, [pc, #28]	; (8002dcc <mac0_service+0x178>)
 8002dae:	f001 fb2d 	bl	800440c <puts>
//				for(uint16_t l=0; l<bacpktsize;l++)
//					USART1_Send(tcp_buf[l]);
//				printf("\nConnected\n");
			 }
	}
	uip_arp_timer();
 8002db2:	f003 f849 	bl	8005e48 <uip_arp_timer>
 8002db6:	bd10      	pop	{r4, pc}
 8002db8:	20000bd4 	.word	0x20000bd4
 8002dbc:	08006cec 	.word	0x08006cec
 8002dc0:	200001a4 	.word	0x200001a4
 8002dc4:	20000038 	.word	0x20000038
 8002dc8:	08006d1c 	.word	0x08006d1c
 8002dcc:	08006d3c 	.word	0x08006d3c
 8002dd0:	20000bd0 	.word	0x20000bd0
 8002dd4:	08006d4c 	.word	0x08006d4c
 8002dd8:	200001a8 	.word	0x200001a8
 8002ddc:	08006d78 	.word	0x08006d78
 8002de0:	200002d4 	.word	0x200002d4
 8002de4:	08006d84 	.word	0x08006d84
 8002de8:	200000f0 	.word	0x200000f0
 8002dec:	20000d30 	.word	0x20000d30
 8002df0:	20000bce 	.word	0x20000bce
 8002df4:	08006db8 	.word	0x08006db8

08002df8 <allocateIPAddress>:
//	}
//	printf("\n*******PACKET******** \n");
//}
// Perform all processing to get an IP address plus other addresses returned, e.g. gw, dns, dhcp server.
// Returns 1 for successful IP address allocation, 0 otherwise
uint8_t allocateIPAddress(uint8_t *buf1, uint16_t buffer_size, uint8_t *mymac, uint16_t myport, uint8_t *myip, uint8_t *mynetmask, uint8_t *gwip, uint8_t *dnsip, uint8_t *dhcpsvrip ) {
 8002df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dfc:	b085      	sub	sp, #20
 8002dfe:	4604      	mov	r4, r0
 8002e00:	4688      	mov	r8, r1
 8002e02:	4615      	mov	r5, r2
 8002e04:	469b      	mov	fp, r3
 8002e06:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint16_t dat_p;
  int plen = 0;
  long lastDhcpRequest = HAL_GetTick();
 8002e08:	f000 fdbe 	bl	8003988 <Sys_GetTick>
 8002e0c:	4681      	mov	r9, r0
  uint8_t dhcpState = 0;
  bool gotIp = FALSE;
  uint8_t dhcpTries = 3;	// After 10 attempts fail gracefully so other action can be carried out
  //printf("0xA0");
  dhcp_start( buf1, mymac, myip, mynetmask,gwip, dnsip, dhcpsvrip );
 8002e0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002e10:	9302      	str	r3, [sp, #8]
 8002e12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002e14:	9301      	str	r3, [sp, #4]
 8002e16:	9700      	str	r7, [sp, #0]
 8002e18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002e1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e1c:	4629      	mov	r1, r5
 8002e1e:	4620      	mov	r0, r4
 8002e20:	f7fe fc08 	bl	8001634 <dhcp_start>
  uint16_t dat_p;
  int plen = 0;
  long lastDhcpRequest = HAL_GetTick();
  uint8_t dhcpState = 0;
  bool gotIp = FALSE;
  uint8_t dhcpTries = 3;	// After 10 attempts fail gracefully so other action can be carried out
 8002e24:	f04f 0a03 	mov.w	sl, #3
uint8_t allocateIPAddress(uint8_t *buf1, uint16_t buffer_size, uint8_t *mymac, uint16_t myport, uint8_t *myip, uint8_t *mynetmask, uint8_t *gwip, uint8_t *dnsip, uint8_t *dhcpsvrip ) {
  uint16_t dat_p;
  int plen = 0;
  long lastDhcpRequest = HAL_GetTick();
  uint8_t dhcpState = 0;
  bool gotIp = FALSE;
 8002e28:	2600      	movs	r6, #0
  uint8_t dhcpTries = 3;	// After 10 attempts fail gracefully so other action can be carried out
  //printf("0xA0");
  dhcp_start( buf1, mymac, myip, mynetmask,gwip, dnsip, dhcpsvrip );
  //printf("0xA1");
  while( !gotIp ) {
 8002e2a:	e03a      	b.n	8002ea2 <allocateIPAddress+0xaa>
    // handle ping and wait for a tcp packet
    plen = enc424j600PacketReceiveP1(buffer_size, buf1);
 8002e2c:	4621      	mov	r1, r4
 8002e2e:	4640      	mov	r0, r8
 8002e30:	f7fe fa8e 	bl	8001350 <enc424j600PacketReceiveP1>
    if(plen)
 8002e34:	4605      	mov	r5, r0
 8002e36:	b3a0      	cbz	r0, 8002ea2 <allocateIPAddress+0xaa>
    {
		//printf("0xA2");
		//printf("Packet length %d\n",plen);
		//print_packet(plen,buf);
		Sys_Delay(100);
 8002e38:	2064      	movs	r0, #100	; 0x64
 8002e3a:	f000 fdab 	bl	8003994 <Sys_Delay>
		dat_p=packetloop_icmp_tcp(buf1,plen);
 8002e3e:	b2ad      	uxth	r5, r5
 8002e40:	4629      	mov	r1, r5
 8002e42:	4620      	mov	r0, r4
 8002e44:	f7ff f882 	bl	8001f4c <packetloop_icmp_tcp>
		//USART3_Send(dat_p);
		if(dat_p==0) {
 8002e48:	bb58      	cbnz	r0, 8002ea2 <allocateIPAddress+0xaa>
		  check_for_dhcp_answer( buf1, plen);
 8002e4a:	4629      	mov	r1, r5
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	f7fe fcb9 	bl	80017c4 <check_for_dhcp_answer>
		  dhcpState = dhcp_state();
 8002e52:	f7fe fafb 	bl	800144c <dhcp_state>
		  //USART3_Send(0xA5);
		  //USART3_Send(dhcpState);
		  // we are idle here
		  if( dhcpState != DHCP_STATE_OK ) {
 8002e56:	2805      	cmp	r0, #5
 8002e58:	d019      	beq.n	8002e8e <allocateIPAddress+0x96>
			if (HAL_GetTick() > (lastDhcpRequest + 1000L) ){
 8002e5a:	f000 fd95 	bl	8003988 <Sys_GetTick>
 8002e5e:	f509 737a 	add.w	r3, r9, #1000	; 0x3e8
 8002e62:	4298      	cmp	r0, r3
 8002e64:	d91d      	bls.n	8002ea2 <allocateIPAddress+0xaa>
			  lastDhcpRequest = HAL_GetTick();
 8002e66:	f000 fd8f 	bl	8003988 <Sys_GetTick>
 8002e6a:	4681      	mov	r9, r0
		  if( --dhcpTries <= 0 )
 8002e6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002e70:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
 8002e74:	d019      	beq.n	8002eaa <allocateIPAddress+0xb2>
			  return 0;		// Failed to allocate address
			  // send dhcp
			  dhcp_start( buf1, macaddr1, myip, mynetmask,gwip, dnsip, dhcpsvrip );
 8002e76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002e78:	9302      	str	r3, [sp, #8]
 8002e7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002e7c:	9301      	str	r3, [sp, #4]
 8002e7e:	9700      	str	r7, [sp, #0]
 8002e80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002e82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e84:	490b      	ldr	r1, [pc, #44]	; (8002eb4 <allocateIPAddress+0xbc>)
 8002e86:	4620      	mov	r0, r4
 8002e88:	f7fe fbd4 	bl	8001634 <dhcp_start>
 8002e8c:	e009      	b.n	8002ea2 <allocateIPAddress+0xaa>
			  //USART3_Send(0xA5);
			}
		  } else {
			if( !gotIp ) {
 8002e8e:	b946      	cbnz	r6, 8002ea2 <allocateIPAddress+0xaa>
			  gotIp = TRUE;

			  //init the ethernet/ip layer:
			  init_ip_arp_udp_tcp(macaddr1, myip, myport);
 8002e90:	465a      	mov	r2, fp
 8002e92:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002e94:	4807      	ldr	r0, [pc, #28]	; (8002eb4 <allocateIPAddress+0xbc>)
 8002e96:	f7fe fce9 	bl	800186c <init_ip_arp_udp_tcp>

			  // Set the Router IP
			  client_set_gwip(gwip);  // e.g internal IP of dsl router
 8002e9a:	4638      	mov	r0, r7
 8002e9c:	f7fe ffb2 	bl	8001e04 <client_set_gwip>
			  dhcp_start( buf1, macaddr1, myip, mynetmask,gwip, dnsip, dhcpsvrip );
			  //USART3_Send(0xA5);
			}
		  } else {
			if( !gotIp ) {
			  gotIp = TRUE;
 8002ea0:	2601      	movs	r6, #1
  bool gotIp = FALSE;
  uint8_t dhcpTries = 3;	// After 10 attempts fail gracefully so other action can be carried out
  //printf("0xA0");
  dhcp_start( buf1, mymac, myip, mynetmask,gwip, dnsip, dhcpsvrip );
  //printf("0xA1");
  while( !gotIp ) {
 8002ea2:	2e00      	cmp	r6, #0
 8002ea4:	d0c2      	beq.n	8002e2c <allocateIPAddress+0x34>
		  }
      }
    }
  }

  return 1;
 8002ea6:	2001      	movs	r0, #1
 8002ea8:	e000      	b.n	8002eac <allocateIPAddress+0xb4>
		  // we are idle here
		  if( dhcpState != DHCP_STATE_OK ) {
			if (HAL_GetTick() > (lastDhcpRequest + 1000L) ){
			  lastDhcpRequest = HAL_GetTick();
		  if( --dhcpTries <= 0 )
			  return 0;		// Failed to allocate address
 8002eaa:	2000      	movs	r0, #0
    }
  }

  return 1;

}
 8002eac:	b005      	add	sp, #20
 8002eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000638 	.word	0x20000638

08002eb8 <process_bacnet_reply>:
	uint16_t readprop_input = 0;
	uint16_t i;
	uint8_t read_list_ptr;

	//Check bacnet Source port No                        Dest Port No                               Bacnet /IP
	if(((buf[0x22] == 0xba) && (buf[0x23]==0xc0) && (buf[0x24] == 0xba) && (buf[0x25]==0xc0) && (buf[0x2A] == 0x81)) ||
 8002eb8:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8002ebc:	2bba      	cmp	r3, #186	; 0xba
 8002ebe:	d103      	bne.n	8002ec8 <process_bacnet_reply+0x10>
 8002ec0:	f890 2023 	ldrb.w	r2, [r0, #35]	; 0x23
 8002ec4:	2ac0      	cmp	r2, #192	; 0xc0
 8002ec6:	d007      	beq.n	8002ed8 <process_bacnet_reply+0x20>
 8002ec8:	2be4      	cmp	r3, #228	; 0xe4
 8002eca:	f040 80f3 	bne.w	80030b4 <process_bacnet_reply+0x1fc>
	   ((buf[0x22] == 0xe4) && (buf[0x23]==0x03) && (buf[0x24] == 0xba) && (buf[0x25]==0xc0) && (buf[0x2A] == 0x81)))
 8002ece:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	f040 80ee 	bne.w	80030b4 <process_bacnet_reply+0x1fc>
	uint16_t readprop_input = 0;
	uint16_t i;
	uint8_t read_list_ptr;

	//Check bacnet Source port No                        Dest Port No                               Bacnet /IP
	if(((buf[0x22] == 0xba) && (buf[0x23]==0xc0) && (buf[0x24] == 0xba) && (buf[0x25]==0xc0) && (buf[0x2A] == 0x81)) ||
 8002ed8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002edc:	2bba      	cmp	r3, #186	; 0xba
 8002ede:	f040 80e9 	bne.w	80030b4 <process_bacnet_reply+0x1fc>
 8002ee2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002ee6:	2bc0      	cmp	r3, #192	; 0xc0
 8002ee8:	f040 80e4 	bne.w	80030b4 <process_bacnet_reply+0x1fc>
 8002eec:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8002ef0:	2b81      	cmp	r3, #129	; 0x81
 8002ef2:	f040 80df 	bne.w	80030b4 <process_bacnet_reply+0x1fc>
//
//
//
//}
void process_bacnet_reply(uint8_t *buf,uint16_t len)
{
 8002ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002efa:	b082      	sub	sp, #8
	if(((buf[0x22] == 0xba) && (buf[0x23]==0xc0) && (buf[0x24] == 0xba) && (buf[0x25]==0xc0) && (buf[0x2A] == 0x81)) ||
	   ((buf[0x22] == 0xe4) && (buf[0x23]==0x03) && (buf[0x24] == 0xba) && (buf[0x25]==0xc0) && (buf[0x2A] == 0x81)))
	{
		//bac_length = buf[0x2D];
		bac_apdu_offset = 0x30;
		if(buf[0x2F] & 0x20){
 8002efc:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8002f00:	f013 0f20 	tst.w	r3, #32
 8002f04:	d101      	bne.n	8002f0a <process_bacnet_reply+0x52>
	//Check bacnet Source port No                        Dest Port No                               Bacnet /IP
	if(((buf[0x22] == 0xba) && (buf[0x23]==0xc0) && (buf[0x24] == 0xba) && (buf[0x25]==0xc0) && (buf[0x2A] == 0x81)) ||
	   ((buf[0x22] == 0xe4) && (buf[0x23]==0x03) && (buf[0x24] == 0xba) && (buf[0x25]==0xc0) && (buf[0x2A] == 0x81)))
	{
		//bac_length = buf[0x2D];
		bac_apdu_offset = 0x30;
 8002f06:	2430      	movs	r4, #48	; 0x30
 8002f08:	e000      	b.n	8002f0c <process_bacnet_reply+0x54>
		if(buf[0x2F] & 0x20){
			bac_apdu_offset = bac_apdu_offset+4;
 8002f0a:	2434      	movs	r4, #52	; 0x34
		}
		if(buf[0x2F] & 0x08){
 8002f0c:	f013 0f08 	tst.w	r3, #8
 8002f10:	d001      	beq.n	8002f16 <process_bacnet_reply+0x5e>
			bac_apdu_offset = bac_apdu_offset+4;
 8002f12:	3404      	adds	r4, #4
 8002f14:	b2e4      	uxtb	r4, r4
		}
		//Check Bacnet I am
		//printf(" bacnet reply Length %d\n",len);
		if((buf[bac_apdu_offset] == 0x10) && (buf[bac_apdu_offset+1] == 0x00) && (bacnet_found == 0)){
 8002f16:	4625      	mov	r5, r4
 8002f18:	5d03      	ldrb	r3, [r0, r4]
 8002f1a:	2b10      	cmp	r3, #16
 8002f1c:	d116      	bne.n	8002f4c <process_bacnet_reply+0x94>
 8002f1e:	1902      	adds	r2, r0, r4
 8002f20:	7852      	ldrb	r2, [r2, #1]
 8002f22:	b99a      	cbnz	r2, 8002f4c <process_bacnet_reply+0x94>
 8002f24:	4a64      	ldr	r2, [pc, #400]	; (80030b8 <process_bacnet_reply+0x200>)
 8002f26:	7812      	ldrb	r2, [r2, #0]
 8002f28:	b982      	cbnz	r2, 8002f4c <process_bacnet_reply+0x94>
			bacdev_ip[0] = buf[0x1A];
 8002f2a:	7e81      	ldrb	r1, [r0, #26]
 8002f2c:	4c63      	ldr	r4, [pc, #396]	; (80030bc <process_bacnet_reply+0x204>)
 8002f2e:	7021      	strb	r1, [r4, #0]
			bacdev_ip[1] = buf[0x1B];
 8002f30:	7ec2      	ldrb	r2, [r0, #27]
 8002f32:	7062      	strb	r2, [r4, #1]
			bacdev_ip[2] = buf[0x1C];
 8002f34:	7f03      	ldrb	r3, [r0, #28]
 8002f36:	70a3      	strb	r3, [r4, #2]
			bacdev_ip[3] = buf[0x1D];
 8002f38:	7f40      	ldrb	r0, [r0, #29]
 8002f3a:	70e0      	strb	r0, [r4, #3]
			printf("Bacnet device found on IP %d.%d.%d.%d \n",bacdev_ip[0],bacdev_ip[1],bacdev_ip[2],bacdev_ip[3]);
 8002f3c:	9000      	str	r0, [sp, #0]
 8002f3e:	4860      	ldr	r0, [pc, #384]	; (80030c0 <process_bacnet_reply+0x208>)
 8002f40:	f001 fa40 	bl	80043c4 <iprintf>
			bacnet_found = 1;
 8002f44:	2201      	movs	r2, #1
 8002f46:	4b5c      	ldr	r3, [pc, #368]	; (80030b8 <process_bacnet_reply+0x200>)
 8002f48:	701a      	strb	r2, [r3, #0]
 8002f4a:	e0b0      	b.n	80030ae <process_bacnet_reply+0x1f6>
		}else if((buf[bac_apdu_offset] == 0x30) && (buf[bac_apdu_offset+2] == 0x0E)) // Read Property Multiple
 8002f4c:	2b30      	cmp	r3, #48	; 0x30
 8002f4e:	f040 80ae 	bne.w	80030ae <process_bacnet_reply+0x1f6>
 8002f52:	1943      	adds	r3, r0, r5
 8002f54:	789b      	ldrb	r3, [r3, #2]
 8002f56:	2b0e      	cmp	r3, #14
 8002f58:	f040 80a9 	bne.w	80030ae <process_bacnet_reply+0x1f6>
		{
			//printf("1\n");
			if((buf[bac_apdu_offset+3] == 0x0C) && (buf[bac_apdu_offset+5] == 0xC0)) // Binary input
 8002f5c:	1943      	adds	r3, r0, r5
 8002f5e:	78db      	ldrb	r3, [r3, #3]
 8002f60:	2b0c      	cmp	r3, #12
 8002f62:	d157      	bne.n	8003014 <process_bacnet_reply+0x15c>
 8002f64:	1942      	adds	r2, r0, r5
 8002f66:	7952      	ldrb	r2, [r2, #5]
 8002f68:	2ac0      	cmp	r2, #192	; 0xc0
 8002f6a:	d153      	bne.n	8003014 <process_bacnet_reply+0x15c>
			{
				//printf("2\n");
				readprop_input = ((buf[bac_apdu_offset+6])<<8) | (buf[bac_apdu_offset+7]);
 8002f6c:	1943      	adds	r3, r0, r5
 8002f6e:	799a      	ldrb	r2, [r3, #6]
 8002f70:	3507      	adds	r5, #7
 8002f72:	5d43      	ldrb	r3, [r0, r5]
 8002f74:	ea43 2c02 	orr.w	ip, r3, r2, lsl #8
				read_list_ptr = 0xFF;
 8002f78:	f04f 0eff 	mov.w	lr, #255	; 0xff
				for(i=0;i<rdp_count;i++){ // Find the readprop_list pointer for the received read prop packet
 8002f7c:	2600      	movs	r6, #0
 8002f7e:	e008      	b.n	8002f92 <process_bacnet_reply+0xda>
					if(readprop_input == readprop_list[i])
 8002f80:	4f50      	ldr	r7, [pc, #320]	; (80030c4 <process_bacnet_reply+0x20c>)
 8002f82:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8002f86:	45bc      	cmp	ip, r7
 8002f88:	d101      	bne.n	8002f8e <process_bacnet_reply+0xd6>
						read_list_ptr = i;
 8002f8a:	fa5f fe86 	uxtb.w	lr, r6
			if((buf[bac_apdu_offset+3] == 0x0C) && (buf[bac_apdu_offset+5] == 0xC0)) // Binary input
			{
				//printf("2\n");
				readprop_input = ((buf[bac_apdu_offset+6])<<8) | (buf[bac_apdu_offset+7]);
				read_list_ptr = 0xFF;
				for(i=0;i<rdp_count;i++){ // Find the readprop_list pointer for the received read prop packet
 8002f8e:	3601      	adds	r6, #1
 8002f90:	b2b6      	uxth	r6, r6
 8002f92:	2e1c      	cmp	r6, #28
 8002f94:	d9f4      	bls.n	8002f80 <process_bacnet_reply+0xc8>
					if(readprop_input == readprop_list[i])
						read_list_ptr = i;
				}
				if(read_list_ptr == 0xFF){ // Did not find a valid read input number from existing list
 8002f96:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8002f9a:	d104      	bne.n	8002fa6 <process_bacnet_reply+0xee>
					printf("exit %d %d %d \n",readprop_input,buf[bac_apdu_offset+6],buf[bac_apdu_offset+7]);
 8002f9c:	4661      	mov	r1, ip
 8002f9e:	484a      	ldr	r0, [pc, #296]	; (80030c8 <process_bacnet_reply+0x210>)
 8002fa0:	f001 fa10 	bl	80043c4 <iprintf>

					return;
 8002fa4:	e083      	b.n	80030ae <process_bacnet_reply+0x1f6>
				}

				i=bac_apdu_offset+8;
 8002fa6:	3408      	adds	r4, #8
				if(buf[i] == 0x1E){ // Open tag
 8002fa8:	5d03      	ldrb	r3, [r0, r4]
 8002faa:	2b1e      	cmp	r3, #30
 8002fac:	d17f      	bne.n	80030ae <process_bacnet_reply+0x1f6>
 8002fae:	e02e      	b.n	800300e <process_bacnet_reply+0x156>
					while(i<len)
					{
						if(buf[i+1] == 0x29){ // Property Identifier
 8002fb0:	4623      	mov	r3, r4
 8002fb2:	1902      	adds	r2, r0, r4
 8002fb4:	7852      	ldrb	r2, [r2, #1]
 8002fb6:	2a29      	cmp	r2, #41	; 0x29
 8002fb8:	d127      	bne.n	800300a <process_bacnet_reply+0x152>
							if((buf[i+2] == 0x55) && (buf[i+3] == 0x4E) && (buf[i+4] == 0x91) && (buf[i+6] == 0x4F)){
 8002fba:	1902      	adds	r2, r0, r4
 8002fbc:	7892      	ldrb	r2, [r2, #2]
 8002fbe:	2a55      	cmp	r2, #85	; 0x55
 8002fc0:	d123      	bne.n	800300a <process_bacnet_reply+0x152>
 8002fc2:	1902      	adds	r2, r0, r4
 8002fc4:	78d2      	ldrb	r2, [r2, #3]
 8002fc6:	2a4e      	cmp	r2, #78	; 0x4e
 8002fc8:	d11f      	bne.n	800300a <process_bacnet_reply+0x152>
 8002fca:	1902      	adds	r2, r0, r4
 8002fcc:	7912      	ldrb	r2, [r2, #4]
 8002fce:	2a91      	cmp	r2, #145	; 0x91
 8002fd0:	d11b      	bne.n	800300a <process_bacnet_reply+0x152>
 8002fd2:	1902      	adds	r2, r0, r4
 8002fd4:	7992      	ldrb	r2, [r2, #6]
 8002fd6:	2a4f      	cmp	r2, #79	; 0x4f
 8002fd8:	d117      	bne.n	800300a <process_bacnet_reply+0x152>
								if((bac_binval[read_list_ptr] == 0x00) && (buf[i+5] > 0x01)){
 8002fda:	4672      	mov	r2, lr
 8002fdc:	493b      	ldr	r1, [pc, #236]	; (80030cc <process_bacnet_reply+0x214>)
 8002fde:	f811 100e 	ldrb.w	r1, [r1, lr]
 8002fe2:	b949      	cbnz	r1, 8002ff8 <process_bacnet_reply+0x140>
 8002fe4:	1901      	adds	r1, r0, r4
 8002fe6:	7949      	ldrb	r1, [r1, #5]
 8002fe8:	2901      	cmp	r1, #1
 8002fea:	d905      	bls.n	8002ff8 <process_bacnet_reply+0x140>
									set_bacnet_bin_alarm = 8;//readprop_list[read_list_ptr];
 8002fec:	2408      	movs	r4, #8
 8002fee:	4938      	ldr	r1, [pc, #224]	; (80030d0 <process_bacnet_reply+0x218>)
 8002ff0:	800c      	strh	r4, [r1, #0]
									set_bacnet_bin_alarm_active = 1;
 8002ff2:	2401      	movs	r4, #1
 8002ff4:	4937      	ldr	r1, [pc, #220]	; (80030d4 <process_bacnet_reply+0x21c>)
 8002ff6:	800c      	strh	r4, [r1, #0]
								}
								bac_binval[read_list_ptr] = buf[i+5];
 8002ff8:	4403      	add	r3, r0
 8002ffa:	7959      	ldrb	r1, [r3, #5]
 8002ffc:	4b33      	ldr	r3, [pc, #204]	; (80030cc <process_bacnet_reply+0x214>)
 8002ffe:	5499      	strb	r1, [r3, r2]
								printf("Bacnet Binary reply %d\n", buf[bac_apdu_offset+7]);
 8003000:	5d41      	ldrb	r1, [r0, r5]
 8003002:	4835      	ldr	r0, [pc, #212]	; (80030d8 <process_bacnet_reply+0x220>)
 8003004:	f001 f9de 	bl	80043c4 <iprintf>
								//printf("Bacnet Binary status %d:%d:%d:%d:%d:%d:%d:%d:%d:%d\n",bac_binval[0],bac_binval[1],bac_binval[2],bac_binval[3],bac_binval[4],bac_binval[5],bac_binval[6],bac_binval[7],bac_binval[8],bac_binval[9]);
								return;
 8003008:	e051      	b.n	80030ae <process_bacnet_reply+0x1f6>
							}
						}
						i++;
 800300a:	3401      	adds	r4, #1
 800300c:	b2a4      	uxth	r4, r4
					return;
				}

				i=bac_apdu_offset+8;
				if(buf[i] == 0x1E){ // Open tag
					while(i<len)
 800300e:	428c      	cmp	r4, r1
 8003010:	d3ce      	bcc.n	8002fb0 <process_bacnet_reply+0xf8>
 8003012:	e04c      	b.n	80030ae <process_bacnet_reply+0x1f6>
							}
						}
						i++;
					}
				}
			}else if((buf[bac_apdu_offset+3] == 0x0C) && (buf[bac_apdu_offset+5] == 0x00)) // Analog input
 8003014:	2b0c      	cmp	r3, #12
 8003016:	d14a      	bne.n	80030ae <process_bacnet_reply+0x1f6>
 8003018:	1943      	adds	r3, r0, r5
 800301a:	795b      	ldrb	r3, [r3, #5]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d146      	bne.n	80030ae <process_bacnet_reply+0x1f6>
			{
				//printf("3\n");
				readprop_input = ((buf[bac_apdu_offset+6])<<8) | (buf[bac_apdu_offset+7]);
 8003020:	4405      	add	r5, r0
 8003022:	79aa      	ldrb	r2, [r5, #6]
 8003024:	79eb      	ldrb	r3, [r5, #7]
 8003026:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				//printf("read id %d \n",readprop_input);
				read_list_ptr = 0xFF;
				for(i=0;i<rdpa_count;i++){ // Find the readprop_list pointer for the received read prop packet
 800302a:	2500      	movs	r5, #0
 800302c:	e008      	b.n	8003040 <process_bacnet_reply+0x188>
					//printf("read id %d \n",readpropa_list[i]);
					if(readprop_input == readpropa_list[i]){
 800302e:	4a2b      	ldr	r2, [pc, #172]	; (80030dc <process_bacnet_reply+0x224>)
 8003030:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
 8003034:	4293      	cmp	r3, r2
 8003036:	d101      	bne.n	800303c <process_bacnet_reply+0x184>
						read_list_ptr = i;
 8003038:	b2ed      	uxtb	r5, r5
						break;
 800303a:	e004      	b.n	8003046 <process_bacnet_reply+0x18e>
			{
				//printf("3\n");
				readprop_input = ((buf[bac_apdu_offset+6])<<8) | (buf[bac_apdu_offset+7]);
				//printf("read id %d \n",readprop_input);
				read_list_ptr = 0xFF;
				for(i=0;i<rdpa_count;i++){ // Find the readprop_list pointer for the received read prop packet
 800303c:	3501      	adds	r5, #1
 800303e:	b2ad      	uxth	r5, r5
 8003040:	2d03      	cmp	r5, #3
 8003042:	d9f4      	bls.n	800302e <process_bacnet_reply+0x176>
			}else if((buf[bac_apdu_offset+3] == 0x0C) && (buf[bac_apdu_offset+5] == 0x00)) // Analog input
			{
				//printf("3\n");
				readprop_input = ((buf[bac_apdu_offset+6])<<8) | (buf[bac_apdu_offset+7]);
				//printf("read id %d \n",readprop_input);
				read_list_ptr = 0xFF;
 8003044:	25ff      	movs	r5, #255	; 0xff
					if(readprop_input == readpropa_list[i]){
						read_list_ptr = i;
						break;
					}
				}
				if(read_list_ptr == 0xFF){ // Did not find a valid read input number from existing list
 8003046:	2dff      	cmp	r5, #255	; 0xff
 8003048:	d031      	beq.n	80030ae <process_bacnet_reply+0x1f6>
					//printf("exit\n");
					return;
				}


				i=bac_apdu_offset+8;
 800304a:	3408      	adds	r4, #8
				if(buf[i] == 0x1E){ // Open tag
 800304c:	5d03      	ldrb	r3, [r0, r4]
 800304e:	2b1e      	cmp	r3, #30
 8003050:	d12d      	bne.n	80030ae <process_bacnet_reply+0x1f6>
 8003052:	e02a      	b.n	80030aa <process_bacnet_reply+0x1f2>
					//printf("Analog matched 1 %d %d",i,buf[i+4]);
					while(i<len)
					{
						//printf("AM %d %d %d ",i,buf[i+4], len);
						if(buf[i+1] == 0x29){ // Property Identifier
 8003054:	1902      	adds	r2, r0, r4
 8003056:	7852      	ldrb	r2, [r2, #1]
 8003058:	2a29      	cmp	r2, #41	; 0x29
 800305a:	d124      	bne.n	80030a6 <process_bacnet_reply+0x1ee>
							if((buf[i+2] == 0x55) && (buf[i+3] == 0x4E) && (buf[i+4] == 0x44) && (buf[i+9] == 0x4F)){
 800305c:	1902      	adds	r2, r0, r4
 800305e:	7892      	ldrb	r2, [r2, #2]
 8003060:	2a55      	cmp	r2, #85	; 0x55
 8003062:	d120      	bne.n	80030a6 <process_bacnet_reply+0x1ee>
 8003064:	1902      	adds	r2, r0, r4
 8003066:	78d2      	ldrb	r2, [r2, #3]
 8003068:	2a4e      	cmp	r2, #78	; 0x4e
 800306a:	d11c      	bne.n	80030a6 <process_bacnet_reply+0x1ee>
 800306c:	1902      	adds	r2, r0, r4
 800306e:	7912      	ldrb	r2, [r2, #4]
 8003070:	2a44      	cmp	r2, #68	; 0x44
 8003072:	d118      	bne.n	80030a6 <process_bacnet_reply+0x1ee>
 8003074:	1902      	adds	r2, r0, r4
 8003076:	7a52      	ldrb	r2, [r2, #9]
 8003078:	2a4f      	cmp	r2, #79	; 0x4f
 800307a:	d114      	bne.n	80030a6 <process_bacnet_reply+0x1ee>
							//if((buf[i+2] == 0xA8) && (buf[i+3] == 0x4E) && (buf[i+4] == 0x75) && (buf[i + 5 + buf[i+5] + 1] == 0x4F)){
//								if((bac_binval[read_list_ptr] == 0x00) && (buf[i+5] > 0x01)){
//									set_bacnet_bin_alarm = readprop_list[read_list_ptr];
//								}
								ieee754_byte[0] = buf[i+5];
 800307c:	4420      	add	r0, r4
 800307e:	7944      	ldrb	r4, [r0, #5]
								ieee754_byte[1] = buf[i+6];
 8003080:	7986      	ldrb	r6, [r0, #6]
								ieee754_byte[2] = buf[i+7];
 8003082:	79c7      	ldrb	r7, [r0, #7]
								ieee754_byte[3] = buf[i+8];
 8003084:	f890 8008 	ldrb.w	r8, [r0, #8]
//								uint8_t ana_len  = 0;
//								while(ana_len<=buf[i+5]){
//									bac_anaval[read_list_ptr][ana_len] = buf[i+6+ana_len];
//									ana_len++;
//								}
								printf("Bacnet Analog reply %d \n", readpropa_list[read_list_ptr]);
 8003088:	4b14      	ldr	r3, [pc, #80]	; (80030dc <process_bacnet_reply+0x224>)
 800308a:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 800308e:	4814      	ldr	r0, [pc, #80]	; (80030e0 <process_bacnet_reply+0x228>)
 8003090:	f001 f998 	bl	80043c4 <iprintf>
								//bac_anaval[read_list_ptr] = *(float *)&ieee754_byte;
								bac_anaval[read_list_ptr].bytes[0] = ieee754_byte[3];
 8003094:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <process_bacnet_reply+0x22c>)
 8003096:	f803 8025 	strb.w	r8, [r3, r5, lsl #2]
								bac_anaval[read_list_ptr].bytes[1] = ieee754_byte[2];
 800309a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800309e:	706f      	strb	r7, [r5, #1]
								bac_anaval[read_list_ptr].bytes[2] = ieee754_byte[1];
 80030a0:	70ae      	strb	r6, [r5, #2]
								bac_anaval[read_list_ptr].bytes[3] = ieee754_byte[0];
 80030a2:	70ec      	strb	r4, [r5, #3]
								//bac_anaval[read_list_ptr] = buf[i+5];//(buf[i+5]<<24) |(buf[i+6]<<16) |(buf[i+7]<<8) |(buf[i+8]);
								//printf("Bacnet Analog reply offset %d - %d  - ",i+5, buf[bac_apdu_offset+7]-1);
								//printf(" Value %d,%d,%d,%d \n",buf[i+5] ,buf[i+6] ,buf[i+7] ,buf[i+8]);
								return;
 80030a4:	e003      	b.n	80030ae <process_bacnet_reply+0x1f6>
							}
						}
						i++;
 80030a6:	3401      	adds	r4, #1
 80030a8:	b2a4      	uxth	r4, r4


				i=bac_apdu_offset+8;
				if(buf[i] == 0x1E){ // Open tag
					//printf("Analog matched 1 %d %d",i,buf[i+4]);
					while(i<len)
 80030aa:	428c      	cmp	r4, r1
 80030ac:	d3d2      	bcc.n	8003054 <process_bacnet_reply+0x19c>
					}
				}
			}
		}
	}
}
 80030ae:	b002      	add	sp, #8
 80030b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	20001525 	.word	0x20001525
 80030bc:	20000c00 	.word	0x20000c00
 80030c0:	08006dec 	.word	0x08006dec
 80030c4:	200005fc 	.word	0x200005fc
 80030c8:	08006e14 	.word	0x08006e14
 80030cc:	20000bdc 	.word	0x20000bdc
 80030d0:	20000bfa 	.word	0x20000bfa
 80030d4:	20000bfc 	.word	0x20000bfc
 80030d8:	08006e24 	.word	0x08006e24
 80030dc:	2000064c 	.word	0x2000064c
 80030e0:	08006e3c 	.word	0x08006e3c
 80030e4:	20001510 	.word	0x20001510

080030e8 <mac1_tick>:

void mac1_tick(void)
{
 80030e8:	b508      	push	{r3, lr}
	plen = enc424j600PacketReceiveP1(BUFFER_SIZE, buf1);
 80030ea:	490b      	ldr	r1, [pc, #44]	; (8003118 <mac1_tick+0x30>)
 80030ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030f0:	f7fe f92e 	bl	8001350 <enc424j600PacketReceiveP1>
 80030f4:	b281      	uxth	r1, r0
 80030f6:	4b09      	ldr	r3, [pc, #36]	; (800311c <mac1_tick+0x34>)
 80030f8:	8019      	strh	r1, [r3, #0]
	if(plen>0){
 80030fa:	b131      	cbz	r1, 800310a <mac1_tick+0x22>

		mac1_pkt_cntr++;
 80030fc:	4a08      	ldr	r2, [pc, #32]	; (8003120 <mac1_tick+0x38>)
 80030fe:	8813      	ldrh	r3, [r2, #0]
 8003100:	3301      	adds	r3, #1
 8003102:	8013      	strh	r3, [r2, #0]
//			printf("----------------\n");
//			for(uint16_t q=0;q<plen;q++)
//				//printf("%d ",buf1[q]);
//				USART1_Send(buf1[q]);
//			printf("\n----------------\n");
			process_bacnet_reply(buf1,plen);
 8003104:	4804      	ldr	r0, [pc, #16]	; (8003118 <mac1_tick+0x30>)
 8003106:	f7ff fed7 	bl	8002eb8 <process_bacnet_reply>
//				printf("ARP Req Rcvd");
//				printf("From : %d:%d:%d:%d:%d:%d \n",buf1[6],buf1[7],buf1[8],buf1[9],buf1[10],buf1[11]);
//			}
//		}
	}
	packetloop_icmp_tcp(buf1,plen);
 800310a:	4b04      	ldr	r3, [pc, #16]	; (800311c <mac1_tick+0x34>)
 800310c:	8819      	ldrh	r1, [r3, #0]
 800310e:	4802      	ldr	r0, [pc, #8]	; (8003118 <mac1_tick+0x30>)
 8003110:	f7fe ff1c 	bl	8001f4c <packetloop_icmp_tcp>
 8003114:	bd08      	pop	{r3, pc}
 8003116:	bf00      	nop
 8003118:	20001120 	.word	0x20001120
 800311c:	2000111c 	.word	0x2000111c
 8003120:	20000bfe 	.word	0x20000bfe

08003124 <mac1_init>:

}
void mac1_init(void)
{
 8003124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003128:	b087      	sub	sp, #28
	Enc424J600Network_initP1(macaddr1);
 800312a:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800322c <mac1_init+0x108>
 800312e:	4648      	mov	r0, r9
 8003130:	f7fe f89e 	bl	8001270 <Enc424J600Network_initP1>
	dhcp_up=0;
 8003134:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8003230 <mac1_init+0x10c>
 8003138:	2700      	movs	r7, #0
 800313a:	f888 7000 	strb.w	r7, [r8]
	dhcp_up = allocateIPAddress(buf1, sizeof(buf1), macaddr1, myport, myip, mynetmask, gwip, dnsip, dhcpsvrip );
 800313e:	4b28      	ldr	r3, [pc, #160]	; (80031e0 <mac1_init+0xbc>)
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	4a28      	ldr	r2, [pc, #160]	; (80031e4 <mac1_init+0xc0>)
 8003144:	9204      	str	r2, [sp, #16]
 8003146:	4c28      	ldr	r4, [pc, #160]	; (80031e8 <mac1_init+0xc4>)
 8003148:	9403      	str	r4, [sp, #12]
 800314a:	4d28      	ldr	r5, [pc, #160]	; (80031ec <mac1_init+0xc8>)
 800314c:	9502      	str	r5, [sp, #8]
 800314e:	4a28      	ldr	r2, [pc, #160]	; (80031f0 <mac1_init+0xcc>)
 8003150:	9201      	str	r2, [sp, #4]
 8003152:	4e28      	ldr	r6, [pc, #160]	; (80031f4 <mac1_init+0xd0>)
 8003154:	9600      	str	r6, [sp, #0]
 8003156:	464a      	mov	r2, r9
 8003158:	f240 31e9 	movw	r1, #1001	; 0x3e9
 800315c:	4826      	ldr	r0, [pc, #152]	; (80031f8 <mac1_init+0xd4>)
 800315e:	f7ff fe4b 	bl	8002df8 <allocateIPAddress>
 8003162:	f888 0000 	strb.w	r0, [r8]
	printf("\n--------------------------\n");
 8003166:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8003234 <mac1_init+0x110>
 800316a:	4640      	mov	r0, r8
 800316c:	f001 f94e 	bl	800440c <puts>
	printf("IP Address Port 2 -  %d.%d.%d.%d \n",myip[0],myip[1],myip[2],myip[3]);
 8003170:	7831      	ldrb	r1, [r6, #0]
 8003172:	7872      	ldrb	r2, [r6, #1]
 8003174:	78b3      	ldrb	r3, [r6, #2]
 8003176:	78f0      	ldrb	r0, [r6, #3]
 8003178:	9000      	str	r0, [sp, #0]
 800317a:	4820      	ldr	r0, [pc, #128]	; (80031fc <mac1_init+0xd8>)
 800317c:	f001 f922 	bl	80043c4 <iprintf>
	printf("Gateway IP Port 2 -  %d.%d.%d.%d \n",gwip[0],gwip[1],gwip[2],gwip[3]);
 8003180:	7829      	ldrb	r1, [r5, #0]
 8003182:	786a      	ldrb	r2, [r5, #1]
 8003184:	78ab      	ldrb	r3, [r5, #2]
 8003186:	78e8      	ldrb	r0, [r5, #3]
 8003188:	9000      	str	r0, [sp, #0]
 800318a:	481d      	ldr	r0, [pc, #116]	; (8003200 <mac1_init+0xdc>)
 800318c:	f001 f91a 	bl	80043c4 <iprintf>
	printf("DNS  IP    Port 2 -  %d.%d.%d.%d \n",dnsip[0],dnsip[1],dnsip[2],dnsip[3]);
 8003190:	7821      	ldrb	r1, [r4, #0]
 8003192:	7862      	ldrb	r2, [r4, #1]
 8003194:	78a3      	ldrb	r3, [r4, #2]
 8003196:	78e0      	ldrb	r0, [r4, #3]
 8003198:	9000      	str	r0, [sp, #0]
 800319a:	481a      	ldr	r0, [pc, #104]	; (8003204 <mac1_init+0xe0>)
 800319c:	f001 f912 	bl	80043c4 <iprintf>
	printf("Init Complete Port 1\n");
 80031a0:	4819      	ldr	r0, [pc, #100]	; (8003208 <mac1_init+0xe4>)
 80031a2:	f001 f933 	bl	800440c <puts>
	printf("\n--------------------------\n");
 80031a6:	4640      	mov	r0, r8
 80031a8:	f001 f930 	bl	800440c <puts>
	bac_timeout = Sys_GetTick() + 2000;
 80031ac:	f000 fbec 	bl	8003988 <Sys_GetTick>
 80031b0:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 80031b4:	4b15      	ldr	r3, [pc, #84]	; (800320c <mac1_init+0xe8>)
 80031b6:	6018      	str	r0, [r3, #0]
	bacnet_found = 0;
 80031b8:	4b15      	ldr	r3, [pc, #84]	; (8003210 <mac1_init+0xec>)
 80031ba:	701f      	strb	r7, [r3, #0]
	invokeid=0;
 80031bc:	4b15      	ldr	r3, [pc, #84]	; (8003214 <mac1_init+0xf0>)
 80031be:	701f      	strb	r7, [r3, #0]
	if(SetCfg(&sport, &dport, &bacid)){
 80031c0:	4a15      	ldr	r2, [pc, #84]	; (8003218 <mac1_init+0xf4>)
 80031c2:	4916      	ldr	r1, [pc, #88]	; (800321c <mac1_init+0xf8>)
 80031c4:	4816      	ldr	r0, [pc, #88]	; (8003220 <mac1_init+0xfc>)
 80031c6:	f000 ff57 	bl	8004078 <SetCfg>
 80031ca:	b128      	cbz	r0, 80031d8 <mac1_init+0xb4>
		printf("CFG Success\n");
 80031cc:	4815      	ldr	r0, [pc, #84]	; (8003224 <mac1_init+0x100>)
 80031ce:	f001 f91d 	bl	800440c <puts>
		bacidset = 1;
 80031d2:	2201      	movs	r2, #1
 80031d4:	4b14      	ldr	r3, [pc, #80]	; (8003228 <mac1_init+0x104>)
 80031d6:	801a      	strh	r2, [r3, #0]
	}
}
 80031d8:	b007      	add	sp, #28
 80031da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80031de:	bf00      	nop
 80031e0:	2000063e 	.word	0x2000063e
 80031e4:	20001520 	.word	0x20001520
 80031e8:	20000648 	.word	0x20000648
 80031ec:	20000644 	.word	0x20000644
 80031f0:	2000154c 	.word	0x2000154c
 80031f4:	20000654 	.word	0x20000654
 80031f8:	20001120 	.word	0x20001120
 80031fc:	08006e58 	.word	0x08006e58
 8003200:	08006e7c 	.word	0x08006e7c
 8003204:	08006ea0 	.word	0x08006ea0
 8003208:	08006ec4 	.word	0x08006ec4
 800320c:	20000bd8 	.word	0x20000bd8
 8003210:	20001525 	.word	0x20001525
 8003214:	20001509 	.word	0x20001509
 8003218:	20000636 	.word	0x20000636
 800321c:	2000065a 	.word	0x2000065a
 8003220:	20000658 	.word	0x20000658
 8003224:	08006edc 	.word	0x08006edc
 8003228:	20000640 	.word	0x20000640
 800322c:	20000638 	.word	0x20000638
 8003230:	20001524 	.word	0x20001524
 8003234:	08006c78 	.word	0x08006c78

08003238 <bacnet_whois>:
void bacnet_whois(void)
{
 8003238:	b530      	push	{r4, r5, lr}
 800323a:	b089      	sub	sp, #36	; 0x24

	uint16_t i;
	char whois_pkt[] = {0x81,0x0B,0x00,0x0C,0x01,0x20,0xFF,0xFF,0x00,0x0E,0x10,0x08};
 800323c:	4c2b      	ldr	r4, [pc, #172]	; (80032ec <bacnet_whois+0xb4>)
 800323e:	ab05      	add	r3, sp, #20
 8003240:	6820      	ldr	r0, [r4, #0]
 8003242:	6861      	ldr	r1, [r4, #4]
 8003244:	68a2      	ldr	r2, [r4, #8]
 8003246:	c307      	stmia	r3!, {r0, r1, r2}
	char whois_pkt_range[] = {0x81,0x0B,0x00,0x0C,0x01,0x20,0xFF,0xFF,0x00,0x0E,0x10,0x08,0x00,0x00,0x1A,0x00,0x00};
 8003248:	466d      	mov	r5, sp
 800324a:	f854 0f0c 	ldr.w	r0, [r4, #12]!
 800324e:	6861      	ldr	r1, [r4, #4]
 8003250:	68a2      	ldr	r2, [r4, #8]
 8003252:	68e3      	ldr	r3, [r4, #12]
 8003254:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003256:	7c23      	ldrb	r3, [r4, #16]
 8003258:	702b      	strb	r3, [r5, #0]
	dip[0] = myip[0];
 800325a:	4b25      	ldr	r3, [pc, #148]	; (80032f0 <bacnet_whois+0xb8>)
 800325c:	7819      	ldrb	r1, [r3, #0]
 800325e:	4a25      	ldr	r2, [pc, #148]	; (80032f4 <bacnet_whois+0xbc>)
 8003260:	7011      	strb	r1, [r2, #0]
	dip[1] = myip[1];
 8003262:	7859      	ldrb	r1, [r3, #1]
 8003264:	7051      	strb	r1, [r2, #1]
	dip[2] = myip[2];
 8003266:	789b      	ldrb	r3, [r3, #2]
 8003268:	7093      	strb	r3, [r2, #2]
	dip[3] = 255;
 800326a:	23ff      	movs	r3, #255	; 0xff
 800326c:	70d3      	strb	r3, [r2, #3]
	send_udp_prepare(buf1,sport,dip,dport);
 800326e:	4b22      	ldr	r3, [pc, #136]	; (80032f8 <bacnet_whois+0xc0>)
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	4922      	ldr	r1, [pc, #136]	; (80032fc <bacnet_whois+0xc4>)
 8003274:	8809      	ldrh	r1, [r1, #0]
 8003276:	4822      	ldr	r0, [pc, #136]	; (8003300 <bacnet_whois+0xc8>)
 8003278:	f7fe fce6 	bl	8001c48 <send_udp_prepare>
	i=0;
	if(bacidset){
 800327c:	4b21      	ldr	r3, [pc, #132]	; (8003304 <bacnet_whois+0xcc>)
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	b31b      	cbz	r3, 80032ca <bacnet_whois+0x92>
		whois_pkt_range[12] = (uint8_t)((bacid & 0xFF00)>>16);
 8003282:	2300      	movs	r3, #0
 8003284:	f88d 300c 	strb.w	r3, [sp, #12]
		whois_pkt_range[13] = (uint8_t)(bacid & 0x00FF);
 8003288:	4a1f      	ldr	r2, [pc, #124]	; (8003308 <bacnet_whois+0xd0>)
 800328a:	7812      	ldrb	r2, [r2, #0]
 800328c:	f88d 200d 	strb.w	r2, [sp, #13]
		whois_pkt_range[15] = (uint8_t)((bacid & 0xFF00)>>16);
 8003290:	f88d 300f 	strb.w	r3, [sp, #15]
		whois_pkt_range[16] = (uint8_t)(bacid & 0x00FF);
 8003294:	f88d 2010 	strb.w	r2, [sp, #16]
		while(i<sizeof(whois_pkt_range)){
 8003298:	e009      	b.n	80032ae <bacnet_whois+0x76>
			buf1[UDP_DATA_P+i] = whois_pkt_range[i];
 800329a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800329e:	a908      	add	r1, sp, #32
 80032a0:	4419      	add	r1, r3
 80032a2:	f811 0c20 	ldrb.w	r0, [r1, #-32]
 80032a6:	4916      	ldr	r1, [pc, #88]	; (8003300 <bacnet_whois+0xc8>)
 80032a8:	5488      	strb	r0, [r1, r2]
			i++;
 80032aa:	3301      	adds	r3, #1
 80032ac:	b29b      	uxth	r3, r3
	if(bacidset){
		whois_pkt_range[12] = (uint8_t)((bacid & 0xFF00)>>16);
		whois_pkt_range[13] = (uint8_t)(bacid & 0x00FF);
		whois_pkt_range[15] = (uint8_t)((bacid & 0xFF00)>>16);
		whois_pkt_range[16] = (uint8_t)(bacid & 0x00FF);
		while(i<sizeof(whois_pkt_range)){
 80032ae:	2b10      	cmp	r3, #16
 80032b0:	d9f3      	bls.n	800329a <bacnet_whois+0x62>
 80032b2:	e00d      	b.n	80032d0 <bacnet_whois+0x98>
			buf1[UDP_DATA_P+i] = whois_pkt_range[i];
			i++;
		}
	}else{
		while(i<sizeof(whois_pkt)){
			buf1[UDP_DATA_P+i] = whois_pkt[i];
 80032b4:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80032b8:	a908      	add	r1, sp, #32
 80032ba:	4419      	add	r1, r3
 80032bc:	f811 0c0c 	ldrb.w	r0, [r1, #-12]
 80032c0:	490f      	ldr	r1, [pc, #60]	; (8003300 <bacnet_whois+0xc8>)
 80032c2:	5488      	strb	r0, [r1, r2]
			i++;
 80032c4:	3301      	adds	r3, #1
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	e000      	b.n	80032cc <bacnet_whois+0x94>
 80032ca:	2300      	movs	r3, #0
		while(i<sizeof(whois_pkt_range)){
			buf1[UDP_DATA_P+i] = whois_pkt_range[i];
			i++;
		}
	}else{
		while(i<sizeof(whois_pkt)){
 80032cc:	2b0b      	cmp	r3, #11
 80032ce:	d9f1      	bls.n	80032b4 <bacnet_whois+0x7c>
			buf1[UDP_DATA_P+i] = whois_pkt[i];
			i++;
		}
	}
	//Force Broadcast
	buf1[0] = 0xFF;
 80032d0:	480b      	ldr	r0, [pc, #44]	; (8003300 <bacnet_whois+0xc8>)
 80032d2:	23ff      	movs	r3, #255	; 0xff
 80032d4:	7003      	strb	r3, [r0, #0]
	buf1[1] = 0xFF;
 80032d6:	7043      	strb	r3, [r0, #1]
	buf1[2] = 0xFF;
 80032d8:	7083      	strb	r3, [r0, #2]
	buf1[3] = 0xFF;
 80032da:	70c3      	strb	r3, [r0, #3]
	buf1[4] = 0xFF;
 80032dc:	7103      	strb	r3, [r0, #4]
	buf1[5] = 0xFF;
 80032de:	7143      	strb	r3, [r0, #5]
	send_udp_transmit(buf1,sizeof(whois_pkt));
 80032e0:	210c      	movs	r1, #12
 80032e2:	f7fe fcff 	bl	8001ce4 <send_udp_transmit>
	//send_udp(buf1,whois_pkt,sizeof(whois_pkt),sport, dip, dport);
}
 80032e6:	b009      	add	sp, #36	; 0x24
 80032e8:	bd30      	pop	{r4, r5, pc}
 80032ea:	bf00      	nop
 80032ec:	08006a34 	.word	0x08006a34
 80032f0:	20000654 	.word	0x20000654
 80032f4:	2000150c 	.word	0x2000150c
 80032f8:	2000065a 	.word	0x2000065a
 80032fc:	20000658 	.word	0x20000658
 8003300:	20001120 	.word	0x20001120
 8003304:	20000640 	.word	0x20000640
 8003308:	20000636 	.word	0x20000636

0800330c <GetBacInstNum>:
uint16_t GetBacInstNum(uint8_t n)
{
	return readprop_list[n];
}
 800330c:	4b01      	ldr	r3, [pc, #4]	; (8003314 <GetBacInstNum+0x8>)
 800330e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8003312:	4770      	bx	lr
 8003314:	200005fc 	.word	0x200005fc

08003318 <GetBacInstNuma>:
uint16_t GetBacInstNuma(uint8_t n)
{
	return readpropa_list[n];
}
 8003318:	4b01      	ldr	r3, [pc, #4]	; (8003320 <GetBacInstNuma+0x8>)
 800331a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800331e:	4770      	bx	lr
 8003320:	2000064c 	.word	0x2000064c

08003324 <retrdpcount>:
uint8_t retrdpcount()
{
	return rdp_count;
}
 8003324:	201d      	movs	r0, #29
 8003326:	4770      	bx	lr

08003328 <retrdpacount>:
uint8_t retrdpacount()
{
	return rdpa_count;
}
 8003328:	2004      	movs	r0, #4
 800332a:	4770      	bx	lr

0800332c <retrdpval>:
uint8_t retrdpval(uint8_t n)
{
	return bac_binval[n];
}
 800332c:	4b01      	ldr	r3, [pc, #4]	; (8003334 <retrdpval+0x8>)
 800332e:	5c18      	ldrb	r0, [r3, r0]
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20000bdc 	.word	0x20000bdc

08003338 <retrdpaval>:
float retrdpaval(uint8_t n)
{
	return bac_anaval[n].a;
}
 8003338:	4b01      	ldr	r3, [pc, #4]	; (8003340 <retrdpaval+0x8>)
 800333a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800333e:	4770      	bx	lr
 8003340:	20001510 	.word	0x20001510

08003344 <bacnet_read_prop>:
void bacnet_read_prop(uint8_t id, uint16_t inst, uint8_t analogprop)
{
 8003344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003346:	b087      	sub	sp, #28
 8003348:	4605      	mov	r5, r0
 800334a:	460c      	mov	r4, r1
 800334c:	4616      	mov	r6, r2
	uint16_t i;
	char bacrd_pkt[] = {0x81,0x0A,0x00,0x13,0x01,0x04,0x02,0x75,0x53,0x0E,0x0C,0x00,0xC0,0x00,0x02,0x1E,0x09,0x08,0x1F};
 800334e:	af01      	add	r7, sp, #4
 8003350:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 80033f8 <bacnet_read_prop+0xb4>
 8003354:	f85e 0f20 	ldr.w	r0, [lr, #32]!
 8003358:	f8de 1004 	ldr.w	r1, [lr, #4]
 800335c:	f8de 2008 	ldr.w	r2, [lr, #8]
 8003360:	f8de 300c 	ldr.w	r3, [lr, #12]
 8003364:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003366:	f8be 2010 	ldrh.w	r2, [lr, #16]
 800336a:	f89e 3012 	ldrb.w	r3, [lr, #18]
 800336e:	803a      	strh	r2, [r7, #0]
 8003370:	70bb      	strb	r3, [r7, #2]
	dip[0] = bacdev_ip[0];
 8003372:	4b1c      	ldr	r3, [pc, #112]	; (80033e4 <bacnet_read_prop+0xa0>)
 8003374:	7819      	ldrb	r1, [r3, #0]
 8003376:	4a1c      	ldr	r2, [pc, #112]	; (80033e8 <bacnet_read_prop+0xa4>)
 8003378:	7011      	strb	r1, [r2, #0]
	dip[1] = bacdev_ip[1];
 800337a:	7859      	ldrb	r1, [r3, #1]
 800337c:	7051      	strb	r1, [r2, #1]
	dip[2] = bacdev_ip[2];
 800337e:	7899      	ldrb	r1, [r3, #2]
 8003380:	7091      	strb	r1, [r2, #2]
	dip[3] = bacdev_ip[3];
 8003382:	78db      	ldrb	r3, [r3, #3]
 8003384:	70d3      	strb	r3, [r2, #3]
	send_udp_prepare(buf1,sport,dip,dport);
 8003386:	4b19      	ldr	r3, [pc, #100]	; (80033ec <bacnet_read_prop+0xa8>)
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	4919      	ldr	r1, [pc, #100]	; (80033f0 <bacnet_read_prop+0xac>)
 800338c:	8809      	ldrh	r1, [r1, #0]
 800338e:	4819      	ldr	r0, [pc, #100]	; (80033f4 <bacnet_read_prop+0xb0>)
 8003390:	f7fe fc5a 	bl	8001c48 <send_udp_prepare>
	i=0;
 8003394:	2300      	movs	r3, #0
	while(i<sizeof(bacrd_pkt)){
 8003396:	e009      	b.n	80033ac <bacnet_read_prop+0x68>
		buf1[UDP_DATA_P+i] = bacrd_pkt[i];
 8003398:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800339c:	a906      	add	r1, sp, #24
 800339e:	4419      	add	r1, r3
 80033a0:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 80033a4:	4913      	ldr	r1, [pc, #76]	; (80033f4 <bacnet_read_prop+0xb0>)
 80033a6:	5488      	strb	r0, [r1, r2]
		i++;
 80033a8:	3301      	adds	r3, #1
 80033aa:	b29b      	uxth	r3, r3
	dip[1] = bacdev_ip[1];
	dip[2] = bacdev_ip[2];
	dip[3] = bacdev_ip[3];
	send_udp_prepare(buf1,sport,dip,dport);
	i=0;
	while(i<sizeof(bacrd_pkt)){
 80033ac:	2b12      	cmp	r3, #18
 80033ae:	d9f3      	bls.n	8003398 <bacnet_read_prop+0x54>
		buf1[UDP_DATA_P+i] = bacrd_pkt[i];
		i++;
	}
	//Force Broadcast
	buf1[0] = 0xFF;
 80033b0:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <bacnet_read_prop+0xb0>)
 80033b2:	22ff      	movs	r2, #255	; 0xff
 80033b4:	701a      	strb	r2, [r3, #0]
	buf1[1] = 0xFF;
 80033b6:	705a      	strb	r2, [r3, #1]
	buf1[2] = 0xFF;
 80033b8:	709a      	strb	r2, [r3, #2]
	buf1[3] = 0xFF;
 80033ba:	70da      	strb	r2, [r3, #3]
	buf1[4] = 0xFF;
 80033bc:	711a      	strb	r2, [r3, #4]
	buf1[5] = 0xFF;
 80033be:	715a      	strb	r2, [r3, #5]
	if(analogprop)
 80033c0:	b116      	cbz	r6, 80033c8 <bacnet_read_prop+0x84>
	{
		buf1[UDP_DATA_P+12] = 0x00;
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}
	buf1[UDP_DATA_P+8] = id;
 80033c8:	480a      	ldr	r0, [pc, #40]	; (80033f4 <bacnet_read_prop+0xb0>)
 80033ca:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
	buf1[UDP_DATA_P+13] = (uint8_t)((inst & 0xFF00)>>8);
 80033ce:	0a23      	lsrs	r3, r4, #8
 80033d0:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
	buf1[UDP_DATA_P+14] = (uint8_t)(inst & 0x00FF);
 80033d4:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
	send_udp_transmit(buf1,sizeof(bacrd_pkt));
 80033d8:	2113      	movs	r1, #19
 80033da:	f7fe fc83 	bl	8001ce4 <send_udp_transmit>
}
 80033de:	b007      	add	sp, #28
 80033e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000c00 	.word	0x20000c00
 80033e8:	2000150c 	.word	0x2000150c
 80033ec:	2000065a 	.word	0x2000065a
 80033f0:	20000658 	.word	0x20000658
 80033f4:	20001120 	.word	0x20001120
 80033f8:	08006a34 	.word	0x08006a34

080033fc <mac1_service>:

void mac1_service(void)
{
 80033fc:	b538      	push	{r3, r4, r5, lr}
	//printf("Bacnet timeout %d:%d",bac_timeout,Sys_GetTick());
	if(bac_timeout < Sys_GetTick()){
 80033fe:	f000 fac3 	bl	8003988 <Sys_GetTick>
 8003402:	4b2d      	ldr	r3, [pc, #180]	; (80034b8 <mac1_service+0xbc>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4298      	cmp	r0, r3
 8003408:	d955      	bls.n	80034b6 <mac1_service+0xba>
		if(!bacnet_found)
 800340a:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <mac1_service+0xc0>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	b97b      	cbnz	r3, 8003430 <mac1_service+0x34>
		{
			printf("Sending Bacnet Who Is \n");
 8003410:	482b      	ldr	r0, [pc, #172]	; (80034c0 <mac1_service+0xc4>)
 8003412:	f000 fffb 	bl	800440c <puts>
			bacnet_whois();
 8003416:	f7ff ff0f 	bl	8003238 <bacnet_whois>
			bac_timeout = Sys_GetTick() + 10000;
 800341a:	f000 fab5 	bl	8003988 <Sys_GetTick>
 800341e:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
 8003422:	3010      	adds	r0, #16
 8003424:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <mac1_service+0xbc>)
 8003426:	6018      	str	r0, [r3, #0]
			bac_inst = 0;
 8003428:	2200      	movs	r2, #0
 800342a:	4b26      	ldr	r3, [pc, #152]	; (80034c4 <mac1_service+0xc8>)
 800342c:	701a      	strb	r2, [r3, #0]
 800342e:	bd38      	pop	{r3, r4, r5, pc}
		}else
		{
			if(bac_inst <rdp_count){
 8003430:	4b24      	ldr	r3, [pc, #144]	; (80034c4 <mac1_service+0xc8>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b1c      	cmp	r3, #28
 8003436:	d817      	bhi.n	8003468 <mac1_service+0x6c>
				if(bac_inst == 0)
 8003438:	b913      	cbnz	r3, 8003440 <mac1_service+0x44>
				{
					printf("\n-------------------------------------------------\n");
 800343a:	4823      	ldr	r0, [pc, #140]	; (80034c8 <mac1_service+0xcc>)
 800343c:	f000 ffe6 	bl	800440c <puts>
				}
				bacnet_read_prop(invokeid,readprop_list[bac_inst],0);
 8003440:	4d22      	ldr	r5, [pc, #136]	; (80034cc <mac1_service+0xd0>)
 8003442:	4c20      	ldr	r4, [pc, #128]	; (80034c4 <mac1_service+0xc8>)
 8003444:	7823      	ldrb	r3, [r4, #0]
 8003446:	2200      	movs	r2, #0
 8003448:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
 800344c:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <mac1_service+0xd4>)
 800344e:	7818      	ldrb	r0, [r3, #0]
 8003450:	f7ff ff78 	bl	8003344 <bacnet_read_prop>
				//printf("Bacnet read prop %d %d %d Binary ",invokeid,readprop_list[bac_inst],bac_inst);
				printf("Bacnet Read Binary input %d - ",readprop_list[bac_inst]);
 8003454:	7823      	ldrb	r3, [r4, #0]
 8003456:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
 800345a:	481e      	ldr	r0, [pc, #120]	; (80034d4 <mac1_service+0xd8>)
 800345c:	f000 ffb2 	bl	80043c4 <iprintf>
				bac_inst++;
 8003460:	7823      	ldrb	r3, [r4, #0]
 8003462:	3301      	adds	r3, #1
 8003464:	7023      	strb	r3, [r4, #0]
 8003466:	e013      	b.n	8003490 <mac1_service+0x94>
			}else{
				bacnet_read_prop(invokeid,readpropa_list[bac_inst-rdp_count],1);
 8003468:	3b1d      	subs	r3, #29
 800346a:	4d1b      	ldr	r5, [pc, #108]	; (80034d8 <mac1_service+0xdc>)
 800346c:	2201      	movs	r2, #1
 800346e:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
 8003472:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <mac1_service+0xd4>)
 8003474:	7818      	ldrb	r0, [r3, #0]
 8003476:	f7ff ff65 	bl	8003344 <bacnet_read_prop>
				//printf("Bacnet read prop %d %d %d Analog ",invokeid,readpropa_list[bac_inst-rdp_count],bac_inst);
				printf("Bacnet Read Analog input %d - ",readpropa_list[bac_inst-rdp_count]);
 800347a:	4c12      	ldr	r4, [pc, #72]	; (80034c4 <mac1_service+0xc8>)
 800347c:	7823      	ldrb	r3, [r4, #0]
 800347e:	3b1d      	subs	r3, #29
 8003480:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
 8003484:	4815      	ldr	r0, [pc, #84]	; (80034dc <mac1_service+0xe0>)
 8003486:	f000 ff9d 	bl	80043c4 <iprintf>
				bac_inst++;
 800348a:	7823      	ldrb	r3, [r4, #0]
 800348c:	3301      	adds	r3, #1
 800348e:	7023      	strb	r3, [r4, #0]
			}
			bac_timeout = Sys_GetTick() + 400;
 8003490:	f000 fa7a 	bl	8003988 <Sys_GetTick>
 8003494:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 8003498:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <mac1_service+0xbc>)
 800349a:	6018      	str	r0, [r3, #0]
			invoke_id_str[bac_inst] = invokeid++;
 800349c:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <mac1_service+0xc8>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	490b      	ldr	r1, [pc, #44]	; (80034d0 <mac1_service+0xd4>)
 80034a2:	780a      	ldrb	r2, [r1, #0]
 80034a4:	1c50      	adds	r0, r2, #1
 80034a6:	7008      	strb	r0, [r1, #0]
 80034a8:	490d      	ldr	r1, [pc, #52]	; (80034e0 <mac1_service+0xe4>)
 80034aa:	54ca      	strb	r2, [r1, r3]
			//}
			if(bac_inst >= (rdp_count+rdpa_count)){
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d902      	bls.n	80034b6 <mac1_service+0xba>
				bac_inst = 0;
 80034b0:	2200      	movs	r2, #0
 80034b2:	4b04      	ldr	r3, [pc, #16]	; (80034c4 <mac1_service+0xc8>)
 80034b4:	701a      	strb	r2, [r3, #0]
 80034b6:	bd38      	pop	{r3, r4, r5, pc}
 80034b8:	20000bd8 	.word	0x20000bd8
 80034bc:	20001525 	.word	0x20001525
 80034c0:	08006ee8 	.word	0x08006ee8
 80034c4:	20001549 	.word	0x20001549
 80034c8:	08006f00 	.word	0x08006f00
 80034cc:	200005fc 	.word	0x200005fc
 80034d0:	20001509 	.word	0x20001509
 80034d4:	08006f34 	.word	0x08006f34
 80034d8:	2000064c 	.word	0x2000064c
 80034dc:	08006f54 	.word	0x08006f54
 80034e0:	20001528 	.word	0x20001528

080034e4 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main()
{
 80034e4:	b538      	push	{r3, r4, r5, lr}
	//uint8_t mode;
	uint32_t display_timeout;
	uint32_t tcp_timeout;
	sys_init();
 80034e6:	f000 f92f 	bl	8003748 <sys_init>
	printf("\n-------------------------\n");
 80034ea:	483a      	ldr	r0, [pc, #232]	; (80035d4 <main+0xf0>)
 80034ec:	f000 ff8e 	bl	800440c <puts>
	printf("Starting Ethernet Init \n");
 80034f0:	4839      	ldr	r0, [pc, #228]	; (80035d8 <main+0xf4>)
 80034f2:	f000 ff8b 	bl	800440c <puts>
	mac0_init();
 80034f6:	f7ff f8c7 	bl	8002688 <mac0_init>
	mac1_init();
 80034fa:	f7ff fe13 	bl	8003124 <mac1_init>
	Sys_Delay(100);
 80034fe:	2064      	movs	r0, #100	; 0x64
 8003500:	f000 fa48 	bl	8003994 <Sys_Delay>
	printf("Init completed\n");
 8003504:	4835      	ldr	r0, [pc, #212]	; (80035dc <main+0xf8>)
 8003506:	f000 ff81 	bl	800440c <puts>
	tcp_timeout = Sys_GetTick() + 8000;
 800350a:	f000 fa3d 	bl	8003988 <Sys_GetTick>
 800350e:	f500 54fa 	add.w	r4, r0, #8000	; 0x1f40
	mac0_service(1,1,0);
 8003512:	2200      	movs	r2, #0
 8003514:	2101      	movs	r1, #1
 8003516:	4608      	mov	r0, r1
 8003518:	f7ff fb9c 	bl	8002c54 <mac0_service>
	while(tcp_timeout>Sys_GetTick()){
 800351c:	e001      	b.n	8003522 <main+0x3e>
		mac0_tick();
 800351e:	f7fe ff7b 	bl	8002418 <mac0_tick>
	mac1_init();
	Sys_Delay(100);
	printf("Init completed\n");
	tcp_timeout = Sys_GetTick() + 8000;
	mac0_service(1,1,0);
	while(tcp_timeout>Sys_GetTick()){
 8003522:	f000 fa31 	bl	8003988 <Sys_GetTick>
 8003526:	4284      	cmp	r4, r0
 8003528:	d8f9      	bhi.n	800351e <main+0x3a>
		mac0_tick();
	}
	//set_date();
	//mode = 0;
	//Sys_Delay(5000);
	tcp_timeout = Sys_GetTick() + 8000;
 800352a:	f000 fa2d 	bl	8003988 <Sys_GetTick>
 800352e:	f500 54fa 	add.w	r4, r0, #8000	; 0x1f40
	mac0_service(1,0,9);
 8003532:	2209      	movs	r2, #9
 8003534:	2100      	movs	r1, #0
 8003536:	2001      	movs	r0, #1
 8003538:	f7ff fb8c 	bl	8002c54 <mac0_service>
	while(tcp_timeout>Sys_GetTick()){
 800353c:	e001      	b.n	8003542 <main+0x5e>
		mac0_tick();
 800353e:	f7fe ff6b 	bl	8002418 <mac0_tick>
	//set_date();
	//mode = 0;
	//Sys_Delay(5000);
	tcp_timeout = Sys_GetTick() + 8000;
	mac0_service(1,0,9);
	while(tcp_timeout>Sys_GetTick()){
 8003542:	f000 fa21 	bl	8003988 <Sys_GetTick>
 8003546:	4284      	cmp	r4, r0
 8003548:	d8f9      	bhi.n	800353e <main+0x5a>
		mac0_tick();
	}
	while(1)
	{
		//Sys_Delay(1000);
		display_timeout = Sys_GetTick();
 800354a:	f000 fa1d 	bl	8003988 <Sys_GetTick>
 800354e:	4604      	mov	r4, r0
		//printf("1 %d ",periodic_timer);

		mac0_tick();
 8003550:	f7fe ff62 	bl	8002418 <mac0_tick>
		mac0_service(1,0,0);
 8003554:	2200      	movs	r2, #0
 8003556:	4611      	mov	r1, r2
 8003558:	2001      	movs	r0, #1
 800355a:	f7ff fb7b 	bl	8002c54 <mac0_service>
		mac1_tick();
 800355e:	f7ff fdc3 	bl	80030e8 <mac1_tick>

		if(set_bacnet_bin_alarm)
 8003562:	4b1f      	ldr	r3, [pc, #124]	; (80035e0 <main+0xfc>)
 8003564:	8819      	ldrh	r1, [r3, #0]
 8003566:	b161      	cbz	r1, 8003582 <main+0x9e>
		{
			printf("Bacnet Alarm %d \n",set_bacnet_bin_alarm);
 8003568:	481e      	ldr	r0, [pc, #120]	; (80035e4 <main+0x100>)
 800356a:	f000 ff2b 	bl	80043c4 <iprintf>
			mac0_service(set_bacnet_bin_alarm_active,0,set_bacnet_bin_alarm);
 800356e:	4d1e      	ldr	r5, [pc, #120]	; (80035e8 <main+0x104>)
 8003570:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <main+0xfc>)
 8003572:	781a      	ldrb	r2, [r3, #0]
 8003574:	2100      	movs	r1, #0
 8003576:	7828      	ldrb	r0, [r5, #0]
 8003578:	f7ff fb6c 	bl	8002c54 <mac0_service>
			set_bacnet_bin_alarm_active = 0;
 800357c:	2300      	movs	r3, #0
 800357e:	702b      	strb	r3, [r5, #0]
 8003580:	e00e      	b.n	80035a0 <main+0xbc>
		}else if(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_3))
 8003582:	2108      	movs	r1, #8
 8003584:	4819      	ldr	r0, [pc, #100]	; (80035ec <main+0x108>)
 8003586:	f7fd f983 	bl	8000890 <GPIO_ReadInputDataBit>
 800358a:	b148      	cbz	r0, 80035a0 <main+0xbc>
		{
			printf("Bacnet Alarm %d \n",set_bacnet_bin_alarm);
 800358c:	4b14      	ldr	r3, [pc, #80]	; (80035e0 <main+0xfc>)
 800358e:	8819      	ldrh	r1, [r3, #0]
 8003590:	4814      	ldr	r0, [pc, #80]	; (80035e4 <main+0x100>)
 8003592:	f000 ff17 	bl	80043c4 <iprintf>
			mac0_service(1,0,4);
 8003596:	2204      	movs	r2, #4
 8003598:	2100      	movs	r1, #0
 800359a:	2001      	movs	r0, #1
 800359c:	f7ff fb5a 	bl	8002c54 <mac0_service>
		}

		mac1_service();
 80035a0:	f7ff ff2c 	bl	80033fc <mac1_service>
//		printf("-\r");
		if((display_timeout%20000) == 0){
 80035a4:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <main+0x10c>)
 80035a6:	fba3 2304 	umull	r2, r3, r3, r4
 80035aa:	0b9b      	lsrs	r3, r3, #14
 80035ac:	f644 6220 	movw	r2, #20000	; 0x4e20
 80035b0:	fb02 4313 	mls	r3, r2, r3, r4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1c8      	bne.n	800354a <main+0x66>
			get_RTC();
 80035b8:	f7fd fc02 	bl	8000dc0 <get_RTC>
			display_date();
 80035bc:	f7fd fce6 	bl	8000f8c <display_date>
			printf(" : \n");
 80035c0:	480c      	ldr	r0, [pc, #48]	; (80035f4 <main+0x110>)
 80035c2:	f000 ff23 	bl	800440c <puts>
			mac0_service(1,0,8);
 80035c6:	2208      	movs	r2, #8
 80035c8:	2100      	movs	r1, #0
 80035ca:	2001      	movs	r0, #1
 80035cc:	f7ff fb42 	bl	8002c54 <mac0_service>
 80035d0:	e7bb      	b.n	800354a <main+0x66>
 80035d2:	bf00      	nop
 80035d4:	08006f74 	.word	0x08006f74
 80035d8:	08006f90 	.word	0x08006f90
 80035dc:	08006fa8 	.word	0x08006fa8
 80035e0:	20000bfa 	.word	0x20000bfa
 80035e4:	08006fb8 	.word	0x08006fb8
 80035e8:	20000bfc 	.word	0x20000bfc
 80035ec:	40010800 	.word	0x40010800
 80035f0:	d1b71759 	.word	0xd1b71759
 80035f4:	08006fcc 	.word	0x08006fcc

080035f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80035f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003630 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80035fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80035fe:	e003      	b.n	8003608 <LoopCopyDataInit>

08003600 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003600:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8003602:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003604:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003606:	3104      	adds	r1, #4

08003608 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003608:	480b      	ldr	r0, [pc, #44]	; (8003638 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800360a:	4b0c      	ldr	r3, [pc, #48]	; (800363c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 800360c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800360e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003610:	d3f6      	bcc.n	8003600 <CopyDataInit>
	ldr	r2, =_sbss
 8003612:	4a0b      	ldr	r2, [pc, #44]	; (8003640 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8003614:	e002      	b.n	800361c <LoopFillZerobss>

08003616 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003616:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003618:	f842 3b04 	str.w	r3, [r2], #4

0800361c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800361c:	4b09      	ldr	r3, [pc, #36]	; (8003644 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 800361e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003620:	d3f9      	bcc.n	8003616 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003622:	f000 fddd 	bl	80041e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003626:	f002 fd8f 	bl	8006148 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800362a:	f7ff ff5b 	bl	80034e4 <main>
	bx	lr
 800362e:	4770      	bx	lr

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003630:	20005000 	.word	0x20005000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8003634:	08007348 	.word	0x08007348
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003638:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800363c:	20000b60 	.word	0x20000b60
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8003640:	20000b60 	.word	0x20000b60
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8003644:	20001a5c 	.word	0x20001a5c

08003648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003648:	e7fe      	b.n	8003648 <ADC1_2_IRQHandler>
	...

0800364c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800364c:	b508      	push	{r3, lr}
	printf("NMI Fault");
 800364e:	4802      	ldr	r0, [pc, #8]	; (8003658 <NMI_Handler+0xc>)
 8003650:	f000 feb8 	bl	80043c4 <iprintf>
 8003654:	e7fe      	b.n	8003654 <NMI_Handler+0x8>
 8003656:	bf00      	nop
 8003658:	08006fd0 	.word	0x08006fd0

0800365c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800365c:	b508      	push	{r3, lr}
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
	  printf("HardFault");
 800365e:	4802      	ldr	r0, [pc, #8]	; (8003668 <HardFault_Handler+0xc>)
 8003660:	f000 feb0 	bl	80043c4 <iprintf>
 8003664:	e7fe      	b.n	8003664 <HardFault_Handler+0x8>
 8003666:	bf00      	nop
 8003668:	08006fdc 	.word	0x08006fdc

0800366c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800366c:	e7fe      	b.n	800366c <MemManage_Handler>
 800366e:	bf00      	nop

08003670 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003670:	e7fe      	b.n	8003670 <BusFault_Handler>
 8003672:	bf00      	nop

08003674 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003674:	e7fe      	b.n	8003674 <UsageFault_Handler>
 8003676:	bf00      	nop

08003678 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop

0800367c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop

08003680 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop

08003684 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop

08003688 <myGPIO_Init>:
#include <stdio.h>
#include "sys_timer.h"
#include "sys_spi.h"
#include "sys_usart.h"
void myGPIO_Init(void)
{
 8003688:	b570      	push	{r4, r5, r6, lr}
 800368a:	b082      	sub	sp, #8
	GPIO_InitTypeDef GPIO_InitStruct;
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800368c:	2101      	movs	r1, #1
 800368e:	2010      	movs	r0, #16
 8003690:	f7fd f996 	bl	80009c0 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 8003694:	2510      	movs	r5, #16
 8003696:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_13;
 800369a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800369e:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 80036a2:	2401      	movs	r4, #1
 80036a4:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_Init(GPIOC,&GPIO_InitStruct);
 80036a8:	a901      	add	r1, sp, #4
 80036aa:	4824      	ldr	r0, [pc, #144]	; (800373c <myGPIO_Init+0xb4>)
 80036ac:	f7fd f8a2 	bl	80007f4 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80036b0:	4621      	mov	r1, r4
 80036b2:	2008      	movs	r0, #8
 80036b4:	f7fd f984 	bl	80009c0 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 80036b8:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6;
 80036bc:	2340      	movs	r3, #64	; 0x40
 80036be:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 80036c2:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_Init(GPIOB,&GPIO_InitStruct);
 80036c6:	4e1e      	ldr	r6, [pc, #120]	; (8003740 <myGPIO_Init+0xb8>)
 80036c8:	a901      	add	r1, sp, #4
 80036ca:	4630      	mov	r0, r6
 80036cc:	f7fd f892 	bl	80007f4 <GPIO_Init>
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 80036d0:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_7;
 80036d4:	2380      	movs	r3, #128	; 0x80
 80036d6:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 80036da:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_Init(GPIOB,&GPIO_InitStruct);
 80036de:	a901      	add	r1, sp, #4
 80036e0:	4630      	mov	r0, r6
 80036e2:	f7fd f887 	bl	80007f4 <GPIO_Init>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80036e6:	4621      	mov	r1, r4
 80036e8:	2004      	movs	r0, #4
 80036ea:	f7fd f969 	bl	80009c0 <RCC_APB2PeriphClockCmd>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;
 80036ee:	2348      	movs	r3, #72	; 0x48
 80036f0:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_4;
 80036f4:	f8ad 5004 	strh.w	r5, [sp, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 80036f8:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 80036fc:	4d11      	ldr	r5, [pc, #68]	; (8003744 <myGPIO_Init+0xbc>)
 80036fe:	a901      	add	r1, sp, #4
 8003700:	4628      	mov	r0, r5
 8003702:	f7fd f877 	bl	80007f4 <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPD;
 8003706:	2628      	movs	r6, #40	; 0x28
 8003708:	f88d 6007 	strb.w	r6, [sp, #7]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2;
 800370c:	2304      	movs	r3, #4
 800370e:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8003712:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8003716:	eb0d 0103 	add.w	r1, sp, r3
 800371a:	4628      	mov	r0, r5
 800371c:	f7fd f86a 	bl	80007f4 <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPD;
 8003720:	f88d 6007 	strb.w	r6, [sp, #7]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3;
 8003724:	2308      	movs	r3, #8
 8003726:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 800372a:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 800372e:	a901      	add	r1, sp, #4
 8003730:	4628      	mov	r0, r5
 8003732:	f7fd f85f 	bl	80007f4 <GPIO_Init>
}
 8003736:	b002      	add	sp, #8
 8003738:	bd70      	pop	{r4, r5, r6, pc}
 800373a:	bf00      	nop
 800373c:	40011000 	.word	0x40011000
 8003740:	40010c00 	.word	0x40010c00
 8003744:	40010800 	.word	0x40010800

08003748 <sys_init>:
//         configuration. User can add here some code to deal with this error */
//  }
//}

void sys_init(void)
{
 8003748:	b508      	push	{r3, lr}

	//SetClock();
	myGPIO_Init();
 800374a:	f7ff ff9d 	bl	8003688 <myGPIO_Init>
	sys_timer_init();
 800374e:	f000 f8e1 	bl	8003914 <sys_timer_init>
	myUSART3_Init();
 8003752:	f000 faab 	bl	8003cac <myUSART3_Init>
	myUSART1_Init();
 8003756:	f000 faf5 	bl	8003d44 <myUSART1_Init>
	mySPI2_Init();
 800375a:	f000 f807 	bl	800376c <mySPI2_Init>
	mySPI1_Init();
 800375e:	f000 f873 	bl	8003848 <mySPI1_Init>
	//Sys_Delay(2000);
	RTC_Init();
 8003762:	f000 fa63 	bl	8003c2c <RTC_Init>
	GetCfg();
 8003766:	f000 fbc1 	bl	8003eec <GetCfg>
 800376a:	bd08      	pop	{r3, pc}

0800376c <mySPI2_Init>:
 */
#include "sys_spi.h"
#include "stm32f10x_spi.h"

void mySPI2_Init(void)
{
 800376c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003770:	b087      	sub	sp, #28
	SPI_InitTypeDef SPI_InitStruct;
	GPIO_InitTypeDef GPIO_InitStruct;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8003772:	2101      	movs	r1, #1
 8003774:	2004      	movs	r0, #4
 8003776:	f7fd f923 	bl	80009c0 <RCC_APB2PeriphClockCmd>
	//GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;//GPIO_Mode_Out_PP;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 800377a:	2310      	movs	r3, #16
 800377c:	f88d 3003 	strb.w	r3, [sp, #3]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_8;
 8003780:	f44f 7980 	mov.w	r9, #256	; 0x100
 8003784:	f8ad 9000 	strh.w	r9, [sp]
	//GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;//GPIO_Speed_10MHz;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8003788:	2401      	movs	r4, #1
 800378a:	f88d 4002 	strb.w	r4, [sp, #2]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 800378e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8003844 <mySPI2_Init+0xd8>
 8003792:	4669      	mov	r1, sp
 8003794:	4640      	mov	r0, r8
 8003796:	f7fd f82d 	bl	80007f4 <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 800379a:	2518      	movs	r5, #24
 800379c:	f88d 5003 	strb.w	r5, [sp, #3]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_13;
 80037a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037a4:	f8ad 3000 	strh.w	r3, [sp]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 80037a8:	f88d 4002 	strb.w	r4, [sp, #2]
	GPIO_Init(GPIOB,&GPIO_InitStruct);
 80037ac:	4e23      	ldr	r6, [pc, #140]	; (800383c <mySPI2_Init+0xd0>)
 80037ae:	4669      	mov	r1, sp
 80037b0:	4630      	mov	r0, r6
 80037b2:	f7fd f81f 	bl	80007f4 <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPD;
 80037b6:	2328      	movs	r3, #40	; 0x28
 80037b8:	f88d 3003 	strb.w	r3, [sp, #3]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_14;
 80037bc:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 80037c0:	f8ad 7000 	strh.w	r7, [sp]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 80037c4:	f88d 4002 	strb.w	r4, [sp, #2]
	GPIO_Init(GPIOB,&GPIO_InitStruct);
 80037c8:	4669      	mov	r1, sp
 80037ca:	4630      	mov	r0, r6
 80037cc:	f7fd f812 	bl	80007f4 <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 80037d0:	f88d 5003 	strb.w	r5, [sp, #3]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_15;
 80037d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d8:	f8ad 3000 	strh.w	r3, [sp]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 80037dc:	f88d 4002 	strb.w	r4, [sp, #2]
	GPIO_Init(GPIOB,&GPIO_InitStruct);
 80037e0:	4669      	mov	r1, sp
 80037e2:	4630      	mov	r0, r6
 80037e4:	f7fd f806 	bl	80007f4 <GPIO_Init>

	GPIO_ResetBits(GPIOA,GPIO_Pin_8);
 80037e8:	4649      	mov	r1, r9
 80037ea:	4640      	mov	r0, r8
 80037ec:	f7fd f85a 	bl	80008a4 <GPIO_ResetBits>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 80037f0:	4621      	mov	r1, r4
 80037f2:	4638      	mov	r0, r7
 80037f4:	f7fd f8f2 	bl	80009dc <RCC_APB1PeriphClockCmd>

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80037f8:	2300      	movs	r3, #0
 80037fa:	f8ad 3004 	strh.w	r3, [sp, #4]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 80037fe:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003802:	f8ad 2006 	strh.w	r2, [sp, #6]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 8003806:	f8ad 3008 	strh.w	r3, [sp, #8]
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 800380a:	f8ad 300a 	strh.w	r3, [sp, #10]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 800380e:	f8ad 300c 	strh.w	r3, [sp, #12]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set;
 8003812:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003816:	f8ad 200e 	strh.w	r2, [sp, #14]
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;//SPI_BaudRatePrescaler_256;
 800381a:	f8ad 5010 	strh.w	r5, [sp, #16]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 800381e:	f8ad 3012 	strh.w	r3, [sp, #18]

	SPI_Init(SPI2, &SPI_InitStruct);
 8003822:	4d07      	ldr	r5, [pc, #28]	; (8003840 <mySPI2_Init+0xd4>)
 8003824:	a901      	add	r1, sp, #4
 8003826:	4628      	mov	r0, r5
 8003828:	f7fd f980 	bl	8000b2c <SPI_Init>

	SPI_Cmd(SPI2, ENABLE);
 800382c:	4621      	mov	r1, r4
 800382e:	4628      	mov	r0, r5
 8003830:	f7fd f9a2 	bl	8000b78 <SPI_Cmd>
}
 8003834:	b007      	add	sp, #28
 8003836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800383a:	bf00      	nop
 800383c:	40010c00 	.word	0x40010c00
 8003840:	40003800 	.word	0x40003800
 8003844:	40010800 	.word	0x40010800

08003848 <mySPI1_Init>:


void mySPI1_Init(void)
{
 8003848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800384a:	b087      	sub	sp, #28
	SPI_InitTypeDef SPI_InitStruct;
	GPIO_InitTypeDef GPIO_InitStruct;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 800384c:	2101      	movs	r1, #1
 800384e:	2008      	movs	r0, #8
 8003850:	f7fd f8b6 	bl	80009c0 <RCC_APB2PeriphClockCmd>
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 8003854:	2310      	movs	r3, #16
 8003856:	f88d 3003 	strb.w	r3, [sp, #3]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
 800385a:	2401      	movs	r4, #1
 800385c:	f8ad 4000 	strh.w	r4, [sp]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8003860:	f88d 4002 	strb.w	r4, [sp, #2]
	GPIO_Init(GPIOB,&GPIO_InitStruct);
 8003864:	4f28      	ldr	r7, [pc, #160]	; (8003908 <mySPI1_Init+0xc0>)
 8003866:	4669      	mov	r1, sp
 8003868:	4638      	mov	r0, r7
 800386a:	f7fc ffc3 	bl	80007f4 <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 800386e:	2518      	movs	r5, #24
 8003870:	f88d 5003 	strb.w	r5, [sp, #3]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_5;
 8003874:	2320      	movs	r3, #32
 8003876:	f8ad 3000 	strh.w	r3, [sp]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 800387a:	f88d 4002 	strb.w	r4, [sp, #2]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 800387e:	4e23      	ldr	r6, [pc, #140]	; (800390c <mySPI1_Init+0xc4>)
 8003880:	4669      	mov	r1, sp
 8003882:	4630      	mov	r0, r6
 8003884:	f7fc ffb6 	bl	80007f4 <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPD;
 8003888:	2328      	movs	r3, #40	; 0x28
 800388a:	f88d 3003 	strb.w	r3, [sp, #3]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6;
 800388e:	2340      	movs	r3, #64	; 0x40
 8003890:	f8ad 3000 	strh.w	r3, [sp]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8003894:	f88d 4002 	strb.w	r4, [sp, #2]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8003898:	4669      	mov	r1, sp
 800389a:	4630      	mov	r0, r6
 800389c:	f7fc ffaa 	bl	80007f4 <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 80038a0:	f88d 5003 	strb.w	r5, [sp, #3]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_7;
 80038a4:	2380      	movs	r3, #128	; 0x80
 80038a6:	f8ad 3000 	strh.w	r3, [sp]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 80038aa:	f88d 4002 	strb.w	r4, [sp, #2]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 80038ae:	4669      	mov	r1, sp
 80038b0:	4630      	mov	r0, r6
 80038b2:	f7fc ff9f 	bl	80007f4 <GPIO_Init>

	GPIO_ResetBits(GPIOB,GPIO_Pin_0);
 80038b6:	4621      	mov	r1, r4
 80038b8:	4638      	mov	r0, r7
 80038ba:	f7fc fff3 	bl	80008a4 <GPIO_ResetBits>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80038be:	4621      	mov	r1, r4
 80038c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80038c4:	f7fd f87c 	bl	80009c0 <RCC_APB2PeriphClockCmd>

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80038c8:	2300      	movs	r3, #0
 80038ca:	f8ad 3004 	strh.w	r3, [sp, #4]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 80038ce:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038d2:	f8ad 2006 	strh.w	r2, [sp, #6]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 80038d6:	f8ad 3008 	strh.w	r3, [sp, #8]
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 80038da:	f8ad 300a 	strh.w	r3, [sp, #10]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 80038de:	f8ad 300c 	strh.w	r3, [sp, #12]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set;
 80038e2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80038e6:	f8ad 200e 	strh.w	r2, [sp, #14]
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;//SPI_BaudRatePrescaler_256;
 80038ea:	f8ad 5010 	strh.w	r5, [sp, #16]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 80038ee:	f8ad 3012 	strh.w	r3, [sp, #18]

	SPI_Init(SPI1, &SPI_InitStruct);
 80038f2:	4d07      	ldr	r5, [pc, #28]	; (8003910 <mySPI1_Init+0xc8>)
 80038f4:	a901      	add	r1, sp, #4
 80038f6:	4628      	mov	r0, r5
 80038f8:	f7fd f918 	bl	8000b2c <SPI_Init>

	SPI_Cmd(SPI1, ENABLE);
 80038fc:	4621      	mov	r1, r4
 80038fe:	4628      	mov	r0, r5
 8003900:	f7fd f93a 	bl	8000b78 <SPI_Cmd>
}
 8003904:	b007      	add	sp, #28
 8003906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003908:	40010c00 	.word	0x40010c00
 800390c:	40010800 	.word	0x40010800
 8003910:	40013000 	.word	0x40013000

08003914 <sys_timer_init>:
#include "stm32f10x_tim.h"
#include "calendar.h"
#include "sys_usart.h"
volatile uint32_t systick = 0;
volatile uint8_t led1 = 0;
void sys_timer_init(void) {
 8003914:	b510      	push	{r4, lr}
 8003916:	b084      	sub	sp, #16
	TIM_TimeBaseInitTypeDef TIM_InitStruct;
	NVIC_InitTypeDef NVIC_InitStructure;
	RCC_APB1PeriphClockCmd(RCC_APB1ENR_TIM2EN, ENABLE);
 8003918:	2101      	movs	r1, #1
 800391a:	4608      	mov	r0, r1
 800391c:	f7fd f85e 	bl	80009dc <RCC_APB1PeriphClockCmd>

	TIM_InitStruct.TIM_ClockDivision = TIM_CKD_DIV4;
 8003920:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003924:	f8ad 300a 	strh.w	r3, [sp, #10]
	TIM_InitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8003928:	2400      	movs	r4, #0
 800392a:	f8ad 4006 	strh.w	r4, [sp, #6]
	//TIM_InitStruct.TIM_Period = 4000;
	TIM_InitStruct.TIM_Period = 12000;
 800392e:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8003932:	f8ad 3008 	strh.w	r3, [sp, #8]
	TIM_InitStruct.TIM_Prescaler = 5;
 8003936:	a904      	add	r1, sp, #16
 8003938:	2305      	movs	r3, #5
 800393a:	f821 3d0c 	strh.w	r3, [r1, #-12]!
	//TIM_InitStruct.TIM_RepetitionCounter = 2;
	TIM_TimeBaseInit(TIM2, &TIM_InitStruct);
 800393e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003942:	f7fd f927 	bl	8000b94 <TIM_TimeBaseInit>

	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn; /*TIM3 interrupt*/
 8003946:	231c      	movs	r3, #28
 8003948:	f88d 3000 	strb.w	r3, [sp]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; /*Preemptive priority level 0*/
 800394c:	f88d 4001 	strb.w	r4, [sp, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3; /*From the priority level 3*/
 8003950:	2303      	movs	r3, #3
 8003952:	f88d 3002 	strb.w	r3, [sp, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; /*The IRQ channel is enabled*/
 8003956:	2401      	movs	r4, #1
 8003958:	f88d 4003 	strb.w	r4, [sp, #3]
	NVIC_Init(&NVIC_InitStructure);
 800395c:	4668      	mov	r0, sp
 800395e:	f7fc fef1 	bl	8000744 <NVIC_Init>

	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8003962:	4622      	mov	r2, r4
 8003964:	4621      	mov	r1, r4
 8003966:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800396a:	f7fd f96b 	bl	8000c44 <TIM_ITConfig>

	TIM_Cmd(TIM2, ENABLE);
 800396e:	4621      	mov	r1, r4
 8003970:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003974:	f7fd f958 	bl	8000c28 <TIM_Cmd>

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8003978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800397c:	4b01      	ldr	r3, [pc, #4]	; (8003984 <sys_timer_init+0x70>)
 800397e:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(TIM2_IRQn);

}
 8003980:	b004      	add	sp, #16
 8003982:	bd10      	pop	{r4, pc}
 8003984:	e000e100 	.word	0xe000e100

08003988 <Sys_GetTick>:
	tickstart = Sys_GetTick();
	while ((Sys_GetTick() - tickstart) < Delay) {
	}
}
uint32_t Sys_GetTick() {
	return systick;
 8003988:	4b01      	ldr	r3, [pc, #4]	; (8003990 <Sys_GetTick+0x8>)
 800398a:	6818      	ldr	r0, [r3, #0]
}
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	20000c08 	.word	0x20000c08

08003994 <Sys_Delay>:
	TIM_Cmd(TIM2, ENABLE);
	NVIC_EnableIRQ(TIM2_IRQn);

}

void Sys_Delay(uint32_t Delay) {
 8003994:	b538      	push	{r3, r4, r5, lr}
 8003996:	4605      	mov	r5, r0
	uint32_t tickstart = 0;
	tickstart = Sys_GetTick();
 8003998:	f7ff fff6 	bl	8003988 <Sys_GetTick>
 800399c:	4604      	mov	r4, r0
	while ((Sys_GetTick() - tickstart) < Delay) {
 800399e:	f7ff fff3 	bl	8003988 <Sys_GetTick>
 80039a2:	1b00      	subs	r0, r0, r4
 80039a4:	42a8      	cmp	r0, r5
 80039a6:	d3fa      	bcc.n	800399e <Sys_Delay+0xa>
	}
}
 80039a8:	bd38      	pop	{r3, r4, r5, pc}
 80039aa:	bf00      	nop

080039ac <delayMicroseconds>:
void delayMicroseconds(uint16_t Delay)
{
 80039ac:	b538      	push	{r3, r4, r5, lr}
 80039ae:	4605      	mov	r5, r0
	uint16_t tickstart = 0;
	tickstart = Sys_GetTick();
 80039b0:	f7ff ffea 	bl	8003988 <Sys_GetTick>
 80039b4:	4604      	mov	r4, r0
	while ((Sys_GetTick() - tickstart) < Delay) {
 80039b6:	f7ff ffe7 	bl	8003988 <Sys_GetTick>
 80039ba:	b2a3      	uxth	r3, r4
 80039bc:	1ac0      	subs	r0, r0, r3
 80039be:	42a8      	cmp	r0, r5
 80039c0:	d3f9      	bcc.n	80039b6 <delayMicroseconds+0xa>
	}
}
 80039c2:	bd38      	pop	{r3, r4, r5, pc}

080039c4 <TIM2_IRQHandler>:
uint32_t Sys_GetTick() {
	return systick;
}

void TIM2_IRQHandler(void) {
 80039c4:	b508      	push	{r3, lr}
	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) /*Check the TIM3 update interrupt occurs or not*/
 80039c6:	2101      	movs	r1, #1
 80039c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039cc:	f7fd f946 	bl	8000c5c <TIM_GetITStatus>
 80039d0:	b1a8      	cbz	r0, 80039fe <TIM2_IRQHandler+0x3a>
	{
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update); /*Remove TIMx update interrupt flag */
 80039d2:	2101      	movs	r1, #1
 80039d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039d8:	f7fd f94c 	bl	8000c74 <TIM_ClearITPendingBit>
        led1 = !led1;
 80039dc:	4b08      	ldr	r3, [pc, #32]	; (8003a00 <TIM2_IRQHandler+0x3c>)
 80039de:	781a      	ldrb	r2, [r3, #0]
 80039e0:	f012 0fff 	tst.w	r2, #255	; 0xff
 80039e4:	bf0c      	ite	eq
 80039e6:	2201      	moveq	r2, #1
 80039e8:	2200      	movne	r2, #0
 80039ea:	701a      	strb	r2, [r3, #0]
        GPIO_WriteBit(GPIOB,GPIO_Pin_7,led1);
 80039ec:	781a      	ldrb	r2, [r3, #0]
 80039ee:	2180      	movs	r1, #128	; 0x80
 80039f0:	4804      	ldr	r0, [pc, #16]	; (8003a04 <TIM2_IRQHandler+0x40>)
 80039f2:	f7fc ff59 	bl	80008a8 <GPIO_WriteBit>
		systick++;
 80039f6:	4a04      	ldr	r2, [pc, #16]	; (8003a08 <TIM2_IRQHandler+0x44>)
 80039f8:	6813      	ldr	r3, [r2, #0]
 80039fa:	3301      	adds	r3, #1
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	bd08      	pop	{r3, pc}
 8003a00:	20000c04 	.word	0x20000c04
 8003a04:	40010c00 	.word	0x40010c00
 8003a08:	20000c08 	.word	0x20000c08

08003a0c <RTC_Configuration>:

	  /* Display time in infinite loop */
	  //Time_Show();
}
void RTC_Configuration(void)
{
 8003a0c:	b508      	push	{r3, lr}
  /* Enable PWR and BKP clocks */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);
 8003a0e:	2101      	movs	r1, #1
 8003a10:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
 8003a14:	f7fc ffe2 	bl	80009dc <RCC_APB1PeriphClockCmd>

  /* Allow access to BKP Domain */
  PWR_BackupAccessCmd(ENABLE);
 8003a18:	2001      	movs	r0, #1
 8003a1a:	f7fc ff4b 	bl	80008b4 <PWR_BackupAccessCmd>

  /* Reset Backup Domain */
  BKP_DeInit();
 8003a1e:	f7fc fec3 	bl	80007a8 <BKP_DeInit>

  /* Enable LSE */
  RCC_LSEConfig(RCC_LSE_ON);
 8003a22:	2001      	movs	r0, #1
 8003a24:	f7fc ff4c 	bl	80008c0 <RCC_LSEConfig>
  /* Wait till LSE is ready */
  while (RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET)
 8003a28:	2041      	movs	r0, #65	; 0x41
 8003a2a:	f7fc ffeb 	bl	8000a04 <RCC_GetFlagStatus>
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	d0fa      	beq.n	8003a28 <RTC_Configuration+0x1c>
  {}

  /* Select LSE as RTC Clock Source */
  RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);
 8003a32:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003a36:	f7fc ff57 	bl	80008e8 <RCC_RTCCLKConfig>

  /* Enable RTC Clock */
  RCC_RTCCLKCmd(ENABLE);
 8003a3a:	2001      	movs	r0, #1
 8003a3c:	f7fc ff5c 	bl	80008f8 <RCC_RTCCLKCmd>

  /* Wait for RTC registers synchronization */
  RTC_WaitForSynchro();
 8003a40:	f7fd f862 	bl	8000b08 <RTC_WaitForSynchro>

  /* Wait until last write operation on RTC registers has finished */
  RTC_WaitForLastTask();
 8003a44:	f7fd f856 	bl	8000af4 <RTC_WaitForLastTask>

  /* Enable the RTC Second */
  RTC_ITConfig(RTC_IT_SEC, ENABLE);
 8003a48:	2101      	movs	r1, #1
 8003a4a:	4608      	mov	r0, r1
 8003a4c:	f7fc fffc 	bl	8000a48 <RTC_ITConfig>

  /* Wait until last write operation on RTC registers has finished */
  RTC_WaitForLastTask();
 8003a50:	f7fd f850 	bl	8000af4 <RTC_WaitForLastTask>

  /* Set RTC prescaler: set RTC period to 1sec */
  //RTC_SetPrescaler(32767); /* RTC period = RTCCLK/RTC_PR = (32.768 KHz)/(32767+1) */
  RTC_SetPrescaler(32773); /* RTC period = RTCCLK/RTC_PR = (32.768 KHz)/(32767+1) */
 8003a54:	f248 0005 	movw	r0, #32773	; 0x8005
 8003a58:	f7fd f83c 	bl	8000ad4 <RTC_SetPrescaler>
  /* Wait until last write operation on RTC registers has finished */
  RTC_WaitForLastTask();
 8003a5c:	f7fd f84a 	bl	8000af4 <RTC_WaitForLastTask>
 8003a60:	bd08      	pop	{r3, pc}
 8003a62:	bf00      	nop

08003a64 <USART_Scanf>:
}

uint16_t USART_Scanf(uint16_t value,uint8_t len)
{
 8003a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a66:	b083      	sub	sp, #12
 8003a68:	4607      	mov	r7, r0
 8003a6a:	460e      	mov	r6, r1
	uint8_t index = 0;
	uint8_t tmp[4] = {0, 0, 0, 0};
 8003a6c:	2500      	movs	r5, #0
 8003a6e:	9501      	str	r5, [sp, #4]
	uint16_t ret_val = 0;

	while (index < len)
 8003a70:	e01f      	b.n	8003ab2 <USART_Scanf+0x4e>
	{
		/* Loop until RXNE = 1 */
		while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET)
 8003a72:	2120      	movs	r1, #32
 8003a74:	482c      	ldr	r0, [pc, #176]	; (8003b28 <USART_Scanf+0xc4>)
 8003a76:	f7fd f97b 	bl	8000d70 <USART_GetFlagStatus>
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	d0f9      	beq.n	8003a72 <USART_Scanf+0xe>
		{}
		tmp[index] = (USART_ReceiveData(USART1));
 8003a7e:	482a      	ldr	r0, [pc, #168]	; (8003b28 <USART_Scanf+0xc4>)
 8003a80:	f7fd f972 	bl	8000d68 <USART_ReceiveData>
 8003a84:	b2c0      	uxtb	r0, r0
 8003a86:	ab02      	add	r3, sp, #8
 8003a88:	442b      	add	r3, r5
 8003a8a:	f803 0c04 	strb.w	r0, [r3, #-4]
		USART1_Send(tmp[index++]);
 8003a8e:	1c6c      	adds	r4, r5, #1
 8003a90:	b2e4      	uxtb	r4, r4
 8003a92:	f000 f9a3 	bl	8003ddc <USART1_Send>
		if ((tmp[index - 1] < 0x30) || (tmp[index - 1] > 0x39))
 8003a96:	1e63      	subs	r3, r4, #1
 8003a98:	aa02      	add	r2, sp, #8
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8003aa0:	3b30      	subs	r3, #48	; 0x30
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b09      	cmp	r3, #9
 8003aa6:	d903      	bls.n	8003ab0 <USART_Scanf+0x4c>
		{
			printf("\n\rPlease enter valid number between 0 and 9");
 8003aa8:	4820      	ldr	r0, [pc, #128]	; (8003b2c <USART_Scanf+0xc8>)
 8003aaa:	f000 fc8b 	bl	80043c4 <iprintf>
 8003aae:	e000      	b.n	8003ab2 <USART_Scanf+0x4e>
	{
		/* Loop until RXNE = 1 */
		while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET)
		{}
		tmp[index] = (USART_ReceiveData(USART1));
		USART1_Send(tmp[index++]);
 8003ab0:	4625      	mov	r5, r4
{
	uint8_t index = 0;
	uint8_t tmp[4] = {0, 0, 0, 0};
	uint16_t ret_val = 0;

	while (index < len)
 8003ab2:	42b5      	cmp	r5, r6
 8003ab4:	d3dd      	bcc.n	8003a72 <USART_Scanf+0xe>
			printf("\n\rPlease enter valid number between 0 and 9");
			index--;
		}
	}
	/* Calculate the Corresponding value */
	if(len == 4){
 8003ab6:	2e04      	cmp	r6, #4
 8003ab8:	d11d      	bne.n	8003af6 <USART_Scanf+0x92>
		ret_val = (tmp[3] - 0x30) + ((tmp[2] - 0x30) * 10) + ((tmp[1] - 0x30) * 100) + ((tmp[0] - 0x30) * 1000);
 8003aba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003abe:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8003ac2:	3830      	subs	r0, #48	; 0x30
 8003ac4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003ac8:	3a30      	subs	r2, #48	; 0x30
 8003aca:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8003ace:	3930      	subs	r1, #48	; 0x30
 8003ad0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003ad4:	0044      	lsls	r4, r0, #1
 8003ad6:	4423      	add	r3, r4
 8003ad8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003adc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003ae0:	0090      	lsls	r0, r2, #2
 8003ae2:	4403      	add	r3, r0
 8003ae4:	ebc1 1241 	rsb	r2, r1, r1, lsl #5
 8003ae8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8003aec:	00c8      	lsls	r0, r1, #3
 8003aee:	4418      	add	r0, r3
 8003af0:	3830      	subs	r0, #48	; 0x30
 8003af2:	b280      	uxth	r0, r0
 8003af4:	e00e      	b.n	8003b14 <USART_Scanf+0xb0>
	}else if(len == 2){
 8003af6:	2e02      	cmp	r6, #2
 8003af8:	d10b      	bne.n	8003b12 <USART_Scanf+0xae>
		ret_val = (tmp[1] - 0x30) + ((tmp[0] - 0x30) * 10);
 8003afa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003afe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003b02:	3a30      	subs	r2, #48	; 0x30
 8003b04:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003b08:	0050      	lsls	r0, r2, #1
 8003b0a:	4418      	add	r0, r3
 8003b0c:	3830      	subs	r0, #48	; 0x30
 8003b0e:	b280      	uxth	r0, r0
 8003b10:	e000      	b.n	8003b14 <USART_Scanf+0xb0>

uint16_t USART_Scanf(uint16_t value,uint8_t len)
{
	uint8_t index = 0;
	uint8_t tmp[4] = {0, 0, 0, 0};
	uint16_t ret_val = 0;
 8003b12:	2000      	movs	r0, #0
		ret_val = (tmp[3] - 0x30) + ((tmp[2] - 0x30) * 10) + ((tmp[1] - 0x30) * 100) + ((tmp[0] - 0x30) * 1000);
	}else if(len == 2){
		ret_val = (tmp[1] - 0x30) + ((tmp[0] - 0x30) * 10);
	}
	/* Checks */
	if (ret_val > value)
 8003b14:	42b8      	cmp	r0, r7
 8003b16:	d904      	bls.n	8003b22 <USART_Scanf+0xbe>
	{
		printf("\n\rPlease enter valid number between 0 and %d ", value);
 8003b18:	4639      	mov	r1, r7
 8003b1a:	4805      	ldr	r0, [pc, #20]	; (8003b30 <USART_Scanf+0xcc>)
 8003b1c:	f000 fc52 	bl	80043c4 <iprintf>
		return 0xFF;
 8003b20:	20ff      	movs	r0, #255	; 0xff
	}
	return ret_val;
}
 8003b22:	b003      	add	sp, #12
 8003b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40013800 	.word	0x40013800
 8003b2c:	08006fe8 	.word	0x08006fe8
 8003b30:	08007014 	.word	0x08007014

08003b34 <Time_Regulate>:
  * @brief  Returns the time entered by user, using Hyperterminal.
  * @param  None
  * @retval Current time RTC counter value
  */
uint32_t Time_Regulate(void)
{
 8003b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b38:	b082      	sub	sp, #8
	uint16_t Tmp_YY = 0xFFFF;
	uint8_t Tmp_MO = 0xFF, Tmp_DD = 0xFF, Tmp_HH = 0xFF, Tmp_MM = 0xFF, Tmp_SS = 0xFF;

	printf("\r\n==============Time Settings=====================================");
 8003b3a:	482f      	ldr	r0, [pc, #188]	; (8003bf8 <Time_Regulate+0xc4>)
 8003b3c:	f000 fc42 	bl	80043c4 <iprintf>
	printf("\r\n  Please Set Year:");
 8003b40:	482e      	ldr	r0, [pc, #184]	; (8003bfc <Time_Regulate+0xc8>)
 8003b42:	f000 fc3f 	bl	80043c4 <iprintf>
  * @param  None
  * @retval Current time RTC counter value
  */
uint32_t Time_Regulate(void)
{
	uint16_t Tmp_YY = 0xFFFF;
 8003b46:	f64f 74ff 	movw	r4, #65535	; 0xffff
	uint8_t Tmp_MO = 0xFF, Tmp_DD = 0xFF, Tmp_HH = 0xFF, Tmp_MM = 0xFF, Tmp_SS = 0xFF;

	printf("\r\n==============Time Settings=====================================");
	printf("\r\n  Please Set Year:");
	while (Tmp_YY == 0xFFFF)
 8003b4a:	e005      	b.n	8003b58 <Time_Regulate+0x24>
	{
	 Tmp_YY = USART_Scanf(2099,4);
 8003b4c:	2104      	movs	r1, #4
 8003b4e:	f640 0033 	movw	r0, #2099	; 0x833
 8003b52:	f7ff ff87 	bl	8003a64 <USART_Scanf>
 8003b56:	4604      	mov	r4, r0
	uint16_t Tmp_YY = 0xFFFF;
	uint8_t Tmp_MO = 0xFF, Tmp_DD = 0xFF, Tmp_HH = 0xFF, Tmp_MM = 0xFF, Tmp_SS = 0xFF;

	printf("\r\n==============Time Settings=====================================");
	printf("\r\n  Please Set Year:");
	while (Tmp_YY == 0xFFFF)
 8003b58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b5c:	429c      	cmp	r4, r3
 8003b5e:	d0f5      	beq.n	8003b4c <Time_Regulate+0x18>
	{
	 Tmp_YY = USART_Scanf(2099,4);
	}
	printf("\r\n  Please Set Month:");
 8003b60:	4827      	ldr	r0, [pc, #156]	; (8003c00 <Time_Regulate+0xcc>)
 8003b62:	f000 fc2f 	bl	80043c4 <iprintf>
  * @retval Current time RTC counter value
  */
uint32_t Time_Regulate(void)
{
	uint16_t Tmp_YY = 0xFFFF;
	uint8_t Tmp_MO = 0xFF, Tmp_DD = 0xFF, Tmp_HH = 0xFF, Tmp_MM = 0xFF, Tmp_SS = 0xFF;
 8003b66:	25ff      	movs	r5, #255	; 0xff
	while (Tmp_YY == 0xFFFF)
	{
	 Tmp_YY = USART_Scanf(2099,4);
	}
	printf("\r\n  Please Set Month:");
	while (Tmp_MO == 0xFF)
 8003b68:	e004      	b.n	8003b74 <Time_Regulate+0x40>
	{
	 Tmp_MO = USART_Scanf(12,2);
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	200c      	movs	r0, #12
 8003b6e:	f7ff ff79 	bl	8003a64 <USART_Scanf>
 8003b72:	b2c5      	uxtb	r5, r0
	while (Tmp_YY == 0xFFFF)
	{
	 Tmp_YY = USART_Scanf(2099,4);
	}
	printf("\r\n  Please Set Month:");
	while (Tmp_MO == 0xFF)
 8003b74:	2dff      	cmp	r5, #255	; 0xff
 8003b76:	d0f8      	beq.n	8003b6a <Time_Regulate+0x36>
	{
	 Tmp_MO = USART_Scanf(12,2);
	}
	printf("\r\n  Please Set Date:");
 8003b78:	4822      	ldr	r0, [pc, #136]	; (8003c04 <Time_Regulate+0xd0>)
 8003b7a:	f000 fc23 	bl	80043c4 <iprintf>
  * @retval Current time RTC counter value
  */
uint32_t Time_Regulate(void)
{
	uint16_t Tmp_YY = 0xFFFF;
	uint8_t Tmp_MO = 0xFF, Tmp_DD = 0xFF, Tmp_HH = 0xFF, Tmp_MM = 0xFF, Tmp_SS = 0xFF;
 8003b7e:	26ff      	movs	r6, #255	; 0xff
	while (Tmp_MO == 0xFF)
	{
	 Tmp_MO = USART_Scanf(12,2);
	}
	printf("\r\n  Please Set Date:");
	while (Tmp_DD == 0xFF)
 8003b80:	e004      	b.n	8003b8c <Time_Regulate+0x58>
	{
	 Tmp_DD = USART_Scanf(31,2);
 8003b82:	2102      	movs	r1, #2
 8003b84:	201f      	movs	r0, #31
 8003b86:	f7ff ff6d 	bl	8003a64 <USART_Scanf>
 8003b8a:	b2c6      	uxtb	r6, r0
	while (Tmp_MO == 0xFF)
	{
	 Tmp_MO = USART_Scanf(12,2);
	}
	printf("\r\n  Please Set Date:");
	while (Tmp_DD == 0xFF)
 8003b8c:	2eff      	cmp	r6, #255	; 0xff
 8003b8e:	d0f8      	beq.n	8003b82 <Time_Regulate+0x4e>
	{
	 Tmp_DD = USART_Scanf(31,2);
	}
	printf("\r\n  Please Set Hours:");
 8003b90:	481d      	ldr	r0, [pc, #116]	; (8003c08 <Time_Regulate+0xd4>)
 8003b92:	f000 fc17 	bl	80043c4 <iprintf>
  * @retval Current time RTC counter value
  */
uint32_t Time_Regulate(void)
{
	uint16_t Tmp_YY = 0xFFFF;
	uint8_t Tmp_MO = 0xFF, Tmp_DD = 0xFF, Tmp_HH = 0xFF, Tmp_MM = 0xFF, Tmp_SS = 0xFF;
 8003b96:	27ff      	movs	r7, #255	; 0xff
	{
	 Tmp_DD = USART_Scanf(31,2);
	}
	printf("\r\n  Please Set Hours:");

	while (Tmp_HH == 0xFF)
 8003b98:	e004      	b.n	8003ba4 <Time_Regulate+0x70>
	{
	Tmp_HH = USART_Scanf(23,2);
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	2017      	movs	r0, #23
 8003b9e:	f7ff ff61 	bl	8003a64 <USART_Scanf>
 8003ba2:	b2c7      	uxtb	r7, r0
	{
	 Tmp_DD = USART_Scanf(31,2);
	}
	printf("\r\n  Please Set Hours:");

	while (Tmp_HH == 0xFF)
 8003ba4:	2fff      	cmp	r7, #255	; 0xff
 8003ba6:	d0f8      	beq.n	8003b9a <Time_Regulate+0x66>
	{
	Tmp_HH = USART_Scanf(23,2);
	}
	//printf(":  %d", Tmp_HH);
	printf("\r\n  Please Set Minutes:");
 8003ba8:	4818      	ldr	r0, [pc, #96]	; (8003c0c <Time_Regulate+0xd8>)
 8003baa:	f000 fc0b 	bl	80043c4 <iprintf>
  * @retval Current time RTC counter value
  */
uint32_t Time_Regulate(void)
{
	uint16_t Tmp_YY = 0xFFFF;
	uint8_t Tmp_MO = 0xFF, Tmp_DD = 0xFF, Tmp_HH = 0xFF, Tmp_MM = 0xFF, Tmp_SS = 0xFF;
 8003bae:	f04f 08ff 	mov.w	r8, #255	; 0xff
	{
	Tmp_HH = USART_Scanf(23,2);
	}
	//printf(":  %d", Tmp_HH);
	printf("\r\n  Please Set Minutes:");
	while (Tmp_MM == 0xFF)
 8003bb2:	e005      	b.n	8003bc0 <Time_Regulate+0x8c>
	{
	Tmp_MM = USART_Scanf(59,2);
 8003bb4:	2102      	movs	r1, #2
 8003bb6:	203b      	movs	r0, #59	; 0x3b
 8003bb8:	f7ff ff54 	bl	8003a64 <USART_Scanf>
 8003bbc:	fa5f f880 	uxtb.w	r8, r0
	{
	Tmp_HH = USART_Scanf(23,2);
	}
	//printf(":  %d", Tmp_HH);
	printf("\r\n  Please Set Minutes:");
	while (Tmp_MM == 0xFF)
 8003bc0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8003bc4:	d0f6      	beq.n	8003bb4 <Time_Regulate+0x80>
	{
	Tmp_MM = USART_Scanf(59,2);
	}
	//printf(":  %d", Tmp_MM);
	printf("\r\n  Please Set Seconds:");
 8003bc6:	4812      	ldr	r0, [pc, #72]	; (8003c10 <Time_Regulate+0xdc>)
 8003bc8:	f000 fbfc 	bl	80043c4 <iprintf>
  * @retval Current time RTC counter value
  */
uint32_t Time_Regulate(void)
{
	uint16_t Tmp_YY = 0xFFFF;
	uint8_t Tmp_MO = 0xFF, Tmp_DD = 0xFF, Tmp_HH = 0xFF, Tmp_MM = 0xFF, Tmp_SS = 0xFF;
 8003bcc:	20ff      	movs	r0, #255	; 0xff
	{
	Tmp_MM = USART_Scanf(59,2);
	}
	//printf(":  %d", Tmp_MM);
	printf("\r\n  Please Set Seconds:");
	while (Tmp_SS == 0xFF)
 8003bce:	e004      	b.n	8003bda <Time_Regulate+0xa6>
	{
	Tmp_SS = USART_Scanf(59,2);
 8003bd0:	2102      	movs	r1, #2
 8003bd2:	203b      	movs	r0, #59	; 0x3b
 8003bd4:	f7ff ff46 	bl	8003a64 <USART_Scanf>
 8003bd8:	b2c0      	uxtb	r0, r0
	{
	Tmp_MM = USART_Scanf(59,2);
	}
	//printf(":  %d", Tmp_MM);
	printf("\r\n  Please Set Seconds:");
	while (Tmp_SS == 0xFF)
 8003bda:	28ff      	cmp	r0, #255	; 0xff
 8003bdc:	d0f8      	beq.n	8003bd0 <Time_Regulate+0x9c>
	Tmp_SS = USART_Scanf(59,2);
	}
	//printf(":  %d", Tmp_SS);


	return(set_RTC(Tmp_YY,  Tmp_MO,  Tmp_DD,  Tmp_HH,  Tmp_MM,  Tmp_SS));
 8003bde:	9001      	str	r0, [sp, #4]
 8003be0:	f8cd 8000 	str.w	r8, [sp]
 8003be4:	463b      	mov	r3, r7
 8003be6:	4632      	mov	r2, r6
 8003be8:	4629      	mov	r1, r5
 8003bea:	4620      	mov	r0, r4
 8003bec:	f7fd f972 	bl	8000ed4 <set_RTC>
	/* Return the value to store in RTC counter register */
	//return((Tmp_HH*3600 + Tmp_MM*60 + Tmp_SS));
}
 8003bf0:	b002      	add	sp, #8
 8003bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bf6:	bf00      	nop
 8003bf8:	08007044 	.word	0x08007044
 8003bfc:	08007088 	.word	0x08007088
 8003c00:	080070a0 	.word	0x080070a0
 8003c04:	080070b8 	.word	0x080070b8
 8003c08:	080070d0 	.word	0x080070d0
 8003c0c:	080070e8 	.word	0x080070e8
 8003c10:	08007100 	.word	0x08007100

08003c14 <Time_Adjust>:
  * @brief  Adjusts time.
  * @param  None
  * @retval None
  */
void Time_Adjust(void)
{
 8003c14:	b510      	push	{r4, lr}
	uint32_t rtc_time;
	rtc_time = Time_Regulate();
 8003c16:	f7ff ff8d 	bl	8003b34 <Time_Regulate>
 8003c1a:	4604      	mov	r4, r0
	/* Wait until last write operation on RTC registers has finished */
	RTC_WaitForLastTask();
 8003c1c:	f7fc ff6a 	bl	8000af4 <RTC_WaitForLastTask>
	/* Change the current time */
	//Time_Regulate();
	RTC_SetCounter(rtc_time);
 8003c20:	4620      	mov	r0, r4
 8003c22:	f7fc ff49 	bl	8000ab8 <RTC_SetCounter>
	/* Wait until last write operation on RTC registers has finished */
	RTC_WaitForLastTask();
 8003c26:	f7fc ff65 	bl	8000af4 <RTC_WaitForLastTask>
 8003c2a:	bd10      	pop	{r4, pc}

08003c2c <RTC_Init>:
        GPIO_WriteBit(GPIOB,GPIO_Pin_7,led1);
		systick++;
	}
}
void RTC_Init(void)
{
 8003c2c:	b508      	push	{r3, lr}
	  if (BKP_ReadBackupRegister(BKP_DR1) != 0xA5A5)
 8003c2e:	2004      	movs	r0, #4
 8003c30:	f7fc fdd0 	bl	80007d4 <BKP_ReadBackupRegister>
 8003c34:	f24a 53a5 	movw	r3, #42405	; 0xa5a5
 8003c38:	4298      	cmp	r0, r3
 8003c3a:	d00f      	beq.n	8003c5c <RTC_Init+0x30>
	  {
	    /* Backup data register value is not correct or not yet programmed (when
	       the first time the program is executed) */

	    printf("\r\n\n RTC not yet configured....");
 8003c3c:	4816      	ldr	r0, [pc, #88]	; (8003c98 <RTC_Init+0x6c>)
 8003c3e:	f000 fbc1 	bl	80043c4 <iprintf>

	    /* RTC Configuration */
	    RTC_Configuration();
 8003c42:	f7ff fee3 	bl	8003a0c <RTC_Configuration>

	    printf("\r\n RTC configured....");
 8003c46:	4815      	ldr	r0, [pc, #84]	; (8003c9c <RTC_Init+0x70>)
 8003c48:	f000 fbbc 	bl	80043c4 <iprintf>

	    /* Adjust time by values entered by the user on the hyperterminal */
	    Time_Adjust();
 8003c4c:	f7ff ffe2 	bl	8003c14 <Time_Adjust>

	    BKP_WriteBackupRegister(BKP_DR1, 0xA5A5);
 8003c50:	f24a 51a5 	movw	r1, #42405	; 0xa5a5
 8003c54:	2004      	movs	r0, #4
 8003c56:	f7fc fdaf 	bl	80007b8 <BKP_WriteBackupRegister>
 8003c5a:	e019      	b.n	8003c90 <RTC_Init+0x64>
	  }
	  else
	  {
	    /* Check if the Power On Reset flag is set */
	    if (RCC_GetFlagStatus(RCC_FLAG_PORRST) != RESET)
 8003c5c:	207b      	movs	r0, #123	; 0x7b
 8003c5e:	f7fc fed1 	bl	8000a04 <RCC_GetFlagStatus>
 8003c62:	b118      	cbz	r0, 8003c6c <RTC_Init+0x40>
	    {
	      printf("\r\n\n Power On Reset occurred....");
 8003c64:	480e      	ldr	r0, [pc, #56]	; (8003ca0 <RTC_Init+0x74>)
 8003c66:	f000 fbad 	bl	80043c4 <iprintf>
 8003c6a:	e006      	b.n	8003c7a <RTC_Init+0x4e>
	    }
	    /* Check if the Pin Reset flag is set */
	    else if (RCC_GetFlagStatus(RCC_FLAG_PINRST) != RESET)
 8003c6c:	207a      	movs	r0, #122	; 0x7a
 8003c6e:	f7fc fec9 	bl	8000a04 <RCC_GetFlagStatus>
 8003c72:	b110      	cbz	r0, 8003c7a <RTC_Init+0x4e>
	    {
	      printf("\r\n\n External Reset occurred....");
 8003c74:	480b      	ldr	r0, [pc, #44]	; (8003ca4 <RTC_Init+0x78>)
 8003c76:	f000 fba5 	bl	80043c4 <iprintf>
	    }

	    printf("\r\n No need to configure RTC....");
 8003c7a:	480b      	ldr	r0, [pc, #44]	; (8003ca8 <RTC_Init+0x7c>)
 8003c7c:	f000 fba2 	bl	80043c4 <iprintf>
	    /* Wait for RTC registers synchronization */
	    RTC_WaitForSynchro();
 8003c80:	f7fc ff42 	bl	8000b08 <RTC_WaitForSynchro>

	    /* Enable the RTC Second */
	    RTC_ITConfig(RTC_IT_SEC, ENABLE);
 8003c84:	2101      	movs	r1, #1
 8003c86:	4608      	mov	r0, r1
 8003c88:	f7fc fede 	bl	8000a48 <RTC_ITConfig>
	    /* Wait until last write operation on RTC registers has finished */
	    RTC_WaitForLastTask();
 8003c8c:	f7fc ff32 	bl	8000af4 <RTC_WaitForLastTask>
	  /* Enable RTC Clock Output on Tamper Pin */
	  BKP_RTCOutputConfig(BKP_RTCOutputSource_CalibClock);
	#endif

	  /* Clear reset flags */
	  RCC_ClearFlag();
 8003c90:	f7fc fed2 	bl	8000a38 <RCC_ClearFlag>
 8003c94:	bd08      	pop	{r3, pc}
 8003c96:	bf00      	nop
 8003c98:	08007118 	.word	0x08007118
 8003c9c:	08007138 	.word	0x08007138
 8003ca0:	08007150 	.word	0x08007150
 8003ca4:	08007170 	.word	0x08007170
 8003ca8:	08007190 	.word	0x08007190

08003cac <myUSART3_Init>:
#include "stm32f10x_usart.h"
#include "sys_timer.h"
#include <stddef.h>
#include <stdio.h>
void myUSART3_Init(void)
{
 8003cac:	b530      	push	{r4, r5, lr}
 8003cae:	b087      	sub	sp, #28
	USART_InitTypeDef USART_InitStruct;
	GPIO_InitTypeDef GPIO_InitStruct;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	2008      	movs	r0, #8
 8003cb4:	f7fc fe84 	bl	80009c0 <RCC_APB2PeriphClockCmd>
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 8003cb8:	2318      	movs	r3, #24
 8003cba:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 8003cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cc2:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8003cc6:	2401      	movs	r4, #1
 8003cc8:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_Init(GPIOB,&GPIO_InitStruct);
 8003ccc:	4d1a      	ldr	r5, [pc, #104]	; (8003d38 <myUSART3_Init+0x8c>)
 8003cce:	a901      	add	r1, sp, #4
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	f7fc fd8f 	bl	80007f4 <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003cd6:	2304      	movs	r3, #4
 8003cd8:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_11;
 8003cdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ce0:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8003ce4:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_Init(GPIOB,&GPIO_InitStruct);
 8003ce8:	a901      	add	r1, sp, #4
 8003cea:	4628      	mov	r0, r5
 8003cec:	f7fc fd82 	bl	80007f4 <GPIO_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003cf6:	f7fc fe71 	bl	80009dc <RCC_APB1PeriphClockCmd>

	USART_InitStruct.USART_BaudRate = 115200;
 8003cfa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003cfe:	9302      	str	r3, [sp, #8]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8003d00:	2300      	movs	r3, #0
 8003d02:	f8ad 300c 	strh.w	r3, [sp, #12]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8003d06:	f8ad 300e 	strh.w	r3, [sp, #14]
	USART_InitStruct.USART_Parity = USART_Parity_No ;
 8003d0a:	f8ad 3010 	strh.w	r3, [sp, #16]
	USART_InitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003d0e:	220c      	movs	r2, #12
 8003d10:	f8ad 2012 	strh.w	r2, [sp, #18]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003d14:	f8ad 3014 	strh.w	r3, [sp, #20]

	USART_Cmd(USART3, ENABLE);
 8003d18:	f5a5 4544 	sub.w	r5, r5, #50176	; 0xc400
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	4628      	mov	r0, r5
 8003d20:	f7fd f810 	bl	8000d44 <USART_Cmd>
	USART_Init(USART3,&USART_InitStruct);
 8003d24:	a902      	add	r1, sp, #8
 8003d26:	4628      	mov	r0, r5
 8003d28:	f7fc ffa8 	bl	8000c7c <USART_Init>
 8003d2c:	2280      	movs	r2, #128	; 0x80
 8003d2e:	4b03      	ldr	r3, [pc, #12]	; (8003d3c <myUSART3_Init+0x90>)
 8003d30:	605a      	str	r2, [r3, #4]
	/* Enable RXNE interrupt */
	//USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
	/* Enable USART3 global interrupt */
	NVIC_EnableIRQ(USART3_IRQn);

}
 8003d32:	b007      	add	sp, #28
 8003d34:	bd30      	pop	{r4, r5, pc}
 8003d36:	bf00      	nop
 8003d38:	40010c00 	.word	0x40010c00
 8003d3c:	e000e100 	.word	0xe000e100

08003d40 <USART1_IRQHandler>:
	USART_SendData(USART3,data);
}


void USART1_IRQHandler (void)
{
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop

08003d44 <myUSART1_Init>:

}

void myUSART1_Init(void)
{
 8003d44:	b530      	push	{r4, r5, lr}
 8003d46:	b087      	sub	sp, #28
	USART_InitTypeDef USART_InitStruct;
	GPIO_InitTypeDef GPIO_InitStruct;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8003d48:	2101      	movs	r1, #1
 8003d4a:	2004      	movs	r0, #4
 8003d4c:	f7fc fe38 	bl	80009c0 <RCC_APB2PeriphClockCmd>
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
 8003d50:	2318      	movs	r3, #24
 8003d52:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_9;
 8003d56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d5a:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8003d5e:	2401      	movs	r4, #1
 8003d60:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8003d64:	4d1a      	ldr	r5, [pc, #104]	; (8003dd0 <myUSART1_Init+0x8c>)
 8003d66:	a901      	add	r1, sp, #4
 8003d68:	4628      	mov	r0, r5
 8003d6a:	f7fc fd43 	bl	80007f4 <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003d6e:	2304      	movs	r3, #4
 8003d70:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 8003d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d78:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_10MHz;
 8003d7c:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8003d80:	a901      	add	r1, sp, #4
 8003d82:	4628      	mov	r0, r5
 8003d84:	f7fc fd36 	bl	80007f4 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8003d88:	4621      	mov	r1, r4
 8003d8a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003d8e:	f7fc fe17 	bl	80009c0 <RCC_APB2PeriphClockCmd>

	USART_InitStruct.USART_BaudRate = 115200;
 8003d92:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003d96:	9302      	str	r3, [sp, #8]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f8ad 300c 	strh.w	r3, [sp, #12]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8003d9e:	f8ad 300e 	strh.w	r3, [sp, #14]
	USART_InitStruct.USART_Parity = USART_Parity_No ;
 8003da2:	f8ad 3010 	strh.w	r3, [sp, #16]
	USART_InitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003da6:	220c      	movs	r2, #12
 8003da8:	f8ad 2012 	strh.w	r2, [sp, #18]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003dac:	f8ad 3014 	strh.w	r3, [sp, #20]

	USART_Cmd(USART1, ENABLE);
 8003db0:	f505 5540 	add.w	r5, r5, #12288	; 0x3000
 8003db4:	4621      	mov	r1, r4
 8003db6:	4628      	mov	r0, r5
 8003db8:	f7fc ffc4 	bl	8000d44 <USART_Cmd>
	USART_Init(USART1,&USART_InitStruct);
 8003dbc:	a902      	add	r1, sp, #8
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	f7fc ff5c 	bl	8000c7c <USART_Init>
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	4b03      	ldr	r3, [pc, #12]	; (8003dd4 <myUSART1_Init+0x90>)
 8003dc8:	605a      	str	r2, [r3, #4]
	/* Enable RXNE interrupt */
	//USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
	/* Enable USART3 global interrupt */
	NVIC_EnableIRQ(USART1_IRQn);

}
 8003dca:	b007      	add	sp, #28
 8003dcc:	bd30      	pop	{r4, r5, pc}
 8003dce:	bf00      	nop
 8003dd0:	40010800 	.word	0x40010800
 8003dd4:	e000e100 	.word	0xe000e100

08003dd8 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop

08003ddc <USART1_Send>:

}

void USART1_Send(uint8_t data)
{
 8003ddc:	b510      	push	{r4, lr}
 8003dde:	4604      	mov	r4, r0
	while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);
 8003de0:	2140      	movs	r1, #64	; 0x40
 8003de2:	4805      	ldr	r0, [pc, #20]	; (8003df8 <USART1_Send+0x1c>)
 8003de4:	f7fc ffc4 	bl	8000d70 <USART_GetFlagStatus>
 8003de8:	2800      	cmp	r0, #0
 8003dea:	d0f9      	beq.n	8003de0 <USART1_Send+0x4>
	USART_SendData(USART1,data);
 8003dec:	4621      	mov	r1, r4
 8003dee:	4802      	ldr	r0, [pc, #8]	; (8003df8 <USART1_Send+0x1c>)
 8003df0:	f7fc ffb6 	bl	8000d60 <USART_SendData>
 8003df4:	bd10      	pop	{r4, pc}
 8003df6:	bf00      	nop
 8003df8:	40013800 	.word	0x40013800

08003dfc <toString>:
}

uint8_t rx_buffer[10];
uint16_t num_str[10];
uint16_t toString(uint8_t a[]) {
 8003dfc:	b410      	push	{r4}
 8003dfe:	4604      	mov	r4, r0
  uint16_t c, n;

  n = 0;
 8003e00:	2000      	movs	r0, #0
  for (c = 0; a[c] != ','; c++) {
 8003e02:	4602      	mov	r2, r0
 8003e04:	e008      	b.n	8003e18 <toString+0x1c>
    n = n * 10 + a[c] - '0';
 8003e06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003e0a:	0041      	lsls	r1, r0, #1
 8003e0c:	440b      	add	r3, r1
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b30      	subs	r3, #48	; 0x30
 8003e12:	b298      	uxth	r0, r3
uint16_t num_str[10];
uint16_t toString(uint8_t a[]) {
  uint16_t c, n;

  n = 0;
  for (c = 0; a[c] != ','; c++) {
 8003e14:	3201      	adds	r2, #1
 8003e16:	b292      	uxth	r2, r2
 8003e18:	5ca3      	ldrb	r3, [r4, r2]
 8003e1a:	2b2c      	cmp	r3, #44	; 0x2c
 8003e1c:	d1f3      	bne.n	8003e06 <toString+0xa>
    n = n * 10 + a[c] - '0';
  }

  return n;
}
 8003e1e:	bc10      	pop	{r4}
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop

08003e24 <WaitForPkt>:
uint8_t WaitForPkt(uint8_t count, uint8_t numstr)
{
 8003e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e28:	4606      	mov	r6, r0
 8003e2a:	460d      	mov	r5, r1
	uint32_t timeout;
	timeout = Sys_GetTick()+5000;
 8003e2c:	f7ff fdac 	bl	8003988 <Sys_GetTick>
 8003e30:	f500 549c 	add.w	r4, r0, #4992	; 0x1380
 8003e34:	3408      	adds	r4, #8
	uint8_t i,n;
	uint8_t tmpchar;
	i=0;
	if(!numstr)
 8003e36:	b1cd      	cbz	r5, 8003e6c <WaitForPkt+0x48>
 8003e38:	f04f 0900 	mov.w	r9, #0
 8003e3c:	e045      	b.n	8003eca <WaitForPkt+0xa6>
	{
		while(i<count)
		{
			while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET){
				if(timeout<Sys_GetTick())
 8003e3e:	f7ff fda3 	bl	8003988 <Sys_GetTick>
 8003e42:	4284      	cmp	r4, r0
 8003e44:	d346      	bcc.n	8003ed4 <WaitForPkt+0xb0>
	i=0;
	if(!numstr)
	{
		while(i<count)
		{
			while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET){
 8003e46:	2120      	movs	r1, #32
 8003e48:	4825      	ldr	r0, [pc, #148]	; (8003ee0 <WaitForPkt+0xbc>)
 8003e4a:	f7fc ff91 	bl	8000d70 <USART_GetFlagStatus>
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	d0f5      	beq.n	8003e3e <WaitForPkt+0x1a>
				if(timeout<Sys_GetTick())
					return 0;
			}
			rx_buffer[i] = USART_ReceiveData(USART1);
 8003e52:	4823      	ldr	r0, [pc, #140]	; (8003ee0 <WaitForPkt+0xbc>)
 8003e54:	f7fc ff88 	bl	8000d68 <USART_ReceiveData>
 8003e58:	4b22      	ldr	r3, [pc, #136]	; (8003ee4 <WaitForPkt+0xc0>)
 8003e5a:	5558      	strb	r0, [r3, r5]
			timeout = Sys_GetTick()+5000;
 8003e5c:	f7ff fd94 	bl	8003988 <Sys_GetTick>
 8003e60:	f500 549c 	add.w	r4, r0, #4992	; 0x1380
 8003e64:	3408      	adds	r4, #8
			i++;
 8003e66:	3501      	adds	r5, #1
 8003e68:	b2ed      	uxtb	r5, r5
 8003e6a:	e000      	b.n	8003e6e <WaitForPkt+0x4a>
 8003e6c:	2500      	movs	r5, #0
	uint8_t i,n;
	uint8_t tmpchar;
	i=0;
	if(!numstr)
	{
		while(i<count)
 8003e6e:	42b5      	cmp	r5, r6
 8003e70:	d3e9      	bcc.n	8003e46 <WaitForPkt+0x22>
			}
			rx_buffer[i] = USART_ReceiveData(USART1);
			timeout = Sys_GetTick()+5000;
			i++;
		}
		return 1;
 8003e72:	2001      	movs	r0, #1
 8003e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			tmpchar = 0;
			n = 0;
			while(tmpchar != ',')
			{
				while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET){
					if(timeout<Sys_GetTick())
 8003e78:	f7ff fd86 	bl	8003988 <Sys_GetTick>
 8003e7c:	4284      	cmp	r4, r0
 8003e7e:	d32c      	bcc.n	8003eda <WaitForPkt+0xb6>
		{
			tmpchar = 0;
			n = 0;
			while(tmpchar != ',')
			{
				while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET){
 8003e80:	2120      	movs	r1, #32
 8003e82:	4817      	ldr	r0, [pc, #92]	; (8003ee0 <WaitForPkt+0xbc>)
 8003e84:	f7fc ff74 	bl	8000d70 <USART_GetFlagStatus>
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	d0f5      	beq.n	8003e78 <WaitForPkt+0x54>
					if(timeout<Sys_GetTick())
						return 0;
				}
				tmpchar = USART_ReceiveData(USART1);
 8003e8c:	4814      	ldr	r0, [pc, #80]	; (8003ee0 <WaitForPkt+0xbc>)
 8003e8e:	f7fc ff6b 	bl	8000d68 <USART_ReceiveData>
 8003e92:	b2c5      	uxtb	r5, r0
				rx_buffer[n++] = tmpchar;
 8003e94:	f107 0801 	add.w	r8, r7, #1
 8003e98:	fa5f f888 	uxtb.w	r8, r8
 8003e9c:	4b11      	ldr	r3, [pc, #68]	; (8003ee4 <WaitForPkt+0xc0>)
 8003e9e:	55dd      	strb	r5, [r3, r7]
				timeout = Sys_GetTick()+5000;
 8003ea0:	f7ff fd72 	bl	8003988 <Sys_GetTick>
 8003ea4:	f500 549c 	add.w	r4, r0, #4992	; 0x1380
 8003ea8:	3408      	adds	r4, #8
				while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET){
					if(timeout<Sys_GetTick())
						return 0;
				}
				tmpchar = USART_ReceiveData(USART1);
				rx_buffer[n++] = tmpchar;
 8003eaa:	4647      	mov	r7, r8
 8003eac:	e001      	b.n	8003eb2 <WaitForPkt+0x8e>
 8003eae:	2500      	movs	r5, #0
 8003eb0:	462f      	mov	r7, r5

		while(i<count)
		{
			tmpchar = 0;
			n = 0;
			while(tmpchar != ',')
 8003eb2:	2d2c      	cmp	r5, #44	; 0x2c
 8003eb4:	d1e4      	bne.n	8003e80 <WaitForPkt+0x5c>
				}
				tmpchar = USART_ReceiveData(USART1);
				rx_buffer[n++] = tmpchar;
				timeout = Sys_GetTick()+5000;
			}
			num_str[i] = toString(rx_buffer);
 8003eb6:	480b      	ldr	r0, [pc, #44]	; (8003ee4 <WaitForPkt+0xc0>)
 8003eb8:	f7ff ffa0 	bl	8003dfc <toString>
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <WaitForPkt+0xc4>)
 8003ebe:	f823 0019 	strh.w	r0, [r3, r9, lsl #1]
			i++;
 8003ec2:	f109 0901 	add.w	r9, r9, #1
 8003ec6:	fa5f f989 	uxtb.w	r9, r9
		return 1;
	}else
	{


		while(i<count)
 8003eca:	45b1      	cmp	r9, r6
 8003ecc:	d3ef      	bcc.n	8003eae <WaitForPkt+0x8a>
				timeout = Sys_GetTick()+5000;
			}
			num_str[i] = toString(rx_buffer);
			i++;
		}
		return 1;
 8003ece:	2001      	movs	r0, #1
 8003ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	{
		while(i<count)
		{
			while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET){
				if(timeout<Sys_GetTick())
					return 0;
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			n = 0;
			while(tmpchar != ',')
			{
				while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET){
					if(timeout<Sys_GetTick())
						return 0;
 8003eda:	2000      	movs	r0, #0
			num_str[i] = toString(rx_buffer);
			i++;
		}
		return 1;
	}
}
 8003edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ee0:	40013800 	.word	0x40013800
 8003ee4:	20001568 	.word	0x20001568
 8003ee8:	20001550 	.word	0x20001550

08003eec <GetCfg>:
uint8_t srvipaddr[4] = {0,0,0,0};
uint16_t srcportaddr,dstportaddr,bacidaddr,bdevaddr,srvportaddr = 0;
uint8_t cfgdone;

void GetCfg(void)
{
 8003eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eee:	b08b      	sub	sp, #44	; 0x2c
	printf("\n Waiting of Config - 5 secs timeout\n");
 8003ef0:	4856      	ldr	r0, [pc, #344]	; (800404c <GetCfg+0x160>)
 8003ef2:	f000 fa8b 	bl	800440c <puts>

	//enum cfgstate{sync,srcip,srcport,dstport,bacid,instnum,srvip,srvport,bdevid} CFG;
	enum cfgstate{sync,srcip,srcport,dstport,bacid,srvip,srvport} CFG;
	CFG = sync;
	cfgdone = 0;
 8003ef6:	2400      	movs	r4, #0
 8003ef8:	4b55      	ldr	r3, [pc, #340]	; (8004050 <GetCfg+0x164>)
 8003efa:	701c      	strb	r4, [r3, #0]
	while(!cfgdone)
 8003efc:	e076      	b.n	8003fec <GetCfg+0x100>
	{
		switch(CFG){
 8003efe:	2c06      	cmp	r4, #6
 8003f00:	d874      	bhi.n	8003fec <GetCfg+0x100>
 8003f02:	e8df f004 	tbb	[pc, r4]
 8003f06:	1c04      	.short	0x1c04
 8003f08:	52463a2e 	.word	0x52463a2e
 8003f0c:	64          	.byte	0x64
 8003f0d:	00          	.byte	0x00
		case sync : 	if(WaitForPkt(4,0))
 8003f0e:	2100      	movs	r1, #0
 8003f10:	2004      	movs	r0, #4
 8003f12:	f7ff ff87 	bl	8003e24 <WaitForPkt>
 8003f16:	2800      	cmp	r0, #0
 8003f18:	f000 8096 	beq.w	8004048 <GetCfg+0x15c>
						{
//							printf("Received 4 chars\n");
//							USART1_Send(rx_buffer[0]);
//							USART1_Send(rx_buffer[1]);
//							USART1_Send(rx_buffer[2]);
							USART1_Send(rx_buffer[3]);
 8003f1c:	4d4d      	ldr	r5, [pc, #308]	; (8004054 <GetCfg+0x168>)
 8003f1e:	78e8      	ldrb	r0, [r5, #3]
 8003f20:	f7ff ff5c 	bl	8003ddc <USART1_Send>
							if( (rx_buffer[0] == 'C') &&
 8003f24:	782b      	ldrb	r3, [r5, #0]
 8003f26:	2b43      	cmp	r3, #67	; 0x43
 8003f28:	d160      	bne.n	8003fec <GetCfg+0x100>
								(rx_buffer[1] == 'F') &&
 8003f2a:	786b      	ldrb	r3, [r5, #1]
//							printf("Received 4 chars\n");
//							USART1_Send(rx_buffer[0]);
//							USART1_Send(rx_buffer[1]);
//							USART1_Send(rx_buffer[2]);
							USART1_Send(rx_buffer[3]);
							if( (rx_buffer[0] == 'C') &&
 8003f2c:	2b46      	cmp	r3, #70	; 0x46
 8003f2e:	d15d      	bne.n	8003fec <GetCfg+0x100>
								(rx_buffer[1] == 'F') &&
								(rx_buffer[2] == 'G') &&
 8003f30:	78ab      	ldrb	r3, [r5, #2]
//							USART1_Send(rx_buffer[0]);
//							USART1_Send(rx_buffer[1]);
//							USART1_Send(rx_buffer[2]);
							USART1_Send(rx_buffer[3]);
							if( (rx_buffer[0] == 'C') &&
								(rx_buffer[1] == 'F') &&
 8003f32:	2b47      	cmp	r3, #71	; 0x47
 8003f34:	d15a      	bne.n	8003fec <GetCfg+0x100>
								(rx_buffer[2] == 'G') &&
								(rx_buffer[3] == ':')){
 8003f36:	78eb      	ldrb	r3, [r5, #3]
//							USART1_Send(rx_buffer[1]);
//							USART1_Send(rx_buffer[2]);
							USART1_Send(rx_buffer[3]);
							if( (rx_buffer[0] == 'C') &&
								(rx_buffer[1] == 'F') &&
								(rx_buffer[2] == 'G') &&
 8003f38:	2b3a      	cmp	r3, #58	; 0x3a
 8003f3a:	d157      	bne.n	8003fec <GetCfg+0x100>
 8003f3c:	e055      	b.n	8003fea <GetCfg+0xfe>
							}
						}else{
							return;
						}
						break;
		case srcip : 	if(WaitForPkt(4,1)){
 8003f3e:	2101      	movs	r1, #1
 8003f40:	2004      	movs	r0, #4
 8003f42:	f7ff ff6f 	bl	8003e24 <WaitForPkt>
 8003f46:	2800      	cmp	r0, #0
 8003f48:	d07e      	beq.n	8004048 <GetCfg+0x15c>
							//printf("received num %d %d %d %d",num_str[0],num_str[1],num_str[2],num_str[3]);
							srcipaddr[0] = num_str[0];
 8003f4a:	4a43      	ldr	r2, [pc, #268]	; (8004058 <GetCfg+0x16c>)
 8003f4c:	8811      	ldrh	r1, [r2, #0]
 8003f4e:	4b43      	ldr	r3, [pc, #268]	; (800405c <GetCfg+0x170>)
 8003f50:	7019      	strb	r1, [r3, #0]
							srcipaddr[1] = num_str[1];
 8003f52:	8851      	ldrh	r1, [r2, #2]
 8003f54:	7059      	strb	r1, [r3, #1]
							srcipaddr[2] = num_str[2];
 8003f56:	8891      	ldrh	r1, [r2, #4]
 8003f58:	7099      	strb	r1, [r3, #2]
							srcipaddr[3] = num_str[3];
 8003f5a:	88d2      	ldrh	r2, [r2, #6]
 8003f5c:	70da      	strb	r2, [r3, #3]
							CFG = srcport;
 8003f5e:	2402      	movs	r4, #2
						}else{
							return;
						}
						break;
 8003f60:	e044      	b.n	8003fec <GetCfg+0x100>
		case srcport : 	if(WaitForPkt(1,1)){
 8003f62:	2101      	movs	r1, #1
 8003f64:	4608      	mov	r0, r1
 8003f66:	f7ff ff5d 	bl	8003e24 <WaitForPkt>
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	d06c      	beq.n	8004048 <GetCfg+0x15c>
							//printf("received num %d %d %d %d",num_str[0],num_str[1],num_str[2],num_str[3]);
							srcportaddr = num_str[0];
 8003f6e:	4b3a      	ldr	r3, [pc, #232]	; (8004058 <GetCfg+0x16c>)
 8003f70:	881a      	ldrh	r2, [r3, #0]
 8003f72:	4b3b      	ldr	r3, [pc, #236]	; (8004060 <GetCfg+0x174>)
 8003f74:	801a      	strh	r2, [r3, #0]
							CFG = dstport;
 8003f76:	2403      	movs	r4, #3
						}else{
							return;
						}
						break;
 8003f78:	e038      	b.n	8003fec <GetCfg+0x100>
		case dstport : 	if(WaitForPkt(1,1)){
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	4608      	mov	r0, r1
 8003f7e:	f7ff ff51 	bl	8003e24 <WaitForPkt>
 8003f82:	2800      	cmp	r0, #0
 8003f84:	d060      	beq.n	8004048 <GetCfg+0x15c>
							//printf("received num %d %d %d %d",num_str[0],num_str[1],num_str[2],num_str[3]);
							dstportaddr = num_str[0];
 8003f86:	4b34      	ldr	r3, [pc, #208]	; (8004058 <GetCfg+0x16c>)
 8003f88:	881a      	ldrh	r2, [r3, #0]
 8003f8a:	4b36      	ldr	r3, [pc, #216]	; (8004064 <GetCfg+0x178>)
 8003f8c:	801a      	strh	r2, [r3, #0]
							CFG = bacid;
 8003f8e:	2404      	movs	r4, #4
						}else{
							return;
						}
						break;
 8003f90:	e02c      	b.n	8003fec <GetCfg+0x100>
		case bacid : 	if(WaitForPkt(1,1)){
 8003f92:	2101      	movs	r1, #1
 8003f94:	4608      	mov	r0, r1
 8003f96:	f7ff ff45 	bl	8003e24 <WaitForPkt>
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	d054      	beq.n	8004048 <GetCfg+0x15c>
							//printf("received num %d %d %d %d",num_str[0],num_str[1],num_str[2],num_str[3]);
							bacidaddr = num_str[0];
 8003f9e:	4b2e      	ldr	r3, [pc, #184]	; (8004058 <GetCfg+0x16c>)
 8003fa0:	881a      	ldrh	r2, [r3, #0]
 8003fa2:	4b31      	ldr	r3, [pc, #196]	; (8004068 <GetCfg+0x17c>)
 8003fa4:	801a      	strh	r2, [r3, #0]
							CFG = srvip;
 8003fa6:	2405      	movs	r4, #5
						}else{
							return;
						}
						break;
 8003fa8:	e020      	b.n	8003fec <GetCfg+0x100>
		case srvip : 	if(WaitForPkt(4,1)){
 8003faa:	2101      	movs	r1, #1
 8003fac:	2004      	movs	r0, #4
 8003fae:	f7ff ff39 	bl	8003e24 <WaitForPkt>
 8003fb2:	2800      	cmp	r0, #0
 8003fb4:	d048      	beq.n	8004048 <GetCfg+0x15c>
							//printf("received num %d %d %d %d",num_str[0],num_str[1],num_str[2],num_str[3]);
							srvipaddr[0] = num_str[0];
 8003fb6:	4a28      	ldr	r2, [pc, #160]	; (8004058 <GetCfg+0x16c>)
 8003fb8:	8811      	ldrh	r1, [r2, #0]
 8003fba:	4b2c      	ldr	r3, [pc, #176]	; (800406c <GetCfg+0x180>)
 8003fbc:	7019      	strb	r1, [r3, #0]
							srvipaddr[1] = num_str[1];
 8003fbe:	8851      	ldrh	r1, [r2, #2]
 8003fc0:	7059      	strb	r1, [r3, #1]
							srvipaddr[2] = num_str[2];
 8003fc2:	8891      	ldrh	r1, [r2, #4]
 8003fc4:	7099      	strb	r1, [r3, #2]
							srvipaddr[3] = num_str[3];
 8003fc6:	88d2      	ldrh	r2, [r2, #6]
 8003fc8:	70da      	strb	r2, [r3, #3]
							CFG = srvport;
 8003fca:	2406      	movs	r4, #6

						}else{
							return;
						}
						break;
 8003fcc:	e00e      	b.n	8003fec <GetCfg+0x100>
		case srvport : 	if(WaitForPkt(1,1)){
 8003fce:	2101      	movs	r1, #1
 8003fd0:	4608      	mov	r0, r1
 8003fd2:	f7ff ff27 	bl	8003e24 <WaitForPkt>
 8003fd6:	2800      	cmp	r0, #0
 8003fd8:	d036      	beq.n	8004048 <GetCfg+0x15c>
							//printf("received num %d %d %d %d",num_str[0],num_str[1],num_str[2],num_str[3]);
							srvportaddr = num_str[0];
 8003fda:	4b1f      	ldr	r3, [pc, #124]	; (8004058 <GetCfg+0x16c>)
 8003fdc:	881a      	ldrh	r2, [r3, #0]
 8003fde:	4b24      	ldr	r3, [pc, #144]	; (8004070 <GetCfg+0x184>)
 8003fe0:	801a      	strh	r2, [r3, #0]
							cfgdone =1;
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	4b1a      	ldr	r3, [pc, #104]	; (8004050 <GetCfg+0x164>)
 8003fe6:	701a      	strb	r2, [r3, #0]
						}else{
							return;
						}
						break;
 8003fe8:	e000      	b.n	8003fec <GetCfg+0x100>
							USART1_Send(rx_buffer[3]);
							if( (rx_buffer[0] == 'C') &&
								(rx_buffer[1] == 'F') &&
								(rx_buffer[2] == 'G') &&
								(rx_buffer[3] == ':')){
								CFG = srcip;
 8003fea:	2401      	movs	r4, #1

	//enum cfgstate{sync,srcip,srcport,dstport,bacid,instnum,srvip,srvport,bdevid} CFG;
	enum cfgstate{sync,srcip,srcport,dstport,bacid,srvip,srvport} CFG;
	CFG = sync;
	cfgdone = 0;
	while(!cfgdone)
 8003fec:	4b18      	ldr	r3, [pc, #96]	; (8004050 <GetCfg+0x164>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d084      	beq.n	8003efe <GetCfg+0x12>
						}
						break;
		default :	    break;
		}
	}
	printf("Config Complete SRC IP - %d.%d.%d.%d \nServer IP - %d.%d.%d.%d \nSRC - Port%d DST Port - %d \nBacnet ID - %d \nServer Port - %d" ,srcipaddr[0]
 8003ff4:	4819      	ldr	r0, [pc, #100]	; (800405c <GetCfg+0x170>)
 8003ff6:	7801      	ldrb	r1, [r0, #0]
														,srcipaddr[1]
 8003ff8:	7842      	ldrb	r2, [r0, #1]
														,srcipaddr[2]
 8003ffa:	7883      	ldrb	r3, [r0, #2]
														,srcipaddr[3]
 8003ffc:	78c4      	ldrb	r4, [r0, #3]
													    ,srvipaddr[0]
 8003ffe:	481b      	ldr	r0, [pc, #108]	; (800406c <GetCfg+0x180>)
 8004000:	7805      	ldrb	r5, [r0, #0]
														,srvipaddr[1]
 8004002:	7846      	ldrb	r6, [r0, #1]
														,srvipaddr[2]
 8004004:	7887      	ldrb	r7, [r0, #2]
														,srvipaddr[3]
 8004006:	78c0      	ldrb	r0, [r0, #3]
						}
						break;
		default :	    break;
		}
	}
	printf("Config Complete SRC IP - %d.%d.%d.%d \nServer IP - %d.%d.%d.%d \nSRC - Port%d DST Port - %d \nBacnet ID - %d \nServer Port - %d" ,srcipaddr[0]
 8004008:	f8df e064 	ldr.w	lr, [pc, #100]	; 8004070 <GetCfg+0x184>
 800400c:	f8be e000 	ldrh.w	lr, [lr]
 8004010:	f8cd e020 	str.w	lr, [sp, #32]
 8004014:	f8df e050 	ldr.w	lr, [pc, #80]	; 8004068 <GetCfg+0x17c>
 8004018:	f8be e000 	ldrh.w	lr, [lr]
 800401c:	f8cd e01c 	str.w	lr, [sp, #28]
 8004020:	f8df e040 	ldr.w	lr, [pc, #64]	; 8004064 <GetCfg+0x178>
 8004024:	f8be e000 	ldrh.w	lr, [lr]
 8004028:	f8cd e018 	str.w	lr, [sp, #24]
 800402c:	f8df e030 	ldr.w	lr, [pc, #48]	; 8004060 <GetCfg+0x174>
 8004030:	f8be e000 	ldrh.w	lr, [lr]
 8004034:	f8cd e014 	str.w	lr, [sp, #20]
 8004038:	9004      	str	r0, [sp, #16]
 800403a:	9703      	str	r7, [sp, #12]
 800403c:	9602      	str	r6, [sp, #8]
 800403e:	9501      	str	r5, [sp, #4]
 8004040:	9400      	str	r4, [sp, #0]
 8004042:	480c      	ldr	r0, [pc, #48]	; (8004074 <GetCfg+0x188>)
 8004044:	f000 f9be 	bl	80043c4 <iprintf>
														,srcportaddr
														,dstportaddr
														,bacidaddr
														,srvportaddr);

}
 8004048:	b00b      	add	sp, #44	; 0x2c
 800404a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800404c:	080071c0 	.word	0x080071c0
 8004050:	20001574 	.word	0x20001574
 8004054:	20001568 	.word	0x20001568
 8004058:	20001550 	.word	0x20001550
 800405c:	20000c10 	.word	0x20000c10
 8004060:	20001576 	.word	0x20001576
 8004064:	20001578 	.word	0x20001578
 8004068:	20001564 	.word	0x20001564
 800406c:	20000c0c 	.word	0x20000c0c
 8004070:	20000c14 	.word	0x20000c14
 8004074:	080071e8 	.word	0x080071e8

08004078 <SetCfg>:

uint8_t SetCfg(uint16_t *bacsrcport, uint16_t *bacdstport, uint16_t *bacid)
{
	if(cfgdone)
 8004078:	4b07      	ldr	r3, [pc, #28]	; (8004098 <SetCfg+0x20>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	b14b      	cbz	r3, 8004092 <SetCfg+0x1a>
	{
		*bacsrcport = srcportaddr;
 800407e:	4b07      	ldr	r3, [pc, #28]	; (800409c <SetCfg+0x24>)
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	8003      	strh	r3, [r0, #0]
		*bacdstport = dstportaddr;
 8004084:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <SetCfg+0x28>)
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	800b      	strh	r3, [r1, #0]
		*bacid = bacidaddr;
 800408a:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <SetCfg+0x2c>)
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	8013      	strh	r3, [r2, #0]
		return 1;
 8004090:	2301      	movs	r3, #1
	}else{
		return 0;
	}
}
 8004092:	4618      	mov	r0, r3
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	20001574 	.word	0x20001574
 800409c:	20001576 	.word	0x20001576
 80040a0:	20001578 	.word	0x20001578
 80040a4:	20001564 	.word	0x20001564

080040a8 <SetCfgSrv>:
uint8_t SetCfgSrv(uint8_t *srvaddr, uint16_t *srvport)
{
	if(cfgdone)
 80040a8:	4b08      	ldr	r3, [pc, #32]	; (80040cc <SetCfgSrv+0x24>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	b163      	cbz	r3, 80040c8 <SetCfgSrv+0x20>
	{
		srvaddr[0] = srvipaddr[0];
 80040ae:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <SetCfgSrv+0x28>)
 80040b0:	781a      	ldrb	r2, [r3, #0]
 80040b2:	7002      	strb	r2, [r0, #0]
		srvaddr[1] = srvipaddr[1];
 80040b4:	785a      	ldrb	r2, [r3, #1]
 80040b6:	7042      	strb	r2, [r0, #1]
		srvaddr[2] = srvipaddr[2];
 80040b8:	789a      	ldrb	r2, [r3, #2]
 80040ba:	7082      	strb	r2, [r0, #2]
		srvaddr[3] = srvipaddr[3];
 80040bc:	78db      	ldrb	r3, [r3, #3]
 80040be:	70c3      	strb	r3, [r0, #3]
		*srvport = srvportaddr;
 80040c0:	4b04      	ldr	r3, [pc, #16]	; (80040d4 <SetCfgSrv+0x2c>)
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	800b      	strh	r3, [r1, #0]
		return 1;
 80040c6:	2301      	movs	r3, #1
	}else{
		return 0;
	}
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	4770      	bx	lr
 80040cc:	20001574 	.word	0x20001574
 80040d0:	20000c0c 	.word	0x20000c0c
 80040d4:	20000c14 	.word	0x20000c14

080040d8 <_sbrk>:
//	errno = ENOSYS;
//	return -1;
//}

void * _sbrk(int32_t incr)
{
 80040d8:	4603      	mov	r3, r0
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 80040da:	4a05      	ldr	r2, [pc, #20]	; (80040f0 <_sbrk+0x18>)
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	b912      	cbnz	r2, 80040e6 <_sbrk+0xe>
		heap_end = & end;
 80040e0:	4904      	ldr	r1, [pc, #16]	; (80040f4 <_sbrk+0x1c>)
 80040e2:	4a03      	ldr	r2, [pc, #12]	; (80040f0 <_sbrk+0x18>)
 80040e4:	6011      	str	r1, [r2, #0]
	}

	prev_heap_end = heap_end;
 80040e6:	4a02      	ldr	r2, [pc, #8]	; (80040f0 <_sbrk+0x18>)
 80040e8:	6810      	ldr	r0, [r2, #0]
	heap_end += incr;
 80040ea:	4403      	add	r3, r0
 80040ec:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
}
 80040ee:	4770      	bx	lr
 80040f0:	20000c18 	.word	0x20000c18
 80040f4:	20001a5c 	.word	0x20001a5c

080040f8 <_write>:
{
  errno = ENOSYS;
  return -1;
}
int _write(int fd, char *str, int len)
{
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	460e      	mov	r6, r1
 80040fc:	4615      	mov	r5, r2
	int j;
	for(j=0;j<len;j++)
 80040fe:	2400      	movs	r4, #0
 8004100:	e003      	b.n	800410a <_write+0x12>
	{
		USART1_Send(str[j]);
 8004102:	5d30      	ldrb	r0, [r6, r4]
 8004104:	f7ff fe6a 	bl	8003ddc <USART1_Send>
  return -1;
}
int _write(int fd, char *str, int len)
{
	int j;
	for(j=0;j<len;j++)
 8004108:	3401      	adds	r4, #1
 800410a:	42ac      	cmp	r4, r5
 800410c:	dbf9      	blt.n	8004102 <_write+0xa>
	{
		USART1_Send(str[j]);
	}
	return 1;

}
 800410e:	2001      	movs	r0, #1
 8004110:	bd70      	pop	{r4, r5, r6, pc}
 8004112:	bf00      	nop

08004114 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8004114:	b082      	sub	sp, #8
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8004116:	2300      	movs	r3, #0
 8004118:	9301      	str	r3, [sp, #4]
 800411a:	9300      	str	r3, [sp, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800411c:	4a2c      	ldr	r2, [pc, #176]	; (80041d0 <SetSysClockTo72+0xbc>)
 800411e:	6813      	ldr	r3, [r2, #0]
 8004120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004124:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004126:	4b2a      	ldr	r3, [pc, #168]	; (80041d0 <SetSysClockTo72+0xbc>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	9300      	str	r3, [sp, #0]
    StartUpCounter++;  
 8004130:	9b01      	ldr	r3, [sp, #4]
 8004132:	3301      	adds	r3, #1
 8004134:	9301      	str	r3, [sp, #4]
  //} while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
  } while((HSEStatus == 0) && (StartUpCounter != 0x2000));
 8004136:	9b00      	ldr	r3, [sp, #0]
 8004138:	b91b      	cbnz	r3, 8004142 <SetSysClockTo72+0x2e>
 800413a:	9b01      	ldr	r3, [sp, #4]
 800413c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004140:	d1f1      	bne.n	8004126 <SetSysClockTo72+0x12>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004142:	4b23      	ldr	r3, [pc, #140]	; (80041d0 <SetSysClockTo72+0xbc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800414a:	d002      	beq.n	8004152 <SetSysClockTo72+0x3e>
  {
    HSEStatus = (uint32_t)0x01;
 800414c:	2301      	movs	r3, #1
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	e001      	b.n	8004156 <SetSysClockTo72+0x42>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004152:	2300      	movs	r3, #0
 8004154:	9300      	str	r3, [sp, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8004156:	9b00      	ldr	r3, [sp, #0]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d136      	bne.n	80041ca <SetSysClockTo72+0xb6>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800415c:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <SetSysClockTo72+0xc0>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	f042 0210 	orr.w	r2, r2, #16
 8004164:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	f022 0203 	bic.w	r2, r2, #3
 800416c:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	f042 0202 	orr.w	r2, r2, #2
 8004174:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8004176:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004188:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8004190:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8004198:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80041a0:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80041a2:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <SetSysClockTo72+0xbc>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80041aa:	d0fa      	beq.n	80041a2 <SetSysClockTo72+0x8e>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80041ac:	4b08      	ldr	r3, [pc, #32]	; (80041d0 <SetSysClockTo72+0xbc>)
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	f022 0203 	bic.w	r2, r2, #3
 80041b4:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	f042 0202 	orr.w	r2, r2, #2
 80041bc:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80041be:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <SetSysClockTo72+0xbc>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f003 030c 	and.w	r3, r3, #12
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d1f9      	bne.n	80041be <SetSysClockTo72+0xaa>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80041ca:	b002      	add	sp, #8
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40021000 	.word	0x40021000
 80041d4:	40022000 	.word	0x40022000

080041d8 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80041d8:	b508      	push	{r3, lr}
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80041da:	f7ff ff9b 	bl	8004114 <SetSysClockTo72>
 80041de:	bd08      	pop	{r3, pc}

080041e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80041e0:	b508      	push	{r3, lr}
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80041e2:	4b10      	ldr	r3, [pc, #64]	; (8004224 <SystemInit+0x44>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80041ec:	6859      	ldr	r1, [r3, #4]
 80041ee:	4a0e      	ldr	r2, [pc, #56]	; (8004228 <SystemInit+0x48>)
 80041f0:	400a      	ands	r2, r1
 80041f2:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80041fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80041fe:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004206:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800420e:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8004210:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004214:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8004216:	f7ff ffdf 	bl	80041d8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800421a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800421e:	4b03      	ldr	r3, [pc, #12]	; (800422c <SystemInit+0x4c>)
 8004220:	609a      	str	r2, [r3, #8]
 8004222:	bd08      	pop	{r3, pc}
 8004224:	40021000 	.word	0x40021000
 8004228:	f8ff0000 	.word	0xf8ff0000
 800422c:	e000ed00 	.word	0xe000ed00

08004230 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8004230:	b470      	push	{r4, r5, r6}
	int div = 1;
 8004232:	2301      	movs	r3, #1
	while (d/div >= base)
 8004234:	e001      	b.n	800423a <ts_itoa+0xa>
		div *= base;
 8004236:	fb02 f303 	mul.w	r3, r2, r3
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 800423a:	fbb1 f4f3 	udiv	r4, r1, r3
 800423e:	4294      	cmp	r4, r2
 8004240:	d2f9      	bcs.n	8004236 <ts_itoa+0x6>
 8004242:	e012      	b.n	800426a <ts_itoa+0x3a>
		div *= base;

	while (div != 0)
	{
		int num = d/div;
 8004244:	fbb1 f4f3 	udiv	r4, r1, r3
		d = d%div;
 8004248:	fb03 1114 	mls	r1, r3, r4, r1
		div /= base;
 800424c:	fb93 f3f2 	sdiv	r3, r3, r2
		if (num > 9)
 8004250:	2c09      	cmp	r4, #9
 8004252:	dd05      	ble.n	8004260 <ts_itoa+0x30>
			*((*buf)++) = (num-10) + 'A';
 8004254:	6805      	ldr	r5, [r0, #0]
 8004256:	1c6e      	adds	r6, r5, #1
 8004258:	6006      	str	r6, [r0, #0]
 800425a:	3437      	adds	r4, #55	; 0x37
 800425c:	702c      	strb	r4, [r5, #0]
 800425e:	e004      	b.n	800426a <ts_itoa+0x3a>
		else
			*((*buf)++) = num + '0';
 8004260:	6805      	ldr	r5, [r0, #0]
 8004262:	1c6e      	adds	r6, r5, #1
 8004264:	6006      	str	r6, [r0, #0]
 8004266:	3430      	adds	r4, #48	; 0x30
 8004268:	702c      	strb	r4, [r5, #0]
{
	int div = 1;
	while (d/div >= base)
		div *= base;

	while (div != 0)
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1ea      	bne.n	8004244 <ts_itoa+0x14>
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 800426e:	bc70      	pop	{r4, r5, r6}
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop

08004274 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8004274:	b570      	push	{r4, r5, r6, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	9001      	str	r0, [sp, #4]
 800427a:	460c      	mov	r4, r1
 800427c:	4615      	mov	r5, r2
	char *start_buf = buf;
 800427e:	4606      	mov	r6, r0
	while(*fmt)
 8004280:	e055      	b.n	800432e <ts_formatstring+0xba>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8004282:	2b25      	cmp	r3, #37	; 0x25
 8004284:	d14d      	bne.n	8004322 <ts_formatstring+0xae>
		{
			switch (*(++fmt))
 8004286:	7863      	ldrb	r3, [r4, #1]
 8004288:	2b64      	cmp	r3, #100	; 0x64
 800428a:	d019      	beq.n	80042c0 <ts_formatstring+0x4c>
 800428c:	d806      	bhi.n	800429c <ts_formatstring+0x28>
 800428e:	2b58      	cmp	r3, #88	; 0x58
 8004290:	d039      	beq.n	8004306 <ts_formatstring+0x92>
 8004292:	2b63      	cmp	r3, #99	; 0x63
 8004294:	d00d      	beq.n	80042b2 <ts_formatstring+0x3e>
 8004296:	2b25      	cmp	r3, #37	; 0x25
 8004298:	d141      	bne.n	800431e <ts_formatstring+0xaa>
 800429a:	e03b      	b.n	8004314 <ts_formatstring+0xa0>
 800429c:	2b73      	cmp	r3, #115	; 0x73
 800429e:	d01e      	beq.n	80042de <ts_formatstring+0x6a>
 80042a0:	d802      	bhi.n	80042a8 <ts_formatstring+0x34>
 80042a2:	2b69      	cmp	r3, #105	; 0x69
 80042a4:	d00c      	beq.n	80042c0 <ts_formatstring+0x4c>
 80042a6:	e03a      	b.n	800431e <ts_formatstring+0xaa>
 80042a8:	2b75      	cmp	r3, #117	; 0x75
 80042aa:	d025      	beq.n	80042f8 <ts_formatstring+0x84>
 80042ac:	2b78      	cmp	r3, #120	; 0x78
 80042ae:	d02a      	beq.n	8004306 <ts_formatstring+0x92>
 80042b0:	e035      	b.n	800431e <ts_formatstring+0xaa>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80042b2:	9a01      	ldr	r2, [sp, #4]
 80042b4:	1c53      	adds	r3, r2, #1
 80042b6:	9301      	str	r3, [sp, #4]
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	3504      	adds	r5, #4
 80042bc:	7013      	strb	r3, [r2, #0]
				break;
 80042be:	e02e      	b.n	800431e <ts_formatstring+0xaa>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80042c0:	6829      	ldr	r1, [r5, #0]
 80042c2:	3504      	adds	r5, #4
					if (val < 0)
 80042c4:	2900      	cmp	r1, #0
 80042c6:	da05      	bge.n	80042d4 <ts_formatstring+0x60>
					{
						val *= -1;
 80042c8:	4249      	negs	r1, r1
						*buf++ = '-';
 80042ca:	9b01      	ldr	r3, [sp, #4]
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	9201      	str	r2, [sp, #4]
 80042d0:	222d      	movs	r2, #45	; 0x2d
 80042d2:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80042d4:	220a      	movs	r2, #10
 80042d6:	a801      	add	r0, sp, #4
 80042d8:	f7ff ffaa 	bl	8004230 <ts_itoa>
				}
				break;
 80042dc:	e01f      	b.n	800431e <ts_formatstring+0xaa>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80042de:	682b      	ldr	r3, [r5, #0]
 80042e0:	3504      	adds	r5, #4
					while (*arg)
 80042e2:	e005      	b.n	80042f0 <ts_formatstring+0x7c>
					{
						*buf++ = *arg++;
 80042e4:	9a01      	ldr	r2, [sp, #4]
 80042e6:	1c51      	adds	r1, r2, #1
 80042e8:	9101      	str	r1, [sp, #4]
 80042ea:	7819      	ldrb	r1, [r3, #0]
 80042ec:	7011      	strb	r1, [r2, #0]
 80042ee:	3301      	adds	r3, #1
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
					while (*arg)
 80042f0:	781a      	ldrb	r2, [r3, #0]
 80042f2:	2a00      	cmp	r2, #0
 80042f4:	d1f6      	bne.n	80042e4 <ts_formatstring+0x70>
 80042f6:	e012      	b.n	800431e <ts_formatstring+0xaa>
						*buf++ = *arg++;
					}
				}
				break;
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80042f8:	220a      	movs	r2, #10
 80042fa:	6829      	ldr	r1, [r5, #0]
 80042fc:	3504      	adds	r5, #4
 80042fe:	a801      	add	r0, sp, #4
 8004300:	f7ff ff96 	bl	8004230 <ts_itoa>
				break;
 8004304:	e00b      	b.n	800431e <ts_formatstring+0xaa>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8004306:	2210      	movs	r2, #16
 8004308:	6829      	ldr	r1, [r5, #0]
 800430a:	3504      	adds	r5, #4
 800430c:	a801      	add	r0, sp, #4
 800430e:	f7ff ff8f 	bl	8004230 <ts_itoa>
				break;
 8004312:	e004      	b.n	800431e <ts_formatstring+0xaa>
			  case '%':
				  *buf++ = '%';
 8004314:	9b01      	ldr	r3, [sp, #4]
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	9201      	str	r2, [sp, #4]
 800431a:	2225      	movs	r2, #37	; 0x25
 800431c:	701a      	strb	r2, [r3, #0]
				  break;
			}
			fmt++;
 800431e:	3402      	adds	r4, #2
 8004320:	e005      	b.n	800432e <ts_formatstring+0xba>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8004322:	9b01      	ldr	r3, [sp, #4]
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	9201      	str	r2, [sp, #4]
 8004328:	7822      	ldrb	r2, [r4, #0]
 800432a:	701a      	strb	r2, [r3, #0]
 800432c:	3401      	adds	r4, #1
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 800432e:	7823      	ldrb	r3, [r4, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1a6      	bne.n	8004282 <ts_formatstring+0xe>
		else
		{
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 8004334:	2200      	movs	r2, #0
 8004336:	9b01      	ldr	r3, [sp, #4]
 8004338:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
}
 800433a:	9801      	ldr	r0, [sp, #4]
 800433c:	1b80      	subs	r0, r0, r6
 800433e:	b002      	add	sp, #8
 8004340:	bd70      	pop	{r4, r5, r6, pc}
 8004342:	bf00      	nop

08004344 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8004344:	b410      	push	{r4}
 8004346:	4603      	mov	r3, r0
	int length = 0;
 8004348:	2000      	movs	r0, #0
	while (*fmt)
 800434a:	e035      	b.n	80043b8 <ts_formatlength+0x74>
	{
		if (*fmt == '%')
 800434c:	2a25      	cmp	r2, #37	; 0x25
 800434e:	d131      	bne.n	80043b4 <ts_formatlength+0x70>
		{
			++fmt;
 8004350:	1c5c      	adds	r4, r3, #1
			switch (*fmt)
 8004352:	785b      	ldrb	r3, [r3, #1]
 8004354:	3b58      	subs	r3, #88	; 0x58
 8004356:	2b20      	cmp	r3, #32
 8004358:	d829      	bhi.n	80043ae <ts_formatlength+0x6a>
 800435a:	e8df f003 	tbb	[pc, r3]
 800435e:	2824      	.short	0x2824
 8004360:	28282828 	.word	0x28282828
 8004364:	28282828 	.word	0x28282828
 8004368:	28151128 	.word	0x28151128
 800436c:	15282828 	.word	0x15282828
 8004370:	28282828 	.word	0x28282828
 8004374:	28282828 	.word	0x28282828
 8004378:	15281928 	.word	0x15281928
 800437c:	2828      	.short	0x2828
 800437e:	24          	.byte	0x24
 800437f:	00          	.byte	0x00
			{
			  case 'c':
		  		  va_arg(va, int);
 8004380:	3104      	adds	r1, #4
				  ++length;
 8004382:	3001      	adds	r0, #1
	int length = 0;
	while (*fmt)
	{
		if (*fmt == '%')
		{
			++fmt;
 8004384:	4623      	mov	r3, r4
			switch (*fmt)
			{
			  case 'c':
		  		  va_arg(va, int);
				  ++length;
				  break;
 8004386:	e016      	b.n	80043b6 <ts_formatlength+0x72>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8004388:	300b      	adds	r0, #11
				  va_arg(va, int);
 800438a:	3104      	adds	r1, #4
	int length = 0;
	while (*fmt)
	{
		if (*fmt == '%')
		{
			++fmt;
 800438c:	4623      	mov	r3, r4
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
				  va_arg(va, int);
				  break;
 800438e:	e012      	b.n	80043b6 <ts_formatlength+0x72>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8004390:	680b      	ldr	r3, [r1, #0]
 8004392:	3104      	adds	r1, #4
			  		  while (*str++)
 8004394:	e001      	b.n	800439a <ts_formatlength+0x56>
			  			  ++length;
 8004396:	3001      	adds	r0, #1
				  va_arg(va, int);
				  break;
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
			  		  while (*str++)
 8004398:	4613      	mov	r3, r2
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f9      	bne.n	8004396 <ts_formatlength+0x52>
	int length = 0;
	while (*fmt)
	{
		if (*fmt == '%')
		{
			++fmt;
 80043a2:	4623      	mov	r3, r4
 80043a4:	e007      	b.n	80043b6 <ts_formatlength+0x72>
			  	  }
				  break;
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 80043a6:	3008      	adds	r0, #8
				  va_arg(va, unsigned int);
 80043a8:	3104      	adds	r1, #4
	int length = 0;
	while (*fmt)
	{
		if (*fmt == '%')
		{
			++fmt;
 80043aa:	4623      	mov	r3, r4
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
				  va_arg(va, unsigned int);
				  break;
 80043ac:	e003      	b.n	80043b6 <ts_formatlength+0x72>
			  default:
				  ++length;
 80043ae:	3001      	adds	r0, #1
	int length = 0;
	while (*fmt)
	{
		if (*fmt == '%')
		{
			++fmt;
 80043b0:	4623      	mov	r3, r4
				  length += 8;
				  va_arg(va, unsigned int);
				  break;
			  default:
				  ++length;
				  break;
 80043b2:	e000      	b.n	80043b6 <ts_formatlength+0x72>
			}
		}
		else
		{
			++length;
 80043b4:	3001      	adds	r0, #1
		}
		++fmt;
 80043b6:	3301      	adds	r3, #1
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
	int length = 0;
	while (*fmt)
 80043b8:	781a      	ldrb	r2, [r3, #0]
 80043ba:	2a00      	cmp	r2, #0
 80043bc:	d1c6      	bne.n	800434c <ts_formatlength+0x8>
			++length;
		}
		++fmt;
	}
	return length;
}
 80043be:	bc10      	pop	{r4}
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop

080043c4 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 80043c4:	b40f      	push	{r0, r1, r2, r3}
 80043c6:	b5b0      	push	{r4, r5, r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	f107 0418 	add.w	r4, r7, #24
 80043d0:	f854 5b04 	ldr.w	r5, [r4], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
 80043d4:	607c      	str	r4, [r7, #4]
	length = ts_formatlength(fmt, va);
 80043d6:	4621      	mov	r1, r4
 80043d8:	4628      	mov	r0, r5
 80043da:	f7ff ffb3 	bl	8004344 <ts_formatlength>
	va_end(va);
	{
		char buf[length];
 80043de:	3007      	adds	r0, #7
 80043e0:	f020 0007 	bic.w	r0, r0, #7
 80043e4:	ebad 0d00 	sub.w	sp, sp, r0
		va_start(va, fmt);
 80043e8:	607c      	str	r4, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 80043ea:	4622      	mov	r2, r4
 80043ec:	4629      	mov	r1, r5
 80043ee:	4668      	mov	r0, sp
 80043f0:	f7ff ff40 	bl	8004274 <ts_formatstring>
		length = _write(1, buf, length);
 80043f4:	4602      	mov	r2, r0
 80043f6:	4669      	mov	r1, sp
 80043f8:	2001      	movs	r0, #1
 80043fa:	f7ff fe7d 	bl	80040f8 <_write>
		va_end(va);
	}
	return length;
}
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8004406:	b004      	add	sp, #16
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop

0800440c <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 800440c:	b538      	push	{r3, r4, r5, lr}
 800440e:	4605      	mov	r5, r0
	int length = strlen(s);
 8004410:	f7fb fe9c 	bl	800014c <strlen>
 8004414:	4604      	mov	r4, r0
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*)s, length);
 8004416:	4602      	mov	r2, r0
 8004418:	4629      	mov	r1, r5
 800441a:	2001      	movs	r0, #1
 800441c:	f7ff fe6c 	bl	80040f8 <_write>
 8004420:	4605      	mov	r5, r0
	numbytes += _write(1, "\n", 1);
 8004422:	2201      	movs	r2, #1
 8004424:	4906      	ldr	r1, [pc, #24]	; (8004440 <puts+0x34>)
 8004426:	4610      	mov	r0, r2
 8004428:	f7ff fe66 	bl	80040f8 <_write>
 800442c:	4428      	add	r0, r5

	if (numbytes == (length+1))
 800442e:	3401      	adds	r4, #1
 8004430:	42a0      	cmp	r0, r4
 8004432:	d101      	bne.n	8004438 <puts+0x2c>
	{
		res = 0;
 8004434:	2000      	movs	r0, #0
 8004436:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		res = EOF;
 8004438:	f04f 30ff 	mov.w	r0, #4294967295
	}

	return res;
}
 800443c:	bd38      	pop	{r3, r4, r5, pc}
 800443e:	bf00      	nop
 8004440:	08006b80 	.word	0x08006b80

08004444 <SPISend>:
static uint8_t SPISend(uint8_t data)
{
	//
	//    Setting the Data Register (DR) transmits the byte of data on MOSI.
	//
	SPI2->DR = data;
 8004444:	4b0c      	ldr	r3, [pc, #48]	; (8004478 <SPISend+0x34>)
 8004446:	8198      	strh	r0, [r3, #12]
	//
	//    Wait until the data has been transmitted.
	//
	while (!(SPI2->SR & SPI_I2S_FLAG_TXE));
 8004448:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <SPISend+0x34>)
 800444a:	891b      	ldrh	r3, [r3, #8]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f8      	beq.n	8004448 <SPISend+0x4>
	//
	//    Wait for any data on MISO pin to be received.
	//
	while (!(SPI2->SR & SPI_I2S_FLAG_RXNE));
 8004456:	4b08      	ldr	r3, [pc, #32]	; (8004478 <SPISend+0x34>)
 8004458:	891b      	ldrh	r3, [r3, #8]
 800445a:	f013 0f01 	tst.w	r3, #1
 800445e:	d0fa      	beq.n	8004456 <SPISend+0x12>
	//
	//    All data transmitted/received but SPI may be busy so wait until done.
	//
	while (SPI2->SR & SPI_I2S_FLAG_BSY);
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <SPISend+0x34>)
 8004462:	891b      	ldrh	r3, [r3, #8]
 8004464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f8      	bne.n	8004460 <SPISend+0x1c>
	//
	//    Return the data received on MISO pin.
	//
	//Sys_Delay(1);
	return(SPI2->DR);
 800446e:	4b02      	ldr	r3, [pc, #8]	; (8004478 <SPISend+0x34>)
 8004470:	8998      	ldrh	r0, [r3, #12]

}
 8004472:	b2c0      	uxtb	r0, r0
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40003800 	.word	0x40003800

0800447c <enc_readOp>:
	CSPASSIVE;
}


static void enc_readOp(uint8_t op, uint8_t address, uint8_t* data, uint8_t len)
{
 800447c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447e:	4606      	mov	r6, r0
 8004480:	460c      	mov	r4, r1
 8004482:	4615      	mov	r5, r2
 8004484:	461f      	mov	r7, r3

	CSACTIVE;
 8004486:	f44f 7180 	mov.w	r1, #256	; 0x100
 800448a:	480c      	ldr	r0, [pc, #48]	; (80044bc <enc_readOp+0x40>)
 800448c:	f7fc fa0a 	bl	80008a4 <GPIO_ResetBits>

	// issue write command
	SPISend( op | (address & ADDR_MASK));
 8004490:	f004 001f 	and.w	r0, r4, #31
 8004494:	4330      	orrs	r0, r6
 8004496:	f7ff ffd5 	bl	8004444 <SPISend>
	
	for (int i = 0; i< len; i++)
 800449a:	2400      	movs	r4, #0
 800449c:	e006      	b.n	80044ac <enc_readOp+0x30>
	*data++ = SPISend(  0x00);
 800449e:	1c6e      	adds	r6, r5, #1
 80044a0:	2000      	movs	r0, #0
 80044a2:	f7ff ffcf 	bl	8004444 <SPISend>
 80044a6:	7028      	strb	r0, [r5, #0]
	CSACTIVE;

	// issue write command
	SPISend( op | (address & ADDR_MASK));
	
	for (int i = 0; i< len; i++)
 80044a8:	3401      	adds	r4, #1
	*data++ = SPISend(  0x00);
 80044aa:	4635      	mov	r5, r6
	CSACTIVE;

	// issue write command
	SPISend( op | (address & ADDR_MASK));
	
	for (int i = 0; i< len; i++)
 80044ac:	42bc      	cmp	r4, r7
 80044ae:	dbf6      	blt.n	800449e <enc_readOp+0x22>
	*data++ = SPISend(  0x00);


	CSPASSIVE;
 80044b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044b4:	4801      	ldr	r0, [pc, #4]	; (80044bc <enc_readOp+0x40>)
 80044b6:	f7fc f9f3 	bl	80008a0 <GPIO_SetBits>
 80044ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044bc:	40010800 	.word	0x40010800

080044c0 <enc_writeOp>:
	    CSPASSIVE;
}


static void enc_writeOp(uint8_t op, uint8_t address, uint8_t* data, uint8_t len)
{
 80044c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c2:	4606      	mov	r6, r0
 80044c4:	460c      	mov	r4, r1
 80044c6:	4615      	mov	r5, r2
 80044c8:	461f      	mov	r7, r3
	CSACTIVE;
 80044ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044ce:	480c      	ldr	r0, [pc, #48]	; (8004500 <enc_writeOp+0x40>)
 80044d0:	f7fc f9e8 	bl	80008a4 <GPIO_ResetBits>

	// issue write command
	SPISend( op | (address & ADDR_MASK));
 80044d4:	f004 001f 	and.w	r0, r4, #31
 80044d8:	4330      	orrs	r0, r6
 80044da:	f7ff ffb3 	bl	8004444 <SPISend>
	
	for ( int i = 0; i<len; i++)
 80044de:	2400      	movs	r4, #0
 80044e0:	e005      	b.n	80044ee <enc_writeOp+0x2e>
	  SPISend(  *data++);
 80044e2:	1c6e      	adds	r6, r5, #1
 80044e4:	7828      	ldrb	r0, [r5, #0]
 80044e6:	f7ff ffad 	bl	8004444 <SPISend>
	CSACTIVE;

	// issue write command
	SPISend( op | (address & ADDR_MASK));
	
	for ( int i = 0; i<len; i++)
 80044ea:	3401      	adds	r4, #1
	  SPISend(  *data++);
 80044ec:	4635      	mov	r5, r6
	CSACTIVE;

	// issue write command
	SPISend( op | (address & ADDR_MASK));
	
	for ( int i = 0; i<len; i++)
 80044ee:	42bc      	cmp	r4, r7
 80044f0:	dbf7      	blt.n	80044e2 <enc_writeOp+0x22>
	  SPISend(  *data++);

	CSPASSIVE;
 80044f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044f6:	4802      	ldr	r0, [pc, #8]	; (8004500 <enc_writeOp+0x40>)
 80044f8:	f7fc f9d2 	bl	80008a0 <GPIO_SetBits>
 80044fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044fe:	bf00      	nop
 8004500:	40010800 	.word	0x40010800

08004504 <enc_SBI>:
static void enc_setBank(uint8_t address, bool keepEnabled ); // select the memory bank
static void readBuffer(uint16_t len, uint8_t* data);
  static void writeBuffer(uint16_t len, uint8_t* data);
/* issue an single byte instruction */
static void enc_SBI(uint8_t instruction, bool keepEnabled)
{
 8004504:	b538      	push	{r3, r4, r5, lr}
 8004506:	4605      	mov	r5, r0
 8004508:	460c      	mov	r4, r1

	CSACTIVE;
 800450a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800450e:	4806      	ldr	r0, [pc, #24]	; (8004528 <enc_SBI+0x24>)
 8004510:	f7fc f9c8 	bl	80008a4 <GPIO_ResetBits>

	// issue the instruction
	SPISend(instruction);
 8004514:	4628      	mov	r0, r5
 8004516:	f7ff ff95 	bl	8004444 <SPISend>

	if (!keepEnabled)
 800451a:	b924      	cbnz	r4, 8004526 <enc_SBI+0x22>
	    CSPASSIVE;
 800451c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004520:	4801      	ldr	r0, [pc, #4]	; (8004528 <enc_SBI+0x24>)
 8004522:	f7fc f9bd 	bl	80008a0 <GPIO_SetBits>
 8004526:	bd38      	pop	{r3, r4, r5, pc}
 8004528:	40010800 	.word	0x40010800

0800452c <enc_setBank>:
  enc_writeOp(ENC624J600_BIT_FIELD_SET, address, &data,1);
}


static void enc_setBank(uint8_t address, bool keepEnabled)
{
 800452c:	b508      	push	{r3, lr}
 800452e:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
  // set the bank (if needed)
  if (((address & BANK_MASK) != bank) && ((address & BANK_MASK) != 0xE0))
 8004532:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <enc_setBank+0x44>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	4298      	cmp	r0, r3
 8004538:	d019      	beq.n	800456e <enc_setBank+0x42>
 800453a:	28e0      	cmp	r0, #224	; 0xe0
 800453c:	d017      	beq.n	800456e <enc_setBank+0x42>
  {
    // set the bank

    bank = (address & BANK_MASK);
 800453e:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <enc_setBank+0x44>)
 8004540:	7018      	strb	r0, [r3, #0]
    
    switch((bank)>>5){
 8004542:	0940      	lsrs	r0, r0, #5
 8004544:	2803      	cmp	r0, #3
 8004546:	d812      	bhi.n	800456e <enc_setBank+0x42>
 8004548:	e8df f000 	tbb	[pc, r0]
 800454c:	0e0a0602 	.word	0x0e0a0602
			case 0 :
				enc_SBI(ENC624J600_BANK0_SELECT, keepEnabled);
 8004550:	20c0      	movs	r0, #192	; 0xc0
 8004552:	f7ff ffd7 	bl	8004504 <enc_SBI>
				break;
 8004556:	bd08      	pop	{r3, pc}
			case 1 :
				enc_SBI(ENC624J600_BANK1_SELECT, keepEnabled);
 8004558:	20c2      	movs	r0, #194	; 0xc2
 800455a:	f7ff ffd3 	bl	8004504 <enc_SBI>
				break;
 800455e:	bd08      	pop	{r3, pc}
			case 2 :
				enc_SBI(ENC624J600_BANK2_SELECT, keepEnabled);
 8004560:	20c4      	movs	r0, #196	; 0xc4
 8004562:	f7ff ffcf 	bl	8004504 <enc_SBI>
				break;
 8004566:	bd08      	pop	{r3, pc}
			case 3 :
				enc_SBI(ENC624J600_BANK3_SELECT, keepEnabled);
 8004568:	20c6      	movs	r0, #198	; 0xc6
 800456a:	f7ff ffcb 	bl	8004504 <enc_SBI>
 800456e:	bd08      	pop	{r3, pc}
 8004570:	20000c1e 	.word	0x20000c1e

08004574 <readControlRegister>:

/* select bank and write control register
will always put CS high to end operation
*/
static uint8_t readControlRegister(uint8_t address)
{
 8004574:	b510      	push	{r4, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	4604      	mov	r4, r0
  uint16_t retval;
  // set the bank
  enc_setBank(address,true);
 800457a:	2101      	movs	r1, #1
 800457c:	f7ff ffd6 	bl	800452c <enc_setBank>
  // do the write
  enc_readOp(ENC624J600_READ_CONTROL_REGISTER, address&0x1F,(uint8_t*) &retval ,1);
 8004580:	2301      	movs	r3, #1
 8004582:	f10d 0206 	add.w	r2, sp, #6
 8004586:	f004 011f 	and.w	r1, r4, #31
 800458a:	2000      	movs	r0, #0
 800458c:	f7ff ff76 	bl	800447c <enc_readOp>
  
  return retval;
}
 8004590:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8004594:	b002      	add	sp, #8
 8004596:	bd10      	pop	{r4, pc}

08004598 <readControlRegister16>:

/* select bank and read control register
will always put CS high to end operation
*/
static uint16_t readControlRegister16(uint8_t address)
{
 8004598:	b510      	push	{r4, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	4604      	mov	r4, r0
  uint16_t retval;
  // set the bank
  enc_setBank(address,true);
 800459e:	2101      	movs	r1, #1
 80045a0:	f7ff ffc4 	bl	800452c <enc_setBank>
  // do the write
  enc_readOp(ENC624J600_READ_CONTROL_REGISTER, address&0x1F,(uint8_t*) &retval ,2);
 80045a4:	2302      	movs	r3, #2
 80045a6:	f10d 0206 	add.w	r2, sp, #6
 80045aa:	f004 011f 	and.w	r1, r4, #31
 80045ae:	2000      	movs	r0, #0
 80045b0:	f7ff ff64 	bl	800447c <enc_readOp>
  
  return retval;
}
 80045b4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80045b8:	b002      	add	sp, #8
 80045ba:	bd10      	pop	{r4, pc}

080045bc <writeBitField>:


/* select bank and write control register bit
will always put CS high to end operation
*/
static void writeBitField(uint8_t address, uint8_t data) {
 80045bc:	b530      	push	{r4, r5, lr}
 80045be:	b083      	sub	sp, #12
 80045c0:	4605      	mov	r5, r0
 80045c2:	ac02      	add	r4, sp, #8
 80045c4:	f804 1d01 	strb.w	r1, [r4, #-1]!
  // set the bank
  enc_setBank(address,true);
 80045c8:	2101      	movs	r1, #1
 80045ca:	f7ff ffaf 	bl	800452c <enc_setBank>
  // do the write
  enc_writeOp(ENC624J600_BIT_FIELD_SET, address, &data,1);
 80045ce:	2301      	movs	r3, #1
 80045d0:	4622      	mov	r2, r4
 80045d2:	4629      	mov	r1, r5
 80045d4:	2080      	movs	r0, #128	; 0x80
 80045d6:	f7ff ff73 	bl	80044c0 <enc_writeOp>
}
 80045da:	b003      	add	sp, #12
 80045dc:	bd30      	pop	{r4, r5, pc}
 80045de:	bf00      	nop

080045e0 <writeControlRegister16>:
  // do the write
  enc_writeOp(ENC624J600_WRITE_CONTROL_REGISTER, address, &data, 1);
}

static void writeControlRegister16(uint8_t address, uint16_t data)
{
 80045e0:	b570      	push	{r4, r5, r6, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	4604      	mov	r4, r0
 80045e6:	460e      	mov	r6, r1
  uint8_t dat;
  // set the bank
  enc_setBank(address,true);
 80045e8:	2101      	movs	r1, #1
 80045ea:	f7ff ff9f 	bl	800452c <enc_setBank>
  // do the write
  
  dat = data & 0x00FF;
 80045ee:	ad02      	add	r5, sp, #8
 80045f0:	f805 6d01 	strb.w	r6, [r5, #-1]!
  enc_writeOp(ENC624J600_WRITE_CONTROL_REGISTER, address&0x1F,(uint8_t*) &dat , 1);
 80045f4:	2301      	movs	r3, #1
 80045f6:	462a      	mov	r2, r5
 80045f8:	f004 011f 	and.w	r1, r4, #31
 80045fc:	2040      	movs	r0, #64	; 0x40
 80045fe:	f7ff ff5f 	bl	80044c0 <enc_writeOp>
  dat = (data & 0xFF00) >> 8;
 8004602:	0a36      	lsrs	r6, r6, #8
 8004604:	f88d 6007 	strb.w	r6, [sp, #7]
  enc_writeOp(ENC624J600_WRITE_CONTROL_REGISTER, ((address+1) & 0x1F),(uint8_t*) &dat , 1);
 8004608:	1c61      	adds	r1, r4, #1
 800460a:	2301      	movs	r3, #1
 800460c:	462a      	mov	r2, r5
 800460e:	f001 011f 	and.w	r1, r1, #31
 8004612:	2040      	movs	r0, #64	; 0x40
 8004614:	f7ff ff54 	bl	80044c0 <enc_writeOp>

}
 8004618:	b002      	add	sp, #8
 800461a:	bd70      	pop	{r4, r5, r6, pc}

0800461c <writeControlRegister>:

/* select bank and write control register
will always put CS high to end operation
*/
static void writeControlRegister(uint8_t address, uint8_t data)
{
 800461c:	b530      	push	{r4, r5, lr}
 800461e:	b083      	sub	sp, #12
 8004620:	4605      	mov	r5, r0
 8004622:	ac02      	add	r4, sp, #8
 8004624:	f804 1d01 	strb.w	r1, [r4, #-1]!
  // set the bank
  enc_setBank(address,true);
 8004628:	2101      	movs	r1, #1
 800462a:	f7ff ff7f 	bl	800452c <enc_setBank>
  // do the write
  enc_writeOp(ENC624J600_WRITE_CONTROL_REGISTER, address, &data, 1);
 800462e:	2301      	movs	r3, #1
 8004630:	4622      	mov	r2, r4
 8004632:	4629      	mov	r1, r5
 8004634:	2040      	movs	r0, #64	; 0x40
 8004636:	f7ff ff43 	bl	80044c0 <enc_writeOp>
}
 800463a:	b003      	add	sp, #12
 800463c:	bd30      	pop	{r4, r5, pc}
 800463e:	bf00      	nop

08004640 <writePointer>:
}



static void writePointer(uint8_t instruction, uint16_t address, bool keepEnabled)
{
 8004640:	b570      	push	{r4, r5, r6, lr}
 8004642:	4606      	mov	r6, r0
 8004644:	460c      	mov	r4, r1
 8004646:	4615      	mov	r5, r2
	CSACTIVE;
 8004648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800464c:	4809      	ldr	r0, [pc, #36]	; (8004674 <writePointer+0x34>)
 800464e:	f7fc f929 	bl	80008a4 <GPIO_ResetBits>
	
	SPISend(instruction);
 8004652:	4630      	mov	r0, r6
 8004654:	f7ff fef6 	bl	8004444 <SPISend>
	SPISend( address&0x00FF);
 8004658:	b2e0      	uxtb	r0, r4
 800465a:	f7ff fef3 	bl	8004444 <SPISend>
	SPISend( address>>8);
 800465e:	0a20      	lsrs	r0, r4, #8
 8004660:	f7ff fef0 	bl	8004444 <SPISend>

  if (!keepEnabled)
 8004664:	b925      	cbnz	r5, 8004670 <writePointer+0x30>
	  CSPASSIVE;
 8004666:	f44f 7180 	mov.w	r1, #256	; 0x100
 800466a:	4802      	ldr	r0, [pc, #8]	; (8004674 <writePointer+0x34>)
 800466c:	f7fc f918 	bl	80008a0 <GPIO_SetBits>
 8004670:	bd70      	pop	{r4, r5, r6, pc}
 8004672:	bf00      	nop
 8004674:	40010800 	.word	0x40010800

08004678 <readBuffer>:
}


static void
readBuffer(uint16_t len, uint8_t* data)
{
 8004678:	b538      	push	{r3, r4, r5, lr}
 800467a:	4604      	mov	r4, r0
 800467c:	460d      	mov	r5, r1
  CSACTIVE;
 800467e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004682:	480b      	ldr	r0, [pc, #44]	; (80046b0 <readBuffer+0x38>)
 8004684:	f7fc f90e 	bl	80008a4 <GPIO_ResetBits>
  // issue read command
  SPISend(  ENC624J600_READ_ERXDATA);
 8004688:	202c      	movs	r0, #44	; 0x2c
 800468a:	f7ff fedb 	bl	8004444 <SPISend>
  
  #ifdef ENC28J60DEBUG
    SerialUSB.print("Readbuffer: ");
  #endif
  while(len)
 800468e:	e006      	b.n	800469e <readBuffer+0x26>
  {
    len--;
 8004690:	3c01      	subs	r4, #1
 8004692:	b2a4      	uxth	r4, r4
    // read data

    *data = SPISend(0x00);
 8004694:	2000      	movs	r0, #0
 8004696:	f7ff fed5 	bl	8004444 <SPISend>
 800469a:	f805 0b01 	strb.w	r0, [r5], #1
  SPISend(  ENC624J600_READ_ERXDATA);
  
  #ifdef ENC28J60DEBUG
    SerialUSB.print("Readbuffer: ");
  #endif
  while(len)
 800469e:	2c00      	cmp	r4, #0
 80046a0:	d1f6      	bne.n	8004690 <readBuffer+0x18>
    SerialUSB.print(*data,HEX);
    #endif
    data++;
  }
  //*data='\0';
  CSPASSIVE;
 80046a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046a6:	4802      	ldr	r0, [pc, #8]	; (80046b0 <readBuffer+0x38>)
 80046a8:	f7fc f8fa 	bl	80008a0 <GPIO_SetBits>
 80046ac:	bd38      	pop	{r3, r4, r5, pc}
 80046ae:	bf00      	nop
 80046b0:	40010800 	.word	0x40010800

080046b4 <writeBuffer>:
  #endif
}

static void
writeBuffer(uint16_t len, uint8_t* data)
{
 80046b4:	b570      	push	{r4, r5, r6, lr}
 80046b6:	4605      	mov	r5, r0
 80046b8:	460e      	mov	r6, r1
  CSACTIVE;
 80046ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046be:	480b      	ldr	r0, [pc, #44]	; (80046ec <writeBuffer+0x38>)
 80046c0:	f7fc f8f0 	bl	80008a4 <GPIO_ResetBits>
  // issue write command
	SPISend(ENC624J600_WRITE_EGPDATA);
 80046c4:	202a      	movs	r0, #42	; 0x2a
 80046c6:	f7ff febd 	bl	8004444 <SPISend>
  //SerialUSB.print("writeBuffer: ");
	while(len--)
 80046ca:	e004      	b.n	80046d6 <writeBuffer+0x22>
	{
    //SerialUSB.print(*data,HEX);
    //SerialUSB.print(" ");
    SPISend( *data);
 80046cc:	f816 0b01 	ldrb.w	r0, [r6], #1
 80046d0:	f7ff feb8 	bl	8004444 <SPISend>
{
  CSACTIVE;
  // issue write command
	SPISend(ENC624J600_WRITE_EGPDATA);
  //SerialUSB.print("writeBuffer: ");
	while(len--)
 80046d4:	4625      	mov	r5, r4
 80046d6:	1e6b      	subs	r3, r5, #1
 80046d8:	b29c      	uxth	r4, r3
 80046da:	2d00      	cmp	r5, #0
 80046dc:	d1f6      	bne.n	80046cc <writeBuffer+0x18>
    //SerialUSB.print(" ");
    SPISend( *data);
    data++;
	}
  //SerialUSB.println("");   
  CSPASSIVE;
 80046de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046e2:	4802      	ldr	r0, [pc, #8]	; (80046ec <writeBuffer+0x38>)
 80046e4:	f7fc f8dc 	bl	80008a0 <GPIO_SetBits>
 80046e8:	bd70      	pop	{r4, r5, r6, pc}
 80046ea:	bf00      	nop
 80046ec:	40010800 	.word	0x40010800

080046f0 <Enc424J600Network_initP0>:




void Enc424J600Network_initP0(uint8_t* macaddr)
{
 80046f0:	b510      	push	{r4, lr}
 80046f2:	4604      	mov	r4, r0
//	digitalWrite(ENC28J60_CONTROL_CS, HIGH);
//  SPI.begin();
  
	//8.1 RESET
	//STEP ONE
	writeControlRegister16(EUDASTL,0x1234);
 80046f4:	f241 2134 	movw	r1, #4660	; 0x1234
 80046f8:	2016      	movs	r0, #22
 80046fa:	f7ff ff71 	bl	80045e0 <writeControlRegister16>

	//STEP TWO
	while(readControlRegister16(EUDASTL)!=0x1234)
 80046fe:	e004      	b.n	800470a <Enc424J600Network_initP0+0x1a>
	{
		writeControlRegister16(EUDASTL,0x1234);
 8004700:	f241 2134 	movw	r1, #4660	; 0x1234
 8004704:	2016      	movs	r0, #22
 8004706:	f7ff ff6b 	bl	80045e0 <writeControlRegister16>
	//8.1 RESET
	//STEP ONE
	writeControlRegister16(EUDASTL,0x1234);

	//STEP TWO
	while(readControlRegister16(EUDASTL)!=0x1234)
 800470a:	2016      	movs	r0, #22
 800470c:	f7ff ff44 	bl	8004598 <readControlRegister16>
 8004710:	f241 2334 	movw	r3, #4660	; 0x1234
 8004714:	4298      	cmp	r0, r3
 8004716:	d1f3      	bne.n	8004700 <Enc424J600Network_initP0+0x10>
	{
		writeControlRegister16(EUDASTL,0x1234);
	}
  
	//STEP THREE
	while(readControlRegister(ESTATH) & ESTAT_CLKRDY);
 8004718:	20fb      	movs	r0, #251	; 0xfb
 800471a:	f7ff ff2b 	bl	8004574 <readControlRegister>
 800471e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8004722:	d1f9      	bne.n	8004718 <Enc424J600Network_initP0+0x28>

	//STEP FOUR
	// reset command
	enc_SBI(ENC624J600_ETH_RESET,0);
 8004724:	2100      	movs	r1, #0
 8004726:	20ca      	movs	r0, #202	; 0xca
 8004728:	f7ff feec 	bl	8004504 <enc_SBI>

	//STEP FIVE
	delayMicroseconds(25);
 800472c:	2019      	movs	r0, #25
 800472e:	f7ff f93d 	bl	80039ac <delayMicroseconds>
	//STEP SIX
	if (readControlRegister16(EUDASTL)==0x0000)
 8004732:	2016      	movs	r0, #22
 8004734:	f7ff ff30 	bl	8004598 <readControlRegister16>
 8004738:	2800      	cmp	r0, #0
 800473a:	d142      	bne.n	80047c2 <Enc424J600Network_initP0+0xd2>
	{
		delayMicroseconds(265);		
 800473c:	f240 1009 	movw	r0, #265	; 0x109
 8004740:	f7ff f934 	bl	80039ac <delayMicroseconds>
		//8.2 CLKOUT Frequency
		// Arduino : 16MHz =>  COCON=0100 
		// We do not use the clkout
		//writeBitField( ECON2H,ECON2_COCON2>>8);
		//8.3 reception
		nextPacketPtr = RXSTART_INIT;
 8004744:	f44f 519a 	mov.w	r1, #4928	; 0x1340
 8004748:	4b1e      	ldr	r3, [pc, #120]	; (80047c4 <Enc424J600Network_initP0+0xd4>)
 800474a:	8019      	strh	r1, [r3, #0]
		writeControlRegister16(ERXSTL, RXSTART_INIT);
 800474c:	2004      	movs	r0, #4
 800474e:	f7ff ff47 	bl	80045e0 <writeControlRegister16>

		
		writeControlRegister16(ERXTAILL, RXSTOP_INIT);
 8004752:	f645 71ff 	movw	r1, #24575	; 0x5fff
 8004756:	2006      	movs	r0, #6
 8004758:	f7ff ff42 	bl	80045e0 <writeControlRegister16>
			
 		// USER buffer : EUDAST Pointer at a higher memory address relative to the end address.
 		writeControlRegister16(EUDASTL, 0x5FFF);
 800475c:	f645 71ff 	movw	r1, #24575	; 0x5fff
 8004760:	2016      	movs	r0, #22
 8004762:	f7ff ff3d 	bl	80045e0 <writeControlRegister16>
 		writeControlRegister16(EUDANDL, 0x5FFF);
 8004766:	f645 71ff 	movw	r1, #24575	; 0x5fff
 800476a:	2018      	movs	r0, #24
 800476c:	f7ff ff38 	bl	80045e0 <writeControlRegister16>
		// frames shorter than 64 bits => disabled
		// CRC error rejection => enabled
		// Unicast collection filter => enabled
		// Not me unicast filter => disabled
		// Multicast collection filter 
		writeControlRegister(ERXFCONL,ERXFCON_CRCEN|ERXFCON_RUNTEN|ERXFCON_BCEN|ERXFCON_UCEN);//ERXFCON_CRCEN|ERXFCON_RUNTEN|ERXFCON_UCEN);
 8004770:	2159      	movs	r1, #89	; 0x59
 8004772:	2034      	movs	r0, #52	; 0x34
 8004774:	f7ff ff52 	bl	800461c <writeControlRegister>
		//exact pattern
		//writeControlRegister(ERXFCONH,0x01);
					      
		// 8.6 MAC initialization ...
		//flow control ???
		writeBitField( MACON2L, MACON2_TXCRCEN|MACON2_PADCFG0|MACON2_PADCFG1|MACON2_PADCFG2);
 8004778:	21f0      	movs	r1, #240	; 0xf0
 800477a:	2042      	movs	r0, #66	; 0x42
 800477c:	f7ff ff1e 	bl	80045bc <writeBitField>

		writeControlRegister16(MAMXFLL, MAX_FRAMELEN);
 8004780:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8004784:	204a      	movs	r0, #74	; 0x4a
 8004786:	f7ff ff2b 	bl	80045e0 <writeControlRegister16>



		writeControlRegister(MAADR1L, macaddr[0]);
 800478a:	7821      	ldrb	r1, [r4, #0]
 800478c:	2064      	movs	r0, #100	; 0x64
 800478e:	f7ff ff45 	bl	800461c <writeControlRegister>
		writeControlRegister(MAADR1H, macaddr[1]);
 8004792:	7861      	ldrb	r1, [r4, #1]
 8004794:	2065      	movs	r0, #101	; 0x65
 8004796:	f7ff ff41 	bl	800461c <writeControlRegister>
		writeControlRegister(MAADR2L, macaddr[2]);
 800479a:	78a1      	ldrb	r1, [r4, #2]
 800479c:	2062      	movs	r0, #98	; 0x62
 800479e:	f7ff ff3d 	bl	800461c <writeControlRegister>
		writeControlRegister(MAADR2H, macaddr[3]);
 80047a2:	78e1      	ldrb	r1, [r4, #3]
 80047a4:	2063      	movs	r0, #99	; 0x63
 80047a6:	f7ff ff39 	bl	800461c <writeControlRegister>
		writeControlRegister(MAADR3L, macaddr[4]);
 80047aa:	7921      	ldrb	r1, [r4, #4]
 80047ac:	2060      	movs	r0, #96	; 0x60
 80047ae:	f7ff ff35 	bl	800461c <writeControlRegister>
		writeControlRegister(MAADR3H, macaddr[5]);
 80047b2:	7961      	ldrb	r1, [r4, #5]
 80047b4:	2061      	movs	r0, #97	; 0x61
 80047b6:	f7ff ff31 	bl	800461c <writeControlRegister>
		// configuration LED
		//		ENC624J600WCRU(EIDLEDH, 0x06);

			 //	ENC624J600PhyWrite(PHCON1,PHCON1_PFULDPX);
		// enable reception
		enc_SBI(ENC624J600_ENABLE_RX,0);
 80047ba:	2100      	movs	r1, #0
 80047bc:	20e8      	movs	r0, #232	; 0xe8
 80047be:	f7ff fea1 	bl	8004504 <enc_SBI>
 80047c2:	bd10      	pop	{r4, pc}
 80047c4:	20000c1c 	.word	0x20000c1c

080047c8 <enc424j600PacketReceiveP0>:
//    }
//  return (0);
//}

unsigned int enc424j600PacketReceiveP0(unsigned int maxlen, unsigned char* packet)
{
 80047c8:	b570      	push	{r4, r5, r6, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	4606      	mov	r6, r0
 80047ce:	460d      	mov	r5, r1
    unsigned char rxdata[6];
    unsigned int len;
    uint16_t newRXTail;
    if (!(readControlRegister(EIRL) & EIR_PKTIF))
 80047d0:	20fc      	movs	r0, #252	; 0xfc
 80047d2:	f7ff fecf 	bl	8004574 <readControlRegister>
 80047d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047da:	d041      	beq.n	8004860 <enc424j600PacketReceiveP0+0x98>
    {
        return (0);
    }
    //printf("Packets 0 %d\n",readControlRegister(ESTATL));
    // Set the RX Read Pointer to the beginning of the next unprocessed packet
    writePointer(ENC624J600_WRITE_ERXRDPT,nextPacketPtr,0);
 80047dc:	4c23      	ldr	r4, [pc, #140]	; (800486c <enc424j600PacketReceiveP0+0xa4>)
 80047de:	2200      	movs	r2, #0
 80047e0:	8821      	ldrh	r1, [r4, #0]
 80047e2:	2064      	movs	r0, #100	; 0x64
 80047e4:	f7ff ff2c 	bl	8004640 <writePointer>
    readBuffer(2, rxdata);
 80047e8:	4669      	mov	r1, sp
 80047ea:	2002      	movs	r0, #2
 80047ec:	f7ff ff44 	bl	8004678 <readBuffer>
    nextPacketPtr  =  rxdata[1];
 80047f0:	f89d 2001 	ldrb.w	r2, [sp, #1]
    nextPacketPtr  =  nextPacketPtr<<8;
    nextPacketPtr  |=  rxdata[0];
 80047f4:	f89d 3000 	ldrb.w	r3, [sp]
 80047f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80047fc:	8023      	strh	r3, [r4, #0]
    readBuffer(6, rxdata);
 80047fe:	4669      	mov	r1, sp
 8004800:	2006      	movs	r0, #6
 8004802:	f7ff ff39 	bl	8004678 <readBuffer>
    len  =  rxdata[1];
 8004806:	f89d 4001 	ldrb.w	r4, [sp, #1]
    len  =  len<<8;
    len  |=  rxdata[0];
 800480a:	f89d 3000 	ldrb.w	r3, [sp]
 800480e:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
    len-=4;
 8004812:	3c04      	subs	r4, #4
    if ((rxdata[2] & 0x80)==0)
 8004814:	f99d 3002 	ldrsb.w	r3, [sp, #2]
 8004818:	2b00      	cmp	r3, #0
 800481a:	db00      	blt.n	800481e <enc424j600PacketReceiveP0+0x56>
    {
        len=0;
 800481c:	2400      	movs	r4, #0
    }
    if(len>maxlen)
 800481e:	42b4      	cmp	r4, r6
 8004820:	d900      	bls.n	8004824 <enc424j600PacketReceiveP0+0x5c>
    	len=0;
 8004822:	2400      	movs	r4, #0
    readBuffer(len,packet);
 8004824:	4629      	mov	r1, r5
 8004826:	b2a0      	uxth	r0, r4
 8004828:	f7ff ff26 	bl	8004678 <readBuffer>
    newRXTail = nextPacketPtr - 2;
 800482c:	4b0f      	ldr	r3, [pc, #60]	; (800486c <enc424j600PacketReceiveP0+0xa4>)
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	1e9d      	subs	r5, r3, #2
 8004832:	b2ad      	uxth	r5, r5

    if (nextPacketPtr == RXSTART_INIT)
 8004834:	f5b3 5f9a 	cmp.w	r3, #4928	; 0x1340
 8004838:	d101      	bne.n	800483e <enc424j600PacketReceiveP0+0x76>
        newRXTail = 0x5FFE - 2;
 800483a:	f645 75fc 	movw	r5, #24572	; 0x5ffc
    //Packet decrement
    writeControlRegister(ECON1H, 0x01);
 800483e:	2101      	movs	r1, #1
 8004840:	20ff      	movs	r0, #255	; 0xff
 8004842:	f7ff feeb 	bl	800461c <writeControlRegister>
    //printf("Packets 1 %d\n",readControlRegister(ESTATL));
    //Write new RX tail
    writeControlRegister(ERXTAILL, newRXTail);     //
 8004846:	b2e9      	uxtb	r1, r5
 8004848:	2006      	movs	r0, #6
 800484a:	f7ff fee7 	bl	800461c <writeControlRegister>
    writeControlRegister(ERXTAILH, newRXTail>>8);
 800484e:	0a29      	lsrs	r1, r5, #8
 8004850:	2007      	movs	r0, #7
 8004852:	f7ff fee3 	bl	800461c <writeControlRegister>
    if (len>maxlen-1)
 8004856:	1e70      	subs	r0, r6, #1
 8004858:	4284      	cmp	r4, r0
 800485a:	d903      	bls.n	8004864 <enc424j600PacketReceiveP0+0x9c>
	{
		//len=maxlen-1;
		return 0;
 800485c:	2000      	movs	r0, #0
 800485e:	e002      	b.n	8004866 <enc424j600PacketReceiveP0+0x9e>
    unsigned char rxdata[6];
    unsigned int len;
    uint16_t newRXTail;
    if (!(readControlRegister(EIRL) & EIR_PKTIF))
    {
        return (0);
 8004860:	2000      	movs	r0, #0
 8004862:	e000      	b.n	8004866 <enc424j600PacketReceiveP0+0x9e>
    if (len>maxlen-1)
	{
		//len=maxlen-1;
		return 0;
	}
    return len;
 8004864:	4620      	mov	r0, r4
}
 8004866:	b002      	add	sp, #8
 8004868:	bd70      	pop	{r4, r5, r6, pc}
 800486a:	bf00      	nop
 800486c:	20000c1c 	.word	0x20000c1c

08004870 <enc424j600PacketSendP0>:


void enc424j600PacketSendP0(unsigned int len, unsigned char* packet)
{
 8004870:	b538      	push	{r3, r4, r5, lr}
 8004872:	4604      	mov	r4, r0
 8004874:	460d      	mov	r5, r1
	writePointer(ENC624J600_WRITE_EGPWRPT,TXSTART_INIT,0);
 8004876:	2200      	movs	r2, #0
 8004878:	2130      	movs	r1, #48	; 0x30
 800487a:	206c      	movs	r0, #108	; 0x6c
 800487c:	f7ff fee0 	bl	8004640 <writePointer>
	writeControlRegister(ETXSTL,(TXSTART_INIT)&0x00FF);
 8004880:	2130      	movs	r1, #48	; 0x30
 8004882:	2000      	movs	r0, #0
 8004884:	f7ff feca 	bl	800461c <writeControlRegister>
	writeControlRegister(ETXSTH,(TXSTART_INIT)>>8);
 8004888:	2100      	movs	r1, #0
 800488a:	2001      	movs	r0, #1
 800488c:	f7ff fec6 	bl	800461c <writeControlRegister>
    writeControlRegister(ETXLENL, len&0xFF);
 8004890:	b2e1      	uxtb	r1, r4
 8004892:	2002      	movs	r0, #2
 8004894:	f7ff fec2 	bl	800461c <writeControlRegister>
    writeControlRegister(ETXLENH, len>>8);
 8004898:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800489c:	2003      	movs	r0, #3
 800489e:	f7ff febd 	bl	800461c <writeControlRegister>
    writeBuffer(len, packet);
 80048a2:	4629      	mov	r1, r5
 80048a4:	b2a0      	uxth	r0, r4
 80048a6:	f7ff ff05 	bl	80046b4 <writeBuffer>
    //enc_writeOp(ENC624J600_BIT_FIELD_SET, ECON1L, ECON1_TXRTS,1);
    //writeBitField(ECON1L,ECON1_TXRTS);
    writeControlRegister(ECON1L,0x03);
 80048aa:	2103      	movs	r1, #3
 80048ac:	20fe      	movs	r0, #254	; 0xfe
 80048ae:	f7ff feb5 	bl	800461c <writeControlRegister>
 80048b2:	bd38      	pop	{r3, r4, r5, pc}

080048b4 <clock_time>:
#include "sys_timer.h"


clock_time_t
clock_time(void)
{
 80048b4:	b508      	push	{r3, lr}
  return (clock_time_t) Sys_GetTick();
 80048b6:	f7ff f867 	bl	8003988 <Sys_GetTick>
}
 80048ba:	bd08      	pop	{r3, pc}

080048bc <add_msg_type>:
static const u8_t magic_cookie[4] = {99, 130, 83, 99};
/*---------------------------------------------------------------------------*/
static u8_t *
add_msg_type(u8_t *optptr, u8_t type)
{
  *optptr++ = DHCP_OPTION_MSG_TYPE;
 80048bc:	2335      	movs	r3, #53	; 0x35
 80048be:	7003      	strb	r3, [r0, #0]
  *optptr++ = 1;
 80048c0:	2301      	movs	r3, #1
 80048c2:	7043      	strb	r3, [r0, #1]
  *optptr++ = type;
 80048c4:	7081      	strb	r1, [r0, #2]
  return optptr;
}
 80048c6:	3003      	adds	r0, #3
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop

080048cc <add_server_id>:
/*---------------------------------------------------------------------------*/
static u8_t *
add_server_id(u8_t *optptr)
{
 80048cc:	4603      	mov	r3, r0
  *optptr++ = DHCP_OPTION_SERVER_ID;
 80048ce:	2236      	movs	r2, #54	; 0x36
 80048d0:	7002      	strb	r2, [r0, #0]
  *optptr++ = 4;
 80048d2:	2204      	movs	r2, #4
 80048d4:	7042      	strb	r2, [r0, #1]
  memcpy(optptr, s.serverid, 4);
 80048d6:	4a03      	ldr	r2, [pc, #12]	; (80048e4 <add_server_id+0x18>)
 80048d8:	6810      	ldr	r0, [r2, #0]
 80048da:	f8c3 0002 	str.w	r0, [r3, #2]
  return optptr + 4;
}
 80048de:	1d98      	adds	r0, r3, #6
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	20000c3c 	.word	0x20000c3c

080048e8 <add_req_options>:
}
/*---------------------------------------------------------------------------*/
static u8_t *
add_req_options(u8_t *optptr)
{
  *optptr++ = DHCP_OPTION_REQ_LIST;
 80048e8:	2337      	movs	r3, #55	; 0x37
 80048ea:	7003      	strb	r3, [r0, #0]
  *optptr++ = 3;
 80048ec:	2303      	movs	r3, #3
 80048ee:	7043      	strb	r3, [r0, #1]
  *optptr++ = DHCP_OPTION_SUBNET_MASK;
 80048f0:	2201      	movs	r2, #1
 80048f2:	7082      	strb	r2, [r0, #2]
  *optptr++ = DHCP_OPTION_ROUTER;
 80048f4:	70c3      	strb	r3, [r0, #3]
  *optptr++ = DHCP_OPTION_DNS_SERVER;
 80048f6:	2306      	movs	r3, #6
 80048f8:	7103      	strb	r3, [r0, #4]
  return optptr;
}
 80048fa:	3005      	adds	r0, #5
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop

08004900 <add_end>:
/*---------------------------------------------------------------------------*/
static u8_t *
add_end(u8_t *optptr)
{
  *optptr++ = DHCP_OPTION_END;
 8004900:	23ff      	movs	r3, #255	; 0xff
 8004902:	7003      	strb	r3, [r0, #0]
  return optptr;
}
 8004904:	3001      	adds	r0, #1
 8004906:	4770      	bx	lr

08004908 <add_req_ipaddr>:
  return optptr + 4;
}
/*---------------------------------------------------------------------------*/
static u8_t *
add_req_ipaddr(u8_t *optptr)
{
 8004908:	4603      	mov	r3, r0
  *optptr++ = DHCP_OPTION_REQ_IPADDR;
 800490a:	2232      	movs	r2, #50	; 0x32
 800490c:	7002      	strb	r2, [r0, #0]
  *optptr++ = 4;
 800490e:	2204      	movs	r2, #4
 8004910:	7042      	strb	r2, [r0, #1]
  memcpy(optptr, s.ipaddr, 4);
 8004912:	4a03      	ldr	r2, [pc, #12]	; (8004920 <add_req_ipaddr+0x18>)
 8004914:	6810      	ldr	r0, [r2, #0]
 8004916:	f8c3 0002 	str.w	r0, [r3, #2]
  return optptr + 4;
}
 800491a:	1d98      	adds	r0, r3, #6
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	20000c44 	.word	0x20000c44

08004924 <parse_options>:
  uip_send(uip_appdata, end - (u8_t *)uip_appdata);
}
/*---------------------------------------------------------------------------*/
static u8_t
parse_options(u8_t *optptr, int len)
{
 8004924:	b410      	push	{r4}
 8004926:	4603      	mov	r3, r0
  u8_t *end = optptr + len;
 8004928:	4401      	add	r1, r0
  u8_t type = 0;
 800492a:	2400      	movs	r4, #0

  while(optptr < end) {
 800492c:	e02e      	b.n	800498c <parse_options+0x68>
    switch(*optptr) {
 800492e:	781a      	ldrb	r2, [r3, #0]
 8004930:	2a33      	cmp	r2, #51	; 0x33
 8004932:	d024      	beq.n	800497e <parse_options+0x5a>
 8004934:	d806      	bhi.n	8004944 <parse_options+0x20>
 8004936:	2a03      	cmp	r2, #3
 8004938:	d010      	beq.n	800495c <parse_options+0x38>
 800493a:	2a06      	cmp	r2, #6
 800493c:	d013      	beq.n	8004966 <parse_options+0x42>
 800493e:	2a01      	cmp	r2, #1
 8004940:	d121      	bne.n	8004986 <parse_options+0x62>
 8004942:	e006      	b.n	8004952 <parse_options+0x2e>
 8004944:	2a36      	cmp	r2, #54	; 0x36
 8004946:	d015      	beq.n	8004974 <parse_options+0x50>
 8004948:	2aff      	cmp	r2, #255	; 0xff
 800494a:	d021      	beq.n	8004990 <parse_options+0x6c>
 800494c:	2a35      	cmp	r2, #53	; 0x35
 800494e:	d11a      	bne.n	8004986 <parse_options+0x62>
 8004950:	e00e      	b.n	8004970 <parse_options+0x4c>
    case DHCP_OPTION_SUBNET_MASK:
      memcpy(s.netmask, optptr + 2, 4);
 8004952:	f8d3 0002 	ldr.w	r0, [r3, #2]
 8004956:	4a10      	ldr	r2, [pc, #64]	; (8004998 <parse_options+0x74>)
 8004958:	6290      	str	r0, [r2, #40]	; 0x28
      break;
 800495a:	e014      	b.n	8004986 <parse_options+0x62>
    case DHCP_OPTION_ROUTER:
      memcpy(s.default_router, optptr + 2, 4);
 800495c:	f8d3 0002 	ldr.w	r0, [r3, #2]
 8004960:	4a0d      	ldr	r2, [pc, #52]	; (8004998 <parse_options+0x74>)
 8004962:	6310      	str	r0, [r2, #48]	; 0x30
      break;
 8004964:	e00f      	b.n	8004986 <parse_options+0x62>
    case DHCP_OPTION_DNS_SERVER:
      memcpy(s.dnsaddr, optptr + 2, 4);
 8004966:	f8d3 0002 	ldr.w	r0, [r3, #2]
 800496a:	4a0b      	ldr	r2, [pc, #44]	; (8004998 <parse_options+0x74>)
 800496c:	62d0      	str	r0, [r2, #44]	; 0x2c
      break;
 800496e:	e00a      	b.n	8004986 <parse_options+0x62>
    case DHCP_OPTION_MSG_TYPE:
      type = *(optptr + 2);
 8004970:	789c      	ldrb	r4, [r3, #2]
      break;
 8004972:	e008      	b.n	8004986 <parse_options+0x62>
    case DHCP_OPTION_SERVER_ID:
      memcpy(s.serverid, optptr + 2, 4);
 8004974:	f8d3 0002 	ldr.w	r0, [r3, #2]
 8004978:	4a07      	ldr	r2, [pc, #28]	; (8004998 <parse_options+0x74>)
 800497a:	61d0      	str	r0, [r2, #28]
      break;
 800497c:	e003      	b.n	8004986 <parse_options+0x62>
    case DHCP_OPTION_LEASE_TIME:
      memcpy(s.lease_time, optptr + 2, 4);
 800497e:	f8d3 0002 	ldr.w	r0, [r3, #2]
 8004982:	4a05      	ldr	r2, [pc, #20]	; (8004998 <parse_options+0x74>)
 8004984:	6210      	str	r0, [r2, #32]
      break;
    case DHCP_OPTION_END:
      return type;
    }

    optptr += optptr[1] + 2;
 8004986:	785a      	ldrb	r2, [r3, #1]
 8004988:	3202      	adds	r2, #2
 800498a:	4413      	add	r3, r2
parse_options(u8_t *optptr, int len)
{
  u8_t *end = optptr + len;
  u8_t type = 0;

  while(optptr < end) {
 800498c:	428b      	cmp	r3, r1
 800498e:	d3ce      	bcc.n	800492e <parse_options+0xa>
    }

    optptr += optptr[1] + 2;
  }
  return type;
}
 8004990:	4620      	mov	r0, r4
 8004992:	bc10      	pop	{r4}
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	20000c20 	.word	0x20000c20

0800499c <create_msg>:
  return optptr;
}
/*---------------------------------------------------------------------------*/
static void
create_msg(register struct dhcp_msg *m)
{
 800499c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049a0:	4604      	mov	r4, r0
//	printf("Handle 19\n");
  m->op = DHCP_REQUEST;
 80049a2:	2301      	movs	r3, #1
 80049a4:	7003      	strb	r3, [r0, #0]
  m->htype = DHCP_HTYPE_ETHERNET;
 80049a6:	7043      	strb	r3, [r0, #1]
  m->hlen = s.mac_len;
 80049a8:	4b28      	ldr	r3, [pc, #160]	; (8004a4c <create_msg+0xb0>)
 80049aa:	699a      	ldr	r2, [r3, #24]
 80049ac:	7082      	strb	r2, [r0, #2]
  m->hops = 0;
 80049ae:	2700      	movs	r7, #0
 80049b0:	70c7      	strb	r7, [r0, #3]
//  printf("Handle 20\n");
  memcpy(m->xid, xid, sizeof(m->xid));
 80049b2:	4a27      	ldr	r2, [pc, #156]	; (8004a50 <create_msg+0xb4>)
 80049b4:	6810      	ldr	r0, [r2, #0]
 80049b6:	6060      	str	r0, [r4, #4]
  m->secs = 0;
 80049b8:	8127      	strh	r7, [r4, #8]
  m->flags = HTONS(BOOTP_BROADCAST); /*  Broadcast bit. */
 80049ba:	f04f 0980 	mov.w	r9, #128	; 0x80
 80049be:	f8a4 900a 	strh.w	r9, [r4, #10]
  /*  uip_ipaddr_copy(m->ciaddr, uip_hostaddr);*/
//  printf("Handle 21\n");
  memcpy(m->ciaddr, uip_hostaddr, sizeof(m->ciaddr));
 80049c2:	4a24      	ldr	r2, [pc, #144]	; (8004a54 <create_msg+0xb8>)
 80049c4:	6812      	ldr	r2, [r2, #0]
 80049c6:	60e2      	str	r2, [r4, #12]
  memset(m->yiaddr, 0, sizeof(m->yiaddr));
 80049c8:	6127      	str	r7, [r4, #16]
  memset(m->siaddr, 0, sizeof(m->siaddr));
 80049ca:	6167      	str	r7, [r4, #20]
  memset(m->giaddr, 0, sizeof(m->giaddr));
 80049cc:	61a7      	str	r7, [r4, #24]
  memcpy(m->chaddr, s.mac_addr, s.mac_len);
 80049ce:	699d      	ldr	r5, [r3, #24]
 80049d0:	462a      	mov	r2, r5
 80049d2:	6959      	ldr	r1, [r3, #20]
 80049d4:	f104 001c 	add.w	r0, r4, #28
 80049d8:	f001 fbeb 	bl	80061b2 <memcpy>
  memset(&m->chaddr[s.mac_len], 0, sizeof(m->chaddr) - s.mac_len);
 80049dc:	f105 0018 	add.w	r0, r5, #24
 80049e0:	4420      	add	r0, r4
 80049e2:	f1c5 0210 	rsb	r2, r5, #16
 80049e6:	4639      	mov	r1, r7
 80049e8:	3004      	adds	r0, #4
 80049ea:	f001 fbed 	bl	80061c8 <memset>
//  printf("Handle 22\n");
#ifndef UIP_CONF_DHCP_LIGHT
  memset(m->sname, 0, sizeof(m->sname));
 80049ee:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 80049f2:	2240      	movs	r2, #64	; 0x40
 80049f4:	4639      	mov	r1, r7
 80049f6:	4640      	mov	r0, r8
 80049f8:	f001 fbe6 	bl	80061c8 <memset>
  memcpy(m->sname,hstname,sizeof(hstname));
 80049fc:	4d16      	ldr	r5, [pc, #88]	; (8004a58 <create_msg+0xbc>)
 80049fe:	462e      	mov	r6, r5
 8004a00:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004a02:	62e0      	str	r0, [r4, #44]	; 0x2c
 8004a04:	6321      	str	r1, [r4, #48]	; 0x30
 8004a06:	6362      	str	r2, [r4, #52]	; 0x34
 8004a08:	63a3      	str	r3, [r4, #56]	; 0x38
 8004a0a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004a0c:	63e0      	str	r0, [r4, #60]	; 0x3c
 8004a0e:	6421      	str	r1, [r4, #64]	; 0x40
 8004a10:	6462      	str	r2, [r4, #68]	; 0x44
 8004a12:	64a3      	str	r3, [r4, #72]	; 0x48
  memset(m->file, 0, sizeof(m->file));
 8004a14:	464a      	mov	r2, r9
 8004a16:	4639      	mov	r1, r7
 8004a18:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8004a1c:	f001 fbd4 	bl	80061c8 <memset>
#endif
  memcpy(m->options,hstname,sizeof(hstname));
 8004a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a22:	f8c4 10f0 	str.w	r1, [r4, #240]	; 0xf0
 8004a26:	f8c4 20f4 	str.w	r2, [r4, #244]	; 0xf4
 8004a2a:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
 8004a2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a30:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
 8004a34:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004a38:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
 8004a3c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
  memcpy(m->options, magic_cookie, sizeof(magic_cookie));
 8004a40:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <create_msg+0xc0>)
 8004a42:	6818      	ldr	r0, [r3, #0]
 8004a44:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
 8004a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a4c:	20000c20 	.word	0x20000c20
 8004a50:	08007264 	.word	0x08007264
 8004a54:	20001628 	.word	0x20001628
 8004a58:	08007268 	.word	0x08007268
 8004a5c:	08007288 	.word	0x08007288

08004a60 <send_request>:
  uip_send(uip_appdata, end - (u8_t *)uip_appdata);
}
/*---------------------------------------------------------------------------*/
static void
send_request(void)
{
 8004a60:	b538      	push	{r3, r4, r5, lr}
  u8_t *end;
  struct dhcp_msg *m = (struct dhcp_msg *)uip_appdata;
 8004a62:	4c0b      	ldr	r4, [pc, #44]	; (8004a90 <send_request+0x30>)
 8004a64:	6825      	ldr	r5, [r4, #0]

  create_msg(m);
 8004a66:	4628      	mov	r0, r5
 8004a68:	f7ff ff98 	bl	800499c <create_msg>
  
  end = add_msg_type(&m->options[4], DHCPREQUEST);
 8004a6c:	2103      	movs	r1, #3
 8004a6e:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
 8004a72:	f7ff ff23 	bl	80048bc <add_msg_type>
  end=end+25;
  end = add_server_id(end);
 8004a76:	3019      	adds	r0, #25
 8004a78:	f7ff ff28 	bl	80048cc <add_server_id>
  end = add_req_ipaddr(end);
 8004a7c:	f7ff ff44 	bl	8004908 <add_req_ipaddr>
  end = add_end(end);
 8004a80:	f7ff ff3e 	bl	8004900 <add_end>
  
  uip_send(uip_appdata, end - (u8_t *)uip_appdata);
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	1ac1      	subs	r1, r0, r3
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f001 f931 	bl	8005cf0 <uip_send>
 8004a8e:	bd38      	pop	{r3, r4, r5, pc}
 8004a90:	20001590 	.word	0x20001590

08004a94 <send_discover>:

}
/*---------------------------------------------------------------------------*/
static void
send_discover(void)
{
 8004a94:	b538      	push	{r3, r4, r5, lr}
  u8_t *end;
  struct dhcp_msg *m = (struct dhcp_msg *)uip_appdata;
 8004a96:	4d0e      	ldr	r5, [pc, #56]	; (8004ad0 <send_discover+0x3c>)
 8004a98:	682c      	ldr	r4, [r5, #0]
////  printf("Handle 11\n");
  create_msg(m);
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	f7ff ff7e 	bl	800499c <create_msg>

  end = add_msg_type(&m->options[4], DHCPDISCOVER);
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
 8004aa6:	f7ff ff09 	bl	80048bc <add_msg_type>
  memcpy(m->options+10, s.mac_addr, 6);
 8004aaa:	4b0a      	ldr	r3, [pc, #40]	; (8004ad4 <send_discover+0x40>)
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	f8c4 20f6 	str.w	r2, [r4, #246]	; 0xf6
 8004ab4:	889b      	ldrh	r3, [r3, #4]
 8004ab6:	f8a4 30fa 	strh.w	r3, [r4, #250]	; 0xfa
  //end = add_msg_type(&m->options[20], DHCPDISCOVER);
  end=end+25;//hostname
  end = add_req_options(end);
 8004aba:	3019      	adds	r0, #25
 8004abc:	f7ff ff14 	bl	80048e8 <add_req_options>
  end = add_end(end);
 8004ac0:	f7ff ff1e 	bl	8004900 <add_end>
  //printf("Handle 10\n");
  uip_send(uip_appdata, end - (u8_t *)uip_appdata);
 8004ac4:	682b      	ldr	r3, [r5, #0]
 8004ac6:	1ac1      	subs	r1, r0, r3
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f001 f911 	bl	8005cf0 <uip_send>
 8004ace:	bd38      	pop	{r3, r4, r5, pc}
 8004ad0:	20001590 	.word	0x20001590
 8004ad4:	20000c20 	.word	0x20000c20

08004ad8 <parse_msg>:
  return type;
}
/*---------------------------------------------------------------------------*/
static u8_t
parse_msg(void)
{
 8004ad8:	b510      	push	{r4, lr}
  struct dhcp_msg *m = (struct dhcp_msg *)uip_appdata;
 8004ada:	4b11      	ldr	r3, [pc, #68]	; (8004b20 <parse_msg+0x48>)
 8004adc:	681c      	ldr	r4, [r3, #0]
  //printf("\n----PARSE  %d %d %d %d %d %d\n\n",m->op,memcmp(m->xid, xid, sizeof(xid)),memcmp(m->chaddr, s.mac_addr, s.mac_len),m->htype,m->hlen,m->hops);
  if(m->op == DHCP_REPLY &&
 8004ade:	7823      	ldrb	r3, [r4, #0]
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d117      	bne.n	8004b14 <parse_msg+0x3c>
     memcmp(m->xid, xid, sizeof(xid)) == 0 &&
 8004ae4:	2204      	movs	r2, #4
 8004ae6:	490f      	ldr	r1, [pc, #60]	; (8004b24 <parse_msg+0x4c>)
 8004ae8:	18a0      	adds	r0, r4, r2
 8004aea:	f001 fb53 	bl	8006194 <memcmp>
static u8_t
parse_msg(void)
{
  struct dhcp_msg *m = (struct dhcp_msg *)uip_appdata;
  //printf("\n----PARSE  %d %d %d %d %d %d\n\n",m->op,memcmp(m->xid, xid, sizeof(xid)),memcmp(m->chaddr, s.mac_addr, s.mac_len),m->htype,m->hlen,m->hops);
  if(m->op == DHCP_REPLY &&
 8004aee:	b998      	cbnz	r0, 8004b18 <parse_msg+0x40>
     memcmp(m->xid, xid, sizeof(xid)) == 0 &&
     memcmp(m->chaddr, s.mac_addr, s.mac_len) == 0) {
 8004af0:	4b0d      	ldr	r3, [pc, #52]	; (8004b28 <parse_msg+0x50>)
 8004af2:	699a      	ldr	r2, [r3, #24]
 8004af4:	6959      	ldr	r1, [r3, #20]
 8004af6:	f104 001c 	add.w	r0, r4, #28
 8004afa:	f001 fb4b 	bl	8006194 <memcmp>
parse_msg(void)
{
  struct dhcp_msg *m = (struct dhcp_msg *)uip_appdata;
  //printf("\n----PARSE  %d %d %d %d %d %d\n\n",m->op,memcmp(m->xid, xid, sizeof(xid)),memcmp(m->chaddr, s.mac_addr, s.mac_len),m->htype,m->hlen,m->hops);
  if(m->op == DHCP_REPLY &&
     memcmp(m->xid, xid, sizeof(xid)) == 0 &&
 8004afe:	b968      	cbnz	r0, 8004b1c <parse_msg+0x44>
     memcmp(m->chaddr, s.mac_addr, s.mac_len) == 0) {
    memcpy(s.ipaddr, m->yiaddr, 4);
 8004b00:	6920      	ldr	r0, [r4, #16]
 8004b02:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <parse_msg+0x50>)
 8004b04:	6258      	str	r0, [r3, #36]	; 0x24
    return parse_options(&m->options[4], uip_datalen());
 8004b06:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <parse_msg+0x54>)
 8004b08:	8819      	ldrh	r1, [r3, #0]
 8004b0a:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
 8004b0e:	f7ff ff09 	bl	8004924 <parse_options>
 8004b12:	bd10      	pop	{r4, pc}
  }
  return 0;
 8004b14:	2000      	movs	r0, #0
 8004b16:	bd10      	pop	{r4, pc}
 8004b18:	2000      	movs	r0, #0
 8004b1a:	bd10      	pop	{r4, pc}
 8004b1c:	2000      	movs	r0, #0
}
 8004b1e:	bd10      	pop	{r4, pc}
 8004b20:	20001590 	.word	0x20001590
 8004b24:	08007264 	.word	0x08007264
 8004b28:	20000c20 	.word	0x20000c20
 8004b2c:	2000157c 	.word	0x2000157c

08004b30 <dhcp_getip>:
/*---------------------------------------------------------------------------*/

uint8_t dhcp_getip(void)
{
 8004b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b32:	b083      	sub	sp, #12
//	tick();
	s.state = STATE_SENDING;
 8004b34:	4b4a      	ldr	r3, [pc, #296]	; (8004c60 <dhcp_getip+0x130>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	701a      	strb	r2, [r3, #0]
	s.ticks = CLOCK_SECOND;
 8004b3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b3e:	821a      	strh	r2, [r3, #16]

	while(!(s.state == STATE_CONFIG_RECEIVED))
 8004b40:	e001      	b.n	8004b46 <dhcp_getip+0x16>
	{
		mac0_tick();
 8004b42:	f7fd fc69 	bl	8002418 <mac0_tick>
{
//	tick();
	s.state = STATE_SENDING;
	s.ticks = CLOCK_SECOND;

	while(!(s.state == STATE_CONFIG_RECEIVED))
 8004b46:	4b46      	ldr	r3, [pc, #280]	; (8004c60 <dhcp_getip+0x130>)
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	2b03      	cmp	r3, #3
 8004b4c:	d1f9      	bne.n	8004b42 <dhcp_getip+0x12>
	{
		mac0_tick();
	}
	printf("Offer Received State\n");
 8004b4e:	4845      	ldr	r0, [pc, #276]	; (8004c64 <dhcp_getip+0x134>)
 8004b50:	f7ff fc5c 	bl	800440c <puts>
//		if(s.state != STATE_CONFIG_RECEIVED)
//			return 0;
//		else
//		{
			printf("Got IP address %d.%d.%d.%d\n",
			 uip_ipaddr1(s.ipaddr), uip_ipaddr2(s.ipaddr),
 8004b54:	4c42      	ldr	r4, [pc, #264]	; (8004c60 <dhcp_getip+0x130>)
 8004b56:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8004b58:	f000 f992 	bl	8004e80 <htons>
 8004b5c:	4605      	mov	r5, r0
 8004b5e:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8004b60:	f000 f98e 	bl	8004e80 <htons>
 8004b64:	4606      	mov	r6, r0
			 uip_ipaddr3(s.ipaddr), uip_ipaddr4(s.ipaddr));
 8004b66:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8004b68:	f000 f98a 	bl	8004e80 <htons>
 8004b6c:	4607      	mov	r7, r0
 8004b6e:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8004b70:	f000 f986 	bl	8004e80 <htons>
//		}
//		if(s.state != STATE_CONFIG_RECEIVED)
//			return 0;
//		else
//		{
			printf("Got IP address %d.%d.%d.%d\n",
 8004b74:	b2c0      	uxtb	r0, r0
 8004b76:	9000      	str	r0, [sp, #0]
 8004b78:	f3c7 230f 	ubfx	r3, r7, #8, #16
 8004b7c:	b2f2      	uxtb	r2, r6
 8004b7e:	f3c5 210f 	ubfx	r1, r5, #8, #16
 8004b82:	4839      	ldr	r0, [pc, #228]	; (8004c68 <dhcp_getip+0x138>)
 8004b84:	f7ff fc1e 	bl	80043c4 <iprintf>
			 uip_ipaddr1(s.ipaddr), uip_ipaddr2(s.ipaddr),
			 uip_ipaddr3(s.ipaddr), uip_ipaddr4(s.ipaddr));
			uip_ipaddr_copy(uip_hostaddr,s.ipaddr);
 8004b88:	4b38      	ldr	r3, [pc, #224]	; (8004c6c <dhcp_getip+0x13c>)
 8004b8a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 8004b8c:	801a      	strh	r2, [r3, #0]
 8004b8e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004b90:	805a      	strh	r2, [r3, #2]
			printf("Got netmask %d.%d.%d.%d\n",
			 uip_ipaddr1(s.netmask), uip_ipaddr2(s.netmask),
 8004b92:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8004b94:	f000 f974 	bl	8004e80 <htons>
 8004b98:	4605      	mov	r5, r0
 8004b9a:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8004b9c:	f000 f970 	bl	8004e80 <htons>
 8004ba0:	4606      	mov	r6, r0
			 uip_ipaddr3(s.netmask), uip_ipaddr4(s.netmask));
 8004ba2:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8004ba4:	f000 f96c 	bl	8004e80 <htons>
 8004ba8:	4607      	mov	r7, r0
 8004baa:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8004bac:	f000 f968 	bl	8004e80 <htons>
//		{
			printf("Got IP address %d.%d.%d.%d\n",
			 uip_ipaddr1(s.ipaddr), uip_ipaddr2(s.ipaddr),
			 uip_ipaddr3(s.ipaddr), uip_ipaddr4(s.ipaddr));
			uip_ipaddr_copy(uip_hostaddr,s.ipaddr);
			printf("Got netmask %d.%d.%d.%d\n",
 8004bb0:	b2c0      	uxtb	r0, r0
 8004bb2:	9000      	str	r0, [sp, #0]
 8004bb4:	f3c7 230f 	ubfx	r3, r7, #8, #16
 8004bb8:	b2f2      	uxtb	r2, r6
 8004bba:	f3c5 210f 	ubfx	r1, r5, #8, #16
 8004bbe:	482c      	ldr	r0, [pc, #176]	; (8004c70 <dhcp_getip+0x140>)
 8004bc0:	f7ff fc00 	bl	80043c4 <iprintf>
			 uip_ipaddr1(s.netmask), uip_ipaddr2(s.netmask),
			 uip_ipaddr3(s.netmask), uip_ipaddr4(s.netmask));
			uip_ipaddr_copy(uip_netmask,s.netmask);
 8004bc4:	4b2b      	ldr	r3, [pc, #172]	; (8004c74 <dhcp_getip+0x144>)
 8004bc6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004bc8:	801a      	strh	r2, [r3, #0]
 8004bca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004bcc:	805a      	strh	r2, [r3, #2]
			printf("Got DNS server %d.%d.%d.%d\n",
			 uip_ipaddr1(s.dnsaddr), uip_ipaddr2(s.dnsaddr),
 8004bce:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8004bd0:	f000 f956 	bl	8004e80 <htons>
 8004bd4:	4605      	mov	r5, r0
 8004bd6:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8004bd8:	f000 f952 	bl	8004e80 <htons>
 8004bdc:	4606      	mov	r6, r0
			 uip_ipaddr3(s.dnsaddr), uip_ipaddr4(s.dnsaddr));
 8004bde:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8004be0:	f000 f94e 	bl	8004e80 <htons>
 8004be4:	4607      	mov	r7, r0
 8004be6:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8004be8:	f000 f94a 	bl	8004e80 <htons>
			uip_ipaddr_copy(uip_hostaddr,s.ipaddr);
			printf("Got netmask %d.%d.%d.%d\n",
			 uip_ipaddr1(s.netmask), uip_ipaddr2(s.netmask),
			 uip_ipaddr3(s.netmask), uip_ipaddr4(s.netmask));
			uip_ipaddr_copy(uip_netmask,s.netmask);
			printf("Got DNS server %d.%d.%d.%d\n",
 8004bec:	b2c0      	uxtb	r0, r0
 8004bee:	9000      	str	r0, [sp, #0]
 8004bf0:	f3c7 230f 	ubfx	r3, r7, #8, #16
 8004bf4:	b2f2      	uxtb	r2, r6
 8004bf6:	f3c5 210f 	ubfx	r1, r5, #8, #16
 8004bfa:	481f      	ldr	r0, [pc, #124]	; (8004c78 <dhcp_getip+0x148>)
 8004bfc:	f7ff fbe2 	bl	80043c4 <iprintf>
			 uip_ipaddr1(s.dnsaddr), uip_ipaddr2(s.dnsaddr),
			 uip_ipaddr3(s.dnsaddr), uip_ipaddr4(s.dnsaddr));
			printf("Got default router %d.%d.%d.%d\n",
			 uip_ipaddr1(s.default_router), uip_ipaddr2(s.default_router),
 8004c00:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8004c02:	f000 f93d 	bl	8004e80 <htons>
 8004c06:	4605      	mov	r5, r0
 8004c08:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8004c0a:	f000 f939 	bl	8004e80 <htons>
 8004c0e:	4606      	mov	r6, r0
			 uip_ipaddr3(s.default_router), uip_ipaddr4(s.default_router));
 8004c10:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8004c12:	f000 f935 	bl	8004e80 <htons>
 8004c16:	4607      	mov	r7, r0
 8004c18:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8004c1a:	f000 f931 	bl	8004e80 <htons>
			 uip_ipaddr3(s.netmask), uip_ipaddr4(s.netmask));
			uip_ipaddr_copy(uip_netmask,s.netmask);
			printf("Got DNS server %d.%d.%d.%d\n",
			 uip_ipaddr1(s.dnsaddr), uip_ipaddr2(s.dnsaddr),
			 uip_ipaddr3(s.dnsaddr), uip_ipaddr4(s.dnsaddr));
			printf("Got default router %d.%d.%d.%d\n",
 8004c1e:	b2c0      	uxtb	r0, r0
 8004c20:	9000      	str	r0, [sp, #0]
 8004c22:	f3c7 230f 	ubfx	r3, r7, #8, #16
 8004c26:	b2f2      	uxtb	r2, r6
 8004c28:	f3c5 210f 	ubfx	r1, r5, #8, #16
 8004c2c:	4813      	ldr	r0, [pc, #76]	; (8004c7c <dhcp_getip+0x14c>)
 8004c2e:	f7ff fbc9 	bl	80043c4 <iprintf>
			 uip_ipaddr1(s.default_router), uip_ipaddr2(s.default_router),
			 uip_ipaddr3(s.default_router), uip_ipaddr4(s.default_router));
			uip_ipaddr_copy(uip_draddr,s.default_router);
 8004c32:	4b13      	ldr	r3, [pc, #76]	; (8004c80 <dhcp_getip+0x150>)
 8004c34:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8004c36:	801a      	strh	r2, [r3, #0]
 8004c38:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8004c3a:	805a      	strh	r2, [r3, #2]
			printf("Lease expires in %ld seconds\n",
			 ntohs(s.lease_time[0])*65536ul + ntohs(s.lease_time[1]));
 8004c3c:	8c20      	ldrh	r0, [r4, #32]
 8004c3e:	f000 f91f 	bl	8004e80 <htons>
 8004c42:	0405      	lsls	r5, r0, #16
 8004c44:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8004c46:	f000 f91b 	bl	8004e80 <htons>
			 uip_ipaddr3(s.dnsaddr), uip_ipaddr4(s.dnsaddr));
			printf("Got default router %d.%d.%d.%d\n",
			 uip_ipaddr1(s.default_router), uip_ipaddr2(s.default_router),
			 uip_ipaddr3(s.default_router), uip_ipaddr4(s.default_router));
			uip_ipaddr_copy(uip_draddr,s.default_router);
			printf("Lease expires in %ld seconds\n",
 8004c4a:	1941      	adds	r1, r0, r5
 8004c4c:	480d      	ldr	r0, [pc, #52]	; (8004c84 <dhcp_getip+0x154>)
 8004c4e:	f7ff fbb9 	bl	80043c4 <iprintf>
			 ntohs(s.lease_time[0])*65536ul + ntohs(s.lease_time[1]));
			uip_close();
 8004c52:	2210      	movs	r2, #16
 8004c54:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <dhcp_getip+0x158>)
 8004c56:	701a      	strb	r2, [r3, #0]
			return 1;
//		}
//	}

}
 8004c58:	2001      	movs	r0, #1
 8004c5a:	b003      	add	sp, #12
 8004c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000c20 	.word	0x20000c20
 8004c64:	0800728c 	.word	0x0800728c
 8004c68:	080072a4 	.word	0x080072a4
 8004c6c:	20001628 	.word	0x20001628
 8004c70:	080072c0 	.word	0x080072c0
 8004c74:	20001624 	.word	0x20001624
 8004c78:	080072dc 	.word	0x080072dc
 8004c7c:	080072f8 	.word	0x080072f8
 8004c80:	20001620 	.word	0x20001620
 8004c84:	08007318 	.word	0x08007318
 8004c88:	20001588 	.word	0x20001588

08004c8c <handle_dhcp>:

uint8_t
handle_dhcp(void)
{
 8004c8c:	b510      	push	{r4, lr}
  
  /* try_again:*/

	//printf("Handle dhcp %d %d\n",uip_newdata(),parse_msg());
    if(uip_newdata() && parse_msg() == DHCPOFFER) {
 8004c8e:	4b19      	ldr	r3, [pc, #100]	; (8004cf4 <handle_dhcp+0x68>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	f013 0f02 	tst.w	r3, #2
 8004c96:	d00e      	beq.n	8004cb6 <handle_dhcp+0x2a>
 8004c98:	f7ff ff1e 	bl	8004ad8 <parse_msg>
 8004c9c:	2802      	cmp	r0, #2
 8004c9e:	d10a      	bne.n	8004cb6 <handle_dhcp+0x2a>
      s.state = STATE_OFFER_RECEIVED;
 8004ca0:	4c15      	ldr	r4, [pc, #84]	; (8004cf8 <handle_dhcp+0x6c>)
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	7023      	strb	r3, [r4, #0]
		send_request();
 8004ca6:	f7ff fedb 	bl	8004a60 <send_request>
		uip_timer_set(&s.timer, s.ticks);
 8004caa:	8a21      	ldrh	r1, [r4, #16]
 8004cac:	f104 0008 	add.w	r0, r4, #8
 8004cb0:	f001 fa42 	bl	8006138 <uip_timer_set>
 8004cb4:	e017      	b.n	8004ce6 <handle_dhcp+0x5a>
		//printf("DHCP_OFFER\n");

    }else if(uip_newdata() && parse_msg() == DHCPACK) {
 8004cb6:	4b0f      	ldr	r3, [pc, #60]	; (8004cf4 <handle_dhcp+0x68>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	f013 0f02 	tst.w	r3, #2
 8004cbe:	d007      	beq.n	8004cd0 <handle_dhcp+0x44>
 8004cc0:	f7ff ff0a 	bl	8004ad8 <parse_msg>
 8004cc4:	2805      	cmp	r0, #5
 8004cc6:	d103      	bne.n	8004cd0 <handle_dhcp+0x44>
        s.state = STATE_CONFIG_RECEIVED;
 8004cc8:	2203      	movs	r2, #3
 8004cca:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <handle_dhcp+0x6c>)
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	e00a      	b.n	8004ce6 <handle_dhcp+0x5a>

      }else if(s.state != STATE_OFFER_RECEIVED)
 8004cd0:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <handle_dhcp+0x6c>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d006      	beq.n	8004ce6 <handle_dhcp+0x5a>
  	{
  		send_discover();
 8004cd8:	f7ff fedc 	bl	8004a94 <send_discover>
  		uip_timer_set(&s.timer, s.ticks);
 8004cdc:	4806      	ldr	r0, [pc, #24]	; (8004cf8 <handle_dhcp+0x6c>)
 8004cde:	8a01      	ldrh	r1, [r0, #16]
 8004ce0:	3008      	adds	r0, #8
 8004ce2:	f001 fa29 	bl	8006138 <uip_timer_set>
  	}

    s.ticks = CLOCK_SECOND;
 8004ce6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004cea:	4b03      	ldr	r3, [pc, #12]	; (8004cf8 <handle_dhcp+0x6c>)
 8004cec:	821a      	strh	r2, [r3, #16]




  return(0);
}
 8004cee:	2000      	movs	r0, #0
 8004cf0:	bd10      	pop	{r4, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20001588 	.word	0x20001588
 8004cf8:	20000c20 	.word	0x20000c20

08004cfc <dhcpc_init>:
/*---------------------------------------------------------------------------*/
void
dhcpc_init(const void *mac_addr, int mac_len)
{
 8004cfc:	b510      	push	{r4, lr}
 8004cfe:	b082      	sub	sp, #8
  uip_ipaddr_t addr;
  
  s.mac_addr = mac_addr;
 8004d00:	4c0b      	ldr	r4, [pc, #44]	; (8004d30 <dhcpc_init+0x34>)
 8004d02:	6160      	str	r0, [r4, #20]
  s.mac_len  = mac_len;
 8004d04:	61a1      	str	r1, [r4, #24]

  s.state = STATE_INITIAL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	7023      	strb	r3, [r4, #0]
  uip_ipaddr(addr, 255,255,255,255);
 8004d0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d0e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004d12:	f8ad 3006 	strh.w	r3, [sp, #6]
  s.conn = uip_udp_new(&addr, HTONS(DHCPC_SERVER_PORT));
 8004d16:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 8004d1a:	a801      	add	r0, sp, #4
 8004d1c:	f000 ff94 	bl	8005c48 <uip_udp_new>
 8004d20:	6060      	str	r0, [r4, #4]
  if(s.conn != NULL) {
 8004d22:	b110      	cbz	r0, 8004d2a <dhcpc_init+0x2e>
    uip_udp_bind(s.conn, HTONS(DHCPC_CLIENT_PORT));
 8004d24:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8004d28:	8083      	strh	r3, [r0, #4]
  }

}
 8004d2a:	b002      	add	sp, #8
 8004d2c:	bd10      	pop	{r4, pc}
 8004d2e:	bf00      	nop
 8004d30:	20000c20 	.word	0x20000c20

08004d34 <dhcpc_appcall>:
/*---------------------------------------------------------------------------*/
void
dhcpc_appcall(void)
{
 8004d34:	b508      	push	{r3, lr}
  handle_dhcp();
 8004d36:	f7ff ffa9 	bl	8004c8c <handle_dhcp>
 8004d3a:	bd08      	pop	{r3, pc}

08004d3c <chksum>:

#if ! UIP_ARCH_CHKSUM
/*---------------------------------------------------------------------------*/
static u16_t
chksum(u16_t sum, const u8_t *data, u16_t len)
{
 8004d3c:	b410      	push	{r4}
  u16_t t;
  const u8_t *dataptr;
  const u8_t *last_byte;

  dataptr = data;
  last_byte = data + len - 1;
 8004d3e:	3a01      	subs	r2, #1
 8004d40:	440a      	add	r2, r1
  
  while(dataptr < last_byte) {	/* At least two more bytes */
 8004d42:	e00b      	b.n	8004d5c <chksum+0x20>
    t = (dataptr[0] << 8) + dataptr[1];
 8004d44:	780c      	ldrb	r4, [r1, #0]
 8004d46:	784b      	ldrb	r3, [r1, #1]
 8004d48:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8004d4c:	b29b      	uxth	r3, r3
    sum += t;
 8004d4e:	4418      	add	r0, r3
 8004d50:	b280      	uxth	r0, r0
    if(sum < t) {
 8004d52:	4283      	cmp	r3, r0
 8004d54:	d901      	bls.n	8004d5a <chksum+0x1e>
      sum++;		/* carry */
 8004d56:	3001      	adds	r0, #1
 8004d58:	b280      	uxth	r0, r0
    }
    dataptr += 2;
 8004d5a:	3102      	adds	r1, #2
  const u8_t *last_byte;

  dataptr = data;
  last_byte = data + len - 1;
  
  while(dataptr < last_byte) {	/* At least two more bytes */
 8004d5c:	4291      	cmp	r1, r2
 8004d5e:	d3f1      	bcc.n	8004d44 <chksum+0x8>
      sum++;		/* carry */
    }
    dataptr += 2;
  }
  
  if(dataptr == last_byte) {
 8004d60:	d107      	bne.n	8004d72 <chksum+0x36>
    t = (dataptr[0] << 8) + 0;
 8004d62:	780b      	ldrb	r3, [r1, #0]
 8004d64:	021b      	lsls	r3, r3, #8
    sum += t;
 8004d66:	4418      	add	r0, r3
 8004d68:	b280      	uxth	r0, r0
    if(sum < t) {
 8004d6a:	4283      	cmp	r3, r0
 8004d6c:	d901      	bls.n	8004d72 <chksum+0x36>
      sum++;		/* carry */
 8004d6e:	3001      	adds	r0, #1
 8004d70:	b280      	uxth	r0, r0
    }
  }

  /* Return sum in host byte order. */
  return sum;
}
 8004d72:	bc10      	pop	{r4}
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop

08004d78 <uip_add32>:
#endif /* UIP_LOGGING == 1 */

#if ! UIP_ARCH_ADD32
void
uip_add32(u8_t *op32, u16_t op16)
{
 8004d78:	b470      	push	{r4, r5, r6}
  uip_acc32[3] = op32[3] + (op16 & 0xff);
 8004d7a:	78c5      	ldrb	r5, [r0, #3]
 8004d7c:	440d      	add	r5, r1
 8004d7e:	b2ed      	uxtb	r5, r5
 8004d80:	4c13      	ldr	r4, [pc, #76]	; (8004dd0 <uip_add32+0x58>)
 8004d82:	70e5      	strb	r5, [r4, #3]
  uip_acc32[2] = op32[2] + (op16 >> 8);
 8004d84:	7883      	ldrb	r3, [r0, #2]
 8004d86:	0a0e      	lsrs	r6, r1, #8
 8004d88:	4433      	add	r3, r6
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	70a3      	strb	r3, [r4, #2]
  uip_acc32[1] = op32[1];
 8004d8e:	7842      	ldrb	r2, [r0, #1]
 8004d90:	7062      	strb	r2, [r4, #1]
  uip_acc32[0] = op32[0];
 8004d92:	7800      	ldrb	r0, [r0, #0]
 8004d94:	7020      	strb	r0, [r4, #0]
  
  if(uip_acc32[2] < (op16 >> 8)) {
 8004d96:	b29c      	uxth	r4, r3
 8004d98:	42a6      	cmp	r6, r4
 8004d9a:	d906      	bls.n	8004daa <uip_add32+0x32>
    ++uip_acc32[1];
 8004d9c:	3201      	adds	r2, #1
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	4c0b      	ldr	r4, [pc, #44]	; (8004dd0 <uip_add32+0x58>)
 8004da2:	7062      	strb	r2, [r4, #1]
    if(uip_acc32[1] == 0) {
 8004da4:	b90a      	cbnz	r2, 8004daa <uip_add32+0x32>
      ++uip_acc32[0];
 8004da6:	3001      	adds	r0, #1
 8004da8:	7020      	strb	r0, [r4, #0]
    }
  }
  
  
  if(uip_acc32[3] < (op16 & 0xff)) {
 8004daa:	b2c9      	uxtb	r1, r1
 8004dac:	428d      	cmp	r5, r1
 8004dae:	da0c      	bge.n	8004dca <uip_add32+0x52>
    ++uip_acc32[2];
 8004db0:	3301      	adds	r3, #1
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	4a06      	ldr	r2, [pc, #24]	; (8004dd0 <uip_add32+0x58>)
 8004db6:	7093      	strb	r3, [r2, #2]
    if(uip_acc32[2] == 0) {
 8004db8:	b93b      	cbnz	r3, 8004dca <uip_add32+0x52>
      ++uip_acc32[1];
 8004dba:	7853      	ldrb	r3, [r2, #1]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	7053      	strb	r3, [r2, #1]
      if(uip_acc32[1] == 0) {
 8004dc2:	b913      	cbnz	r3, 8004dca <uip_add32+0x52>
	++uip_acc32[0];
 8004dc4:	7813      	ldrb	r3, [r2, #0]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	7013      	strb	r3, [r2, #0]
      }
    }
  }
}
 8004dca:	bc70      	pop	{r4, r5, r6}
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	20001584 	.word	0x20001584

08004dd4 <uip_add_rcv_nxt>:
}
#endif /* UIP_REASSEMBLY */
/*---------------------------------------------------------------------------*/
static void
uip_add_rcv_nxt(u16_t n)
{
 8004dd4:	b510      	push	{r4, lr}
  uip_add32(uip_conn->rcv_nxt, n);
 8004dd6:	4c09      	ldr	r4, [pc, #36]	; (8004dfc <uip_add_rcv_nxt+0x28>)
 8004dd8:	6823      	ldr	r3, [r4, #0]
 8004dda:	4601      	mov	r1, r0
 8004ddc:	f103 0008 	add.w	r0, r3, #8
 8004de0:	f7ff ffca 	bl	8004d78 <uip_add32>
  uip_conn->rcv_nxt[0] = uip_acc32[0];
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	4a06      	ldr	r2, [pc, #24]	; (8004e00 <uip_add_rcv_nxt+0x2c>)
 8004de8:	7811      	ldrb	r1, [r2, #0]
 8004dea:	7219      	strb	r1, [r3, #8]
  uip_conn->rcv_nxt[1] = uip_acc32[1];
 8004dec:	7851      	ldrb	r1, [r2, #1]
 8004dee:	7259      	strb	r1, [r3, #9]
  uip_conn->rcv_nxt[2] = uip_acc32[2];
 8004df0:	7891      	ldrb	r1, [r2, #2]
 8004df2:	7299      	strb	r1, [r3, #10]
  uip_conn->rcv_nxt[3] = uip_acc32[3];
 8004df4:	78d2      	ldrb	r2, [r2, #3]
 8004df6:	72da      	strb	r2, [r3, #11]
 8004df8:	bd10      	pop	{r4, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20001594 	.word	0x20001594
 8004e00:	20001584 	.word	0x20001584

08004e04 <uip_init>:
/*---------------------------------------------------------------------------*/
//"struct uip_conn {" in uip.h
void
uip_init(void)
{
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
 8004e04:	2200      	movs	r2, #0
 8004e06:	4b19      	ldr	r3, [pc, #100]	; (8004e6c <uip_init+0x68>)
 8004e08:	701a      	strb	r2, [r3, #0]
 8004e0a:	e006      	b.n	8004e1a <uip_init+0x16>
    uip_listenports[c] = 0;
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	4a18      	ldr	r2, [pc, #96]	; (8004e70 <uip_init+0x6c>)
 8004e10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
/*---------------------------------------------------------------------------*/
//"struct uip_conn {" in uip.h
void
uip_init(void)
{
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
 8004e14:	3301      	adds	r3, #1
 8004e16:	4a15      	ldr	r2, [pc, #84]	; (8004e6c <uip_init+0x68>)
 8004e18:	7013      	strb	r3, [r2, #0]
 8004e1a:	4b14      	ldr	r3, [pc, #80]	; (8004e6c <uip_init+0x68>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d9f4      	bls.n	8004e0c <uip_init+0x8>
    uip_listenports[c] = 0;
  }
  for(c = 0; c < UIP_CONNS; ++c) {
 8004e22:	2200      	movs	r2, #0
 8004e24:	4b11      	ldr	r3, [pc, #68]	; (8004e6c <uip_init+0x68>)
 8004e26:	701a      	strb	r2, [r3, #0]
 8004e28:	e007      	b.n	8004e3a <uip_init+0x36>
    uip_conns[c].tcpstateflags = UIP_CLOSED;
 8004e2a:	4a12      	ldr	r2, [pc, #72]	; (8004e74 <uip_init+0x70>)
 8004e2c:	eb02 1243 	add.w	r2, r2, r3, lsl #5
 8004e30:	2100      	movs	r1, #0
 8004e32:	7651      	strb	r1, [r2, #25]
uip_init(void)
{
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
    uip_listenports[c] = 0;
  }
  for(c = 0; c < UIP_CONNS; ++c) {
 8004e34:	3301      	adds	r3, #1
 8004e36:	4a0d      	ldr	r2, [pc, #52]	; (8004e6c <uip_init+0x68>)
 8004e38:	7013      	strb	r3, [r2, #0]
 8004e3a:	4b0c      	ldr	r3, [pc, #48]	; (8004e6c <uip_init+0x68>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d9f3      	bls.n	8004e2a <uip_init+0x26>
    uip_conns[c].tcpstateflags = UIP_CLOSED;
  }
#if UIP_ACTIVE_OPEN
  lastport = 1024;
 8004e42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e46:	4b0c      	ldr	r3, [pc, #48]	; (8004e78 <uip_init+0x74>)
 8004e48:	801a      	strh	r2, [r3, #0]
#endif /* UIP_ACTIVE_OPEN */

#if UIP_UDP
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	4b07      	ldr	r3, [pc, #28]	; (8004e6c <uip_init+0x68>)
 8004e4e:	701a      	strb	r2, [r3, #0]
 8004e50:	e007      	b.n	8004e62 <uip_init+0x5e>
    uip_udp_conns[c].lport = 0;
 8004e52:	4a0a      	ldr	r2, [pc, #40]	; (8004e7c <uip_init+0x78>)
 8004e54:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8004e58:	2100      	movs	r1, #0
 8004e5a:	8091      	strh	r1, [r2, #4]
#if UIP_ACTIVE_OPEN
  lastport = 1024;
#endif /* UIP_ACTIVE_OPEN */

#if UIP_UDP
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	4a03      	ldr	r2, [pc, #12]	; (8004e6c <uip_init+0x68>)
 8004e60:	7013      	strb	r3, [r2, #0]
 8004e62:	4b02      	ldr	r3, [pc, #8]	; (8004e6c <uip_init+0x68>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d9f3      	bls.n	8004e52 <uip_init+0x4e>
  /* IPv4 initialization. */
#if UIP_FIXEDADDR == 0
  /*  uip_hostaddr[0] = uip_hostaddr[1] = 0;*/
#endif /* UIP_FIXEDADDR */

}
 8004e6a:	4770      	bx	lr
 8004e6c:	20000c5e 	.word	0x20000c5e
 8004e70:	20001618 	.word	0x20001618
 8004e74:	20001598 	.word	0x20001598
 8004e78:	20000c5c 	.word	0x20000c5c
 8004e7c:	20001a18 	.word	0x20001a18

08004e80 <htons>:
}
/*---------------------------------------------------------------------------*/
u16_t
htons(u16_t val)
{
  return HTONS(val);
 8004e80:	0a03      	lsrs	r3, r0, #8
 8004e82:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 8004e86:	b280      	uxth	r0, r0
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop

08004e8c <uip_ipchksum>:
}
/*---------------------------------------------------------------------------*/
#ifndef UIP_ARCH_IPCHKSUM
u16_t
uip_ipchksum(void)
{
 8004e8c:	b508      	push	{r3, lr}
  u16_t sum;

  sum = chksum(0, &uip_buf[UIP_LLH_LEN], UIP_IPH_LEN);
 8004e8e:	2214      	movs	r2, #20
 8004e90:	4905      	ldr	r1, [pc, #20]	; (8004ea8 <uip_ipchksum+0x1c>)
 8004e92:	2000      	movs	r0, #0
 8004e94:	f7ff ff52 	bl	8004d3c <chksum>
  DEBUG_PRINTF("uip_ipchksum: sum 0x%04x\n", sum);
  return (sum == 0) ? 0xffff : htons(sum);
 8004e98:	b110      	cbz	r0, 8004ea0 <uip_ipchksum+0x14>
 8004e9a:	f7ff fff1 	bl	8004e80 <htons>
 8004e9e:	bd08      	pop	{r3, pc}
 8004ea0:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8004ea4:	bd08      	pop	{r3, pc}
 8004ea6:	bf00      	nop
 8004ea8:	2000163a 	.word	0x2000163a

08004eac <upper_layer_chksum>:
#endif
/*---------------------------------------------------------------------------*/
static u16_t
upper_layer_chksum(u8_t proto)
{
 8004eac:	b538      	push	{r3, r4, r5, lr}
  u16_t sum;
  
#if UIP_CONF_IPV6
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]);
#else /* UIP_CONF_IPV6 */
  upper_layer_len = (((u16_t)(BUF->len[0]) << 8) + BUF->len[1]) - UIP_IPH_LEN;
 8004eae:	4d0d      	ldr	r5, [pc, #52]	; (8004ee4 <upper_layer_chksum+0x38>)
 8004eb0:	7c2c      	ldrb	r4, [r5, #16]
 8004eb2:	7c6b      	ldrb	r3, [r5, #17]
 8004eb4:	eb03 2404 	add.w	r4, r3, r4, lsl #8
 8004eb8:	3c14      	subs	r4, #20
 8004eba:	b2a4      	uxth	r4, r4
#endif /* UIP_CONF_IPV6 */
  
  /* First sum pseudoheader. */
  
  /* IP protocol and length fields. This addition cannot carry. */
  sum = upper_layer_len + proto;
 8004ebc:	4420      	add	r0, r4
  /* Sum IP source and destination addresses. */
  sum = chksum(sum, (u8_t *)&BUF->srcipaddr[0], 2 * sizeof(uip_ipaddr_t));
 8004ebe:	2208      	movs	r2, #8
 8004ec0:	f105 011a 	add.w	r1, r5, #26
 8004ec4:	b280      	uxth	r0, r0
 8004ec6:	f7ff ff39 	bl	8004d3c <chksum>

  /* Sum TCP header and data. */
  sum = chksum(sum, &uip_buf[UIP_IPH_LEN + UIP_LLH_LEN],
 8004eca:	4622      	mov	r2, r4
 8004ecc:	f105 0122 	add.w	r1, r5, #34	; 0x22
 8004ed0:	f7ff ff34 	bl	8004d3c <chksum>
	       upper_layer_len);
    
  return (sum == 0) ? 0xffff : htons(sum);
 8004ed4:	b110      	cbz	r0, 8004edc <upper_layer_chksum+0x30>
 8004ed6:	f7ff ffd3 	bl	8004e80 <htons>
 8004eda:	bd38      	pop	{r3, r4, r5, pc}
 8004edc:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8004ee0:	bd38      	pop	{r3, r4, r5, pc}
 8004ee2:	bf00      	nop
 8004ee4:	2000162c 	.word	0x2000162c

08004ee8 <uip_tcpchksum>:
}
#endif /* UIP_CONF_IPV6 */
/*---------------------------------------------------------------------------*/
u16_t
uip_tcpchksum(void)
{
 8004ee8:	b508      	push	{r3, lr}
  return upper_layer_chksum(UIP_PROTO_TCP);
 8004eea:	2006      	movs	r0, #6
 8004eec:	f7ff ffde 	bl	8004eac <upper_layer_chksum>
}
 8004ef0:	bd08      	pop	{r3, pc}
 8004ef2:	bf00      	nop

08004ef4 <uip_udpchksum>:
/*---------------------------------------------------------------------------*/
#if UIP_UDP_CHECKSUMS
u16_t
uip_udpchksum(void)
{
 8004ef4:	b508      	push	{r3, lr}
  return upper_layer_chksum(UIP_PROTO_UDP);
 8004ef6:	2011      	movs	r0, #17
 8004ef8:	f7ff ffd8 	bl	8004eac <upper_layer_chksum>
}
 8004efc:	bd08      	pop	{r3, pc}
 8004efe:	bf00      	nop

08004f00 <uip_process>:
  uip_conn->rcv_nxt[3] = uip_acc32[3];
}
/*---------------------------------------------------------------------------*/
void
uip_process(u8_t flag)
{
 8004f00:	b570      	push	{r4, r5, r6, lr}
  register struct uip_conn *uip_connr = uip_conn;
 8004f02:	4ba4      	ldr	r3, [pc, #656]	; (8005194 <uip_process+0x294>)
 8004f04:	681c      	ldr	r4, [r3, #0]

#if UIP_UDP
  if(flag == UIP_UDP_SEND_CONN) {
 8004f06:	2804      	cmp	r0, #4
 8004f08:	f000 8197 	beq.w	800523a <uip_process+0x33a>
    goto udp_send;
  }
#endif /* UIP_UDP */
  
  uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];
 8004f0c:	4ba2      	ldr	r3, [pc, #648]	; (8005198 <uip_process+0x298>)
 8004f0e:	4aa3      	ldr	r2, [pc, #652]	; (800519c <uip_process+0x29c>)
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	4aa3      	ldr	r2, [pc, #652]	; (80051a0 <uip_process+0x2a0>)
 8004f14:	6013      	str	r3, [r2, #0]

  /* Check if we were invoked because of a poll request for a
     particular connection. */
  if(flag == UIP_POLL_REQUEST) {
 8004f16:	2803      	cmp	r0, #3
 8004f18:	d110      	bne.n	8004f3c <uip_process+0x3c>
    if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED &&
 8004f1a:	7e63      	ldrb	r3, [r4, #25]
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	f040 860a 	bne.w	8005b3a <uip_process+0xc3a>
       !uip_outstanding(uip_connr)) {
 8004f26:	8a23      	ldrh	r3, [r4, #16]
  uip_sappdata = uip_appdata = &uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN];

  /* Check if we were invoked because of a poll request for a
     particular connection. */
  if(flag == UIP_POLL_REQUEST) {
    if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED &&
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f040 8606 	bne.w	8005b3a <uip_process+0xc3a>
       !uip_outstanding(uip_connr)) {
	uip_flags = UIP_POLL;
 8004f2e:	2208      	movs	r2, #8
 8004f30:	4b9c      	ldr	r3, [pc, #624]	; (80051a4 <uip_process+0x2a4>)
 8004f32:	701a      	strb	r2, [r3, #0]
	UIP_APPCALL();
 8004f34:	f7fd fa12 	bl	800235c <uipclient_appcall>
	goto appsend;
 8004f38:	f000 bcc2 	b.w	80058c0 <uip_process+0x9c0>
    }
    goto drop;
    
    /* Check if we were invoked because of the perodic timer fireing. */
  } else if(flag == UIP_TIMER) {
 8004f3c:	2802      	cmp	r0, #2
 8004f3e:	d17b      	bne.n	8005038 <uip_process+0x138>
    if(uip_reasstmr != 0) {
      --uip_reasstmr;
    }
#endif /* UIP_REASSEMBLY */
    /* Increase the initial sequence number. */
    if(++iss[3] == 0) {
 8004f40:	4a99      	ldr	r2, [pc, #612]	; (80051a8 <uip_process+0x2a8>)
 8004f42:	78d3      	ldrb	r3, [r2, #3]
 8004f44:	3301      	adds	r3, #1
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	70d3      	strb	r3, [r2, #3]
 8004f4a:	b963      	cbnz	r3, 8004f66 <uip_process+0x66>
      if(++iss[2] == 0) {
 8004f4c:	7893      	ldrb	r3, [r2, #2]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	7093      	strb	r3, [r2, #2]
 8004f54:	b93b      	cbnz	r3, 8004f66 <uip_process+0x66>
	if(++iss[1] == 0) {
 8004f56:	7853      	ldrb	r3, [r2, #1]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	7053      	strb	r3, [r2, #1]
 8004f5e:	b913      	cbnz	r3, 8004f66 <uip_process+0x66>
	  ++iss[0];
 8004f60:	7813      	ldrb	r3, [r2, #0]
 8004f62:	3301      	adds	r3, #1
 8004f64:	7013      	strb	r3, [r2, #0]
	}
      }
    }

    /* Reset the length variables. */
    uip_len = 0;
 8004f66:	2300      	movs	r3, #0
 8004f68:	4a90      	ldr	r2, [pc, #576]	; (80051ac <uip_process+0x2ac>)
 8004f6a:	8013      	strh	r3, [r2, #0]
    uip_slen = 0;
 8004f6c:	4a90      	ldr	r2, [pc, #576]	; (80051b0 <uip_process+0x2b0>)
 8004f6e:	8013      	strh	r3, [r2, #0]

    /* Check if the connection is in a state in which we simply wait
       for the connection to time out. If so, we increase the
       connection's timer and remove the connection if it times
       out. */
    if(uip_connr->tcpstateflags == UIP_TIME_WAIT ||
 8004f70:	7e63      	ldrb	r3, [r4, #25]
 8004f72:	2b07      	cmp	r3, #7
 8004f74:	d001      	beq.n	8004f7a <uip_process+0x7a>
 8004f76:	2b05      	cmp	r3, #5
 8004f78:	d10a      	bne.n	8004f90 <uip_process+0x90>
       uip_connr->tcpstateflags == UIP_FIN_WAIT_2) {
      ++(uip_connr->timer);
 8004f7a:	7ea3      	ldrb	r3, [r4, #26]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	76a3      	strb	r3, [r4, #26]
      if(uip_connr->timer == UIP_TIME_WAIT_TIMEOUT) {
 8004f82:	2b1e      	cmp	r3, #30
 8004f84:	f040 85d9 	bne.w	8005b3a <uip_process+0xc3a>
	uip_connr->tcpstateflags = UIP_CLOSED;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	7663      	strb	r3, [r4, #25]
 8004f8c:	f000 bdd5 	b.w	8005b3a <uip_process+0xc3a>
      }
    } else if(uip_connr->tcpstateflags != UIP_CLOSED) {
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 85d2 	beq.w	8005b3a <uip_process+0xc3a>
      /* If the connection has outstanding data, we increase the
	 connection's timer and see if it has reached the RTO value
	 in which case we retransmit. */
      if(uip_outstanding(uip_connr)) {
 8004f96:	8a22      	ldrh	r2, [r4, #16]
 8004f98:	2a00      	cmp	r2, #0
 8004f9a:	d041      	beq.n	8005020 <uip_process+0x120>
	if(uip_connr->timer-- == 0) {
 8004f9c:	7ea2      	ldrb	r2, [r4, #26]
 8004f9e:	1e51      	subs	r1, r2, #1
 8004fa0:	76a1      	strb	r1, [r4, #26]
 8004fa2:	2a00      	cmp	r2, #0
 8004fa4:	f040 85c9 	bne.w	8005b3a <uip_process+0xc3a>
	  if(uip_connr->nrtx == UIP_MAXRTX ||
 8004fa8:	7ee2      	ldrb	r2, [r4, #27]
 8004faa:	2a08      	cmp	r2, #8
 8004fac:	d005      	beq.n	8004fba <uip_process+0xba>
	     ((uip_connr->tcpstateflags == UIP_SYN_SENT ||
 8004fae:	1e59      	subs	r1, r3, #1
 8004fb0:	b2c9      	uxtb	r1, r1
      /* If the connection has outstanding data, we increase the
	 connection's timer and see if it has reached the RTO value
	 in which case we retransmit. */
      if(uip_outstanding(uip_connr)) {
	if(uip_connr->timer-- == 0) {
	  if(uip_connr->nrtx == UIP_MAXRTX ||
 8004fb2:	2901      	cmp	r1, #1
 8004fb4:	d80e      	bhi.n	8004fd4 <uip_process+0xd4>
	     ((uip_connr->tcpstateflags == UIP_SYN_SENT ||
	       uip_connr->tcpstateflags == UIP_SYN_RCVD) &&
 8004fb6:	2a05      	cmp	r2, #5
 8004fb8:	d10c      	bne.n	8004fd4 <uip_process+0xd4>
	      uip_connr->nrtx == UIP_MAXSYNRTX)) {
	    uip_connr->tcpstateflags = UIP_CLOSED;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	7663      	strb	r3, [r4, #25]

	    /* We call UIP_APPCALL() with uip_flags set to
	       UIP_TIMEDOUT to inform the application that the
	       connection has timed out. */
	    uip_flags = UIP_TIMEDOUT;
 8004fbe:	2280      	movs	r2, #128	; 0x80
 8004fc0:	4b78      	ldr	r3, [pc, #480]	; (80051a4 <uip_process+0x2a4>)
 8004fc2:	701a      	strb	r2, [r3, #0]
	    UIP_APPCALL();
 8004fc4:	f7fd f9ca 	bl	800235c <uipclient_appcall>

	    /* We also send a reset packet to the remote host. */
	    BUF->flags = TCP_RST | TCP_ACK;
 8004fc8:	2214      	movs	r2, #20
 8004fca:	4b7a      	ldr	r3, [pc, #488]	; (80051b4 <uip_process+0x2b4>)
 8004fcc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	    goto tcp_send_nodata;
 8004fd0:	f000 bd44 	b.w	8005a5c <uip_process+0xb5c>
	  }

	  /* Exponential backoff. */
	  uip_connr->timer = UIP_RTO << (uip_connr->nrtx > 4?
 8004fd4:	2a04      	cmp	r2, #4
 8004fd6:	d803      	bhi.n	8004fe0 <uip_process+0xe0>
 8004fd8:	2103      	movs	r1, #3
 8004fda:	4091      	lsls	r1, r2
 8004fdc:	b2c9      	uxtb	r1, r1
 8004fde:	e000      	b.n	8004fe2 <uip_process+0xe2>
 8004fe0:	2130      	movs	r1, #48	; 0x30
 8004fe2:	76a1      	strb	r1, [r4, #26]
					 4:
					 uip_connr->nrtx);
	  ++(uip_connr->nrtx);
 8004fe4:	3201      	adds	r2, #1
 8004fe6:	76e2      	strb	r2, [r4, #27]
	     call upon the application so that it may prepare the
	     data for the retransmit. In SYN_RCVD, we resend the
	     SYNACK that we sent earlier and in LAST_ACK we have to
	     retransmit our FINACK. */
	  UIP_STAT(++uip_stat.tcp.rexmit);
	  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
 8004fe8:	f003 030f 	and.w	r3, r3, #15
 8004fec:	3b01      	subs	r3, #1
 8004fee:	2b07      	cmp	r3, #7
 8004ff0:	f200 85a3 	bhi.w	8005b3a <uip_process+0xc3a>
 8004ff4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004ff8:	000802a6 	.word	0x000802a6
 8004ffc:	0420000d 	.word	0x0420000d
 8005000:	042005a1 	.word	0x042005a1
 8005004:	042005a1 	.word	0x042005a1
	    goto tcp_send_synack;
	    
#if UIP_ACTIVE_OPEN
	  case UIP_SYN_SENT:
	    /* In the SYN_SENT state, we retransmit out SYN. */
	    BUF->flags = 0;
 8005008:	2200      	movs	r2, #0
 800500a:	4b6a      	ldr	r3, [pc, #424]	; (80051b4 <uip_process+0x2b4>)
 800500c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	    goto tcp_send_syn;
 8005010:	e29c      	b.n	800554c <uip_process+0x64c>
	  case UIP_ESTABLISHED:
	    /* In the ESTABLISHED state, we call upon the application
               to do the actual retransmit after which we jump into
               the code for sending out the packet (the apprexmit
               label). */
	    uip_flags = UIP_REXMIT;
 8005012:	2204      	movs	r2, #4
 8005014:	4b63      	ldr	r3, [pc, #396]	; (80051a4 <uip_process+0x2a4>)
 8005016:	701a      	strb	r2, [r3, #0]
	    UIP_APPCALL();
 8005018:	f7fd f9a0 	bl	800235c <uipclient_appcall>
	    goto apprexmit;
 800501c:	f000 bc85 	b.w	800592a <uip_process+0xa2a>
	    /* In all these states we should retransmit a FINACK. */
	    goto tcp_send_finack;
	    
	  }
	}
      } else if((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_ESTABLISHED) {
 8005020:	f003 030f 	and.w	r3, r3, #15
 8005024:	2b03      	cmp	r3, #3
 8005026:	f040 8588 	bne.w	8005b3a <uip_process+0xc3a>
	/* If there was no need for a retransmission, we poll the
           application for new data. */
	uip_flags = UIP_POLL;
 800502a:	2208      	movs	r2, #8
 800502c:	4b5d      	ldr	r3, [pc, #372]	; (80051a4 <uip_process+0x2a4>)
 800502e:	701a      	strb	r2, [r3, #0]
	UIP_APPCALL();
 8005030:	f7fd f994 	bl	800235c <uipclient_appcall>
	goto appsend;
 8005034:	f000 bc44 	b.w	80058c0 <uip_process+0x9c0>
      }
    }
    goto drop;
  }
#if UIP_UDP
  if(flag == UIP_UDP_TIMER) {
 8005038:	2805      	cmp	r0, #5
 800503a:	d117      	bne.n	800506c <uip_process+0x16c>
    if(uip_udp_conn->lport != 0) {
 800503c:	4b5e      	ldr	r3, [pc, #376]	; (80051b8 <uip_process+0x2b8>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	889b      	ldrh	r3, [r3, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 8579 	beq.w	8005b3a <uip_process+0xc3a>
      uip_conn = NULL;
 8005048:	2300      	movs	r3, #0
 800504a:	4a52      	ldr	r2, [pc, #328]	; (8005194 <uip_process+0x294>)
 800504c:	6013      	str	r3, [r2, #0]
      uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
 800504e:	4a5b      	ldr	r2, [pc, #364]	; (80051bc <uip_process+0x2bc>)
 8005050:	4952      	ldr	r1, [pc, #328]	; (800519c <uip_process+0x29c>)
 8005052:	600a      	str	r2, [r1, #0]
 8005054:	4952      	ldr	r1, [pc, #328]	; (80051a0 <uip_process+0x2a0>)
 8005056:	600a      	str	r2, [r1, #0]
      uip_len = uip_slen = 0;
 8005058:	4a55      	ldr	r2, [pc, #340]	; (80051b0 <uip_process+0x2b0>)
 800505a:	8013      	strh	r3, [r2, #0]
 800505c:	4a53      	ldr	r2, [pc, #332]	; (80051ac <uip_process+0x2ac>)
 800505e:	8013      	strh	r3, [r2, #0]
      uip_flags = UIP_POLL;
 8005060:	2208      	movs	r2, #8
 8005062:	4b50      	ldr	r3, [pc, #320]	; (80051a4 <uip_process+0x2a4>)
 8005064:	701a      	strb	r2, [r3, #0]
      UIP_UDP_APPCALL();
 8005066:	f7fd f9c7 	bl	80023f8 <uipudp_appcall>
      //printf("udp_send appcall\n");
      goto udp_send;
 800506a:	e0e6      	b.n	800523a <uip_process+0x33a>
    UIP_LOG("ipv6: invalid version.");
    goto drop;
  }
#else /* UIP_CONF_IPV6 */
  /* Check validity of the IP header. */
  if(BUF->vhl != 0x45)  { /* IP version and header length. */
 800506c:	4b51      	ldr	r3, [pc, #324]	; (80051b4 <uip_process+0x2b4>)
 800506e:	7b9b      	ldrb	r3, [r3, #14]
 8005070:	2b45      	cmp	r3, #69	; 0x45
 8005072:	f040 8562 	bne.w	8005b3a <uip_process+0xc3a>
     that the packet has been corrupted in transit. If the size of
     uip_len is larger than the size reported in the IP packet header,
     the packet has been padded and we set uip_len to the correct
     value.. */

  if((BUF->len[0] << 8) + BUF->len[1] <= uip_len) {
 8005076:	4a4f      	ldr	r2, [pc, #316]	; (80051b4 <uip_process+0x2b4>)
 8005078:	7c15      	ldrb	r5, [r2, #16]
 800507a:	7c53      	ldrb	r3, [r2, #17]
 800507c:	eb03 2105 	add.w	r1, r3, r5, lsl #8
 8005080:	4a4a      	ldr	r2, [pc, #296]	; (80051ac <uip_process+0x2ac>)
 8005082:	8812      	ldrh	r2, [r2, #0]
 8005084:	4291      	cmp	r1, r2
 8005086:	f300 8558 	bgt.w	8005b3a <uip_process+0xc3a>
    uip_len = (BUF->len[0] << 8) + BUF->len[1];
 800508a:	b28d      	uxth	r5, r1
 800508c:	4b47      	ldr	r3, [pc, #284]	; (80051ac <uip_process+0x2ac>)
 800508e:	801d      	strh	r5, [r3, #0]
    goto drop;
  }

#if !UIP_CONF_IPV6
  /* Check the fragment flag. */
  if((BUF->ipoffset[0] & 0x3f) != 0 ||
 8005090:	4b48      	ldr	r3, [pc, #288]	; (80051b4 <uip_process+0x2b4>)
 8005092:	7d1b      	ldrb	r3, [r3, #20]
 8005094:	f013 0f3f 	tst.w	r3, #63	; 0x3f
 8005098:	f040 854f 	bne.w	8005b3a <uip_process+0xc3a>
     BUF->ipoffset[1] != 0) {
 800509c:	4b45      	ldr	r3, [pc, #276]	; (80051b4 <uip_process+0x2b4>)
 800509e:	7d5b      	ldrb	r3, [r3, #21]
    goto drop;
  }

#if !UIP_CONF_IPV6
  /* Check the fragment flag. */
  if((BUF->ipoffset[0] & 0x3f) != 0 ||
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f040 854a 	bne.w	8005b3a <uip_process+0xc3a>
    goto drop;
#endif /* UIP_REASSEMBLY */
  }
#endif /* UIP_CONF_IPV6 */

  if(uip_ipaddr_cmp(uip_hostaddr, all_zeroes_addr)) {
 80050a6:	4b46      	ldr	r3, [pc, #280]	; (80051c0 <uip_process+0x2c0>)
 80050a8:	881c      	ldrh	r4, [r3, #0]
 80050aa:	b90c      	cbnz	r4, 80050b0 <uip_process+0x1b0>
 80050ac:	885b      	ldrh	r3, [r3, #2]
 80050ae:	b35b      	cbz	r3, 8005108 <uip_process+0x208>
    /* If IP broadcast support is configured, we check for a broadcast
       UDP packet, which may be destined to us. */
#if UIP_BROADCAST
    DEBUG_PRINTF("UDP IP checksum 0x%04x\n", uip_ipchksum());
   // printf("UDP IP checksum 0x%04x\n", uip_ipchksum());
     if(BUF->proto == UIP_PROTO_UDP && (
 80050b0:	4b40      	ldr	r3, [pc, #256]	; (80051b4 <uip_process+0x2b4>)
 80050b2:	7ddb      	ldrb	r3, [r3, #23]
 80050b4:	2b11      	cmp	r3, #17
 80050b6:	d11b      	bne.n	80050f0 <uip_process+0x1f0>
        uip_ipaddr_cmp(BUF->destipaddr, all_ones_addr) // Limited broadcast
 80050b8:	4b3e      	ldr	r3, [pc, #248]	; (80051b4 <uip_process+0x2b4>)
 80050ba:	8bdb      	ldrh	r3, [r3, #30]
    /* If IP broadcast support is configured, we check for a broadcast
       UDP packet, which may be destined to us. */
#if UIP_BROADCAST
    DEBUG_PRINTF("UDP IP checksum 0x%04x\n", uip_ipchksum());
   // printf("UDP IP checksum 0x%04x\n", uip_ipchksum());
     if(BUF->proto == UIP_PROTO_UDP && (
 80050bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d105      	bne.n	80050d0 <uip_process+0x1d0>
        uip_ipaddr_cmp(BUF->destipaddr, all_ones_addr) // Limited broadcast
 80050c4:	4a3b      	ldr	r2, [pc, #236]	; (80051b4 <uip_process+0x2b4>)
 80050c6:	8c11      	ldrh	r1, [r2, #32]
 80050c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050cc:	4291      	cmp	r1, r2
 80050ce:	d04d      	beq.n	800516c <uip_process+0x26c>
        || ((BUF->destipaddr[0]==(uip_hostaddr[0] | (~uip_netmask[0]))) && (BUF->destipaddr[1]==(uip_hostaddr[1] | (~uip_netmask[1])))) // Direct broadcast
 80050d0:	4a3c      	ldr	r2, [pc, #240]	; (80051c4 <uip_process+0x2c4>)
 80050d2:	8812      	ldrh	r2, [r2, #0]
 80050d4:	ea64 0202 	orn	r2, r4, r2
 80050d8:	4293      	cmp	r3, r2
 80050da:	d109      	bne.n	80050f0 <uip_process+0x1f0>
 80050dc:	4b35      	ldr	r3, [pc, #212]	; (80051b4 <uip_process+0x2b4>)
 80050de:	8c1a      	ldrh	r2, [r3, #32]
 80050e0:	4b37      	ldr	r3, [pc, #220]	; (80051c0 <uip_process+0x2c0>)
 80050e2:	885b      	ldrh	r3, [r3, #2]
 80050e4:	4937      	ldr	r1, [pc, #220]	; (80051c4 <uip_process+0x2c4>)
 80050e6:	8849      	ldrh	r1, [r1, #2]
 80050e8:	ea63 0301 	orn	r3, r3, r1
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d03d      	beq.n	800516c <uip_process+0x26c>
    }
#endif /* UIP_BROADCAST */
    
    /* Check if the packet is destined for our IP address. */
#if !UIP_CONF_IPV6
    if(!uip_ipaddr_cmp(BUF->destipaddr, uip_hostaddr)) {
 80050f0:	4b30      	ldr	r3, [pc, #192]	; (80051b4 <uip_process+0x2b4>)
 80050f2:	8bdb      	ldrh	r3, [r3, #30]
 80050f4:	429c      	cmp	r4, r3
 80050f6:	f040 8520 	bne.w	8005b3a <uip_process+0xc3a>
 80050fa:	4b2e      	ldr	r3, [pc, #184]	; (80051b4 <uip_process+0x2b4>)
 80050fc:	8c1a      	ldrh	r2, [r3, #32]
 80050fe:	4b30      	ldr	r3, [pc, #192]	; (80051c0 <uip_process+0x2c0>)
 8005100:	885b      	ldrh	r3, [r3, #2]
 8005102:	429a      	cmp	r2, r3
 8005104:	f040 8519 	bne.w	8005b3a <uip_process+0xc3a>
    }
#endif /* UIP_CONF_IPV6 */
  }

#if !UIP_CONF_IPV6
  if(uip_ipchksum() != 0xffff) { /* Compute and check the IP header
 8005108:	f7ff fec0 	bl	8004e8c <uip_ipchksum>
 800510c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005110:	4298      	cmp	r0, r3
 8005112:	f040 8512 	bne.w	8005b3a <uip_process+0xc3a>
    UIP_LOG("ip: bad checksum.");
    goto drop;
  }
#endif /* UIP_CONF_IPV6 */

  if(BUF->proto == UIP_PROTO_TCP) { /* Check for TCP packet. If so,
 8005116:	4b27      	ldr	r3, [pc, #156]	; (80051b4 <uip_process+0x2b4>)
 8005118:	7ddb      	ldrb	r3, [r3, #23]
 800511a:	2b06      	cmp	r3, #6
 800511c:	f000 80cd 	beq.w	80052ba <uip_process+0x3ba>
				       processing. */
    goto tcp_input;
  }

#if UIP_UDP
  if(BUF->proto == UIP_PROTO_UDP) {
 8005120:	2b11      	cmp	r3, #17
 8005122:	d023      	beq.n	800516c <uip_process+0x26c>
  }
#endif /* UIP_UDP */

#if !UIP_CONF_IPV6
  /* ICMPv4 processing code follows. */
  if(BUF->proto != UIP_PROTO_ICMP) { /* We only allow ICMP packets from
 8005124:	2b01      	cmp	r3, #1
 8005126:	f040 8508 	bne.w	8005b3a <uip_process+0xc3a>
  UIP_STAT(++uip_stat.icmp.recv);

  /* ICMP echo (i.e., ping) processing. This is simple, we only change
     the ICMP type from ECHO to ECHO_REPLY and adjust the ICMP
     checksum before we return the packet. */
  if(ICMPBUF->type != ICMP_ECHO) {
 800512a:	4b22      	ldr	r3, [pc, #136]	; (80051b4 <uip_process+0x2b4>)
 800512c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005130:	2b08      	cmp	r3, #8
 8005132:	f040 8502 	bne.w	8005b3a <uip_process+0xc3a>
    uip_hostaddr[0] = BUF->destipaddr[0];
    uip_hostaddr[1] = BUF->destipaddr[1];
  }
#endif /* UIP_PINGADDRCONF */

  ICMPBUF->type = ICMP_ECHO_REPLY;
 8005136:	4b1f      	ldr	r3, [pc, #124]	; (80051b4 <uip_process+0x2b4>)
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  if(ICMPBUF->icmpchksum >= HTONS(0xffff - (ICMP_ECHO << 8))) {
 800513e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005140:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 8005144:	4293      	cmp	r3, r2
 8005146:	d903      	bls.n	8005150 <uip_process+0x250>
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8) + 1;
 8005148:	3309      	adds	r3, #9
 800514a:	4a1a      	ldr	r2, [pc, #104]	; (80051b4 <uip_process+0x2b4>)
 800514c:	8493      	strh	r3, [r2, #36]	; 0x24
 800514e:	e002      	b.n	8005156 <uip_process+0x256>
  } else {
    ICMPBUF->icmpchksum += HTONS(ICMP_ECHO << 8);
 8005150:	3308      	adds	r3, #8
 8005152:	4a18      	ldr	r2, [pc, #96]	; (80051b4 <uip_process+0x2b4>)
 8005154:	8493      	strh	r3, [r2, #36]	; 0x24
  }

  /* Swap IP addresses. */
  uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
 8005156:	4b17      	ldr	r3, [pc, #92]	; (80051b4 <uip_process+0x2b4>)
 8005158:	8b5a      	ldrh	r2, [r3, #26]
 800515a:	83da      	strh	r2, [r3, #30]
 800515c:	8b9a      	ldrh	r2, [r3, #28]
 800515e:	841a      	strh	r2, [r3, #32]
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
 8005160:	835c      	strh	r4, [r3, #26]
 8005162:	4a17      	ldr	r2, [pc, #92]	; (80051c0 <uip_process+0x2c0>)
 8005164:	8852      	ldrh	r2, [r2, #2]
 8005166:	839a      	strh	r2, [r3, #28]

  UIP_STAT(++uip_stat.icmp.sent);
  goto send;
 8005168:	f000 bce3 	b.w	8005b32 <uip_process+0xc32>
  /* UDP processing is really just a hack. We don't do anything to the
     UDP/IP headers, but let the UDP application do all the hard
     work. If the application sets uip_slen, it has a packet to
     send. */
#if UIP_UDP_CHECKSUMS
  uip_len = uip_len - UIP_IPUDPH_LEN;
 800516c:	3d1c      	subs	r5, #28
 800516e:	4b0f      	ldr	r3, [pc, #60]	; (80051ac <uip_process+0x2ac>)
 8005170:	801d      	strh	r5, [r3, #0]
  uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
 8005172:	4b12      	ldr	r3, [pc, #72]	; (80051bc <uip_process+0x2bc>)
 8005174:	4a09      	ldr	r2, [pc, #36]	; (800519c <uip_process+0x29c>)
 8005176:	6013      	str	r3, [r2, #0]
  if(UDPBUF->udpchksum != 0 && uip_udpchksum() != 0xffff) {
 8005178:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 800517c:	b133      	cbz	r3, 800518c <uip_process+0x28c>
 800517e:	f7ff feb9 	bl	8004ef4 <uip_udpchksum>
 8005182:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005186:	4298      	cmp	r0, r3
 8005188:	f040 84d7 	bne.w	8005b3a <uip_process+0xc3a>
#else /* UIP_UDP_CHECKSUMS */
  uip_len = uip_len - UIP_IPUDPH_LEN;
#endif /* UIP_UDP_CHECKSUMS */

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
 800518c:	4a0e      	ldr	r2, [pc, #56]	; (80051c8 <uip_process+0x2c8>)
 800518e:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <uip_process+0x2b8>)
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	e03e      	b.n	8005212 <uip_process+0x312>
 8005194:	20001594 	.word	0x20001594
 8005198:	20001662 	.word	0x20001662
 800519c:	20001590 	.word	0x20001590
 80051a0:	20001580 	.word	0x20001580
 80051a4:	20001588 	.word	0x20001588
 80051a8:	20000c58 	.word	0x20000c58
 80051ac:	2000157c 	.word	0x2000157c
 80051b0:	20001a16 	.word	0x20001a16
 80051b4:	2000162c 	.word	0x2000162c
 80051b8:	2000158c 	.word	0x2000158c
 80051bc:	20001656 	.word	0x20001656
 80051c0:	20001628 	.word	0x20001628
 80051c4:	20001624 	.word	0x20001624
 80051c8:	20001a18 	.word	0x20001a18
       destination port number in the received packet. If the two port
       numbers match, the remote port number is checked if the
       connection is bound to a remote port. Finally, if the
       connection is bound to a remote IP address, the source IP
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
 80051cc:	889a      	ldrh	r2, [r3, #4]
 80051ce:	b1ea      	cbz	r2, 800520c <uip_process+0x30c>
       UDPBUF->destport == uip_udp_conn->lport &&
 80051d0:	498b      	ldr	r1, [pc, #556]	; (8005400 <uip_process+0x500>)
 80051d2:	8c89      	ldrh	r1, [r1, #36]	; 0x24
       destination port number in the received packet. If the two port
       numbers match, the remote port number is checked if the
       connection is bound to a remote port. Finally, if the
       connection is bound to a remote IP address, the source IP
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
 80051d4:	428a      	cmp	r2, r1
 80051d6:	d119      	bne.n	800520c <uip_process+0x30c>
       UDPBUF->destport == uip_udp_conn->lport &&
       (uip_udp_conn->rport == 0 ||
 80051d8:	88da      	ldrh	r2, [r3, #6]
       numbers match, the remote port number is checked if the
       connection is bound to a remote port. Finally, if the
       connection is bound to a remote IP address, the source IP
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
       UDPBUF->destport == uip_udp_conn->lport &&
 80051da:	b11a      	cbz	r2, 80051e4 <uip_process+0x2e4>
       (uip_udp_conn->rport == 0 ||
        UDPBUF->srcport == uip_udp_conn->rport) &&
 80051dc:	4988      	ldr	r1, [pc, #544]	; (8005400 <uip_process+0x500>)
 80051de:	8c49      	ldrh	r1, [r1, #34]	; 0x22
       connection is bound to a remote port. Finally, if the
       connection is bound to a remote IP address, the source IP
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
       UDPBUF->destport == uip_udp_conn->lport &&
       (uip_udp_conn->rport == 0 ||
 80051e0:	428a      	cmp	r2, r1
 80051e2:	d113      	bne.n	800520c <uip_process+0x30c>
        UDPBUF->srcport == uip_udp_conn->rport) &&
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
 80051e4:	881a      	ldrh	r2, [r3, #0]
       connection is bound to a remote IP address, the source IP
       address of the packet is checked. */
    if(uip_udp_conn->lport != 0 &&
       UDPBUF->destport == uip_udp_conn->lport &&
       (uip_udp_conn->rport == 0 ||
        UDPBUF->srcport == uip_udp_conn->rport) &&
 80051e6:	b90a      	cbnz	r2, 80051ec <uip_process+0x2ec>
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
 80051e8:	8859      	ldrh	r1, [r3, #2]
 80051ea:	b1c9      	cbz	r1, 8005220 <uip_process+0x320>
 80051ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80051f0:	428a      	cmp	r2, r1
 80051f2:	d102      	bne.n	80051fa <uip_process+0x2fa>
	uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_ones_addr) ||
 80051f4:	8858      	ldrh	r0, [r3, #2]
 80051f6:	4288      	cmp	r0, r1
 80051f8:	d012      	beq.n	8005220 <uip_process+0x320>
	uip_ipaddr_cmp(BUF->srcipaddr, uip_udp_conn->ripaddr)))
 80051fa:	4981      	ldr	r1, [pc, #516]	; (8005400 <uip_process+0x500>)
 80051fc:	8b49      	ldrh	r1, [r1, #26]
    if(uip_udp_conn->lport != 0 &&
       UDPBUF->destport == uip_udp_conn->lport &&
       (uip_udp_conn->rport == 0 ||
        UDPBUF->srcport == uip_udp_conn->rport) &&
       (uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_zeroes_addr) ||
	uip_ipaddr_cmp(uip_udp_conn->ripaddr, all_ones_addr) ||
 80051fe:	428a      	cmp	r2, r1
 8005200:	d104      	bne.n	800520c <uip_process+0x30c>
	uip_ipaddr_cmp(BUF->srcipaddr, uip_udp_conn->ripaddr)))
 8005202:	4a7f      	ldr	r2, [pc, #508]	; (8005400 <uip_process+0x500>)
 8005204:	8b91      	ldrh	r1, [r2, #28]
 8005206:	885a      	ldrh	r2, [r3, #2]
 8005208:	4291      	cmp	r1, r2
 800520a:	d009      	beq.n	8005220 <uip_process+0x320>
#endif /* UIP_UDP_CHECKSUMS */

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
      uip_udp_conn < &uip_udp_conns[UIP_UDP_CONNS];
      ++uip_udp_conn) {
 800520c:	3310      	adds	r3, #16
 800520e:	4a7d      	ldr	r2, [pc, #500]	; (8005404 <uip_process+0x504>)
 8005210:	6013      	str	r3, [r2, #0]
  uip_len = uip_len - UIP_IPUDPH_LEN;
#endif /* UIP_UDP_CHECKSUMS */

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
      uip_udp_conn < &uip_udp_conns[UIP_UDP_CONNS];
 8005212:	4b7c      	ldr	r3, [pc, #496]	; (8005404 <uip_process+0x504>)
 8005214:	681b      	ldr	r3, [r3, #0]
#else /* UIP_UDP_CHECKSUMS */
  uip_len = uip_len - UIP_IPUDPH_LEN;
#endif /* UIP_UDP_CHECKSUMS */

  /* Demultiplex this UDP packet between the UDP "connections". */
  for(uip_udp_conn = &uip_udp_conns[0];
 8005216:	4a7c      	ldr	r2, [pc, #496]	; (8005408 <uip_process+0x508>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d3d7      	bcc.n	80051cc <uip_process+0x2cc>
 800521c:	f000 bc8d 	b.w	8005b3a <uip_process+0xc3a>
  UIP_LOG("udp: no matching connection found");
  //printf("udp: no matching connection found");
  goto drop;
  
 udp_found:
  uip_conn = NULL;
 8005220:	2300      	movs	r3, #0
 8005222:	4a7a      	ldr	r2, [pc, #488]	; (800540c <uip_process+0x50c>)
 8005224:	6013      	str	r3, [r2, #0]
  uip_flags = UIP_NEWDATA;
 8005226:	2102      	movs	r1, #2
 8005228:	4a79      	ldr	r2, [pc, #484]	; (8005410 <uip_process+0x510>)
 800522a:	7011      	strb	r1, [r2, #0]
  uip_sappdata = uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPUDPH_LEN];
 800522c:	4979      	ldr	r1, [pc, #484]	; (8005414 <uip_process+0x514>)
 800522e:	4a7a      	ldr	r2, [pc, #488]	; (8005418 <uip_process+0x518>)
 8005230:	6011      	str	r1, [r2, #0]
  uip_slen = 0;
 8005232:	4a7a      	ldr	r2, [pc, #488]	; (800541c <uip_process+0x51c>)
 8005234:	8013      	strh	r3, [r2, #0]
  UIP_UDP_APPCALL();
 8005236:	f7fd f8df 	bl	80023f8 <uipudp_appcall>
  //printf("udp found\n");
 udp_send:
  if(uip_slen == 0) {
 800523a:	4b78      	ldr	r3, [pc, #480]	; (800541c <uip_process+0x51c>)
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 847b 	beq.w	8005b3a <uip_process+0xc3a>
    goto drop;
  }
  uip_len = uip_slen + UIP_IPUDPH_LEN;
 8005244:	f103 021c 	add.w	r2, r3, #28
 8005248:	b292      	uxth	r2, r2
 800524a:	4975      	ldr	r1, [pc, #468]	; (8005420 <uip_process+0x520>)
 800524c:	800a      	strh	r2, [r1, #0]
  /* For IPv6, the IP length field does not include the IPv6 IP header
     length. */
  BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
  BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
#else /* UIP_CONF_IPV6 */
  BUF->len[0] = (uip_len >> 8);
 800524e:	4c6c      	ldr	r4, [pc, #432]	; (8005400 <uip_process+0x500>)
 8005250:	0a11      	lsrs	r1, r2, #8
 8005252:	7421      	strb	r1, [r4, #16]
  BUF->len[1] = (uip_len & 0xff);
 8005254:	7462      	strb	r2, [r4, #17]
#endif /* UIP_CONF_IPV6 */

  BUF->ttl = uip_udp_conn->ttl;
 8005256:	4a6b      	ldr	r2, [pc, #428]	; (8005404 <uip_process+0x504>)
 8005258:	6812      	ldr	r2, [r2, #0]
 800525a:	7a11      	ldrb	r1, [r2, #8]
 800525c:	75a1      	strb	r1, [r4, #22]
  BUF->proto = UIP_PROTO_UDP;
 800525e:	2111      	movs	r1, #17
 8005260:	75e1      	strb	r1, [r4, #23]

  UDPBUF->udplen = HTONS(uip_slen + UIP_UDPH_LEN);
 8005262:	3308      	adds	r3, #8
 8005264:	b29b      	uxth	r3, r3
 8005266:	0a19      	lsrs	r1, r3, #8
 8005268:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800526c:	84e3      	strh	r3, [r4, #38]	; 0x26
  UDPBUF->udpchksum = 0;
 800526e:	2300      	movs	r3, #0
 8005270:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8005274:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29

  BUF->srcport  = uip_udp_conn->lport;
 8005278:	8893      	ldrh	r3, [r2, #4]
 800527a:	8463      	strh	r3, [r4, #34]	; 0x22
  BUF->destport = uip_udp_conn->rport;
 800527c:	88d3      	ldrh	r3, [r2, #6]
 800527e:	84a3      	strh	r3, [r4, #36]	; 0x24

  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
 8005280:	4b68      	ldr	r3, [pc, #416]	; (8005424 <uip_process+0x524>)
 8005282:	8819      	ldrh	r1, [r3, #0]
 8005284:	8361      	strh	r1, [r4, #26]
 8005286:	885b      	ldrh	r3, [r3, #2]
 8005288:	83a3      	strh	r3, [r4, #28]
  uip_ipaddr_copy(BUF->destipaddr, uip_udp_conn->ripaddr);
 800528a:	8813      	ldrh	r3, [r2, #0]
 800528c:	83e3      	strh	r3, [r4, #30]
 800528e:	8853      	ldrh	r3, [r2, #2]
 8005290:	8423      	strh	r3, [r4, #32]
   
  uip_appdata = &uip_buf[UIP_LLH_LEN + UIP_IPTCPH_LEN];
 8005292:	f104 0236 	add.w	r2, r4, #54	; 0x36
 8005296:	4b64      	ldr	r3, [pc, #400]	; (8005428 <uip_process+0x528>)
 8005298:	601a      	str	r2, [r3, #0]

#if UIP_UDP_CHECKSUMS
  /* Calculate UDP checksum. */
  UDPBUF->udpchksum = ~(uip_udpchksum());
 800529a:	f7ff fe2b 	bl	8004ef4 <uip_udpchksum>
 800529e:	43c0      	mvns	r0, r0
 80052a0:	b280      	uxth	r0, r0
 80052a2:	8520      	strh	r0, [r4, #40]	; 0x28
  if(UDPBUF->udpchksum == 0) {
 80052a4:	2800      	cmp	r0, #0
 80052a6:	f040 842f 	bne.w	8005b08 <uip_process+0xc08>
    UDPBUF->udpchksum = 0xffff;
 80052aa:	f04f 32ff 	mov.w	r2, #4294967295
 80052ae:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
 80052b2:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
 80052b6:	f000 bc27 	b.w	8005b08 <uip_process+0xc08>
 tcp_input:
  UIP_STAT(++uip_stat.tcp.recv);

  /* Start of TCP input header processing code. */
  
  if(uip_tcpchksum() != 0xffff) {   /* Compute and check the TCP
 80052ba:	f7ff fe15 	bl	8004ee8 <uip_tcpchksum>
 80052be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052c2:	4298      	cmp	r0, r3
 80052c4:	f040 8439 	bne.w	8005b3a <uip_process+0xc3a>
 80052c8:	4c58      	ldr	r4, [pc, #352]	; (800542c <uip_process+0x52c>)
 80052ca:	e017      	b.n	80052fc <uip_process+0x3fc>
  
  /* Demultiplex this segment. */
  /* First check any active connections. */
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
      ++uip_connr) {
    if(uip_connr->tcpstateflags != UIP_CLOSED &&
 80052cc:	7e61      	ldrb	r1, [r4, #25]
 80052ce:	b1a1      	cbz	r1, 80052fa <uip_process+0x3fa>
       BUF->destport == uip_connr->lport &&
 80052d0:	4b4b      	ldr	r3, [pc, #300]	; (8005400 <uip_process+0x500>)
 80052d2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 80052d4:	88a3      	ldrh	r3, [r4, #4]
  
  /* Demultiplex this segment. */
  /* First check any active connections. */
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
      ++uip_connr) {
    if(uip_connr->tcpstateflags != UIP_CLOSED &&
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d10f      	bne.n	80052fa <uip_process+0x3fa>
       BUF->destport == uip_connr->lport &&
       BUF->srcport == uip_connr->rport &&
 80052da:	4b49      	ldr	r3, [pc, #292]	; (8005400 <uip_process+0x500>)
 80052dc:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80052de:	88e3      	ldrh	r3, [r4, #6]
  /* Demultiplex this segment. */
  /* First check any active connections. */
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
      ++uip_connr) {
    if(uip_connr->tcpstateflags != UIP_CLOSED &&
       BUF->destport == uip_connr->lport &&
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d10a      	bne.n	80052fa <uip_process+0x3fa>
       BUF->srcport == uip_connr->rport &&
       uip_ipaddr_cmp(BUF->srcipaddr, uip_connr->ripaddr)) {
 80052e4:	4b46      	ldr	r3, [pc, #280]	; (8005400 <uip_process+0x500>)
 80052e6:	8b5a      	ldrh	r2, [r3, #26]
 80052e8:	8823      	ldrh	r3, [r4, #0]
  /* First check any active connections. */
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
      ++uip_connr) {
    if(uip_connr->tcpstateflags != UIP_CLOSED &&
       BUF->destport == uip_connr->lport &&
       BUF->srcport == uip_connr->rport &&
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d105      	bne.n	80052fa <uip_process+0x3fa>
       uip_ipaddr_cmp(BUF->srcipaddr, uip_connr->ripaddr)) {
 80052ee:	4b44      	ldr	r3, [pc, #272]	; (8005400 <uip_process+0x500>)
 80052f0:	8b9a      	ldrh	r2, [r3, #28]
 80052f2:	8863      	ldrh	r3, [r4, #2]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	f000 8143 	beq.w	8005580 <uip_process+0x680>
  
  
  /* Demultiplex this segment. */
  /* First check any active connections. */
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
      ++uip_connr) {
 80052fa:	3420      	adds	r4, #32
  }
  
  
  /* Demultiplex this segment. */
  /* First check any active connections. */
  for(uip_connr = &uip_conns[0]; uip_connr <= &uip_conns[UIP_CONNS - 1];
 80052fc:	4b4c      	ldr	r3, [pc, #304]	; (8005430 <uip_process+0x530>)
 80052fe:	429c      	cmp	r4, r3
 8005300:	d9e4      	bls.n	80052cc <uip_process+0x3cc>

  /* If we didn't find and active connection that expected the packet,
     either this packet is an old duplicate, or this is a SYN packet
     destined for a connection in LISTEN. If the SYN flag isn't set,
     it is an old packet and we send a RST. */
  if((BUF->flags & TCP_CTL) != TCP_SYN) {
 8005302:	4b3f      	ldr	r3, [pc, #252]	; (8005400 <uip_process+0x500>)
 8005304:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800530c:	2b02      	cmp	r3, #2
 800530e:	d114      	bne.n	800533a <uip_process+0x43a>
    goto reset;
  }
  
  tmp16 = BUF->destport;
 8005310:	4b3b      	ldr	r3, [pc, #236]	; (8005400 <uip_process+0x500>)
 8005312:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005314:	b299      	uxth	r1, r3
 8005316:	4a47      	ldr	r2, [pc, #284]	; (8005434 <uip_process+0x534>)
 8005318:	8013      	strh	r3, [r2, #0]
  /* Next, check listening connections. */
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
 800531a:	2200      	movs	r2, #0
 800531c:	4b46      	ldr	r3, [pc, #280]	; (8005438 <uip_process+0x538>)
 800531e:	701a      	strb	r2, [r3, #0]
 8005320:	e007      	b.n	8005332 <uip_process+0x432>
    if(tmp16 == uip_listenports[c])
 8005322:	4a46      	ldr	r2, [pc, #280]	; (800543c <uip_process+0x53c>)
 8005324:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005328:	4291      	cmp	r1, r2
 800532a:	d05b      	beq.n	80053e4 <uip_process+0x4e4>
    goto reset;
  }
  
  tmp16 = BUF->destport;
  /* Next, check listening connections. */
  for(c = 0; c < UIP_LISTENPORTS; ++c) {
 800532c:	3301      	adds	r3, #1
 800532e:	4a42      	ldr	r2, [pc, #264]	; (8005438 <uip_process+0x538>)
 8005330:	7013      	strb	r3, [r2, #0]
 8005332:	4b41      	ldr	r3, [pc, #260]	; (8005438 <uip_process+0x538>)
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2b03      	cmp	r3, #3
 8005338:	d9f3      	bls.n	8005322 <uip_process+0x422>
  /* No matching connection found, so we send a RST packet. */
  UIP_STAT(++uip_stat.tcp.synrst);
 reset:

  /* We do not send resets in response to resets. */
  if(BUF->flags & TCP_RST) {
 800533a:	4b31      	ldr	r3, [pc, #196]	; (8005400 <uip_process+0x500>)
 800533c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005340:	f013 0f04 	tst.w	r3, #4
 8005344:	f040 83f9 	bne.w	8005b3a <uip_process+0xc3a>
    goto drop;
  }

  UIP_STAT(++uip_stat.tcp.rst);
  
  BUF->flags = TCP_RST | TCP_ACK;
 8005348:	4b2d      	ldr	r3, [pc, #180]	; (8005400 <uip_process+0x500>)
 800534a:	2214      	movs	r2, #20
 800534c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  uip_len = UIP_IPTCPH_LEN;
 8005350:	2128      	movs	r1, #40	; 0x28
 8005352:	4a33      	ldr	r2, [pc, #204]	; (8005420 <uip_process+0x520>)
 8005354:	8011      	strh	r1, [r2, #0]
  BUF->tcpoffset = 5 << 4;
 8005356:	2250      	movs	r2, #80	; 0x50
 8005358:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* Flip the seqno and ackno fields in the TCP header. */
  c = BUF->seqno[3];
 800535c:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
  BUF->seqno[3] = BUF->ackno[3];
 8005360:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8005364:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BUF->ackno[3] = c;
  
  c = BUF->seqno[2];
 8005368:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
  BUF->seqno[2] = BUF->ackno[2];
 800536c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005370:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  BUF->ackno[2] = c;
 8005374:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
  
  c = BUF->seqno[1];
 8005378:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
  BUF->seqno[1] = BUF->ackno[1];
 800537c:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
 8005380:	f883 4027 	strb.w	r4, [r3, #39]	; 0x27
  BUF->ackno[1] = c;
 8005384:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  
  c = BUF->seqno[0];
 8005388:	f893 4026 	ldrb.w	r4, [r3, #38]	; 0x26
 800538c:	4d2a      	ldr	r5, [pc, #168]	; (8005438 <uip_process+0x538>)
 800538e:	702c      	strb	r4, [r5, #0]
  BUF->seqno[0] = BUF->ackno[0];
 8005390:	f893 502a 	ldrb.w	r5, [r3, #42]	; 0x2a
 8005394:	f883 5026 	strb.w	r5, [r3, #38]	; 0x26
  BUF->ackno[0] = c;
 8005398:	f883 402a 	strb.w	r4, [r3, #42]	; 0x2a

  /* We also have to increase the sequence number we are
     acknowledging. If the least significant byte overflowed, we need
     to propagate the carry to the other bytes as well. */
  if(++BUF->ackno[3] == 0) {
 800539c:	3001      	adds	r0, #1
 800539e:	b2c0      	uxtb	r0, r0
 80053a0:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
 80053a4:	b968      	cbnz	r0, 80053c2 <uip_process+0x4c2>
    if(++BUF->ackno[2] == 0) {
 80053a6:	1c4b      	adds	r3, r1, #1
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	4915      	ldr	r1, [pc, #84]	; (8005400 <uip_process+0x500>)
 80053ac:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
 80053b0:	b93b      	cbnz	r3, 80053c2 <uip_process+0x4c2>
      if(++BUF->ackno[1] == 0) {
 80053b2:	1c53      	adds	r3, r2, #1
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b
 80053ba:	b913      	cbnz	r3, 80053c2 <uip_process+0x4c2>
	++BUF->ackno[0];
 80053bc:	3401      	adds	r4, #1
 80053be:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
      }
    }
  }
 
  /* Swap port numbers. */
  tmp16 = BUF->srcport;
 80053c2:	4b0f      	ldr	r3, [pc, #60]	; (8005400 <uip_process+0x500>)
 80053c4:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80053c6:	491b      	ldr	r1, [pc, #108]	; (8005434 <uip_process+0x534>)
 80053c8:	800a      	strh	r2, [r1, #0]
  BUF->srcport = BUF->destport;
 80053ca:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 80053cc:	8459      	strh	r1, [r3, #34]	; 0x22
  BUF->destport = tmp16;
 80053ce:	849a      	strh	r2, [r3, #36]	; 0x24
  
  /* Swap IP addresses. */
  uip_ipaddr_copy(BUF->destipaddr, BUF->srcipaddr);
 80053d0:	8b5a      	ldrh	r2, [r3, #26]
 80053d2:	83da      	strh	r2, [r3, #30]
 80053d4:	8b9a      	ldrh	r2, [r3, #28]
 80053d6:	841a      	strh	r2, [r3, #32]
  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
 80053d8:	4a12      	ldr	r2, [pc, #72]	; (8005424 <uip_process+0x524>)
 80053da:	8811      	ldrh	r1, [r2, #0]
 80053dc:	8359      	strh	r1, [r3, #26]
 80053de:	8852      	ldrh	r2, [r2, #2]
 80053e0:	839a      	strh	r2, [r3, #28]
  
  /* And send out the RST packet! */
  goto tcp_send_noconn;
 80053e2:	e37c      	b.n	8005ade <uip_process+0xbde>
     unused ones have the tcpstate set to CLOSED. Also, connections in
     TIME_WAIT are kept track of and we'll use the oldest one if no
     CLOSED connections are found. Thanks to Eddie C. Dost for a very
     nice algorithm for the TIME_WAIT search. */
  uip_connr = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
 80053e4:	2400      	movs	r4, #0
 80053e6:	4b14      	ldr	r3, [pc, #80]	; (8005438 <uip_process+0x538>)
 80053e8:	701c      	strb	r4, [r3, #0]
 80053ea:	e039      	b.n	8005460 <uip_process+0x560>
    if(uip_conns[c].tcpstateflags == UIP_CLOSED) {
 80053ec:	4a0f      	ldr	r2, [pc, #60]	; (800542c <uip_process+0x52c>)
 80053ee:	eb02 1243 	add.w	r2, r2, r3, lsl #5
 80053f2:	7e52      	ldrb	r2, [r2, #25]
 80053f4:	bb22      	cbnz	r2, 8005440 <uip_process+0x540>
      uip_connr = &uip_conns[c];
 80053f6:	4c0d      	ldr	r4, [pc, #52]	; (800542c <uip_process+0x52c>)
 80053f8:	eb04 1443 	add.w	r4, r4, r3, lsl #5
      break;
 80053fc:	e034      	b.n	8005468 <uip_process+0x568>
 80053fe:	bf00      	nop
 8005400:	2000162c 	.word	0x2000162c
 8005404:	2000158c 	.word	0x2000158c
 8005408:	20001a58 	.word	0x20001a58
 800540c:	20001594 	.word	0x20001594
 8005410:	20001588 	.word	0x20001588
 8005414:	20001656 	.word	0x20001656
 8005418:	20001580 	.word	0x20001580
 800541c:	20001a16 	.word	0x20001a16
 8005420:	2000157c 	.word	0x2000157c
 8005424:	20001628 	.word	0x20001628
 8005428:	20001590 	.word	0x20001590
 800542c:	20001598 	.word	0x20001598
 8005430:	200015f8 	.word	0x200015f8
 8005434:	20000c54 	.word	0x20000c54
 8005438:	20000c5e 	.word	0x20000c5e
 800543c:	20001618 	.word	0x20001618
    }
    if(uip_conns[c].tcpstateflags == UIP_TIME_WAIT) {
 8005440:	2a07      	cmp	r2, #7
 8005442:	d10a      	bne.n	800545a <uip_process+0x55a>
      if(uip_connr == 0 ||
 8005444:	b134      	cbz	r4, 8005454 <uip_process+0x554>
	 uip_conns[c].timer > uip_connr->timer) {
 8005446:	4ab1      	ldr	r2, [pc, #708]	; (800570c <uip_process+0x80c>)
 8005448:	eb02 1243 	add.w	r2, r2, r3, lsl #5
 800544c:	7e91      	ldrb	r1, [r2, #26]
 800544e:	7ea2      	ldrb	r2, [r4, #26]
    if(uip_conns[c].tcpstateflags == UIP_CLOSED) {
      uip_connr = &uip_conns[c];
      break;
    }
    if(uip_conns[c].tcpstateflags == UIP_TIME_WAIT) {
      if(uip_connr == 0 ||
 8005450:	4291      	cmp	r1, r2
 8005452:	d902      	bls.n	800545a <uip_process+0x55a>
	 uip_conns[c].timer > uip_connr->timer) {
	uip_connr = &uip_conns[c];
 8005454:	4cad      	ldr	r4, [pc, #692]	; (800570c <uip_process+0x80c>)
 8005456:	eb04 1443 	add.w	r4, r4, r3, lsl #5
     unused ones have the tcpstate set to CLOSED. Also, connections in
     TIME_WAIT are kept track of and we'll use the oldest one if no
     CLOSED connections are found. Thanks to Eddie C. Dost for a very
     nice algorithm for the TIME_WAIT search. */
  uip_connr = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
 800545a:	3301      	adds	r3, #1
 800545c:	4aac      	ldr	r2, [pc, #688]	; (8005710 <uip_process+0x810>)
 800545e:	7013      	strb	r3, [r2, #0]
 8005460:	4bab      	ldr	r3, [pc, #684]	; (8005710 <uip_process+0x810>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b03      	cmp	r3, #3
 8005466:	d9c1      	bls.n	80053ec <uip_process+0x4ec>
	uip_connr = &uip_conns[c];
      }
    }
  }

  if(uip_connr == 0) {
 8005468:	2c00      	cmp	r4, #0
 800546a:	f000 8366 	beq.w	8005b3a <uip_process+0xc3a>
       have more spare connections. */
    UIP_STAT(++uip_stat.tcp.syndrop);
    UIP_LOG("tcp: found no unused connections.");
    goto drop;
  }
  uip_conn = uip_connr;
 800546e:	4ba9      	ldr	r3, [pc, #676]	; (8005714 <uip_process+0x814>)
 8005470:	601c      	str	r4, [r3, #0]
  
  /* Fill in the necessary fields for the new connection. */
  uip_connr->rto = uip_connr->timer = UIP_RTO;
 8005472:	2303      	movs	r3, #3
 8005474:	76a3      	strb	r3, [r4, #26]
 8005476:	7623      	strb	r3, [r4, #24]
  uip_connr->sa = 0;
 8005478:	2300      	movs	r3, #0
 800547a:	75a3      	strb	r3, [r4, #22]
  uip_connr->sv = 4;
 800547c:	2204      	movs	r2, #4
 800547e:	75e2      	strb	r2, [r4, #23]
  uip_connr->nrtx = 0;
 8005480:	76e3      	strb	r3, [r4, #27]
  uip_connr->lport = BUF->destport;
 8005482:	4da5      	ldr	r5, [pc, #660]	; (8005718 <uip_process+0x818>)
 8005484:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 8005486:	80a3      	strh	r3, [r4, #4]
  uip_connr->rport = BUF->srcport;
 8005488:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800548a:	80e3      	strh	r3, [r4, #6]
  uip_ipaddr_copy(uip_connr->ripaddr, BUF->srcipaddr);
 800548c:	8b6b      	ldrh	r3, [r5, #26]
 800548e:	8023      	strh	r3, [r4, #0]
 8005490:	8bab      	ldrh	r3, [r5, #28]
 8005492:	8063      	strh	r3, [r4, #2]
  uip_connr->tcpstateflags = UIP_SYN_RCVD;
 8005494:	2001      	movs	r0, #1
 8005496:	7660      	strb	r0, [r4, #25]

  uip_connr->snd_nxt[0] = iss[0];
 8005498:	4ba0      	ldr	r3, [pc, #640]	; (800571c <uip_process+0x81c>)
 800549a:	781a      	ldrb	r2, [r3, #0]
 800549c:	7322      	strb	r2, [r4, #12]
  uip_connr->snd_nxt[1] = iss[1];
 800549e:	785a      	ldrb	r2, [r3, #1]
 80054a0:	7362      	strb	r2, [r4, #13]
  uip_connr->snd_nxt[2] = iss[2];
 80054a2:	789a      	ldrb	r2, [r3, #2]
 80054a4:	73a2      	strb	r2, [r4, #14]
  uip_connr->snd_nxt[3] = iss[3];
 80054a6:	78db      	ldrb	r3, [r3, #3]
 80054a8:	73e3      	strb	r3, [r4, #15]
  uip_connr->len = 1;
 80054aa:	8220      	strh	r0, [r4, #16]

  /* rcv_nxt should be the seqno from the incoming packet + 1. */
  uip_connr->rcv_nxt[3] = BUF->seqno[3];
 80054ac:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 80054b0:	72e3      	strb	r3, [r4, #11]
  uip_connr->rcv_nxt[2] = BUF->seqno[2];
 80054b2:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80054b6:	72a3      	strb	r3, [r4, #10]
  uip_connr->rcv_nxt[1] = BUF->seqno[1];
 80054b8:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 80054bc:	7263      	strb	r3, [r4, #9]
  uip_connr->rcv_nxt[0] = BUF->seqno[0];
 80054be:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 80054c2:	7223      	strb	r3, [r4, #8]
  uip_add_rcv_nxt(1);
 80054c4:	f7ff fc86 	bl	8004dd4 <uip_add_rcv_nxt>

  /* Parse the TCP MSS option, if present. */
  if((BUF->tcpoffset & 0xf0) > 0x50) {
 80054c8:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
 80054cc:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80054d0:	2b50      	cmp	r3, #80	; 0x50
 80054d2:	dd37      	ble.n	8005544 <uip_process+0x644>
    for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
 80054d4:	2200      	movs	r2, #0
 80054d6:	4b8e      	ldr	r3, [pc, #568]	; (8005710 <uip_process+0x810>)
 80054d8:	701a      	strb	r2, [r3, #0]
 80054da:	e02b      	b.n	8005534 <uip_process+0x634>
      opt = uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + c];
 80054dc:	f103 0236 	add.w	r2, r3, #54	; 0x36
 80054e0:	4d8d      	ldr	r5, [pc, #564]	; (8005718 <uip_process+0x818>)
 80054e2:	5caa      	ldrb	r2, [r5, r2]
      if(opt == TCP_OPT_END) {
 80054e4:	b372      	cbz	r2, 8005544 <uip_process+0x644>
	/* End of options. */
	break;
      } else if(opt == TCP_OPT_NOOP) {
 80054e6:	2a01      	cmp	r2, #1
 80054e8:	d103      	bne.n	80054f2 <uip_process+0x5f2>
	++c;
 80054ea:	3301      	adds	r3, #1
 80054ec:	4a88      	ldr	r2, [pc, #544]	; (8005710 <uip_process+0x810>)
 80054ee:	7013      	strb	r3, [r2, #0]
 80054f0:	e020      	b.n	8005534 <uip_process+0x634>
	/* NOP option. */
      } else if(opt == TCP_OPT_MSS &&
 80054f2:	2a02      	cmp	r2, #2
 80054f4:	d116      	bne.n	8005524 <uip_process+0x624>
		uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
 80054f6:	f103 0237 	add.w	r2, r3, #55	; 0x37
 80054fa:	4d87      	ldr	r5, [pc, #540]	; (8005718 <uip_process+0x818>)
 80054fc:	5caa      	ldrb	r2, [r5, r2]
	/* End of options. */
	break;
      } else if(opt == TCP_OPT_NOOP) {
	++c;
	/* NOP option. */
      } else if(opt == TCP_OPT_MSS &&
 80054fe:	2a04      	cmp	r2, #4
 8005500:	d110      	bne.n	8005524 <uip_process+0x624>
		uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
	/* An MSS option with the right option length. */
	tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 8005502:	f101 0338 	add.w	r3, r1, #56	; 0x38
 8005506:	5cea      	ldrb	r2, [r5, r3]
	  (u16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
 8005508:	3139      	adds	r1, #57	; 0x39
 800550a:	5c6b      	ldrb	r3, [r5, r1]
	++c;
	/* NOP option. */
      } else if(opt == TCP_OPT_MSS &&
		uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
	/* An MSS option with the right option length. */
	tmp16 = ((u16_t)uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 800550c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8005510:	4b83      	ldr	r3, [pc, #524]	; (8005720 <uip_process+0x820>)
 8005512:	801a      	strh	r2, [r3, #0]
	  (u16_t)uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + 3 + c];
	uip_connr->initialmss = uip_connr->mss =
 8005514:	f240 3352 	movw	r3, #850	; 0x352
 8005518:	4293      	cmp	r3, r2
 800551a:	bf28      	it	cs
 800551c:	4613      	movcs	r3, r2
 800551e:	8263      	strh	r3, [r4, #18]
 8005520:	82a3      	strh	r3, [r4, #20]
	  tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;
	
	/* And we are done processing options. */
	break;
 8005522:	e00f      	b.n	8005544 <uip_process+0x644>
      } else {
	/* All other options have a length field, so that we easily
	   can skip past them. */
	if(uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
 8005524:	f103 0237 	add.w	r2, r3, #55	; 0x37
 8005528:	497b      	ldr	r1, [pc, #492]	; (8005718 <uip_process+0x818>)
 800552a:	5c8a      	ldrb	r2, [r1, r2]
 800552c:	b152      	cbz	r2, 8005544 <uip_process+0x644>
	  /* If the length field is zero, the options are malformed
	     and we don't process them further. */
	  break;
	}
	c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
 800552e:	4413      	add	r3, r2
 8005530:	4a77      	ldr	r2, [pc, #476]	; (8005710 <uip_process+0x810>)
 8005532:	7013      	strb	r3, [r2, #0]
  uip_connr->rcv_nxt[0] = BUF->seqno[0];
  uip_add_rcv_nxt(1);

  /* Parse the TCP MSS option, if present. */
  if((BUF->tcpoffset & 0xf0) > 0x50) {
    for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
 8005534:	4b76      	ldr	r3, [pc, #472]	; (8005710 <uip_process+0x810>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	4619      	mov	r1, r3
 800553a:	0902      	lsrs	r2, r0, #4
 800553c:	3a05      	subs	r2, #5
 800553e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005542:	dbcb      	blt.n	80054dc <uip_process+0x5dc>
  }
  
  /* Our response will be a SYNACK. */
#if UIP_ACTIVE_OPEN
 tcp_send_synack:
  BUF->flags = TCP_ACK;
 8005544:	2210      	movs	r2, #16
 8005546:	4b74      	ldr	r3, [pc, #464]	; (8005718 <uip_process+0x818>)
 8005548:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  
 tcp_send_syn:
  BUF->flags |= TCP_SYN;
 800554c:	4b72      	ldr	r3, [pc, #456]	; (8005718 <uip_process+0x818>)
 800554e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005552:	f042 0202 	orr.w	r2, r2, #2
 8005556:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#ifdef UIPDEBUG
  printf("UIP: TCP Send SYNC State\n");
 #endif
  /* We send out the TCP Maximum Segment Size option with our
     SYNACK. */
  BUF->optdata[0] = TCP_OPT_MSS;
 800555a:	2202      	movs	r2, #2
 800555c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  BUF->optdata[1] = TCP_OPT_MSS_LEN;
 8005560:	2204      	movs	r2, #4
 8005562:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  BUF->optdata[2] = (UIP_TCP_MSS) / 256;
 8005566:	2203      	movs	r2, #3
 8005568:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  BUF->optdata[3] = (UIP_TCP_MSS) & 255;
 800556c:	2252      	movs	r2, #82	; 0x52
 800556e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  uip_len = UIP_IPTCPH_LEN + TCP_OPT_MSS_LEN;
 8005572:	212c      	movs	r1, #44	; 0x2c
 8005574:	4a6b      	ldr	r2, [pc, #428]	; (8005724 <uip_process+0x824>)
 8005576:	8011      	strh	r1, [r2, #0]
  BUF->tcpoffset = ((UIP_TCPH_LEN + TCP_OPT_MSS_LEN) / 4) << 4;
 8005578:	2260      	movs	r2, #96	; 0x60
 800557a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  goto tcp_send;
 800557e:	e274      	b.n	8005a6a <uip_process+0xb6a>

  /* This label will be jumped to if we found an active connection. */
 found:
  uip_conn = uip_connr;
 8005580:	4b64      	ldr	r3, [pc, #400]	; (8005714 <uip_process+0x814>)
 8005582:	601c      	str	r4, [r3, #0]
  uip_flags = 0;
 8005584:	2200      	movs	r2, #0
 8005586:	4b68      	ldr	r3, [pc, #416]	; (8005728 <uip_process+0x828>)
 8005588:	701a      	strb	r2, [r3, #0]
  /* We do a very naive form of TCP reset processing; we just accept
     any RST and kill our connection. We should in fact check if the
     sequence number of this reset is wihtin our advertised window
     before we accept the reset. */
  if(BUF->flags & TCP_RST) {
 800558a:	4b63      	ldr	r3, [pc, #396]	; (8005718 <uip_process+0x818>)
 800558c:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005590:	f012 0f04 	tst.w	r2, #4
 8005594:	d007      	beq.n	80055a6 <uip_process+0x6a6>
    uip_connr->tcpstateflags = UIP_CLOSED;
 8005596:	2300      	movs	r3, #0
 8005598:	7663      	strb	r3, [r4, #25]
    UIP_LOG("tcp: got reset, aborting connection.");
    uip_flags = UIP_ABORT;
 800559a:	2220      	movs	r2, #32
 800559c:	4b62      	ldr	r3, [pc, #392]	; (8005728 <uip_process+0x828>)
 800559e:	701a      	strb	r2, [r3, #0]
    UIP_APPCALL();
 80055a0:	f7fc fedc 	bl	800235c <uipclient_appcall>
    goto drop;
 80055a4:	e2c9      	b.n	8005b3a <uip_process+0xc3a>
  }
  /* Calculated the length of the data, if the application has sent
     any data to us. */
  c = (BUF->tcpoffset >> 4) << 2;
 80055a6:	4b5c      	ldr	r3, [pc, #368]	; (8005718 <uip_process+0x818>)
 80055a8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80055ac:	091b      	lsrs	r3, r3, #4
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4857      	ldr	r0, [pc, #348]	; (8005710 <uip_process+0x810>)
 80055b2:	7003      	strb	r3, [r0, #0]
  /* uip_len will contain the length of the actual TCP data. This is
     calculated by subtracing the length of the TCP header (in
     c) and the length of the IP header (20 bytes). */
  uip_len = uip_len - c - UIP_IPH_LEN;
 80055b4:	1aeb      	subs	r3, r5, r3
 80055b6:	3b14      	subs	r3, #20
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	485a      	ldr	r0, [pc, #360]	; (8005724 <uip_process+0x824>)
 80055bc:	8003      	strh	r3, [r0, #0]

  /* First, check if the sequence number of the incoming packet is
     what we're expecting next. If not, we send out an ACK with the
     correct numbers in. */
  if(!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
 80055be:	f001 010f 	and.w	r1, r1, #15
 80055c2:	2902      	cmp	r1, #2
 80055c4:	d103      	bne.n	80055ce <uip_process+0x6ce>
 80055c6:	f002 013f 	and.w	r1, r2, #63	; 0x3f
 80055ca:	2912      	cmp	r1, #18
 80055cc:	d00f      	beq.n	80055ee <uip_process+0x6ee>
       ((BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)))) {
    if((uip_len > 0 || ((BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
 80055ce:	b913      	cbnz	r3, 80055d6 <uip_process+0x6d6>
 80055d0:	f012 0f03 	tst.w	r2, #3
 80055d4:	d00b      	beq.n	80055ee <uip_process+0x6ee>
       (BUF->seqno[0] != uip_connr->rcv_nxt[0] ||
 80055d6:	4b50      	ldr	r3, [pc, #320]	; (8005718 <uip_process+0x818>)
 80055d8:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 80055da:	8923      	ldrh	r3, [r4, #8]
  /* First, check if the sequence number of the incoming packet is
     what we're expecting next. If not, we send out an ACK with the
     correct numbers in. */
  if(!(((uip_connr->tcpstateflags & UIP_TS_MASK) == UIP_SYN_SENT) &&
       ((BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)))) {
    if((uip_len > 0 || ((BUF->flags & (TCP_SYN | TCP_FIN)) != 0)) &&
 80055dc:	4299      	cmp	r1, r3
 80055de:	f040 8239 	bne.w	8005a54 <uip_process+0xb54>
       (BUF->seqno[0] != uip_connr->rcv_nxt[0] ||
	BUF->seqno[1] != uip_connr->rcv_nxt[1] ||
	BUF->seqno[2] != uip_connr->rcv_nxt[2] ||
 80055e2:	4b4d      	ldr	r3, [pc, #308]	; (8005718 <uip_process+0x818>)
 80055e4:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 80055e6:	8963      	ldrh	r3, [r4, #10]
 80055e8:	4299      	cmp	r1, r3
 80055ea:	f040 8233 	bne.w	8005a54 <uip_process+0xb54>

  /* Next, check if the incoming segment acknowledges any outstanding
     data. If so, we update the sequence number, reset the length of
     the outstanding data, calculate RTT estimations, and reset the
     retransmission timer. */
  if((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
 80055ee:	f012 0f10 	tst.w	r2, #16
 80055f2:	d047      	beq.n	8005684 <uip_process+0x784>
 80055f4:	8a21      	ldrh	r1, [r4, #16]
 80055f6:	2900      	cmp	r1, #0
 80055f8:	d044      	beq.n	8005684 <uip_process+0x784>
    uip_add32(uip_connr->snd_nxt, uip_connr->len);
 80055fa:	f104 000c 	add.w	r0, r4, #12
 80055fe:	f7ff fbbb 	bl	8004d78 <uip_add32>

    if(BUF->ackno[0] == uip_acc32[0] &&
 8005602:	4b45      	ldr	r3, [pc, #276]	; (8005718 <uip_process+0x818>)
 8005604:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005608:	4a48      	ldr	r2, [pc, #288]	; (800572c <uip_process+0x82c>)
 800560a:	7810      	ldrb	r0, [r2, #0]
 800560c:	4283      	cmp	r3, r0
 800560e:	d139      	bne.n	8005684 <uip_process+0x784>
       BUF->ackno[1] == uip_acc32[1] &&
 8005610:	4b41      	ldr	r3, [pc, #260]	; (8005718 <uip_process+0x818>)
 8005612:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005616:	7851      	ldrb	r1, [r2, #1]
     the outstanding data, calculate RTT estimations, and reset the
     retransmission timer. */
  if((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
    uip_add32(uip_connr->snd_nxt, uip_connr->len);

    if(BUF->ackno[0] == uip_acc32[0] &&
 8005618:	428b      	cmp	r3, r1
 800561a:	d133      	bne.n	8005684 <uip_process+0x784>
       BUF->ackno[1] == uip_acc32[1] &&
       BUF->ackno[2] == uip_acc32[2] &&
 800561c:	4b3e      	ldr	r3, [pc, #248]	; (8005718 <uip_process+0x818>)
 800561e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005622:	7892      	ldrb	r2, [r2, #2]
     retransmission timer. */
  if((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
    uip_add32(uip_connr->snd_nxt, uip_connr->len);

    if(BUF->ackno[0] == uip_acc32[0] &&
       BUF->ackno[1] == uip_acc32[1] &&
 8005624:	4293      	cmp	r3, r2
 8005626:	d12d      	bne.n	8005684 <uip_process+0x784>
       BUF->ackno[2] == uip_acc32[2] &&
       BUF->ackno[3] == uip_acc32[3]) {
 8005628:	4b3b      	ldr	r3, [pc, #236]	; (8005718 <uip_process+0x818>)
 800562a:	f893 502d 	ldrb.w	r5, [r3, #45]	; 0x2d
 800562e:	4b3f      	ldr	r3, [pc, #252]	; (800572c <uip_process+0x82c>)
 8005630:	78db      	ldrb	r3, [r3, #3]
  if((BUF->flags & TCP_ACK) && uip_outstanding(uip_connr)) {
    uip_add32(uip_connr->snd_nxt, uip_connr->len);

    if(BUF->ackno[0] == uip_acc32[0] &&
       BUF->ackno[1] == uip_acc32[1] &&
       BUF->ackno[2] == uip_acc32[2] &&
 8005632:	429d      	cmp	r5, r3
 8005634:	d126      	bne.n	8005684 <uip_process+0x784>
       BUF->ackno[3] == uip_acc32[3]) {
      /* Update sequence number. */
      uip_connr->snd_nxt[0] = uip_acc32[0];
 8005636:	7320      	strb	r0, [r4, #12]
      uip_connr->snd_nxt[1] = uip_acc32[1];
 8005638:	7361      	strb	r1, [r4, #13]
      uip_connr->snd_nxt[2] = uip_acc32[2];
 800563a:	73a2      	strb	r2, [r4, #14]
      uip_connr->snd_nxt[3] = uip_acc32[3];
 800563c:	73e3      	strb	r3, [r4, #15]
	

      /* Do RTT estimation, unless we have done retransmissions. */
      if(uip_connr->nrtx == 0) {
 800563e:	7ee3      	ldrb	r3, [r4, #27]
 8005640:	b9cb      	cbnz	r3, 8005676 <uip_process+0x776>
	signed char m;
	m = uip_connr->rto - uip_connr->timer;
 8005642:	7e23      	ldrb	r3, [r4, #24]
 8005644:	7ea2      	ldrb	r2, [r4, #26]
 8005646:	1a9a      	subs	r2, r3, r2
 8005648:	b2d2      	uxtb	r2, r2
	/* This is taken directly from VJs original code in his paper */
	m = m - (uip_connr->sa >> 3);
 800564a:	7da1      	ldrb	r1, [r4, #22]
 800564c:	eba2 02d1 	sub.w	r2, r2, r1, lsr #3
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	b253      	sxtb	r3, r2
	uip_connr->sa += m;
 8005654:	4411      	add	r1, r2
 8005656:	b2c9      	uxtb	r1, r1
 8005658:	75a1      	strb	r1, [r4, #22]
	if(m < 0) {
 800565a:	2b00      	cmp	r3, #0
 800565c:	da01      	bge.n	8005662 <uip_process+0x762>
	  m = -m;
 800565e:	4252      	negs	r2, r2
 8005660:	b253      	sxtb	r3, r2
	}
	m = m - (uip_connr->sv >> 2);
 8005662:	7de0      	ldrb	r0, [r4, #23]
 8005664:	eba3 0290 	sub.w	r2, r3, r0, lsr #2
 8005668:	b2d2      	uxtb	r2, r2
	uip_connr->sv += m;
 800566a:	4402      	add	r2, r0
 800566c:	b2d3      	uxtb	r3, r2
 800566e:	75e3      	strb	r3, [r4, #23]
	uip_connr->rto = (uip_connr->sa >> 3) + uip_connr->sv;
 8005670:	eb03 03d1 	add.w	r3, r3, r1, lsr #3
 8005674:	7623      	strb	r3, [r4, #24]

      }
      /* Set the acknowledged flag. */
      uip_flags = UIP_ACKDATA;
 8005676:	2201      	movs	r2, #1
 8005678:	4b2b      	ldr	r3, [pc, #172]	; (8005728 <uip_process+0x828>)
 800567a:	701a      	strb	r2, [r3, #0]
      /* Reset the retransmission timer. */
      uip_connr->timer = uip_connr->rto;
 800567c:	7e23      	ldrb	r3, [r4, #24]
 800567e:	76a3      	strb	r3, [r4, #26]

      /* Reset length of outstanding data. */
      uip_connr->len = 0;
 8005680:	2300      	movs	r3, #0
 8005682:	8223      	strh	r3, [r4, #16]
    }
    
  }

  /* Do different things depending on in what state the connection is. */
  switch(uip_connr->tcpstateflags & UIP_TS_MASK) {
 8005684:	7e61      	ldrb	r1, [r4, #25]
 8005686:	f001 030f 	and.w	r3, r1, #15
 800568a:	3b01      	subs	r3, #1
 800568c:	2b07      	cmp	r3, #7
 800568e:	f200 8254 	bhi.w	8005b3a <uip_process+0xc3a>
 8005692:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005696:	0008      	.short	0x0008
 8005698:	00ab0023 	.word	0x00ab0023
 800569c:	01b90177 	.word	0x01b90177
 80056a0:	01df01d5 	.word	0x01df01d5
 80056a4:	0169      	.short	0x0169
  case UIP_SYN_RCVD:
    /* In SYN_RCVD we have sent out a SYNACK in response to a SYN, and
       we are waiting for an ACK that acknowledges the data we sent
       out the last time. Therefore, we want to have the UIP_ACKDATA
       flag set. If so, we enter the ESTABLISHED state. */
    if(uip_flags & UIP_ACKDATA) {
 80056a6:	4b20      	ldr	r3, [pc, #128]	; (8005728 <uip_process+0x828>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	f013 0f01 	tst.w	r3, #1
 80056ae:	f000 8244 	beq.w	8005b3a <uip_process+0xc3a>
      uip_connr->tcpstateflags = UIP_ESTABLISHED;
 80056b2:	2303      	movs	r3, #3
 80056b4:	7663      	strb	r3, [r4, #25]
      uip_flags = UIP_CONNECTED;
 80056b6:	2240      	movs	r2, #64	; 0x40
 80056b8:	4b1b      	ldr	r3, [pc, #108]	; (8005728 <uip_process+0x828>)
 80056ba:	701a      	strb	r2, [r3, #0]
      uip_connr->len = 0;
 80056bc:	2300      	movs	r3, #0
 80056be:	8223      	strh	r3, [r4, #16]
      if(uip_len > 0) {
 80056c0:	4b18      	ldr	r3, [pc, #96]	; (8005724 <uip_process+0x824>)
 80056c2:	8818      	ldrh	r0, [r3, #0]
 80056c4:	b120      	cbz	r0, 80056d0 <uip_process+0x7d0>
        uip_flags |= UIP_NEWDATA;
 80056c6:	2242      	movs	r2, #66	; 0x42
 80056c8:	4b17      	ldr	r3, [pc, #92]	; (8005728 <uip_process+0x828>)
 80056ca:	701a      	strb	r2, [r3, #0]
        uip_add_rcv_nxt(uip_len);
 80056cc:	f7ff fb82 	bl	8004dd4 <uip_add_rcv_nxt>
      }
      uip_slen = 0;
 80056d0:	2200      	movs	r2, #0
 80056d2:	4b17      	ldr	r3, [pc, #92]	; (8005730 <uip_process+0x830>)
 80056d4:	801a      	strh	r2, [r3, #0]
      UIP_APPCALL();
 80056d6:	f7fc fe41 	bl	800235c <uipclient_appcall>
      goto appsend;
 80056da:	e0f1      	b.n	80058c0 <uip_process+0x9c0>
  case UIP_SYN_SENT:
    /* In SYN_SENT, we wait for a SYNACK that is sent in response to
       our SYN. The rcv_nxt is set to sequence number in the SYNACK
       plus one, and we send an ACK. We move into the ESTABLISHED
       state. */
    if((uip_flags & UIP_ACKDATA) &&
 80056dc:	4b12      	ldr	r3, [pc, #72]	; (8005728 <uip_process+0x828>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	f013 0f01 	tst.w	r3, #1
 80056e4:	d078      	beq.n	80057d8 <uip_process+0x8d8>
       (BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)) {
 80056e6:	4b0c      	ldr	r3, [pc, #48]	; (8005718 <uip_process+0x818>)
 80056e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
  case UIP_SYN_SENT:
    /* In SYN_SENT, we wait for a SYNACK that is sent in response to
       our SYN. The rcv_nxt is set to sequence number in the SYNACK
       plus one, and we send an ACK. We move into the ESTABLISHED
       state. */
    if((uip_flags & UIP_ACKDATA) &&
 80056ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056f0:	2b12      	cmp	r3, #18
 80056f2:	d171      	bne.n	80057d8 <uip_process+0x8d8>
       (BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)) {

      /* Parse the TCP MSS option, if present. */
      if((BUF->tcpoffset & 0xf0) > 0x50) {
 80056f4:	4b08      	ldr	r3, [pc, #32]	; (8005718 <uip_process+0x818>)
 80056f6:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
 80056fa:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80056fe:	2b50      	cmp	r3, #80	; 0x50
 8005700:	dd4c      	ble.n	800579c <uip_process+0x89c>
	for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
 8005702:	2200      	movs	r2, #0
 8005704:	4b02      	ldr	r3, [pc, #8]	; (8005710 <uip_process+0x810>)
 8005706:	701a      	strb	r2, [r3, #0]
 8005708:	e040      	b.n	800578c <uip_process+0x88c>
 800570a:	bf00      	nop
 800570c:	20001598 	.word	0x20001598
 8005710:	20000c5e 	.word	0x20000c5e
 8005714:	20001594 	.word	0x20001594
 8005718:	2000162c 	.word	0x2000162c
 800571c:	20000c58 	.word	0x20000c58
 8005720:	20000c54 	.word	0x20000c54
 8005724:	2000157c 	.word	0x2000157c
 8005728:	20001588 	.word	0x20001588
 800572c:	20001584 	.word	0x20001584
 8005730:	20001a16 	.word	0x20001a16
	  opt = uip_buf[UIP_IPTCPH_LEN + UIP_LLH_LEN + c];
 8005734:	f103 0236 	add.w	r2, r3, #54	; 0x36
 8005738:	4da3      	ldr	r5, [pc, #652]	; (80059c8 <uip_process+0xac8>)
 800573a:	5caa      	ldrb	r2, [r5, r2]
	  if(opt == TCP_OPT_END) {
 800573c:	b372      	cbz	r2, 800579c <uip_process+0x89c>
	    /* End of options. */
	    break;
	  } else if(opt == TCP_OPT_NOOP) {
 800573e:	2a01      	cmp	r2, #1
 8005740:	d103      	bne.n	800574a <uip_process+0x84a>
	    ++c;
 8005742:	3301      	adds	r3, #1
 8005744:	4aa1      	ldr	r2, [pc, #644]	; (80059cc <uip_process+0xacc>)
 8005746:	7013      	strb	r3, [r2, #0]
 8005748:	e020      	b.n	800578c <uip_process+0x88c>
	    /* NOP option. */
	  } else if(opt == TCP_OPT_MSS &&
 800574a:	2a02      	cmp	r2, #2
 800574c:	d116      	bne.n	800577c <uip_process+0x87c>
		    uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
 800574e:	f103 0237 	add.w	r2, r3, #55	; 0x37
 8005752:	4d9d      	ldr	r5, [pc, #628]	; (80059c8 <uip_process+0xac8>)
 8005754:	5caa      	ldrb	r2, [r5, r2]
	    /* End of options. */
	    break;
	  } else if(opt == TCP_OPT_NOOP) {
	    ++c;
	    /* NOP option. */
	  } else if(opt == TCP_OPT_MSS &&
 8005756:	2a04      	cmp	r2, #4
 8005758:	d110      	bne.n	800577c <uip_process+0x87c>
		    uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
	    /* An MSS option with the right option length. */
	    tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 800575a:	f101 0338 	add.w	r3, r1, #56	; 0x38
 800575e:	5cea      	ldrb	r2, [r5, r3]
	      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 3 + c];
 8005760:	3139      	adds	r1, #57	; 0x39
 8005762:	5c6b      	ldrb	r3, [r5, r1]
	    ++c;
	    /* NOP option. */
	  } else if(opt == TCP_OPT_MSS &&
		    uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
	    /* An MSS option with the right option length. */
	    tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
 8005764:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8005768:	4b99      	ldr	r3, [pc, #612]	; (80059d0 <uip_process+0xad0>)
 800576a:	801a      	strh	r2, [r3, #0]
	      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 3 + c];
	    uip_connr->initialmss =
	      uip_connr->mss = tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;
 800576c:	f240 3352 	movw	r3, #850	; 0x352
 8005770:	4293      	cmp	r3, r2
 8005772:	bf28      	it	cs
 8005774:	4613      	movcs	r3, r2
 8005776:	8263      	strh	r3, [r4, #18]
	  } else if(opt == TCP_OPT_MSS &&
		    uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == TCP_OPT_MSS_LEN) {
	    /* An MSS option with the right option length. */
	    tmp16 = (uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 2 + c] << 8) |
	      uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 3 + c];
	    uip_connr->initialmss =
 8005778:	82a3      	strh	r3, [r4, #20]
	      uip_connr->mss = tmp16 > UIP_TCP_MSS? UIP_TCP_MSS: tmp16;

	    /* And we are done processing options. */
	    break;
 800577a:	e00f      	b.n	800579c <uip_process+0x89c>
	  } else {
	    /* All other options have a length field, so that we easily
	       can skip past them. */
	    if(uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c] == 0) {
 800577c:	f103 0237 	add.w	r2, r3, #55	; 0x37
 8005780:	4991      	ldr	r1, [pc, #580]	; (80059c8 <uip_process+0xac8>)
 8005782:	5c8a      	ldrb	r2, [r1, r2]
 8005784:	b152      	cbz	r2, 800579c <uip_process+0x89c>
	      /* If the length field is zero, the options are malformed
		 and we don't process them further. */
	      break;
	    }
	    c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
 8005786:	4413      	add	r3, r2
 8005788:	4a90      	ldr	r2, [pc, #576]	; (80059cc <uip_process+0xacc>)
 800578a:	7013      	strb	r3, [r2, #0]
    if((uip_flags & UIP_ACKDATA) &&
       (BUF->flags & TCP_CTL) == (TCP_SYN | TCP_ACK)) {

      /* Parse the TCP MSS option, if present. */
      if((BUF->tcpoffset & 0xf0) > 0x50) {
	for(c = 0; c < ((BUF->tcpoffset >> 4) - 5) << 2 ;) {
 800578c:	4b8f      	ldr	r3, [pc, #572]	; (80059cc <uip_process+0xacc>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	4619      	mov	r1, r3
 8005792:	0902      	lsrs	r2, r0, #4
 8005794:	3a05      	subs	r2, #5
 8005796:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800579a:	dbcb      	blt.n	8005734 <uip_process+0x834>
	    }
	    c += uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN + 1 + c];
	  }
	}
      }
      uip_connr->tcpstateflags = UIP_ESTABLISHED;
 800579c:	2303      	movs	r3, #3
 800579e:	7663      	strb	r3, [r4, #25]
      uip_connr->rcv_nxt[0] = BUF->seqno[0];
 80057a0:	4b89      	ldr	r3, [pc, #548]	; (80059c8 <uip_process+0xac8>)
 80057a2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80057a6:	7222      	strb	r2, [r4, #8]
      uip_connr->rcv_nxt[1] = BUF->seqno[1];
 80057a8:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80057ac:	7262      	strb	r2, [r4, #9]
      uip_connr->rcv_nxt[2] = BUF->seqno[2];
 80057ae:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80057b2:	72a2      	strb	r2, [r4, #10]
      uip_connr->rcv_nxt[3] = BUF->seqno[3];
 80057b4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80057b8:	72e3      	strb	r3, [r4, #11]
      uip_add_rcv_nxt(1);
 80057ba:	2001      	movs	r0, #1
 80057bc:	f7ff fb0a 	bl	8004dd4 <uip_add_rcv_nxt>
      uip_flags = UIP_CONNECTED | UIP_NEWDATA;
 80057c0:	2242      	movs	r2, #66	; 0x42
 80057c2:	4b84      	ldr	r3, [pc, #528]	; (80059d4 <uip_process+0xad4>)
 80057c4:	701a      	strb	r2, [r3, #0]
      uip_connr->len = 0;
 80057c6:	2300      	movs	r3, #0
 80057c8:	8223      	strh	r3, [r4, #16]
      uip_len = 0;
 80057ca:	4a83      	ldr	r2, [pc, #524]	; (80059d8 <uip_process+0xad8>)
 80057cc:	8013      	strh	r3, [r2, #0]
      uip_slen = 0;
 80057ce:	4a83      	ldr	r2, [pc, #524]	; (80059dc <uip_process+0xadc>)
 80057d0:	8013      	strh	r3, [r2, #0]
      UIP_APPCALL();
 80057d2:	f7fc fdc3 	bl	800235c <uipclient_appcall>
      goto appsend;
 80057d6:	e073      	b.n	80058c0 <uip_process+0x9c0>
    }
    /* Inform the application that the connection failed */
    uip_flags = UIP_ABORT;
 80057d8:	2220      	movs	r2, #32
 80057da:	4b7e      	ldr	r3, [pc, #504]	; (80059d4 <uip_process+0xad4>)
 80057dc:	701a      	strb	r2, [r3, #0]
    UIP_APPCALL();
 80057de:	f7fc fdbd 	bl	800235c <uipclient_appcall>
    /* The connection is closed after we send the RST */
    uip_conn->tcpstateflags = UIP_CLOSED;
 80057e2:	4b7f      	ldr	r3, [pc, #508]	; (80059e0 <uip_process+0xae0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2200      	movs	r2, #0
 80057e8:	765a      	strb	r2, [r3, #25]
    goto reset;
 80057ea:	e5a6      	b.n	800533a <uip_process+0x43a>
    If the incoming packet is a FIN, we should close the connection on
    this side as well, and we send out a FIN and enter the LAST_ACK
    state. We require that there is no outstanding data; otherwise the
    sequence numbers will be screwed up. */

    if(BUF->flags & TCP_FIN && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
 80057ec:	4b76      	ldr	r3, [pc, #472]	; (80059c8 <uip_process+0xac8>)
 80057ee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80057f2:	f013 0f01 	tst.w	r3, #1
 80057f6:	d024      	beq.n	8005842 <uip_process+0x942>
 80057f8:	f011 0f10 	tst.w	r1, #16
 80057fc:	d121      	bne.n	8005842 <uip_process+0x942>
      if(uip_outstanding(uip_connr)) {
 80057fe:	8a23      	ldrh	r3, [r4, #16]
 8005800:	2b00      	cmp	r3, #0
 8005802:	f040 819a 	bne.w	8005b3a <uip_process+0xc3a>
	goto drop;
      }
      uip_add_rcv_nxt(1 + uip_len);
 8005806:	4d74      	ldr	r5, [pc, #464]	; (80059d8 <uip_process+0xad8>)
 8005808:	8828      	ldrh	r0, [r5, #0]
 800580a:	3001      	adds	r0, #1
 800580c:	b280      	uxth	r0, r0
 800580e:	f7ff fae1 	bl	8004dd4 <uip_add_rcv_nxt>
      uip_flags |= UIP_CLOSE;
 8005812:	4a70      	ldr	r2, [pc, #448]	; (80059d4 <uip_process+0xad4>)
 8005814:	7813      	ldrb	r3, [r2, #0]
 8005816:	f043 0310 	orr.w	r3, r3, #16
 800581a:	7013      	strb	r3, [r2, #0]
      if(uip_len > 0) {
 800581c:	882a      	ldrh	r2, [r5, #0]
 800581e:	b11a      	cbz	r2, 8005828 <uip_process+0x928>
	uip_flags |= UIP_NEWDATA;
 8005820:	f043 0302 	orr.w	r3, r3, #2
 8005824:	4a6b      	ldr	r2, [pc, #428]	; (80059d4 <uip_process+0xad4>)
 8005826:	7013      	strb	r3, [r2, #0]
      }
      UIP_APPCALL();
 8005828:	f7fc fd98 	bl	800235c <uipclient_appcall>
      uip_connr->len = 1;
 800582c:	2301      	movs	r3, #1
 800582e:	8223      	strh	r3, [r4, #16]
      uip_connr->tcpstateflags = UIP_LAST_ACK;
 8005830:	2308      	movs	r3, #8
 8005832:	7663      	strb	r3, [r4, #25]
      uip_connr->nrtx = 0;
 8005834:	2300      	movs	r3, #0
 8005836:	76e3      	strb	r3, [r4, #27]
    tcp_send_finack:
      BUF->flags = TCP_FIN | TCP_ACK;
 8005838:	2211      	movs	r2, #17
 800583a:	4b63      	ldr	r3, [pc, #396]	; (80059c8 <uip_process+0xac8>)
 800583c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
      goto tcp_send_nodata;
 8005840:	e10c      	b.n	8005a5c <uip_process+0xb5c>
    }

    /* Check the URG flag. If this is set, the segment carries urgent
       data that we must pass to the application. */
    if((BUF->flags & TCP_URG) != 0) {
 8005842:	f013 0f20 	tst.w	r3, #32
 8005846:	d010      	beq.n	800586a <uip_process+0x96a>
      uip_urgdata = uip_appdata;
      uip_appdata += uip_urglen;
    } else {
      uip_urglen = 0;
#else /* UIP_URGDATA > 0 */
      uip_appdata = ((char *)uip_appdata) + ((BUF->urgp[0] << 8) | BUF->urgp[1]);
 8005848:	485f      	ldr	r0, [pc, #380]	; (80059c8 <uip_process+0xac8>)
 800584a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800584e:	021a      	lsls	r2, r3, #8
 8005850:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8005854:	ea43 0002 	orr.w	r0, r3, r2
 8005858:	4d62      	ldr	r5, [pc, #392]	; (80059e4 <uip_process+0xae4>)
 800585a:	682e      	ldr	r6, [r5, #0]
 800585c:	4430      	add	r0, r6
 800585e:	6028      	str	r0, [r5, #0]
      uip_len -= (BUF->urgp[0] << 8) | BUF->urgp[1];
 8005860:	485d      	ldr	r0, [pc, #372]	; (80059d8 <uip_process+0xad8>)
 8005862:	4313      	orrs	r3, r2
 8005864:	8802      	ldrh	r2, [r0, #0]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	8003      	strh	r3, [r0, #0]
    /* If uip_len > 0 we have TCP data in the packet, and we flag this
       by setting the UIP_NEWDATA flag and update the sequence number
       we acknowledge. If the application has stopped the dataflow
       using uip_stop(), we must not accept any data packets from the
       remote host. */
    if(uip_len > 0 && !(uip_connr->tcpstateflags & UIP_STOPPED)) {
 800586a:	4b5b      	ldr	r3, [pc, #364]	; (80059d8 <uip_process+0xad8>)
 800586c:	8818      	ldrh	r0, [r3, #0]
 800586e:	b148      	cbz	r0, 8005884 <uip_process+0x984>
 8005870:	f011 0f10 	tst.w	r1, #16
 8005874:	d106      	bne.n	8005884 <uip_process+0x984>
      uip_flags |= UIP_NEWDATA;
 8005876:	4a57      	ldr	r2, [pc, #348]	; (80059d4 <uip_process+0xad4>)
 8005878:	7813      	ldrb	r3, [r2, #0]
 800587a:	f043 0302 	orr.w	r3, r3, #2
 800587e:	7013      	strb	r3, [r2, #0]
      uip_add_rcv_nxt(uip_len);
 8005880:	f7ff faa8 	bl	8004dd4 <uip_add_rcv_nxt>
       the initial MSS so that the application will send an entire MSS
       of data. This data will not be acknowledged by the receiver,
       and the application will retransmit it. This is called the
       "persistent timer" and uses the retransmission mechanim.
    */
    tmp16 = ((u16_t)BUF->wnd[0] << 8) + (u16_t)BUF->wnd[1];
 8005884:	4a50      	ldr	r2, [pc, #320]	; (80059c8 <uip_process+0xac8>)
 8005886:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
 800588a:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 800588e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8005892:	b29b      	uxth	r3, r3
 8005894:	4a4e      	ldr	r2, [pc, #312]	; (80059d0 <uip_process+0xad0>)
 8005896:	8013      	strh	r3, [r2, #0]
    if(tmp16 > uip_connr->initialmss ||
 8005898:	8aa2      	ldrh	r2, [r4, #20]
 800589a:	4293      	cmp	r3, r2
 800589c:	d800      	bhi.n	80058a0 <uip_process+0x9a0>
 800589e:	b90b      	cbnz	r3, 80058a4 <uip_process+0x9a4>
       tmp16 == 0) {
      tmp16 = uip_connr->initialmss;
 80058a0:	4b4b      	ldr	r3, [pc, #300]	; (80059d0 <uip_process+0xad0>)
 80058a2:	801a      	strh	r2, [r3, #0]
    }
    uip_connr->mss = tmp16;
 80058a4:	4b4a      	ldr	r3, [pc, #296]	; (80059d0 <uip_process+0xad0>)
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	8263      	strh	r3, [r4, #18]

       If the application wishes to send any data, this data should be
       put into the uip_appdata and the length of the data should be
       put into uip_len. If the application don't have any data to
       send, uip_len must be set to 0. */
    if(uip_flags & (UIP_NEWDATA | UIP_ACKDATA)) {
 80058aa:	4b4a      	ldr	r3, [pc, #296]	; (80059d4 <uip_process+0xad4>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	f013 0f03 	tst.w	r3, #3
 80058b2:	f000 8142 	beq.w	8005b3a <uip_process+0xc3a>
      uip_slen = 0;
 80058b6:	2200      	movs	r2, #0
 80058b8:	4b48      	ldr	r3, [pc, #288]	; (80059dc <uip_process+0xadc>)
 80058ba:	801a      	strh	r2, [r3, #0]
      UIP_APPCALL();
 80058bc:	f7fc fd4e 	bl	800235c <uipclient_appcall>

    appsend:
      
      if(uip_flags & UIP_ABORT) {
 80058c0:	4b44      	ldr	r3, [pc, #272]	; (80059d4 <uip_process+0xad4>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	f013 0f20 	tst.w	r3, #32
 80058c8:	d008      	beq.n	80058dc <uip_process+0x9dc>
	uip_slen = 0;
 80058ca:	2300      	movs	r3, #0
 80058cc:	4a43      	ldr	r2, [pc, #268]	; (80059dc <uip_process+0xadc>)
 80058ce:	8013      	strh	r3, [r2, #0]
	uip_connr->tcpstateflags = UIP_CLOSED;
 80058d0:	7663      	strb	r3, [r4, #25]
	BUF->flags = TCP_RST | TCP_ACK;
 80058d2:	2214      	movs	r2, #20
 80058d4:	4b3c      	ldr	r3, [pc, #240]	; (80059c8 <uip_process+0xac8>)
 80058d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	goto tcp_send_nodata;
 80058da:	e0bf      	b.n	8005a5c <uip_process+0xb5c>
      }

      if(uip_flags & UIP_CLOSE) {
 80058dc:	f013 0f10 	tst.w	r3, #16
 80058e0:	d00c      	beq.n	80058fc <uip_process+0x9fc>
	uip_slen = 0;
 80058e2:	2300      	movs	r3, #0
 80058e4:	4a3d      	ldr	r2, [pc, #244]	; (80059dc <uip_process+0xadc>)
 80058e6:	8013      	strh	r3, [r2, #0]
	uip_connr->len = 1;
 80058e8:	2201      	movs	r2, #1
 80058ea:	8222      	strh	r2, [r4, #16]
	uip_connr->tcpstateflags = UIP_FIN_WAIT_1;
 80058ec:	2204      	movs	r2, #4
 80058ee:	7662      	strb	r2, [r4, #25]
	uip_connr->nrtx = 0;
 80058f0:	76e3      	strb	r3, [r4, #27]
	BUF->flags = TCP_FIN | TCP_ACK;
 80058f2:	2211      	movs	r2, #17
 80058f4:	4b34      	ldr	r3, [pc, #208]	; (80059c8 <uip_process+0xac8>)
 80058f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	goto tcp_send_nodata;
 80058fa:	e0af      	b.n	8005a5c <uip_process+0xb5c>
      }

      /* If uip_slen > 0, the application has data to be sent. */
      if(uip_slen > 0) {
 80058fc:	4a37      	ldr	r2, [pc, #220]	; (80059dc <uip_process+0xadc>)
 80058fe:	8812      	ldrh	r2, [r2, #0]
 8005900:	b18a      	cbz	r2, 8005926 <uip_process+0xa26>

	/* If the connection has acknowledged data, the contents of
	   the ->len variable should be discarded. */
	if((uip_flags & UIP_ACKDATA) != 0) {
 8005902:	f013 0f01 	tst.w	r3, #1
 8005906:	d001      	beq.n	800590c <uip_process+0xa0c>
	  uip_connr->len = 0;
 8005908:	2300      	movs	r3, #0
 800590a:	8223      	strh	r3, [r4, #16]
	}

	/* If the ->len variable is non-zero the connection has
	   already data in transit and cannot send anymore right
	   now. */
	if(uip_connr->len == 0) {
 800590c:	8a23      	ldrh	r3, [r4, #16]
 800590e:	b943      	cbnz	r3, 8005922 <uip_process+0xa22>

	  /* The application cannot send more than what is allowed by
	     the mss (the minumum of the MSS and the available
	     window). */
	  if(uip_slen > uip_connr->mss) {
 8005910:	8a63      	ldrh	r3, [r4, #18]
 8005912:	429a      	cmp	r2, r3
 8005914:	d901      	bls.n	800591a <uip_process+0xa1a>
	    uip_slen = uip_connr->mss;
 8005916:	4a31      	ldr	r2, [pc, #196]	; (80059dc <uip_process+0xadc>)
 8005918:	8013      	strh	r3, [r2, #0]
	  }

	  /* Remember how much data we send out now so that we know
	     when everything has been acknowledged. */
	  uip_connr->len = uip_slen;
 800591a:	4b30      	ldr	r3, [pc, #192]	; (80059dc <uip_process+0xadc>)
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	8223      	strh	r3, [r4, #16]
 8005920:	e001      	b.n	8005926 <uip_process+0xa26>
	} else {

	  /* If the application already had unacknowledged data, we
	     make sure that the application does not send (i.e.,
	     retransmit) out more than it previously sent out. */
	  uip_slen = uip_connr->len;
 8005922:	4a2e      	ldr	r2, [pc, #184]	; (80059dc <uip_process+0xadc>)
 8005924:	8013      	strh	r3, [r2, #0]
	}
      }
      uip_connr->nrtx = 0;
 8005926:	2300      	movs	r3, #0
 8005928:	76e3      	strb	r3, [r4, #27]
    apprexmit:
      uip_appdata = uip_sappdata;
 800592a:	4b2f      	ldr	r3, [pc, #188]	; (80059e8 <uip_process+0xae8>)
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	4b2d      	ldr	r3, [pc, #180]	; (80059e4 <uip_process+0xae4>)
 8005930:	601a      	str	r2, [r3, #0]
      
      /* If the application has data to be sent, or if the incoming
         packet had new data in it, we must send out a packet. */
      if(uip_slen > 0 && uip_connr->len > 0) {
 8005932:	4b2a      	ldr	r3, [pc, #168]	; (80059dc <uip_process+0xadc>)
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b14b      	cbz	r3, 800594c <uip_process+0xa4c>
 8005938:	8a23      	ldrh	r3, [r4, #16]
 800593a:	b13b      	cbz	r3, 800594c <uip_process+0xa4c>
	/* Add the length of the IP and TCP headers. */
	uip_len = uip_connr->len + UIP_TCPIP_HLEN;
 800593c:	3328      	adds	r3, #40	; 0x28
 800593e:	4a26      	ldr	r2, [pc, #152]	; (80059d8 <uip_process+0xad8>)
 8005940:	8013      	strh	r3, [r2, #0]
	/* We always set the ACK flag in response packets. */
	BUF->flags = TCP_ACK | TCP_PSH;
 8005942:	2218      	movs	r2, #24
 8005944:	4b20      	ldr	r3, [pc, #128]	; (80059c8 <uip_process+0xac8>)
 8005946:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	/* Send the packet. */
	goto tcp_send_noopts;
 800594a:	e08a      	b.n	8005a62 <uip_process+0xb62>
      }
      /* If there is no data to send, just send out a pure ACK if
	 there is newdata. */
      if(uip_flags & UIP_NEWDATA) {
 800594c:	4b21      	ldr	r3, [pc, #132]	; (80059d4 <uip_process+0xad4>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	f013 0f02 	tst.w	r3, #2
 8005954:	f000 80f1 	beq.w	8005b3a <uip_process+0xc3a>
	uip_len = UIP_TCPIP_HLEN;
 8005958:	2228      	movs	r2, #40	; 0x28
 800595a:	4b1f      	ldr	r3, [pc, #124]	; (80059d8 <uip_process+0xad8>)
 800595c:	801a      	strh	r2, [r3, #0]
	BUF->flags = TCP_ACK;
 800595e:	2210      	movs	r2, #16
 8005960:	4b19      	ldr	r3, [pc, #100]	; (80059c8 <uip_process+0xac8>)
 8005962:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	goto tcp_send_noopts;
 8005966:	e07c      	b.n	8005a62 <uip_process+0xb62>
    }
    goto drop;
  case UIP_LAST_ACK:
    /* We can close this connection if the peer has acknowledged our
       FIN. This is indicated by the UIP_ACKDATA flag. */
    if(uip_flags & UIP_ACKDATA) {
 8005968:	4b1a      	ldr	r3, [pc, #104]	; (80059d4 <uip_process+0xad4>)
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	f013 0f01 	tst.w	r3, #1
 8005970:	f000 80e3 	beq.w	8005b3a <uip_process+0xc3a>
      uip_connr->tcpstateflags = UIP_CLOSED;
 8005974:	2300      	movs	r3, #0
 8005976:	7663      	strb	r3, [r4, #25]
      uip_flags = UIP_CLOSE;
 8005978:	2210      	movs	r2, #16
 800597a:	4b16      	ldr	r3, [pc, #88]	; (80059d4 <uip_process+0xad4>)
 800597c:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
 800597e:	f7fc fced 	bl	800235c <uipclient_appcall>
 8005982:	e0da      	b.n	8005b3a <uip_process+0xc3a>
    
  case UIP_FIN_WAIT_1:
    /* The application has closed the connection, but the remote host
       hasn't closed its end yet. Thus we do nothing but wait for a
       FIN from the other side. */
    if(uip_len > 0) {
 8005984:	4b14      	ldr	r3, [pc, #80]	; (80059d8 <uip_process+0xad8>)
 8005986:	8818      	ldrh	r0, [r3, #0]
 8005988:	b108      	cbz	r0, 800598e <uip_process+0xa8e>
      uip_add_rcv_nxt(uip_len);
 800598a:	f7ff fa23 	bl	8004dd4 <uip_add_rcv_nxt>
    }
    if(BUF->flags & TCP_FIN) {
 800598e:	4b0e      	ldr	r3, [pc, #56]	; (80059c8 <uip_process+0xac8>)
 8005990:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005994:	f013 0f01 	tst.w	r3, #1
 8005998:	d028      	beq.n	80059ec <uip_process+0xaec>
      if(uip_flags & UIP_ACKDATA) {
 800599a:	4b0e      	ldr	r3, [pc, #56]	; (80059d4 <uip_process+0xad4>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	f013 0f01 	tst.w	r3, #1
 80059a2:	d005      	beq.n	80059b0 <uip_process+0xab0>
	uip_connr->tcpstateflags = UIP_TIME_WAIT;
 80059a4:	2307      	movs	r3, #7
 80059a6:	7663      	strb	r3, [r4, #25]
	uip_connr->timer = 0;
 80059a8:	2300      	movs	r3, #0
 80059aa:	76a3      	strb	r3, [r4, #26]
	uip_connr->len = 0;
 80059ac:	8223      	strh	r3, [r4, #16]
 80059ae:	e001      	b.n	80059b4 <uip_process+0xab4>
      } else {
	uip_connr->tcpstateflags = UIP_CLOSING;
 80059b0:	2306      	movs	r3, #6
 80059b2:	7663      	strb	r3, [r4, #25]
      }
      uip_add_rcv_nxt(1);
 80059b4:	2001      	movs	r0, #1
 80059b6:	f7ff fa0d 	bl	8004dd4 <uip_add_rcv_nxt>
      uip_flags = UIP_CLOSE;
 80059ba:	2210      	movs	r2, #16
 80059bc:	4b05      	ldr	r3, [pc, #20]	; (80059d4 <uip_process+0xad4>)
 80059be:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
 80059c0:	f7fc fccc 	bl	800235c <uipclient_appcall>
      goto tcp_send_ack;
 80059c4:	e046      	b.n	8005a54 <uip_process+0xb54>
 80059c6:	bf00      	nop
 80059c8:	2000162c 	.word	0x2000162c
 80059cc:	20000c5e 	.word	0x20000c5e
 80059d0:	20000c54 	.word	0x20000c54
 80059d4:	20001588 	.word	0x20001588
 80059d8:	2000157c 	.word	0x2000157c
 80059dc:	20001a16 	.word	0x20001a16
 80059e0:	20001594 	.word	0x20001594
 80059e4:	20001590 	.word	0x20001590
 80059e8:	20001580 	.word	0x20001580
    } else if(uip_flags & UIP_ACKDATA) {
 80059ec:	4b56      	ldr	r3, [pc, #344]	; (8005b48 <uip_process+0xc48>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	f013 0f01 	tst.w	r3, #1
 80059f4:	d004      	beq.n	8005a00 <uip_process+0xb00>
      uip_connr->tcpstateflags = UIP_FIN_WAIT_2;
 80059f6:	2305      	movs	r3, #5
 80059f8:	7663      	strb	r3, [r4, #25]
      uip_connr->len = 0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	8223      	strh	r3, [r4, #16]
      goto drop;
 80059fe:	e09c      	b.n	8005b3a <uip_process+0xc3a>
    }
    if(uip_len > 0) {
 8005a00:	4b52      	ldr	r3, [pc, #328]	; (8005b4c <uip_process+0xc4c>)
 8005a02:	881b      	ldrh	r3, [r3, #0]
 8005a04:	bb33      	cbnz	r3, 8005a54 <uip_process+0xb54>
 8005a06:	e098      	b.n	8005b3a <uip_process+0xc3a>
      goto tcp_send_ack;
    }
    goto drop;
      
  case UIP_FIN_WAIT_2:
    if(uip_len > 0) {
 8005a08:	4b50      	ldr	r3, [pc, #320]	; (8005b4c <uip_process+0xc4c>)
 8005a0a:	8818      	ldrh	r0, [r3, #0]
 8005a0c:	b108      	cbz	r0, 8005a12 <uip_process+0xb12>
      uip_add_rcv_nxt(uip_len);
 8005a0e:	f7ff f9e1 	bl	8004dd4 <uip_add_rcv_nxt>
    }
    if(BUF->flags & TCP_FIN) {
 8005a12:	4b4f      	ldr	r3, [pc, #316]	; (8005b50 <uip_process+0xc50>)
 8005a14:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005a18:	f013 0f01 	tst.w	r3, #1
 8005a1c:	d00c      	beq.n	8005a38 <uip_process+0xb38>
      uip_connr->tcpstateflags = UIP_TIME_WAIT;
 8005a1e:	2307      	movs	r3, #7
 8005a20:	7663      	strb	r3, [r4, #25]
      uip_connr->timer = 0;
 8005a22:	2300      	movs	r3, #0
 8005a24:	76a3      	strb	r3, [r4, #26]
      uip_add_rcv_nxt(1);
 8005a26:	2001      	movs	r0, #1
 8005a28:	f7ff f9d4 	bl	8004dd4 <uip_add_rcv_nxt>
      uip_flags = UIP_CLOSE;
 8005a2c:	2210      	movs	r2, #16
 8005a2e:	4b46      	ldr	r3, [pc, #280]	; (8005b48 <uip_process+0xc48>)
 8005a30:	701a      	strb	r2, [r3, #0]
      UIP_APPCALL();
 8005a32:	f7fc fc93 	bl	800235c <uipclient_appcall>
      goto tcp_send_ack;
 8005a36:	e00d      	b.n	8005a54 <uip_process+0xb54>
    }
    if(uip_len > 0) {
 8005a38:	4b44      	ldr	r3, [pc, #272]	; (8005b4c <uip_process+0xc4c>)
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	b953      	cbnz	r3, 8005a54 <uip_process+0xb54>
 8005a3e:	e07c      	b.n	8005b3a <uip_process+0xc3a>

  case UIP_TIME_WAIT:
    goto tcp_send_ack;
    
  case UIP_CLOSING:
    if(uip_flags & UIP_ACKDATA) {
 8005a40:	4b41      	ldr	r3, [pc, #260]	; (8005b48 <uip_process+0xc48>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	f013 0f01 	tst.w	r3, #1
 8005a48:	d077      	beq.n	8005b3a <uip_process+0xc3a>
      uip_connr->tcpstateflags = UIP_TIME_WAIT;
 8005a4a:	2307      	movs	r3, #7
 8005a4c:	7663      	strb	r3, [r4, #25]
      uip_connr->timer = 0;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	76a3      	strb	r3, [r4, #26]
 8005a52:	e072      	b.n	8005b3a <uip_process+0xc3a>
  

  /* We jump here when we are ready to send the packet, and just want
     to set the appropriate TCP sequence numbers in the TCP header. */
 tcp_send_ack:
  BUF->flags = TCP_ACK;
 8005a54:	2210      	movs	r2, #16
 8005a56:	4b3e      	ldr	r3, [pc, #248]	; (8005b50 <uip_process+0xc50>)
 8005a58:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 tcp_send_nodata:
  uip_len = UIP_IPTCPH_LEN;
 8005a5c:	2228      	movs	r2, #40	; 0x28
 8005a5e:	4b3b      	ldr	r3, [pc, #236]	; (8005b4c <uip_process+0xc4c>)
 8005a60:	801a      	strh	r2, [r3, #0]
 tcp_send_noopts:
  BUF->tcpoffset = (UIP_TCPH_LEN / 4) << 4;
 8005a62:	2250      	movs	r2, #80	; 0x50
 8005a64:	4b3a      	ldr	r3, [pc, #232]	; (8005b50 <uip_process+0xc50>)
 8005a66:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 tcp_send:
  /* We're done with the input processing. We are now ready to send a
     reply. Our job is to fill in all the fields of the TCP and IP
     headers before calculating the checksum and finally send the
     packet. */
  BUF->ackno[0] = uip_connr->rcv_nxt[0];
 8005a6a:	7a22      	ldrb	r2, [r4, #8]
 8005a6c:	4b38      	ldr	r3, [pc, #224]	; (8005b50 <uip_process+0xc50>)
 8005a6e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  BUF->ackno[1] = uip_connr->rcv_nxt[1];
 8005a72:	7a62      	ldrb	r2, [r4, #9]
 8005a74:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  BUF->ackno[2] = uip_connr->rcv_nxt[2];
 8005a78:	7aa2      	ldrb	r2, [r4, #10]
 8005a7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  BUF->ackno[3] = uip_connr->rcv_nxt[3];
 8005a7e:	7ae2      	ldrb	r2, [r4, #11]
 8005a80:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  BUF->seqno[0] = uip_connr->snd_nxt[0];
 8005a84:	7b22      	ldrb	r2, [r4, #12]
 8005a86:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  BUF->seqno[1] = uip_connr->snd_nxt[1];
 8005a8a:	7b62      	ldrb	r2, [r4, #13]
 8005a8c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  BUF->seqno[2] = uip_connr->snd_nxt[2];
 8005a90:	7ba2      	ldrb	r2, [r4, #14]
 8005a92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  BUF->seqno[3] = uip_connr->snd_nxt[3];
 8005a96:	7be2      	ldrb	r2, [r4, #15]
 8005a98:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  BUF->proto = UIP_PROTO_TCP;
 8005a9c:	2206      	movs	r2, #6
 8005a9e:	75da      	strb	r2, [r3, #23]
  
  BUF->srcport  = uip_connr->lport;
 8005aa0:	88a2      	ldrh	r2, [r4, #4]
 8005aa2:	845a      	strh	r2, [r3, #34]	; 0x22
  BUF->destport = uip_connr->rport;
 8005aa4:	88e2      	ldrh	r2, [r4, #6]
 8005aa6:	849a      	strh	r2, [r3, #36]	; 0x24

  uip_ipaddr_copy(BUF->srcipaddr, uip_hostaddr);
 8005aa8:	4a2a      	ldr	r2, [pc, #168]	; (8005b54 <uip_process+0xc54>)
 8005aaa:	8811      	ldrh	r1, [r2, #0]
 8005aac:	8359      	strh	r1, [r3, #26]
 8005aae:	8852      	ldrh	r2, [r2, #2]
 8005ab0:	839a      	strh	r2, [r3, #28]
  uip_ipaddr_copy(BUF->destipaddr, uip_connr->ripaddr);
 8005ab2:	8822      	ldrh	r2, [r4, #0]
 8005ab4:	83da      	strh	r2, [r3, #30]
 8005ab6:	8862      	ldrh	r2, [r4, #2]
 8005ab8:	841a      	strh	r2, [r3, #32]

  if(uip_connr->tcpstateflags & UIP_STOPPED) {
 8005aba:	7e63      	ldrb	r3, [r4, #25]
 8005abc:	f013 0f10 	tst.w	r3, #16
 8005ac0:	d006      	beq.n	8005ad0 <uip_process+0xbd0>
    /* If the connection has issued uip_stop(), we advertise a zero
       window so that the remote host will stop sending data. */
    BUF->wnd[0] = BUF->wnd[1] = 0;
 8005ac2:	4b23      	ldr	r3, [pc, #140]	; (8005b50 <uip_process+0xc50>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005aca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8005ace:	e006      	b.n	8005ade <uip_process+0xbde>
  } else {
    BUF->wnd[0] = ((UIP_RECEIVE_WINDOW) >> 8);
 8005ad0:	4b1f      	ldr	r3, [pc, #124]	; (8005b50 <uip_process+0xc50>)
 8005ad2:	2203      	movs	r2, #3
 8005ad4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    BUF->wnd[1] = ((UIP_RECEIVE_WINDOW) & 0xff);
 8005ad8:	22b6      	movs	r2, #182	; 0xb6
 8005ada:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

 tcp_send_noconn:
  BUF->ttl = UIP_TTL;
 8005ade:	4c1c      	ldr	r4, [pc, #112]	; (8005b50 <uip_process+0xc50>)
 8005ae0:	2340      	movs	r3, #64	; 0x40
 8005ae2:	75a3      	strb	r3, [r4, #22]
  /* For IPv6, the IP length field does not include the IPv6 IP header
     length. */
  BUF->len[0] = ((uip_len - UIP_IPH_LEN) >> 8);
  BUF->len[1] = ((uip_len - UIP_IPH_LEN) & 0xff);
#else /* UIP_CONF_IPV6 */
  BUF->len[0] = (uip_len >> 8);
 8005ae4:	4b19      	ldr	r3, [pc, #100]	; (8005b4c <uip_process+0xc4c>)
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	0a1a      	lsrs	r2, r3, #8
 8005aea:	7422      	strb	r2, [r4, #16]
  BUF->len[1] = (uip_len & 0xff);
 8005aec:	7463      	strb	r3, [r4, #17]
#endif /* UIP_CONF_IPV6 */

  BUF->urgp[0] = BUF->urgp[1] = 0;
 8005aee:	2300      	movs	r3, #0
 8005af0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8005af4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  
  /* Calculate TCP checksum. */
  BUF->tcpchksum = 0;
 8005af8:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
 8005afc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  BUF->tcpchksum = ~(uip_tcpchksum());
 8005b00:	f7ff f9f2 	bl	8004ee8 <uip_tcpchksum>
 8005b04:	43c0      	mvns	r0, r0
 8005b06:	8660      	strh	r0, [r4, #50]	; 0x32
#if UIP_CONF_IPV6
  BUF->vtc = 0x60;
  BUF->tcflow = 0x00;
  BUF->flow = 0x00;
#else /* UIP_CONF_IPV6 */
  BUF->vhl = 0x45;
 8005b08:	4c11      	ldr	r4, [pc, #68]	; (8005b50 <uip_process+0xc50>)
 8005b0a:	2345      	movs	r3, #69	; 0x45
 8005b0c:	73a3      	strb	r3, [r4, #14]
  BUF->tos = 0;
 8005b0e:	2200      	movs	r2, #0
 8005b10:	73e2      	strb	r2, [r4, #15]
  BUF->ipoffset[0] = BUF->ipoffset[1] = 0;
 8005b12:	7562      	strb	r2, [r4, #21]
 8005b14:	7522      	strb	r2, [r4, #20]
  ++ipid;
 8005b16:	4910      	ldr	r1, [pc, #64]	; (8005b58 <uip_process+0xc58>)
 8005b18:	880b      	ldrh	r3, [r1, #0]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	800b      	strh	r3, [r1, #0]
  BUF->ipid[0] = ipid >> 8;
 8005b20:	0a19      	lsrs	r1, r3, #8
 8005b22:	74a1      	strb	r1, [r4, #18]
  BUF->ipid[1] = ipid & 0xff;
 8005b24:	74e3      	strb	r3, [r4, #19]
  /* Calculate IP checksum. */
  BUF->ipchksum = 0;
 8005b26:	7622      	strb	r2, [r4, #24]
 8005b28:	7662      	strb	r2, [r4, #25]
  BUF->ipchksum = ~(uip_ipchksum());
 8005b2a:	f7ff f9af 	bl	8004e8c <uip_ipchksum>
 8005b2e:	43c0      	mvns	r0, r0
 8005b30:	8320      	strh	r0, [r4, #24]
  DEBUG_PRINTF("Sending packet with length %d (%d)\n", uip_len,
	       (BUF->len[0] << 8) | BUF->len[1]);
  
  UIP_STAT(++uip_stat.ip.sent);
  /* Return and let the caller do the actual transmission. */
  uip_flags = 0;
 8005b32:	2200      	movs	r2, #0
 8005b34:	4b04      	ldr	r3, [pc, #16]	; (8005b48 <uip_process+0xc48>)
 8005b36:	701a      	strb	r2, [r3, #0]
  return;
 8005b38:	bd70      	pop	{r4, r5, r6, pc}
 drop:
  uip_len = 0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	4a03      	ldr	r2, [pc, #12]	; (8005b4c <uip_process+0xc4c>)
 8005b3e:	8013      	strh	r3, [r2, #0]
  uip_flags = 0;
 8005b40:	4a01      	ldr	r2, [pc, #4]	; (8005b48 <uip_process+0xc48>)
 8005b42:	7013      	strb	r3, [r2, #0]
 8005b44:	bd70      	pop	{r4, r5, r6, pc}
 8005b46:	bf00      	nop
 8005b48:	20001588 	.word	0x20001588
 8005b4c:	2000157c 	.word	0x2000157c
 8005b50:	2000162c 	.word	0x2000162c
 8005b54:	20001628 	.word	0x20001628
 8005b58:	20000c56 	.word	0x20000c56

08005b5c <uip_connect>:
}
/*---------------------------------------------------------------------------*/
#if UIP_ACTIVE_OPEN
struct uip_conn *
uip_connect(uip_ipaddr_t *ripaddr, u16_t rport)
{
 8005b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5e:	4605      	mov	r5, r0
 8005b60:	460e      	mov	r6, r1
  register struct uip_conn *conn, *cconn;
  
  /* Find an unused local port. */
 again:
  ++lastport;
 8005b62:	4a35      	ldr	r2, [pc, #212]	; (8005c38 <uip_connect+0xdc>)
 8005b64:	8813      	ldrh	r3, [r2, #0]
 8005b66:	3301      	adds	r3, #1
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	8013      	strh	r3, [r2, #0]

  if(lastport >= 32000) {
 8005b6c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8005b70:	d303      	bcc.n	8005b7a <uip_connect+0x1e>
    lastport = 4096;
 8005b72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b76:	4b30      	ldr	r3, [pc, #192]	; (8005c38 <uip_connect+0xdc>)
 8005b78:	801a      	strh	r2, [r3, #0]
  }

  /* Check if this port is already in use, and if so try to find
     another one. */
  for(c = 0; c < UIP_CONNS; ++c) {
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	4b2f      	ldr	r3, [pc, #188]	; (8005c3c <uip_connect+0xe0>)
 8005b7e:	701a      	strb	r2, [r3, #0]
 8005b80:	e011      	b.n	8005ba6 <uip_connect+0x4a>
    conn = &uip_conns[c];
    if(conn->tcpstateflags != UIP_CLOSED &&
 8005b82:	4b2f      	ldr	r3, [pc, #188]	; (8005c40 <uip_connect+0xe4>)
 8005b84:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8005b88:	7e5b      	ldrb	r3, [r3, #25]
 8005b8a:	b14b      	cbz	r3, 8005ba0 <uip_connect+0x44>
       conn->lport == htons(lastport)) {
 8005b8c:	4b2c      	ldr	r3, [pc, #176]	; (8005c40 <uip_connect+0xe4>)
 8005b8e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8005b92:	889f      	ldrh	r7, [r3, #4]
 8005b94:	4b28      	ldr	r3, [pc, #160]	; (8005c38 <uip_connect+0xdc>)
 8005b96:	8818      	ldrh	r0, [r3, #0]
 8005b98:	f7ff f972 	bl	8004e80 <htons>

  /* Check if this port is already in use, and if so try to find
     another one. */
  for(c = 0; c < UIP_CONNS; ++c) {
    conn = &uip_conns[c];
    if(conn->tcpstateflags != UIP_CLOSED &&
 8005b9c:	4287      	cmp	r7, r0
 8005b9e:	d0e0      	beq.n	8005b62 <uip_connect+0x6>
    lastport = 4096;
  }

  /* Check if this port is already in use, and if so try to find
     another one. */
  for(c = 0; c < UIP_CONNS; ++c) {
 8005ba0:	3401      	adds	r4, #1
 8005ba2:	4b26      	ldr	r3, [pc, #152]	; (8005c3c <uip_connect+0xe0>)
 8005ba4:	701c      	strb	r4, [r3, #0]
 8005ba6:	4b25      	ldr	r3, [pc, #148]	; (8005c3c <uip_connect+0xe0>)
 8005ba8:	781c      	ldrb	r4, [r3, #0]
 8005baa:	2c03      	cmp	r4, #3
 8005bac:	d9e9      	bls.n	8005b82 <uip_connect+0x26>
      goto again;
    }
  }

  conn = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
 8005bae:	2400      	movs	r4, #0
 8005bb0:	701c      	strb	r4, [r3, #0]
 8005bb2:	e012      	b.n	8005bda <uip_connect+0x7e>
    cconn = &uip_conns[c];
 8005bb4:	4a22      	ldr	r2, [pc, #136]	; (8005c40 <uip_connect+0xe4>)
 8005bb6:	eb02 1243 	add.w	r2, r2, r3, lsl #5
    if(cconn->tcpstateflags == UIP_CLOSED) {
 8005bba:	7e51      	ldrb	r1, [r2, #25]
 8005bbc:	b191      	cbz	r1, 8005be4 <uip_connect+0x88>
      conn = cconn;
      break;
    }
    if(cconn->tcpstateflags == UIP_TIME_WAIT) {
 8005bbe:	2907      	cmp	r1, #7
 8005bc0:	d108      	bne.n	8005bd4 <uip_connect+0x78>
      if(conn == 0 ||
 8005bc2:	b124      	cbz	r4, 8005bce <uip_connect+0x72>
	 cconn->timer > conn->timer) {
 8005bc4:	7e90      	ldrb	r0, [r2, #26]
 8005bc6:	7ea1      	ldrb	r1, [r4, #26]
    if(cconn->tcpstateflags == UIP_CLOSED) {
      conn = cconn;
      break;
    }
    if(cconn->tcpstateflags == UIP_TIME_WAIT) {
      if(conn == 0 ||
 8005bc8:	4288      	cmp	r0, r1
 8005bca:	d802      	bhi.n	8005bd2 <uip_connect+0x76>
 8005bcc:	e002      	b.n	8005bd4 <uip_connect+0x78>
	 cconn->timer > conn->timer) {
	conn = cconn;
 8005bce:	4614      	mov	r4, r2
 8005bd0:	e000      	b.n	8005bd4 <uip_connect+0x78>
 8005bd2:	4614      	mov	r4, r2
      goto again;
    }
  }

  conn = 0;
  for(c = 0; c < UIP_CONNS; ++c) {
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	4a19      	ldr	r2, [pc, #100]	; (8005c3c <uip_connect+0xe0>)
 8005bd8:	7013      	strb	r3, [r2, #0]
 8005bda:	4b18      	ldr	r3, [pc, #96]	; (8005c3c <uip_connect+0xe0>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d9e8      	bls.n	8005bb4 <uip_connect+0x58>
 8005be2:	e000      	b.n	8005be6 <uip_connect+0x8a>
    cconn = &uip_conns[c];
    if(cconn->tcpstateflags == UIP_CLOSED) {
      conn = cconn;
 8005be4:	4614      	mov	r4, r2
	conn = cconn;
      }
    }
  }

  if(conn == 0) {
 8005be6:	b324      	cbz	r4, 8005c32 <uip_connect+0xd6>
    return 0;
  }
  
  conn->tcpstateflags = UIP_SYN_SENT;
 8005be8:	2302      	movs	r3, #2
 8005bea:	7663      	strb	r3, [r4, #25]

  conn->snd_nxt[0] = iss[0];
 8005bec:	4b15      	ldr	r3, [pc, #84]	; (8005c44 <uip_connect+0xe8>)
 8005bee:	781a      	ldrb	r2, [r3, #0]
 8005bf0:	7322      	strb	r2, [r4, #12]
  conn->snd_nxt[1] = iss[1];
 8005bf2:	785a      	ldrb	r2, [r3, #1]
 8005bf4:	7362      	strb	r2, [r4, #13]
  conn->snd_nxt[2] = iss[2];
 8005bf6:	789a      	ldrb	r2, [r3, #2]
 8005bf8:	73a2      	strb	r2, [r4, #14]
  conn->snd_nxt[3] = iss[3];
 8005bfa:	78db      	ldrb	r3, [r3, #3]
 8005bfc:	73e3      	strb	r3, [r4, #15]

  conn->initialmss = conn->mss = UIP_TCP_MSS;
 8005bfe:	f240 3352 	movw	r3, #850	; 0x352
 8005c02:	8263      	strh	r3, [r4, #18]
 8005c04:	82a3      	strh	r3, [r4, #20]
  
  conn->len = 1;   /* TCP length of the SYN is one. */
 8005c06:	2201      	movs	r2, #1
 8005c08:	8222      	strh	r2, [r4, #16]
  conn->nrtx = 0;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	76e3      	strb	r3, [r4, #27]
  conn->timer = 1; /* Send the SYN next time around. */
 8005c0e:	76a2      	strb	r2, [r4, #26]
  conn->rto = UIP_RTO;
 8005c10:	2203      	movs	r2, #3
 8005c12:	7622      	strb	r2, [r4, #24]
  conn->sa = 0;
 8005c14:	75a3      	strb	r3, [r4, #22]
  conn->sv = 16;   /* Initial value of the RTT variance. */
 8005c16:	2310      	movs	r3, #16
 8005c18:	75e3      	strb	r3, [r4, #23]
  conn->lport = htons(lastport);
 8005c1a:	4b07      	ldr	r3, [pc, #28]	; (8005c38 <uip_connect+0xdc>)
 8005c1c:	8818      	ldrh	r0, [r3, #0]
 8005c1e:	f7ff f92f 	bl	8004e80 <htons>
 8005c22:	80a0      	strh	r0, [r4, #4]
  conn->rport = rport;
 8005c24:	80e6      	strh	r6, [r4, #6]
  uip_ipaddr_copy(&conn->ripaddr, ripaddr);
 8005c26:	882b      	ldrh	r3, [r5, #0]
 8005c28:	8023      	strh	r3, [r4, #0]
 8005c2a:	886b      	ldrh	r3, [r5, #2]
 8005c2c:	8063      	strh	r3, [r4, #2]
  
  return conn;
 8005c2e:	4620      	mov	r0, r4
 8005c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
  }

  if(conn == 0) {
    return 0;
 8005c32:	2000      	movs	r0, #0
  conn->lport = htons(lastport);
  conn->rport = rport;
  uip_ipaddr_copy(&conn->ripaddr, ripaddr);
  
  return conn;
}
 8005c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20000c5c 	.word	0x20000c5c
 8005c3c:	20000c5e 	.word	0x20000c5e
 8005c40:	20001598 	.word	0x20001598
 8005c44:	20000c58 	.word	0x20000c58

08005c48 <uip_udp_new>:
#endif /* UIP_ACTIVE_OPEN */
/*---------------------------------------------------------------------------*/
#if UIP_UDP
struct uip_udp_conn *
uip_udp_new(uip_ipaddr_t *ripaddr, u16_t rport)
{
 8005c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4a:	4605      	mov	r5, r0
 8005c4c:	460e      	mov	r6, r1
  register struct uip_udp_conn *conn;
  
  /* Find an unused local port. */
 again:
  ++lastport;
 8005c4e:	4a25      	ldr	r2, [pc, #148]	; (8005ce4 <uip_udp_new+0x9c>)
 8005c50:	8813      	ldrh	r3, [r2, #0]
 8005c52:	3301      	adds	r3, #1
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	8013      	strh	r3, [r2, #0]

  if(lastport >= 32000) {
 8005c58:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8005c5c:	d303      	bcc.n	8005c66 <uip_udp_new+0x1e>
    lastport = 4096;
 8005c5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c62:	4b20      	ldr	r3, [pc, #128]	; (8005ce4 <uip_udp_new+0x9c>)
 8005c64:	801a      	strh	r2, [r3, #0]
  }
  
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 8005c66:	2200      	movs	r2, #0
 8005c68:	4b1f      	ldr	r3, [pc, #124]	; (8005ce8 <uip_udp_new+0xa0>)
 8005c6a:	701a      	strb	r2, [r3, #0]
 8005c6c:	e00c      	b.n	8005c88 <uip_udp_new+0x40>
    if(uip_udp_conns[c].lport == htons(lastport)) {
 8005c6e:	4b1f      	ldr	r3, [pc, #124]	; (8005cec <uip_udp_new+0xa4>)
 8005c70:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8005c74:	889f      	ldrh	r7, [r3, #4]
 8005c76:	4b1b      	ldr	r3, [pc, #108]	; (8005ce4 <uip_udp_new+0x9c>)
 8005c78:	8818      	ldrh	r0, [r3, #0]
 8005c7a:	f7ff f901 	bl	8004e80 <htons>
 8005c7e:	4287      	cmp	r7, r0
 8005c80:	d0e5      	beq.n	8005c4e <uip_udp_new+0x6>

  if(lastport >= 32000) {
    lastport = 4096;
  }
  
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 8005c82:	3401      	adds	r4, #1
 8005c84:	4b18      	ldr	r3, [pc, #96]	; (8005ce8 <uip_udp_new+0xa0>)
 8005c86:	701c      	strb	r4, [r3, #0]
 8005c88:	4b17      	ldr	r3, [pc, #92]	; (8005ce8 <uip_udp_new+0xa0>)
 8005c8a:	781c      	ldrb	r4, [r3, #0]
 8005c8c:	2c03      	cmp	r4, #3
 8005c8e:	d9ee      	bls.n	8005c6e <uip_udp_new+0x26>
    }
  }


  conn = 0;
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 8005c90:	2200      	movs	r2, #0
 8005c92:	701a      	strb	r2, [r3, #0]
 8005c94:	e00b      	b.n	8005cae <uip_udp_new+0x66>
    if(uip_udp_conns[c].lport == 0) {
 8005c96:	4a15      	ldr	r2, [pc, #84]	; (8005cec <uip_udp_new+0xa4>)
 8005c98:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8005c9c:	8892      	ldrh	r2, [r2, #4]
 8005c9e:	b91a      	cbnz	r2, 8005ca8 <uip_udp_new+0x60>
      conn = &uip_udp_conns[c];
 8005ca0:	4812      	ldr	r0, [pc, #72]	; (8005cec <uip_udp_new+0xa4>)
 8005ca2:	eb00 1003 	add.w	r0, r0, r3, lsl #4
      break;
 8005ca6:	e007      	b.n	8005cb8 <uip_udp_new+0x70>
    }
  }


  conn = 0;
  for(c = 0; c < UIP_UDP_CONNS; ++c) {
 8005ca8:	3301      	adds	r3, #1
 8005caa:	4a0f      	ldr	r2, [pc, #60]	; (8005ce8 <uip_udp_new+0xa0>)
 8005cac:	7013      	strb	r3, [r2, #0]
 8005cae:	4b0e      	ldr	r3, [pc, #56]	; (8005ce8 <uip_udp_new+0xa0>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	d9ef      	bls.n	8005c96 <uip_udp_new+0x4e>
      goto again;
    }
  }


  conn = 0;
 8005cb6:	2000      	movs	r0, #0
      conn = &uip_udp_conns[c];
      break;
    }
  }

  if(conn == 0) {
 8005cb8:	b188      	cbz	r0, 8005cde <uip_udp_new+0x96>
    return 0;
  }
  
  conn->lport = HTONS(lastport);
 8005cba:	4b0a      	ldr	r3, [pc, #40]	; (8005ce4 <uip_udp_new+0x9c>)
 8005cbc:	881a      	ldrh	r2, [r3, #0]
 8005cbe:	0a13      	lsrs	r3, r2, #8
 8005cc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005cc4:	8083      	strh	r3, [r0, #4]
  conn->rport = rport;
 8005cc6:	80c6      	strh	r6, [r0, #6]
  if(ripaddr == NULL) {
 8005cc8:	b915      	cbnz	r5, 8005cd0 <uip_udp_new+0x88>
    memset(conn->ripaddr, 0, sizeof(uip_ipaddr_t));
 8005cca:	2300      	movs	r3, #0
 8005ccc:	6003      	str	r3, [r0, #0]
 8005cce:	e003      	b.n	8005cd8 <uip_udp_new+0x90>
  } else {
    uip_ipaddr_copy(&conn->ripaddr, ripaddr);
 8005cd0:	882b      	ldrh	r3, [r5, #0]
 8005cd2:	8003      	strh	r3, [r0, #0]
 8005cd4:	886b      	ldrh	r3, [r5, #2]
 8005cd6:	8043      	strh	r3, [r0, #2]
  }
  conn->ttl = UIP_TTL;
 8005cd8:	2340      	movs	r3, #64	; 0x40
 8005cda:	7203      	strb	r3, [r0, #8]
  
  return conn;
 8005cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      break;
    }
  }

  if(conn == 0) {
    return 0;
 8005cde:	2000      	movs	r0, #0
    uip_ipaddr_copy(&conn->ripaddr, ripaddr);
  }
  conn->ttl = UIP_TTL;
  
  return conn;
}
 8005ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20000c5c 	.word	0x20000c5c
 8005ce8:	20000c5e 	.word	0x20000c5e
 8005cec:	20001a18 	.word	0x20001a18

08005cf0 <uip_send>:
  return HTONS(val);
}
/*---------------------------------------------------------------------------*/
void
uip_send(const void *data, int len)
{
 8005cf0:	b508      	push	{r3, lr}
  uip_slen = len;
 8005cf2:	b28a      	uxth	r2, r1
 8005cf4:	4b06      	ldr	r3, [pc, #24]	; (8005d10 <uip_send+0x20>)
 8005cf6:	801a      	strh	r2, [r3, #0]
  if(len > 0) {
 8005cf8:	2900      	cmp	r1, #0
 8005cfa:	dd07      	ble.n	8005d0c <uip_send+0x1c>
    if(data != uip_sappdata) {
 8005cfc:	4b05      	ldr	r3, [pc, #20]	; (8005d14 <uip_send+0x24>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4283      	cmp	r3, r0
 8005d02:	d003      	beq.n	8005d0c <uip_send+0x1c>
 8005d04:	4601      	mov	r1, r0
      memcpy(uip_sappdata, (data), uip_slen);
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 fa53 	bl	80061b2 <memcpy>
 8005d0c:	bd08      	pop	{r3, pc}
 8005d0e:	bf00      	nop
 8005d10:	20001a16 	.word	0x20001a16
 8005d14:	20001580 	.word	0x20001580

08005d18 <uip_arp_update>:

}
/*-----------------------------------------------------------------------------------*/
static void
uip_arp_update(u16_t *ipaddr, struct uip_eth_addr *ethaddr)
{
 8005d18:	b4f0      	push	{r4, r5, r6, r7}
  register struct arp_entry *tabptr;
  /* Walk through the ARP mapping table and try to find an entry to
     update. If none is found, the IP -> MAC address mapping is
     inserted in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	4b3a      	ldr	r3, [pc, #232]	; (8005e08 <uip_arp_update+0xf0>)
 8005d1e:	701a      	strb	r2, [r3, #0]
 8005d20:	e01e      	b.n	8005d60 <uip_arp_update+0x48>

    tabptr = &arp_table[i];
 8005d22:	4d3a      	ldr	r5, [pc, #232]	; (8005e0c <uip_arp_update+0xf4>)
 8005d24:	005a      	lsls	r2, r3, #1
 8005d26:	441a      	add	r2, r3
 8005d28:	0094      	lsls	r4, r2, #2
 8005d2a:	192e      	adds	r6, r5, r4
    /* Only check those entries that are actually in use. */
    if(tabptr->ipaddr[0] != 0 &&
 8005d2c:	5b2c      	ldrh	r4, [r5, r4]
 8005d2e:	b1a4      	cbz	r4, 8005d5a <uip_arp_update+0x42>
       tabptr->ipaddr[1] != 0) {
 8005d30:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8005d34:	00aa      	lsls	r2, r5, #2
 8005d36:	4d35      	ldr	r5, [pc, #212]	; (8005e0c <uip_arp_update+0xf4>)
 8005d38:	442a      	add	r2, r5
 8005d3a:	8852      	ldrh	r2, [r2, #2]
     inserted in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {

    tabptr = &arp_table[i];
    /* Only check those entries that are actually in use. */
    if(tabptr->ipaddr[0] != 0 &&
 8005d3c:	b16a      	cbz	r2, 8005d5a <uip_arp_update+0x42>
       tabptr->ipaddr[1] != 0) {

      /* Check if the source IP address of the incoming packet matches
         the IP address in this ARP table entry. */
      if(ipaddr[0] == tabptr->ipaddr[0] &&
 8005d3e:	8805      	ldrh	r5, [r0, #0]
 8005d40:	42ac      	cmp	r4, r5
 8005d42:	d10a      	bne.n	8005d5a <uip_arp_update+0x42>
	 ipaddr[1] == tabptr->ipaddr[1]) {
 8005d44:	8844      	ldrh	r4, [r0, #2]
    if(tabptr->ipaddr[0] != 0 &&
       tabptr->ipaddr[1] != 0) {

      /* Check if the source IP address of the incoming packet matches
         the IP address in this ARP table entry. */
      if(ipaddr[0] == tabptr->ipaddr[0] &&
 8005d46:	42a2      	cmp	r2, r4
 8005d48:	d107      	bne.n	8005d5a <uip_arp_update+0x42>
	 ipaddr[1] == tabptr->ipaddr[1]) {
	 
	/* An old entry found, update this and return. */
	memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 8005d4a:	680c      	ldr	r4, [r1, #0]
 8005d4c:	6074      	str	r4, [r6, #4]
 8005d4e:	8889      	ldrh	r1, [r1, #4]
 8005d50:	8131      	strh	r1, [r6, #8]
	tabptr->time = arptime;
 8005d52:	4a2f      	ldr	r2, [pc, #188]	; (8005e10 <uip_arp_update+0xf8>)
 8005d54:	7812      	ldrb	r2, [r2, #0]
 8005d56:	72b2      	strb	r2, [r6, #10]

	return;
 8005d58:	e054      	b.n	8005e04 <uip_arp_update+0xec>
{
  register struct arp_entry *tabptr;
  /* Walk through the ARP mapping table and try to find an entry to
     update. If none is found, the IP -> MAC address mapping is
     inserted in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	4a2a      	ldr	r2, [pc, #168]	; (8005e08 <uip_arp_update+0xf0>)
 8005d5e:	7013      	strb	r3, [r2, #0]
 8005d60:	4b29      	ldr	r3, [pc, #164]	; (8005e08 <uip_arp_update+0xf0>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b07      	cmp	r3, #7
 8005d66:	d9dc      	bls.n	8005d22 <uip_arp_update+0xa>

  /* If we get here, no existing ARP table entry was found, so we
     create one. */

  /* First, we try to find an unused entry in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8005d68:	2200      	movs	r2, #0
 8005d6a:	4b27      	ldr	r3, [pc, #156]	; (8005e08 <uip_arp_update+0xf0>)
 8005d6c:	701a      	strb	r2, [r3, #0]
 8005d6e:	e00f      	b.n	8005d90 <uip_arp_update+0x78>
    tabptr = &arp_table[i];
 8005d70:	4d26      	ldr	r5, [pc, #152]	; (8005e0c <uip_arp_update+0xf4>)
 8005d72:	005a      	lsls	r2, r3, #1
 8005d74:	441a      	add	r2, r3
 8005d76:	0094      	lsls	r4, r2, #2
 8005d78:	192e      	adds	r6, r5, r4
    if(tabptr->ipaddr[0] == 0 &&
 8005d7a:	5b2a      	ldrh	r2, [r5, r4]
 8005d7c:	b92a      	cbnz	r2, 8005d8a <uip_arp_update+0x72>
       tabptr->ipaddr[1] == 0) {
 8005d7e:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8005d82:	00a2      	lsls	r2, r4, #2
 8005d84:	442a      	add	r2, r5
 8005d86:	8852      	ldrh	r2, [r2, #2]
     create one. */

  /* First, we try to find an unused entry in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    tabptr = &arp_table[i];
    if(tabptr->ipaddr[0] == 0 &&
 8005d88:	b132      	cbz	r2, 8005d98 <uip_arp_update+0x80>

  /* If we get here, no existing ARP table entry was found, so we
     create one. */

  /* First, we try to find an unused entry in the ARP table. */
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	4a1e      	ldr	r2, [pc, #120]	; (8005e08 <uip_arp_update+0xf0>)
 8005d8e:	7013      	strb	r3, [r2, #0]
 8005d90:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <uip_arp_update+0xf0>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b07      	cmp	r3, #7
 8005d96:	d9eb      	bls.n	8005d70 <uip_arp_update+0x58>
    }
  }

  /* If no unused entry is found, we try to find the oldest entry and
     throw it away. */
  if(i == UIP_ARPTAB_SIZE) {
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	d128      	bne.n	8005dee <uip_arp_update+0xd6>
    tmpage = 0;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	4a1d      	ldr	r2, [pc, #116]	; (8005e14 <uip_arp_update+0xfc>)
 8005da0:	7013      	strb	r3, [r2, #0]
    c = 0;
 8005da2:	4a1d      	ldr	r2, [pc, #116]	; (8005e18 <uip_arp_update+0x100>)
 8005da4:	7013      	strb	r3, [r2, #0]
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8005da6:	4a18      	ldr	r2, [pc, #96]	; (8005e08 <uip_arp_update+0xf0>)
 8005da8:	7013      	strb	r3, [r2, #0]
 8005daa:	e013      	b.n	8005dd4 <uip_arp_update+0xbc>
      tabptr = &arp_table[i];
      if(arptime - tabptr->time > tmpage) {
 8005dac:	4a18      	ldr	r2, [pc, #96]	; (8005e10 <uip_arp_update+0xf8>)
 8005dae:	7814      	ldrb	r4, [r2, #0]
 8005db0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8005db4:	00aa      	lsls	r2, r5, #2
 8005db6:	4d15      	ldr	r5, [pc, #84]	; (8005e0c <uip_arp_update+0xf4>)
 8005db8:	442a      	add	r2, r5
 8005dba:	7a92      	ldrb	r2, [r2, #10]
 8005dbc:	1aa6      	subs	r6, r4, r2
 8005dbe:	4d15      	ldr	r5, [pc, #84]	; (8005e14 <uip_arp_update+0xfc>)
 8005dc0:	782d      	ldrb	r5, [r5, #0]
 8005dc2:	42ae      	cmp	r6, r5
 8005dc4:	dd03      	ble.n	8005dce <uip_arp_update+0xb6>
	tmpage = arptime - tabptr->time;
 8005dc6:	4a13      	ldr	r2, [pc, #76]	; (8005e14 <uip_arp_update+0xfc>)
 8005dc8:	7016      	strb	r6, [r2, #0]
	c = i;
 8005dca:	4a13      	ldr	r2, [pc, #76]	; (8005e18 <uip_arp_update+0x100>)
 8005dcc:	7013      	strb	r3, [r2, #0]
  /* If no unused entry is found, we try to find the oldest entry and
     throw it away. */
  if(i == UIP_ARPTAB_SIZE) {
    tmpage = 0;
    c = 0;
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8005dce:	3301      	adds	r3, #1
 8005dd0:	4a0d      	ldr	r2, [pc, #52]	; (8005e08 <uip_arp_update+0xf0>)
 8005dd2:	7013      	strb	r3, [r2, #0]
 8005dd4:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <uip_arp_update+0xf0>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	2b07      	cmp	r3, #7
 8005dda:	d9e7      	bls.n	8005dac <uip_arp_update+0x94>
      if(arptime - tabptr->time > tmpage) {
	tmpage = arptime - tabptr->time;
	c = i;
      }
    }
    i = c;
 8005ddc:	4b0e      	ldr	r3, [pc, #56]	; (8005e18 <uip_arp_update+0x100>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	4a09      	ldr	r2, [pc, #36]	; (8005e08 <uip_arp_update+0xf0>)
 8005de2:	7013      	strb	r3, [r2, #0]
    tabptr = &arp_table[i];
 8005de4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005de8:	009a      	lsls	r2, r3, #2
 8005dea:	4e08      	ldr	r6, [pc, #32]	; (8005e0c <uip_arp_update+0xf4>)
 8005dec:	4416      	add	r6, r2
  }

  /* Now, i is the ARP table entry which we will fill with the new
     information. */
  memcpy(tabptr->ipaddr, ipaddr, 4);
 8005dee:	6802      	ldr	r2, [r0, #0]
 8005df0:	4633      	mov	r3, r6
 8005df2:	f843 2b04 	str.w	r2, [r3], #4
  memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 8005df6:	680a      	ldr	r2, [r1, #0]
 8005df8:	6072      	str	r2, [r6, #4]
 8005dfa:	888a      	ldrh	r2, [r1, #4]
 8005dfc:	809a      	strh	r2, [r3, #4]
  tabptr->time = arptime;
 8005dfe:	4b04      	ldr	r3, [pc, #16]	; (8005e10 <uip_arp_update+0xf8>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	72b3      	strb	r3, [r6, #10]
}
 8005e04:	bcf0      	pop	{r4, r5, r6, r7}
 8005e06:	4770      	bx	lr
 8005e08:	20000c66 	.word	0x20000c66
 8005e0c:	20000c68 	.word	0x20000c68
 8005e10:	20000cc9 	.word	0x20000cc9
 8005e14:	20000c67 	.word	0x20000c67
 8005e18:	20000cc8 	.word	0x20000cc8

08005e1c <uip_arp_init>:
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_init(void)
{
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	4b08      	ldr	r3, [pc, #32]	; (8005e40 <uip_arp_init+0x24>)
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	e008      	b.n	8005e36 <uip_arp_init+0x1a>
    memset(arp_table[i].ipaddr, 0, 4);
 8005e24:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8005e28:	008a      	lsls	r2, r1, #2
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	4905      	ldr	r1, [pc, #20]	; (8005e44 <uip_arp_init+0x28>)
 8005e2e:	5088      	str	r0, [r1, r2]
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_init(void)
{
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8005e30:	3301      	adds	r3, #1
 8005e32:	4a03      	ldr	r2, [pc, #12]	; (8005e40 <uip_arp_init+0x24>)
 8005e34:	7013      	strb	r3, [r2, #0]
 8005e36:	4b02      	ldr	r3, [pc, #8]	; (8005e40 <uip_arp_init+0x24>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	2b07      	cmp	r3, #7
 8005e3c:	d9f2      	bls.n	8005e24 <uip_arp_init+0x8>
    memset(arp_table[i].ipaddr, 0, 4);
  }
}
 8005e3e:	4770      	bx	lr
 8005e40:	20000c66 	.word	0x20000c66
 8005e44:	20000c68 	.word	0x20000c68

08005e48 <uip_arp_timer>:
 *
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_timer(void)
{
 8005e48:	b410      	push	{r4}
  struct arp_entry *tabptr;
  
  ++arptime;
 8005e4a:	4b14      	ldr	r3, [pc, #80]	; (8005e9c <uip_arp_timer+0x54>)
 8005e4c:	781c      	ldrb	r4, [r3, #0]
 8005e4e:	3401      	adds	r4, #1
 8005e50:	b2e4      	uxtb	r4, r4
 8005e52:	701c      	strb	r4, [r3, #0]
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8005e54:	2200      	movs	r2, #0
 8005e56:	4b12      	ldr	r3, [pc, #72]	; (8005ea0 <uip_arp_timer+0x58>)
 8005e58:	701a      	strb	r2, [r3, #0]
 8005e5a:	e019      	b.n	8005e90 <uip_arp_timer+0x48>
    tabptr = &arp_table[i];
    if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
 8005e5c:	4811      	ldr	r0, [pc, #68]	; (8005ea4 <uip_arp_timer+0x5c>)
 8005e5e:	005a      	lsls	r2, r3, #1
 8005e60:	441a      	add	r2, r3
 8005e62:	0091      	lsls	r1, r2, #2
 8005e64:	1842      	adds	r2, r0, r1
 8005e66:	5a41      	ldrh	r1, [r0, r1]
 8005e68:	8852      	ldrh	r2, [r2, #2]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	d00d      	beq.n	8005e8a <uip_arp_timer+0x42>
       arptime - tabptr->time >= UIP_ARP_MAXAGE) {
 8005e6e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8005e72:	008a      	lsls	r2, r1, #2
 8005e74:	4402      	add	r2, r0
 8005e76:	7a92      	ldrb	r2, [r2, #10]
 8005e78:	1aa2      	subs	r2, r4, r2
  struct arp_entry *tabptr;
  
  ++arptime;
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
    tabptr = &arp_table[i];
    if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
 8005e7a:	2a77      	cmp	r2, #119	; 0x77
 8005e7c:	dd05      	ble.n	8005e8a <uip_arp_timer+0x42>
       arptime - tabptr->time >= UIP_ARP_MAXAGE) {
      memset(tabptr->ipaddr, 0, 4);
 8005e7e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8005e82:	008a      	lsls	r2, r1, #2
 8005e84:	2000      	movs	r0, #0
 8005e86:	4907      	ldr	r1, [pc, #28]	; (8005ea4 <uip_arp_timer+0x5c>)
 8005e88:	5088      	str	r0, [r1, r2]
uip_arp_timer(void)
{
  struct arp_entry *tabptr;
  
  ++arptime;
  for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	4a04      	ldr	r2, [pc, #16]	; (8005ea0 <uip_arp_timer+0x58>)
 8005e8e:	7013      	strb	r3, [r2, #0]
 8005e90:	4b03      	ldr	r3, [pc, #12]	; (8005ea0 <uip_arp_timer+0x58>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b07      	cmp	r3, #7
 8005e96:	d9e1      	bls.n	8005e5c <uip_arp_timer+0x14>
       arptime - tabptr->time >= UIP_ARP_MAXAGE) {
      memset(tabptr->ipaddr, 0, 4);
    }
  }

}
 8005e98:	bc10      	pop	{r4}
 8005e9a:	4770      	bx	lr
 8005e9c:	20000cc9 	.word	0x20000cc9
 8005ea0:	20000c66 	.word	0x20000c66
 8005ea4:	20000c68 	.word	0x20000c68

08005ea8 <uip_arp_ipin>:
 */
/*-----------------------------------------------------------------------------------*/
//#if 0
void
uip_arp_ipin(void)
{
 8005ea8:	b508      	push	{r3, lr}
  uip_len -= sizeof(struct uip_eth_hdr);
 8005eaa:	4a0e      	ldr	r2, [pc, #56]	; (8005ee4 <uip_arp_ipin+0x3c>)
 8005eac:	8813      	ldrh	r3, [r2, #0]
 8005eae:	3b0e      	subs	r3, #14
 8005eb0:	8013      	strh	r3, [r2, #0]
	
  /* Only insert/update an entry if the source IP address of the
     incoming IP packet comes from a host on the local network. */
  if((IPBUF->srcipaddr[0] & uip_netmask[0]) !=
 8005eb2:	4b0d      	ldr	r3, [pc, #52]	; (8005ee8 <uip_arp_ipin+0x40>)
 8005eb4:	8b59      	ldrh	r1, [r3, #26]
     (uip_hostaddr[0] & uip_netmask[0])) {
 8005eb6:	4b0d      	ldr	r3, [pc, #52]	; (8005eec <uip_arp_ipin+0x44>)
 8005eb8:	881b      	ldrh	r3, [r3, #0]
{
  uip_len -= sizeof(struct uip_eth_hdr);
	
  /* Only insert/update an entry if the source IP address of the
     incoming IP packet comes from a host on the local network. */
  if((IPBUF->srcipaddr[0] & uip_netmask[0]) !=
 8005eba:	4a0d      	ldr	r2, [pc, #52]	; (8005ef0 <uip_arp_ipin+0x48>)
 8005ebc:	8812      	ldrh	r2, [r2, #0]
 8005ebe:	404b      	eors	r3, r1
 8005ec0:	421a      	tst	r2, r3
 8005ec2:	d10d      	bne.n	8005ee0 <uip_arp_ipin+0x38>
     (uip_hostaddr[0] & uip_netmask[0])) {
    return;
  }
  if((IPBUF->srcipaddr[1] & uip_netmask[1]) !=
 8005ec4:	4b08      	ldr	r3, [pc, #32]	; (8005ee8 <uip_arp_ipin+0x40>)
 8005ec6:	8b99      	ldrh	r1, [r3, #28]
     (uip_hostaddr[1] & uip_netmask[1])) {
 8005ec8:	4b08      	ldr	r3, [pc, #32]	; (8005eec <uip_arp_ipin+0x44>)
 8005eca:	885b      	ldrh	r3, [r3, #2]
     incoming IP packet comes from a host on the local network. */
  if((IPBUF->srcipaddr[0] & uip_netmask[0]) !=
     (uip_hostaddr[0] & uip_netmask[0])) {
    return;
  }
  if((IPBUF->srcipaddr[1] & uip_netmask[1]) !=
 8005ecc:	4a08      	ldr	r2, [pc, #32]	; (8005ef0 <uip_arp_ipin+0x48>)
 8005ece:	8852      	ldrh	r2, [r2, #2]
 8005ed0:	404b      	eors	r3, r1
 8005ed2:	421a      	tst	r2, r3
 8005ed4:	d104      	bne.n	8005ee0 <uip_arp_ipin+0x38>
     (uip_hostaddr[1] & uip_netmask[1])) {
    return;
  }
  uip_arp_update(IPBUF->srcipaddr, &(IPBUF->ethhdr.src));
 8005ed6:	4807      	ldr	r0, [pc, #28]	; (8005ef4 <uip_arp_ipin+0x4c>)
 8005ed8:	4601      	mov	r1, r0
 8005eda:	3014      	adds	r0, #20
 8005edc:	f7ff ff1c 	bl	8005d18 <uip_arp_update>
 8005ee0:	bd08      	pop	{r3, pc}
 8005ee2:	bf00      	nop
 8005ee4:	2000157c 	.word	0x2000157c
 8005ee8:	2000162c 	.word	0x2000162c
 8005eec:	20001628 	.word	0x20001628
 8005ef0:	20001624 	.word	0x20001624
 8005ef4:	20001632 	.word	0x20001632

08005ef8 <uip_arp_arpin>:
 * global variable uip_len.
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_arpin(void)
{
 8005ef8:	b510      	push	{r4, lr}
  
  if(uip_len < sizeof(struct arp_hdr)) {
 8005efa:	4b32      	ldr	r3, [pc, #200]	; (8005fc4 <uip_arp_arpin+0xcc>)
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	2b29      	cmp	r3, #41	; 0x29
 8005f00:	d803      	bhi.n	8005f0a <uip_arp_arpin+0x12>
    uip_len = 0;
 8005f02:	2200      	movs	r2, #0
 8005f04:	4b2f      	ldr	r3, [pc, #188]	; (8005fc4 <uip_arp_arpin+0xcc>)
 8005f06:	801a      	strh	r2, [r3, #0]
    return;
 8005f08:	bd10      	pop	{r4, pc}
  }
  uip_len = 0;
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	4b2d      	ldr	r3, [pc, #180]	; (8005fc4 <uip_arp_arpin+0xcc>)
 8005f0e:	801a      	strh	r2, [r3, #0]
  
  switch(BUF->opcode) {
 8005f10:	4b2d      	ldr	r3, [pc, #180]	; (8005fc8 <uip_arp_arpin+0xd0>)
 8005f12:	8a9b      	ldrh	r3, [r3, #20]
 8005f14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f18:	d003      	beq.n	8005f22 <uip_arp_arpin+0x2a>
 8005f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f1e:	d03f      	beq.n	8005fa0 <uip_arp_arpin+0xa8>
 8005f20:	bd10      	pop	{r4, pc}
  case HTONS(ARP_REQUEST):
    /* ARP request. If it asked for our address, we send out a
       reply. */
    if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
 8005f22:	4b29      	ldr	r3, [pc, #164]	; (8005fc8 <uip_arp_arpin+0xd0>)
 8005f24:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8005f26:	4b29      	ldr	r3, [pc, #164]	; (8005fcc <uip_arp_arpin+0xd4>)
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d149      	bne.n	8005fc2 <uip_arp_arpin+0xca>
 8005f2e:	4b26      	ldr	r3, [pc, #152]	; (8005fc8 <uip_arp_arpin+0xd0>)
 8005f30:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005f32:	4b26      	ldr	r3, [pc, #152]	; (8005fcc <uip_arp_arpin+0xd4>)
 8005f34:	885b      	ldrh	r3, [r3, #2]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d143      	bne.n	8005fc2 <uip_arp_arpin+0xca>
      /* First, we register the one who made the request in our ARP
	 table, since it is likely that we will do more communication
	 with this host in the future. */
      uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
 8005f3a:	4c25      	ldr	r4, [pc, #148]	; (8005fd0 <uip_arp_arpin+0xd8>)
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	1da0      	adds	r0, r4, #6
 8005f40:	f7ff feea 	bl	8005d18 <uip_arp_update>
      
      /* The reply opcode is 2. */
      BUF->opcode = HTONS(2);
 8005f44:	2200      	movs	r2, #0
 8005f46:	f804 2c02 	strb.w	r2, [r4, #-2]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f804 2c01 	strb.w	r2, [r4, #-1]

      memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
 8005f50:	6821      	ldr	r1, [r4, #0]
 8005f52:	f8c4 100a 	str.w	r1, [r4, #10]
 8005f56:	88a1      	ldrh	r1, [r4, #4]
 8005f58:	81e1      	strh	r1, [r4, #14]
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
 8005f5a:	491e      	ldr	r1, [pc, #120]	; (8005fd4 <uip_arp_arpin+0xdc>)
 8005f5c:	6808      	ldr	r0, [r1, #0]
 8005f5e:	6020      	str	r0, [r4, #0]
 8005f60:	8889      	ldrh	r1, [r1, #4]
 8005f62:	80a1      	strh	r1, [r4, #4]
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 8005f64:	f844 0c10 	str.w	r0, [r4, #-16]
 8005f68:	f824 1c0c 	strh.w	r1, [r4, #-12]
      memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
 8005f6c:	f8d4 100a 	ldr.w	r1, [r4, #10]
 8005f70:	f844 1c16 	str.w	r1, [r4, #-22]
 8005f74:	89e2      	ldrh	r2, [r4, #14]
 8005f76:	f824 2c12 	strh.w	r2, [r4, #-18]
      
      BUF->dipaddr[0] = BUF->sipaddr[0];
 8005f7a:	88e2      	ldrh	r2, [r4, #6]
 8005f7c:	8222      	strh	r2, [r4, #16]
      BUF->dipaddr[1] = BUF->sipaddr[1];
 8005f7e:	8922      	ldrh	r2, [r4, #8]
 8005f80:	8262      	strh	r2, [r4, #18]
      BUF->sipaddr[0] = uip_hostaddr[0];
 8005f82:	4a12      	ldr	r2, [pc, #72]	; (8005fcc <uip_arp_arpin+0xd4>)
 8005f84:	8811      	ldrh	r1, [r2, #0]
 8005f86:	80e1      	strh	r1, [r4, #6]
      BUF->sipaddr[1] = uip_hostaddr[1];
 8005f88:	8852      	ldrh	r2, [r2, #2]
 8005f8a:	8122      	strh	r2, [r4, #8]

      BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
 8005f8c:	2208      	movs	r2, #8
 8005f8e:	f804 2c0a 	strb.w	r2, [r4, #-10]
 8005f92:	2206      	movs	r2, #6
 8005f94:	f804 2c09 	strb.w	r2, [r4, #-9]
      uip_len = sizeof(struct arp_hdr);
 8005f98:	222a      	movs	r2, #42	; 0x2a
 8005f9a:	4b0a      	ldr	r3, [pc, #40]	; (8005fc4 <uip_arp_arpin+0xcc>)
 8005f9c:	801a      	strh	r2, [r3, #0]
 8005f9e:	bd10      	pop	{r4, pc}
    }
    break;
  case HTONS(ARP_REPLY):
    /* ARP reply. We insert or update the ARP table if it was meant
       for us. */
    if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
 8005fa0:	4b09      	ldr	r3, [pc, #36]	; (8005fc8 <uip_arp_arpin+0xd0>)
 8005fa2:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8005fa4:	4b09      	ldr	r3, [pc, #36]	; (8005fcc <uip_arp_arpin+0xd4>)
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d10a      	bne.n	8005fc2 <uip_arp_arpin+0xca>
 8005fac:	4b06      	ldr	r3, [pc, #24]	; (8005fc8 <uip_arp_arpin+0xd0>)
 8005fae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005fb0:	4b06      	ldr	r3, [pc, #24]	; (8005fcc <uip_arp_arpin+0xd4>)
 8005fb2:	885b      	ldrh	r3, [r3, #2]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d104      	bne.n	8005fc2 <uip_arp_arpin+0xca>
      uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
 8005fb8:	4805      	ldr	r0, [pc, #20]	; (8005fd0 <uip_arp_arpin+0xd8>)
 8005fba:	4601      	mov	r1, r0
 8005fbc:	3006      	adds	r0, #6
 8005fbe:	f7ff feab 	bl	8005d18 <uip_arp_update>
 8005fc2:	bd10      	pop	{r4, pc}
 8005fc4:	2000157c 	.word	0x2000157c
 8005fc8:	2000162c 	.word	0x2000162c
 8005fcc:	20001628 	.word	0x20001628
 8005fd0:	20001642 	.word	0x20001642
 8005fd4:	20000c60 	.word	0x20000c60

08005fd8 <uip_arp_out>:
 * uip_len.
 */
/*-----------------------------------------------------------------------------------*/
void
uip_arp_out(void)
{
 8005fd8:	b430      	push	{r4, r5}

     If not ARP table entry is found, we overwrite the original IP
     packet with an ARP request for the IP address. */

  /* First check if destination is a local broadcast. */
  if(uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr)) {
 8005fda:	4b4c      	ldr	r3, [pc, #304]	; (800610c <uip_arp_out+0x134>)
 8005fdc:	8bd9      	ldrh	r1, [r3, #30]
 8005fde:	b28a      	uxth	r2, r1
 8005fe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d10c      	bne.n	8006002 <uip_arp_out+0x2a>
 8005fe8:	4b48      	ldr	r3, [pc, #288]	; (800610c <uip_arp_out+0x134>)
 8005fea:	8c18      	ldrh	r0, [r3, #32]
 8005fec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ff0:	4298      	cmp	r0, r3
 8005ff2:	d106      	bne.n	8006002 <uip_arp_out+0x2a>
    memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6);
 8005ff4:	4b45      	ldr	r3, [pc, #276]	; (800610c <uip_arp_out+0x134>)
 8005ff6:	4a46      	ldr	r2, [pc, #280]	; (8006110 <uip_arp_out+0x138>)
 8005ff8:	6810      	ldr	r0, [r2, #0]
 8005ffa:	6018      	str	r0, [r3, #0]
 8005ffc:	8892      	ldrh	r2, [r2, #4]
 8005ffe:	809a      	strh	r2, [r3, #4]
 8006000:	e072      	b.n	80060e8 <uip_arp_out+0x110>
  } else {
    /* Check if the destination address is on the local network. */
    if(!uip_ipaddr_maskcmp(IPBUF->destipaddr, uip_hostaddr, uip_netmask)) {
 8006002:	4b44      	ldr	r3, [pc, #272]	; (8006114 <uip_arp_out+0x13c>)
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	4844      	ldr	r0, [pc, #272]	; (8006118 <uip_arp_out+0x140>)
 8006008:	8800      	ldrh	r0, [r0, #0]
 800600a:	4053      	eors	r3, r2
 800600c:	4218      	tst	r0, r3
 800600e:	d109      	bne.n	8006024 <uip_arp_out+0x4c>
 8006010:	4b3e      	ldr	r3, [pc, #248]	; (800610c <uip_arp_out+0x134>)
 8006012:	8c1a      	ldrh	r2, [r3, #32]
 8006014:	b294      	uxth	r4, r2
 8006016:	4b3f      	ldr	r3, [pc, #252]	; (8006114 <uip_arp_out+0x13c>)
 8006018:	885b      	ldrh	r3, [r3, #2]
 800601a:	483f      	ldr	r0, [pc, #252]	; (8006118 <uip_arp_out+0x140>)
 800601c:	8840      	ldrh	r0, [r0, #2]
 800601e:	4063      	eors	r3, r4
 8006020:	4218      	tst	r0, r3
 8006022:	d006      	beq.n	8006032 <uip_arp_out+0x5a>
      /* Destination address was not on the local network, so we need to
	 use the default router's IP address instead of the destination
	 address when determining the MAC address. */
      uip_ipaddr_copy(ipaddr, uip_draddr);
 8006024:	4b3d      	ldr	r3, [pc, #244]	; (800611c <uip_arp_out+0x144>)
 8006026:	4a3e      	ldr	r2, [pc, #248]	; (8006120 <uip_arp_out+0x148>)
 8006028:	8811      	ldrh	r1, [r2, #0]
 800602a:	8019      	strh	r1, [r3, #0]
 800602c:	8852      	ldrh	r2, [r2, #2]
 800602e:	805a      	strh	r2, [r3, #2]
 8006030:	e002      	b.n	8006038 <uip_arp_out+0x60>
    } else {
      /* Else, we use the destination IP address. */
      uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
 8006032:	4b3a      	ldr	r3, [pc, #232]	; (800611c <uip_arp_out+0x144>)
 8006034:	8019      	strh	r1, [r3, #0]
 8006036:	805a      	strh	r2, [r3, #2]
    }
      
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8006038:	2200      	movs	r2, #0
 800603a:	4b3a      	ldr	r3, [pc, #232]	; (8006124 <uip_arp_out+0x14c>)
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	e016      	b.n	800606e <uip_arp_out+0x96>
      tabptr = &arp_table[i];
 8006040:	4839      	ldr	r0, [pc, #228]	; (8006128 <uip_arp_out+0x150>)
 8006042:	005a      	lsls	r2, r3, #1
 8006044:	441a      	add	r2, r3
 8006046:	0091      	lsls	r1, r2, #2
 8006048:	1845      	adds	r5, r0, r1
      if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
 800604a:	4a34      	ldr	r2, [pc, #208]	; (800611c <uip_arp_out+0x144>)
 800604c:	8814      	ldrh	r4, [r2, #0]
 800604e:	5a42      	ldrh	r2, [r0, r1]
 8006050:	4294      	cmp	r4, r2
 8006052:	d109      	bne.n	8006068 <uip_arp_out+0x90>
 8006054:	4a31      	ldr	r2, [pc, #196]	; (800611c <uip_arp_out+0x144>)
 8006056:	8850      	ldrh	r0, [r2, #2]
 8006058:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800605c:	008a      	lsls	r2, r1, #2
 800605e:	4932      	ldr	r1, [pc, #200]	; (8006128 <uip_arp_out+0x150>)
 8006060:	440a      	add	r2, r1
 8006062:	8852      	ldrh	r2, [r2, #2]
 8006064:	4290      	cmp	r0, r2
 8006066:	d006      	beq.n	8006076 <uip_arp_out+0x9e>
    } else {
      /* Else, we use the destination IP address. */
      uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
    }
      
    for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 8006068:	3301      	adds	r3, #1
 800606a:	4a2e      	ldr	r2, [pc, #184]	; (8006124 <uip_arp_out+0x14c>)
 800606c:	7013      	strb	r3, [r2, #0]
 800606e:	4b2d      	ldr	r3, [pc, #180]	; (8006124 <uip_arp_out+0x14c>)
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	2b07      	cmp	r3, #7
 8006074:	d9e4      	bls.n	8006040 <uip_arp_out+0x68>
      if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
	break;
      }
    }

    if(i == UIP_ARPTAB_SIZE) {
 8006076:	2b08      	cmp	r3, #8
 8006078:	d130      	bne.n	80060dc <uip_arp_out+0x104>
      /* The destination address was not in our ARP table, so we
	 overwrite the IP packet with an ARP request. */

      memset(BUF->ethhdr.dest.addr, 0xff, 6);
 800607a:	4b24      	ldr	r3, [pc, #144]	; (800610c <uip_arp_out+0x134>)
 800607c:	f04f 32ff 	mov.w	r2, #4294967295
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	809a      	strh	r2, [r3, #4]
      memset(BUF->dhwaddr.addr, 0x00, 6);
 8006084:	2200      	movs	r2, #0
 8006086:	621a      	str	r2, [r3, #32]
 8006088:	849a      	strh	r2, [r3, #36]	; 0x24
      memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 800608a:	4928      	ldr	r1, [pc, #160]	; (800612c <uip_arp_out+0x154>)
 800608c:	6808      	ldr	r0, [r1, #0]
 800608e:	f8c3 0006 	str.w	r0, [r3, #6]
 8006092:	8889      	ldrh	r1, [r1, #4]
 8006094:	8159      	strh	r1, [r3, #10]
      memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
 8006096:	f8c3 0016 	str.w	r0, [r3, #22]
 800609a:	8359      	strh	r1, [r3, #26]
    
      uip_ipaddr_copy(BUF->dipaddr, ipaddr);
 800609c:	491f      	ldr	r1, [pc, #124]	; (800611c <uip_arp_out+0x144>)
 800609e:	8808      	ldrh	r0, [r1, #0]
 80060a0:	84d8      	strh	r0, [r3, #38]	; 0x26
 80060a2:	8849      	ldrh	r1, [r1, #2]
 80060a4:	8519      	strh	r1, [r3, #40]	; 0x28
      uip_ipaddr_copy(BUF->sipaddr, uip_hostaddr);
 80060a6:	491b      	ldr	r1, [pc, #108]	; (8006114 <uip_arp_out+0x13c>)
 80060a8:	8808      	ldrh	r0, [r1, #0]
 80060aa:	8398      	strh	r0, [r3, #28]
 80060ac:	8849      	ldrh	r1, [r1, #2]
 80060ae:	83d9      	strh	r1, [r3, #30]
      BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
 80060b0:	751a      	strb	r2, [r3, #20]
 80060b2:	2101      	movs	r1, #1
 80060b4:	7559      	strb	r1, [r3, #21]
      BUF->hwtype = HTONS(ARP_HWTYPE_ETH);
 80060b6:	739a      	strb	r2, [r3, #14]
 80060b8:	73d9      	strb	r1, [r3, #15]
      BUF->protocol = HTONS(UIP_ETHTYPE_IP);
 80060ba:	2108      	movs	r1, #8
 80060bc:	7419      	strb	r1, [r3, #16]
 80060be:	745a      	strb	r2, [r3, #17]
      BUF->hwlen = 6;
 80060c0:	2206      	movs	r2, #6
 80060c2:	749a      	strb	r2, [r3, #18]
      BUF->protolen = 4;
 80060c4:	2204      	movs	r2, #4
 80060c6:	74da      	strb	r2, [r3, #19]
      BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
 80060c8:	7319      	strb	r1, [r3, #12]
 80060ca:	2206      	movs	r2, #6
 80060cc:	735a      	strb	r2, [r3, #13]

      uip_appdata = &uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN];
 80060ce:	3336      	adds	r3, #54	; 0x36
 80060d0:	4a17      	ldr	r2, [pc, #92]	; (8006130 <uip_arp_out+0x158>)
 80060d2:	6013      	str	r3, [r2, #0]
    
      uip_len = sizeof(struct arp_hdr);
 80060d4:	222a      	movs	r2, #42	; 0x2a
 80060d6:	4b17      	ldr	r3, [pc, #92]	; (8006134 <uip_arp_out+0x15c>)
 80060d8:	801a      	strh	r2, [r3, #0]
      return;
 80060da:	e014      	b.n	8006106 <uip_arp_out+0x12e>
    }

    /* Build an ethernet header. */
    memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
 80060dc:	4b0b      	ldr	r3, [pc, #44]	; (800610c <uip_arp_out+0x134>)
 80060de:	f855 2f04 	ldr.w	r2, [r5, #4]!
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	88aa      	ldrh	r2, [r5, #4]
 80060e6:	809a      	strh	r2, [r3, #4]
  }
  memcpy(IPBUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 80060e8:	4b08      	ldr	r3, [pc, #32]	; (800610c <uip_arp_out+0x134>)
 80060ea:	4a10      	ldr	r2, [pc, #64]	; (800612c <uip_arp_out+0x154>)
 80060ec:	6811      	ldr	r1, [r2, #0]
 80060ee:	f8c3 1006 	str.w	r1, [r3, #6]
 80060f2:	8892      	ldrh	r2, [r2, #4]
 80060f4:	815a      	strh	r2, [r3, #10]
  
  IPBUF->ethhdr.type = HTONS(UIP_ETHTYPE_IP);
 80060f6:	2208      	movs	r2, #8
 80060f8:	731a      	strb	r2, [r3, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	735a      	strb	r2, [r3, #13]

  uip_len += sizeof(struct uip_eth_hdr);
 80060fe:	4a0d      	ldr	r2, [pc, #52]	; (8006134 <uip_arp_out+0x15c>)
 8006100:	8813      	ldrh	r3, [r2, #0]
 8006102:	330e      	adds	r3, #14
 8006104:	8013      	strh	r3, [r2, #0]
}
 8006106:	bc30      	pop	{r4, r5}
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	2000162c 	.word	0x2000162c
 8006110:	08007338 	.word	0x08007338
 8006114:	20001628 	.word	0x20001628
 8006118:	20001624 	.word	0x20001624
 800611c:	20000ccc 	.word	0x20000ccc
 8006120:	20001620 	.word	0x20001620
 8006124:	20000c66 	.word	0x20000c66
 8006128:	20000c68 	.word	0x20000c68
 800612c:	20000c60 	.word	0x20000c60
 8006130:	20001590 	.word	0x20001590
 8006134:	2000157c 	.word	0x2000157c

08006138 <uip_timer_set>:
 * \param interval The interval before the timer expires.
 *
 */
void
uip_timer_set(struct uip_timer *t, clock_time_t interval)
{
 8006138:	b510      	push	{r4, lr}
 800613a:	4604      	mov	r4, r0
  t->interval = interval;
 800613c:	6041      	str	r1, [r0, #4]
  t->start = clock_time();
 800613e:	f7fe fbb9 	bl	80048b4 <clock_time>
 8006142:	6020      	str	r0, [r4, #0]
 8006144:	bd10      	pop	{r4, pc}
 8006146:	bf00      	nop

08006148 <__libc_init_array>:
 8006148:	4b0e      	ldr	r3, [pc, #56]	; (8006184 <__libc_init_array+0x3c>)
 800614a:	b570      	push	{r4, r5, r6, lr}
 800614c:	461e      	mov	r6, r3
 800614e:	4c0e      	ldr	r4, [pc, #56]	; (8006188 <__libc_init_array+0x40>)
 8006150:	2500      	movs	r5, #0
 8006152:	1ae4      	subs	r4, r4, r3
 8006154:	10a4      	asrs	r4, r4, #2
 8006156:	42a5      	cmp	r5, r4
 8006158:	d004      	beq.n	8006164 <__libc_init_array+0x1c>
 800615a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800615e:	4798      	blx	r3
 8006160:	3501      	adds	r5, #1
 8006162:	e7f8      	b.n	8006156 <__libc_init_array+0xe>
 8006164:	f000 fbe4 	bl	8006930 <_init>
 8006168:	4b08      	ldr	r3, [pc, #32]	; (800618c <__libc_init_array+0x44>)
 800616a:	4c09      	ldr	r4, [pc, #36]	; (8006190 <__libc_init_array+0x48>)
 800616c:	461e      	mov	r6, r3
 800616e:	1ae4      	subs	r4, r4, r3
 8006170:	10a4      	asrs	r4, r4, #2
 8006172:	2500      	movs	r5, #0
 8006174:	42a5      	cmp	r5, r4
 8006176:	d004      	beq.n	8006182 <__libc_init_array+0x3a>
 8006178:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800617c:	4798      	blx	r3
 800617e:	3501      	adds	r5, #1
 8006180:	e7f8      	b.n	8006174 <__libc_init_array+0x2c>
 8006182:	bd70      	pop	{r4, r5, r6, pc}
 8006184:	08007340 	.word	0x08007340
 8006188:	08007340 	.word	0x08007340
 800618c:	08007340 	.word	0x08007340
 8006190:	08007344 	.word	0x08007344

08006194 <memcmp>:
 8006194:	b510      	push	{r4, lr}
 8006196:	3901      	subs	r1, #1
 8006198:	4402      	add	r2, r0
 800619a:	4290      	cmp	r0, r2
 800619c:	d007      	beq.n	80061ae <memcmp+0x1a>
 800619e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80061a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80061a6:	42a3      	cmp	r3, r4
 80061a8:	d0f7      	beq.n	800619a <memcmp+0x6>
 80061aa:	1b18      	subs	r0, r3, r4
 80061ac:	bd10      	pop	{r4, pc}
 80061ae:	2000      	movs	r0, #0
 80061b0:	bd10      	pop	{r4, pc}

080061b2 <memcpy>:
 80061b2:	b510      	push	{r4, lr}
 80061b4:	1e43      	subs	r3, r0, #1
 80061b6:	440a      	add	r2, r1
 80061b8:	4291      	cmp	r1, r2
 80061ba:	d004      	beq.n	80061c6 <memcpy+0x14>
 80061bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061c4:	e7f8      	b.n	80061b8 <memcpy+0x6>
 80061c6:	bd10      	pop	{r4, pc}

080061c8 <memset>:
 80061c8:	4603      	mov	r3, r0
 80061ca:	4402      	add	r2, r0
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d002      	beq.n	80061d6 <memset+0xe>
 80061d0:	f803 1b01 	strb.w	r1, [r3], #1
 80061d4:	e7fa      	b.n	80061cc <memset+0x4>
 80061d6:	4770      	bx	lr

080061d8 <srand>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	4b12      	ldr	r3, [pc, #72]	; (8006224 <srand+0x4c>)
 80061dc:	4605      	mov	r5, r0
 80061de:	681c      	ldr	r4, [r3, #0]
 80061e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80061e2:	b9d3      	cbnz	r3, 800621a <srand+0x42>
 80061e4:	2018      	movs	r0, #24
 80061e6:	f000 f96d 	bl	80064c4 <malloc>
 80061ea:	f243 330e 	movw	r3, #13070	; 0x330e
 80061ee:	63a0      	str	r0, [r4, #56]	; 0x38
 80061f0:	8003      	strh	r3, [r0, #0]
 80061f2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80061f6:	8043      	strh	r3, [r0, #2]
 80061f8:	f241 2334 	movw	r3, #4660	; 0x1234
 80061fc:	8083      	strh	r3, [r0, #4]
 80061fe:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8006202:	80c3      	strh	r3, [r0, #6]
 8006204:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8006208:	8103      	strh	r3, [r0, #8]
 800620a:	2305      	movs	r3, #5
 800620c:	8143      	strh	r3, [r0, #10]
 800620e:	230b      	movs	r3, #11
 8006210:	8183      	strh	r3, [r0, #12]
 8006212:	2201      	movs	r2, #1
 8006214:	2300      	movs	r3, #0
 8006216:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800621a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800621c:	2200      	movs	r2, #0
 800621e:	611d      	str	r5, [r3, #16]
 8006220:	615a      	str	r2, [r3, #20]
 8006222:	bd38      	pop	{r3, r4, r5, pc}
 8006224:	2000074c 	.word	0x2000074c

08006228 <rand>:
 8006228:	4b19      	ldr	r3, [pc, #100]	; (8006290 <rand+0x68>)
 800622a:	b510      	push	{r4, lr}
 800622c:	681c      	ldr	r4, [r3, #0]
 800622e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006230:	b9d3      	cbnz	r3, 8006268 <rand+0x40>
 8006232:	2018      	movs	r0, #24
 8006234:	f000 f946 	bl	80064c4 <malloc>
 8006238:	f243 330e 	movw	r3, #13070	; 0x330e
 800623c:	63a0      	str	r0, [r4, #56]	; 0x38
 800623e:	8003      	strh	r3, [r0, #0]
 8006240:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8006244:	8043      	strh	r3, [r0, #2]
 8006246:	f241 2334 	movw	r3, #4660	; 0x1234
 800624a:	8083      	strh	r3, [r0, #4]
 800624c:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8006250:	80c3      	strh	r3, [r0, #6]
 8006252:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8006256:	8103      	strh	r3, [r0, #8]
 8006258:	2305      	movs	r3, #5
 800625a:	8143      	strh	r3, [r0, #10]
 800625c:	230b      	movs	r3, #11
 800625e:	8183      	strh	r3, [r0, #12]
 8006260:	2201      	movs	r2, #1
 8006262:	2300      	movs	r3, #0
 8006264:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006268:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800626a:	4c0a      	ldr	r4, [pc, #40]	; (8006294 <rand+0x6c>)
 800626c:	690b      	ldr	r3, [r1, #16]
 800626e:	6948      	ldr	r0, [r1, #20]
 8006270:	435c      	muls	r4, r3
 8006272:	4a09      	ldr	r2, [pc, #36]	; (8006298 <rand+0x70>)
 8006274:	fb02 4000 	mla	r0, r2, r0, r4
 8006278:	fba3 2302 	umull	r2, r3, r3, r2
 800627c:	3201      	adds	r2, #1
 800627e:	4403      	add	r3, r0
 8006280:	f143 0300 	adc.w	r3, r3, #0
 8006284:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8006288:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800628c:	bd10      	pop	{r4, pc}
 800628e:	bf00      	nop
 8006290:	2000074c 	.word	0x2000074c
 8006294:	5851f42d 	.word	0x5851f42d
 8006298:	4c957f2d 	.word	0x4c957f2d

0800629c <_malloc_trim_r>:
 800629c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a0:	4689      	mov	r9, r1
 80062a2:	4f25      	ldr	r7, [pc, #148]	; (8006338 <_malloc_trim_r+0x9c>)
 80062a4:	4606      	mov	r6, r0
 80062a6:	f000 fb31 	bl	800690c <__malloc_lock>
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8006344 <_malloc_trim_r+0xa8>
 80062b0:	685d      	ldr	r5, [r3, #4]
 80062b2:	f1a8 0411 	sub.w	r4, r8, #17
 80062b6:	f025 0503 	bic.w	r5, r5, #3
 80062ba:	442c      	add	r4, r5
 80062bc:	ebc9 0404 	rsb	r4, r9, r4
 80062c0:	fbb4 f4f8 	udiv	r4, r4, r8
 80062c4:	3c01      	subs	r4, #1
 80062c6:	fb08 f404 	mul.w	r4, r8, r4
 80062ca:	4544      	cmp	r4, r8
 80062cc:	da05      	bge.n	80062da <_malloc_trim_r+0x3e>
 80062ce:	4630      	mov	r0, r6
 80062d0:	f000 fb1d 	bl	800690e <__malloc_unlock>
 80062d4:	2000      	movs	r0, #0
 80062d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062da:	2100      	movs	r1, #0
 80062dc:	4630      	mov	r0, r6
 80062de:	f000 fb17 	bl	8006910 <_sbrk_r>
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	442b      	add	r3, r5
 80062e6:	4298      	cmp	r0, r3
 80062e8:	d1f1      	bne.n	80062ce <_malloc_trim_r+0x32>
 80062ea:	4261      	negs	r1, r4
 80062ec:	4630      	mov	r0, r6
 80062ee:	f000 fb0f 	bl	8006910 <_sbrk_r>
 80062f2:	3001      	adds	r0, #1
 80062f4:	d110      	bne.n	8006318 <_malloc_trim_r+0x7c>
 80062f6:	2100      	movs	r1, #0
 80062f8:	4630      	mov	r0, r6
 80062fa:	f000 fb09 	bl	8006910 <_sbrk_r>
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	1a83      	subs	r3, r0, r2
 8006302:	2b0f      	cmp	r3, #15
 8006304:	dde3      	ble.n	80062ce <_malloc_trim_r+0x32>
 8006306:	490d      	ldr	r1, [pc, #52]	; (800633c <_malloc_trim_r+0xa0>)
 8006308:	f043 0301 	orr.w	r3, r3, #1
 800630c:	6809      	ldr	r1, [r1, #0]
 800630e:	6053      	str	r3, [r2, #4]
 8006310:	1a40      	subs	r0, r0, r1
 8006312:	490b      	ldr	r1, [pc, #44]	; (8006340 <_malloc_trim_r+0xa4>)
 8006314:	6008      	str	r0, [r1, #0]
 8006316:	e7da      	b.n	80062ce <_malloc_trim_r+0x32>
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	4a09      	ldr	r2, [pc, #36]	; (8006340 <_malloc_trim_r+0xa4>)
 800631c:	1b2d      	subs	r5, r5, r4
 800631e:	f045 0501 	orr.w	r5, r5, #1
 8006322:	605d      	str	r5, [r3, #4]
 8006324:	6813      	ldr	r3, [r2, #0]
 8006326:	4630      	mov	r0, r6
 8006328:	1b1c      	subs	r4, r3, r4
 800632a:	6014      	str	r4, [r2, #0]
 800632c:	f000 faef 	bl	800690e <__malloc_unlock>
 8006330:	2001      	movs	r0, #1
 8006332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006336:	bf00      	nop
 8006338:	20000750 	.word	0x20000750
 800633c:	20000b5c 	.word	0x20000b5c
 8006340:	20000cdc 	.word	0x20000cdc
 8006344:	00000080 	.word	0x00000080

08006348 <_free_r>:
 8006348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800634c:	4604      	mov	r4, r0
 800634e:	4688      	mov	r8, r1
 8006350:	2900      	cmp	r1, #0
 8006352:	f000 80ad 	beq.w	80064b0 <_free_r+0x168>
 8006356:	f000 fad9 	bl	800690c <__malloc_lock>
 800635a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800635e:	4d55      	ldr	r5, [pc, #340]	; (80064b4 <_free_r+0x16c>)
 8006360:	f022 0001 	bic.w	r0, r2, #1
 8006364:	f1a8 0308 	sub.w	r3, r8, #8
 8006368:	181f      	adds	r7, r3, r0
 800636a:	68a9      	ldr	r1, [r5, #8]
 800636c:	687e      	ldr	r6, [r7, #4]
 800636e:	428f      	cmp	r7, r1
 8006370:	f026 0603 	bic.w	r6, r6, #3
 8006374:	f002 0201 	and.w	r2, r2, #1
 8006378:	d11b      	bne.n	80063b2 <_free_r+0x6a>
 800637a:	4430      	add	r0, r6
 800637c:	b93a      	cbnz	r2, 800638e <_free_r+0x46>
 800637e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8006382:	1a9b      	subs	r3, r3, r2
 8006384:	6899      	ldr	r1, [r3, #8]
 8006386:	4410      	add	r0, r2
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	60ca      	str	r2, [r1, #12]
 800638c:	6091      	str	r1, [r2, #8]
 800638e:	f040 0201 	orr.w	r2, r0, #1
 8006392:	605a      	str	r2, [r3, #4]
 8006394:	60ab      	str	r3, [r5, #8]
 8006396:	4b48      	ldr	r3, [pc, #288]	; (80064b8 <_free_r+0x170>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4298      	cmp	r0, r3
 800639c:	d304      	bcc.n	80063a8 <_free_r+0x60>
 800639e:	4b47      	ldr	r3, [pc, #284]	; (80064bc <_free_r+0x174>)
 80063a0:	4620      	mov	r0, r4
 80063a2:	6819      	ldr	r1, [r3, #0]
 80063a4:	f7ff ff7a 	bl	800629c <_malloc_trim_r>
 80063a8:	4620      	mov	r0, r4
 80063aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063ae:	f000 baae 	b.w	800690e <__malloc_unlock>
 80063b2:	607e      	str	r6, [r7, #4]
 80063b4:	b97a      	cbnz	r2, 80063d6 <_free_r+0x8e>
 80063b6:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80063ba:	f105 0e08 	add.w	lr, r5, #8
 80063be:	1a5b      	subs	r3, r3, r1
 80063c0:	4408      	add	r0, r1
 80063c2:	6899      	ldr	r1, [r3, #8]
 80063c4:	4571      	cmp	r1, lr
 80063c6:	d008      	beq.n	80063da <_free_r+0x92>
 80063c8:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80063cc:	f8c1 e00c 	str.w	lr, [r1, #12]
 80063d0:	f8ce 1008 	str.w	r1, [lr, #8]
 80063d4:	e002      	b.n	80063dc <_free_r+0x94>
 80063d6:	2200      	movs	r2, #0
 80063d8:	e000      	b.n	80063dc <_free_r+0x94>
 80063da:	2201      	movs	r2, #1
 80063dc:	19b9      	adds	r1, r7, r6
 80063de:	6849      	ldr	r1, [r1, #4]
 80063e0:	07c9      	lsls	r1, r1, #31
 80063e2:	d40e      	bmi.n	8006402 <_free_r+0xba>
 80063e4:	4430      	add	r0, r6
 80063e6:	68b9      	ldr	r1, [r7, #8]
 80063e8:	b942      	cbnz	r2, 80063fc <_free_r+0xb4>
 80063ea:	4e35      	ldr	r6, [pc, #212]	; (80064c0 <_free_r+0x178>)
 80063ec:	42b1      	cmp	r1, r6
 80063ee:	d105      	bne.n	80063fc <_free_r+0xb4>
 80063f0:	616b      	str	r3, [r5, #20]
 80063f2:	612b      	str	r3, [r5, #16]
 80063f4:	2201      	movs	r2, #1
 80063f6:	60d9      	str	r1, [r3, #12]
 80063f8:	6099      	str	r1, [r3, #8]
 80063fa:	e002      	b.n	8006402 <_free_r+0xba>
 80063fc:	68fe      	ldr	r6, [r7, #12]
 80063fe:	60ce      	str	r6, [r1, #12]
 8006400:	60b1      	str	r1, [r6, #8]
 8006402:	f040 0101 	orr.w	r1, r0, #1
 8006406:	6059      	str	r1, [r3, #4]
 8006408:	5018      	str	r0, [r3, r0]
 800640a:	2a00      	cmp	r2, #0
 800640c:	d1cc      	bne.n	80063a8 <_free_r+0x60>
 800640e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006412:	d212      	bcs.n	800643a <_free_r+0xf2>
 8006414:	08c0      	lsrs	r0, r0, #3
 8006416:	1081      	asrs	r1, r0, #2
 8006418:	2201      	movs	r2, #1
 800641a:	fa02 f101 	lsl.w	r1, r2, r1
 800641e:	686a      	ldr	r2, [r5, #4]
 8006420:	3001      	adds	r0, #1
 8006422:	430a      	orrs	r2, r1
 8006424:	606a      	str	r2, [r5, #4]
 8006426:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800642a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800642e:	3a08      	subs	r2, #8
 8006430:	60da      	str	r2, [r3, #12]
 8006432:	6099      	str	r1, [r3, #8]
 8006434:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8006438:	e038      	b.n	80064ac <_free_r+0x164>
 800643a:	0a42      	lsrs	r2, r0, #9
 800643c:	2a04      	cmp	r2, #4
 800643e:	d802      	bhi.n	8006446 <_free_r+0xfe>
 8006440:	0982      	lsrs	r2, r0, #6
 8006442:	3238      	adds	r2, #56	; 0x38
 8006444:	e015      	b.n	8006472 <_free_r+0x12a>
 8006446:	2a14      	cmp	r2, #20
 8006448:	d801      	bhi.n	800644e <_free_r+0x106>
 800644a:	325b      	adds	r2, #91	; 0x5b
 800644c:	e011      	b.n	8006472 <_free_r+0x12a>
 800644e:	2a54      	cmp	r2, #84	; 0x54
 8006450:	d802      	bhi.n	8006458 <_free_r+0x110>
 8006452:	0b02      	lsrs	r2, r0, #12
 8006454:	326e      	adds	r2, #110	; 0x6e
 8006456:	e00c      	b.n	8006472 <_free_r+0x12a>
 8006458:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800645c:	d802      	bhi.n	8006464 <_free_r+0x11c>
 800645e:	0bc2      	lsrs	r2, r0, #15
 8006460:	3277      	adds	r2, #119	; 0x77
 8006462:	e006      	b.n	8006472 <_free_r+0x12a>
 8006464:	f240 5154 	movw	r1, #1364	; 0x554
 8006468:	428a      	cmp	r2, r1
 800646a:	bf9a      	itte	ls
 800646c:	0c82      	lsrls	r2, r0, #18
 800646e:	327c      	addls	r2, #124	; 0x7c
 8006470:	227e      	movhi	r2, #126	; 0x7e
 8006472:	1c51      	adds	r1, r2, #1
 8006474:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8006478:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800647c:	428e      	cmp	r6, r1
 800647e:	4f0d      	ldr	r7, [pc, #52]	; (80064b4 <_free_r+0x16c>)
 8006480:	d10b      	bne.n	800649a <_free_r+0x152>
 8006482:	2101      	movs	r1, #1
 8006484:	1092      	asrs	r2, r2, #2
 8006486:	fa01 f202 	lsl.w	r2, r1, r2
 800648a:	6879      	ldr	r1, [r7, #4]
 800648c:	4311      	orrs	r1, r2
 800648e:	6079      	str	r1, [r7, #4]
 8006490:	4631      	mov	r1, r6
 8006492:	e008      	b.n	80064a6 <_free_r+0x15e>
 8006494:	6889      	ldr	r1, [r1, #8]
 8006496:	428e      	cmp	r6, r1
 8006498:	d004      	beq.n	80064a4 <_free_r+0x15c>
 800649a:	684a      	ldr	r2, [r1, #4]
 800649c:	f022 0203 	bic.w	r2, r2, #3
 80064a0:	4290      	cmp	r0, r2
 80064a2:	d3f7      	bcc.n	8006494 <_free_r+0x14c>
 80064a4:	68ce      	ldr	r6, [r1, #12]
 80064a6:	60de      	str	r6, [r3, #12]
 80064a8:	6099      	str	r1, [r3, #8]
 80064aa:	60b3      	str	r3, [r6, #8]
 80064ac:	60cb      	str	r3, [r1, #12]
 80064ae:	e77b      	b.n	80063a8 <_free_r+0x60>
 80064b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064b4:	20000750 	.word	0x20000750
 80064b8:	20000b58 	.word	0x20000b58
 80064bc:	20000cd8 	.word	0x20000cd8
 80064c0:	20000758 	.word	0x20000758

080064c4 <malloc>:
 80064c4:	4b02      	ldr	r3, [pc, #8]	; (80064d0 <malloc+0xc>)
 80064c6:	4601      	mov	r1, r0
 80064c8:	6818      	ldr	r0, [r3, #0]
 80064ca:	f000 b803 	b.w	80064d4 <_malloc_r>
 80064ce:	bf00      	nop
 80064d0:	2000074c 	.word	0x2000074c

080064d4 <_malloc_r>:
 80064d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d8:	f101 040b 	add.w	r4, r1, #11
 80064dc:	2c16      	cmp	r4, #22
 80064de:	b085      	sub	sp, #20
 80064e0:	4681      	mov	r9, r0
 80064e2:	d903      	bls.n	80064ec <_malloc_r+0x18>
 80064e4:	f034 0407 	bics.w	r4, r4, #7
 80064e8:	d501      	bpl.n	80064ee <_malloc_r+0x1a>
 80064ea:	e002      	b.n	80064f2 <_malloc_r+0x1e>
 80064ec:	2410      	movs	r4, #16
 80064ee:	428c      	cmp	r4, r1
 80064f0:	d203      	bcs.n	80064fa <_malloc_r+0x26>
 80064f2:	230c      	movs	r3, #12
 80064f4:	f8c9 3000 	str.w	r3, [r9]
 80064f8:	e1e7      	b.n	80068ca <_malloc_r+0x3f6>
 80064fa:	4648      	mov	r0, r9
 80064fc:	f000 fa06 	bl	800690c <__malloc_lock>
 8006500:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8006504:	4d9d      	ldr	r5, [pc, #628]	; (800677c <_malloc_r+0x2a8>)
 8006506:	d217      	bcs.n	8006538 <_malloc_r+0x64>
 8006508:	f104 0208 	add.w	r2, r4, #8
 800650c:	442a      	add	r2, r5
 800650e:	6856      	ldr	r6, [r2, #4]
 8006510:	f1a2 0108 	sub.w	r1, r2, #8
 8006514:	428e      	cmp	r6, r1
 8006516:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800651a:	d102      	bne.n	8006522 <_malloc_r+0x4e>
 800651c:	68d6      	ldr	r6, [r2, #12]
 800651e:	42b2      	cmp	r2, r6
 8006520:	d008      	beq.n	8006534 <_malloc_r+0x60>
 8006522:	6873      	ldr	r3, [r6, #4]
 8006524:	68f2      	ldr	r2, [r6, #12]
 8006526:	68b1      	ldr	r1, [r6, #8]
 8006528:	f023 0303 	bic.w	r3, r3, #3
 800652c:	60ca      	str	r2, [r1, #12]
 800652e:	4433      	add	r3, r6
 8006530:	6091      	str	r1, [r2, #8]
 8006532:	e02f      	b.n	8006594 <_malloc_r+0xc0>
 8006534:	3302      	adds	r3, #2
 8006536:	e03d      	b.n	80065b4 <_malloc_r+0xe0>
 8006538:	0a63      	lsrs	r3, r4, #9
 800653a:	d01a      	beq.n	8006572 <_malloc_r+0x9e>
 800653c:	2b04      	cmp	r3, #4
 800653e:	d802      	bhi.n	8006546 <_malloc_r+0x72>
 8006540:	09a3      	lsrs	r3, r4, #6
 8006542:	3338      	adds	r3, #56	; 0x38
 8006544:	e018      	b.n	8006578 <_malloc_r+0xa4>
 8006546:	2b14      	cmp	r3, #20
 8006548:	d801      	bhi.n	800654e <_malloc_r+0x7a>
 800654a:	335b      	adds	r3, #91	; 0x5b
 800654c:	e014      	b.n	8006578 <_malloc_r+0xa4>
 800654e:	2b54      	cmp	r3, #84	; 0x54
 8006550:	d802      	bhi.n	8006558 <_malloc_r+0x84>
 8006552:	0b23      	lsrs	r3, r4, #12
 8006554:	336e      	adds	r3, #110	; 0x6e
 8006556:	e00f      	b.n	8006578 <_malloc_r+0xa4>
 8006558:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800655c:	d802      	bhi.n	8006564 <_malloc_r+0x90>
 800655e:	0be3      	lsrs	r3, r4, #15
 8006560:	3377      	adds	r3, #119	; 0x77
 8006562:	e009      	b.n	8006578 <_malloc_r+0xa4>
 8006564:	f240 5254 	movw	r2, #1364	; 0x554
 8006568:	4293      	cmp	r3, r2
 800656a:	d804      	bhi.n	8006576 <_malloc_r+0xa2>
 800656c:	0ca3      	lsrs	r3, r4, #18
 800656e:	337c      	adds	r3, #124	; 0x7c
 8006570:	e002      	b.n	8006578 <_malloc_r+0xa4>
 8006572:	233f      	movs	r3, #63	; 0x3f
 8006574:	e000      	b.n	8006578 <_malloc_r+0xa4>
 8006576:	237e      	movs	r3, #126	; 0x7e
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800657e:	f1a2 0008 	sub.w	r0, r2, #8
 8006582:	6856      	ldr	r6, [r2, #4]
 8006584:	e00c      	b.n	80065a0 <_malloc_r+0xcc>
 8006586:	2900      	cmp	r1, #0
 8006588:	68f1      	ldr	r1, [r6, #12]
 800658a:	db08      	blt.n	800659e <_malloc_r+0xca>
 800658c:	68b3      	ldr	r3, [r6, #8]
 800658e:	60d9      	str	r1, [r3, #12]
 8006590:	608b      	str	r3, [r1, #8]
 8006592:	18b3      	adds	r3, r6, r2
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	f042 0201 	orr.w	r2, r2, #1
 800659a:	605a      	str	r2, [r3, #4]
 800659c:	e1a0      	b.n	80068e0 <_malloc_r+0x40c>
 800659e:	460e      	mov	r6, r1
 80065a0:	4286      	cmp	r6, r0
 80065a2:	d006      	beq.n	80065b2 <_malloc_r+0xde>
 80065a4:	6872      	ldr	r2, [r6, #4]
 80065a6:	f022 0203 	bic.w	r2, r2, #3
 80065aa:	1b11      	subs	r1, r2, r4
 80065ac:	290f      	cmp	r1, #15
 80065ae:	ddea      	ble.n	8006586 <_malloc_r+0xb2>
 80065b0:	3b01      	subs	r3, #1
 80065b2:	3301      	adds	r3, #1
 80065b4:	4a71      	ldr	r2, [pc, #452]	; (800677c <_malloc_r+0x2a8>)
 80065b6:	692e      	ldr	r6, [r5, #16]
 80065b8:	f102 0708 	add.w	r7, r2, #8
 80065bc:	42be      	cmp	r6, r7
 80065be:	4639      	mov	r1, r7
 80065c0:	d079      	beq.n	80066b6 <_malloc_r+0x1e2>
 80065c2:	6870      	ldr	r0, [r6, #4]
 80065c4:	f020 0003 	bic.w	r0, r0, #3
 80065c8:	ebc4 0e00 	rsb	lr, r4, r0
 80065cc:	f1be 0f0f 	cmp.w	lr, #15
 80065d0:	dd0d      	ble.n	80065ee <_malloc_r+0x11a>
 80065d2:	1933      	adds	r3, r6, r4
 80065d4:	f044 0401 	orr.w	r4, r4, #1
 80065d8:	6074      	str	r4, [r6, #4]
 80065da:	6153      	str	r3, [r2, #20]
 80065dc:	6113      	str	r3, [r2, #16]
 80065de:	f04e 0201 	orr.w	r2, lr, #1
 80065e2:	60df      	str	r7, [r3, #12]
 80065e4:	609f      	str	r7, [r3, #8]
 80065e6:	605a      	str	r2, [r3, #4]
 80065e8:	f843 e00e 	str.w	lr, [r3, lr]
 80065ec:	e178      	b.n	80068e0 <_malloc_r+0x40c>
 80065ee:	f1be 0f00 	cmp.w	lr, #0
 80065f2:	6157      	str	r7, [r2, #20]
 80065f4:	6117      	str	r7, [r2, #16]
 80065f6:	db05      	blt.n	8006604 <_malloc_r+0x130>
 80065f8:	4430      	add	r0, r6
 80065fa:	6843      	ldr	r3, [r0, #4]
 80065fc:	f043 0301 	orr.w	r3, r3, #1
 8006600:	6043      	str	r3, [r0, #4]
 8006602:	e16d      	b.n	80068e0 <_malloc_r+0x40c>
 8006604:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006608:	d215      	bcs.n	8006636 <_malloc_r+0x162>
 800660a:	08c0      	lsrs	r0, r0, #3
 800660c:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8006610:	2701      	movs	r7, #1
 8006612:	fa07 fe0e 	lsl.w	lr, r7, lr
 8006616:	6857      	ldr	r7, [r2, #4]
 8006618:	3001      	adds	r0, #1
 800661a:	ea4e 0707 	orr.w	r7, lr, r7
 800661e:	6057      	str	r7, [r2, #4]
 8006620:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8006624:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8006628:	3f08      	subs	r7, #8
 800662a:	60f7      	str	r7, [r6, #12]
 800662c:	f8c6 e008 	str.w	lr, [r6, #8]
 8006630:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8006634:	e03d      	b.n	80066b2 <_malloc_r+0x1de>
 8006636:	0a42      	lsrs	r2, r0, #9
 8006638:	2a04      	cmp	r2, #4
 800663a:	d802      	bhi.n	8006642 <_malloc_r+0x16e>
 800663c:	0982      	lsrs	r2, r0, #6
 800663e:	3238      	adds	r2, #56	; 0x38
 8006640:	e015      	b.n	800666e <_malloc_r+0x19a>
 8006642:	2a14      	cmp	r2, #20
 8006644:	d801      	bhi.n	800664a <_malloc_r+0x176>
 8006646:	325b      	adds	r2, #91	; 0x5b
 8006648:	e011      	b.n	800666e <_malloc_r+0x19a>
 800664a:	2a54      	cmp	r2, #84	; 0x54
 800664c:	d802      	bhi.n	8006654 <_malloc_r+0x180>
 800664e:	0b02      	lsrs	r2, r0, #12
 8006650:	326e      	adds	r2, #110	; 0x6e
 8006652:	e00c      	b.n	800666e <_malloc_r+0x19a>
 8006654:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006658:	d802      	bhi.n	8006660 <_malloc_r+0x18c>
 800665a:	0bc2      	lsrs	r2, r0, #15
 800665c:	3277      	adds	r2, #119	; 0x77
 800665e:	e006      	b.n	800666e <_malloc_r+0x19a>
 8006660:	f240 5754 	movw	r7, #1364	; 0x554
 8006664:	42ba      	cmp	r2, r7
 8006666:	bf9a      	itte	ls
 8006668:	0c82      	lsrls	r2, r0, #18
 800666a:	327c      	addls	r2, #124	; 0x7c
 800666c:	227e      	movhi	r2, #126	; 0x7e
 800666e:	1c57      	adds	r7, r2, #1
 8006670:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8006674:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8006678:	45be      	cmp	lr, r7
 800667a:	f8df c100 	ldr.w	ip, [pc, #256]	; 800677c <_malloc_r+0x2a8>
 800667e:	d10d      	bne.n	800669c <_malloc_r+0x1c8>
 8006680:	2001      	movs	r0, #1
 8006682:	1092      	asrs	r2, r2, #2
 8006684:	fa00 f202 	lsl.w	r2, r0, r2
 8006688:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800668c:	4310      	orrs	r0, r2
 800668e:	f8cc 0004 	str.w	r0, [ip, #4]
 8006692:	4672      	mov	r2, lr
 8006694:	e009      	b.n	80066aa <_malloc_r+0x1d6>
 8006696:	68bf      	ldr	r7, [r7, #8]
 8006698:	45be      	cmp	lr, r7
 800669a:	d004      	beq.n	80066a6 <_malloc_r+0x1d2>
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	f022 0203 	bic.w	r2, r2, #3
 80066a2:	4290      	cmp	r0, r2
 80066a4:	d3f7      	bcc.n	8006696 <_malloc_r+0x1c2>
 80066a6:	46be      	mov	lr, r7
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	60f2      	str	r2, [r6, #12]
 80066ac:	f8c6 e008 	str.w	lr, [r6, #8]
 80066b0:	6096      	str	r6, [r2, #8]
 80066b2:	f8ce 600c 	str.w	r6, [lr, #12]
 80066b6:	2001      	movs	r0, #1
 80066b8:	109a      	asrs	r2, r3, #2
 80066ba:	fa00 f202 	lsl.w	r2, r0, r2
 80066be:	6868      	ldr	r0, [r5, #4]
 80066c0:	4282      	cmp	r2, r0
 80066c2:	d85d      	bhi.n	8006780 <_malloc_r+0x2ac>
 80066c4:	4202      	tst	r2, r0
 80066c6:	d106      	bne.n	80066d6 <_malloc_r+0x202>
 80066c8:	f023 0303 	bic.w	r3, r3, #3
 80066cc:	0052      	lsls	r2, r2, #1
 80066ce:	4202      	tst	r2, r0
 80066d0:	f103 0304 	add.w	r3, r3, #4
 80066d4:	d0fa      	beq.n	80066cc <_malloc_r+0x1f8>
 80066d6:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 80066da:	46c2      	mov	sl, r8
 80066dc:	469c      	mov	ip, r3
 80066de:	f8da 600c 	ldr.w	r6, [sl, #12]
 80066e2:	4556      	cmp	r6, sl
 80066e4:	d02c      	beq.n	8006740 <_malloc_r+0x26c>
 80066e6:	6870      	ldr	r0, [r6, #4]
 80066e8:	68f7      	ldr	r7, [r6, #12]
 80066ea:	f020 0003 	bic.w	r0, r0, #3
 80066ee:	ebc4 0e00 	rsb	lr, r4, r0
 80066f2:	f1be 0f0f 	cmp.w	lr, #15
 80066f6:	dd11      	ble.n	800671c <_malloc_r+0x248>
 80066f8:	1933      	adds	r3, r6, r4
 80066fa:	f044 0401 	orr.w	r4, r4, #1
 80066fe:	6074      	str	r4, [r6, #4]
 8006700:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8006704:	60d7      	str	r7, [r2, #12]
 8006706:	60ba      	str	r2, [r7, #8]
 8006708:	f04e 0201 	orr.w	r2, lr, #1
 800670c:	616b      	str	r3, [r5, #20]
 800670e:	612b      	str	r3, [r5, #16]
 8006710:	60d9      	str	r1, [r3, #12]
 8006712:	6099      	str	r1, [r3, #8]
 8006714:	605a      	str	r2, [r3, #4]
 8006716:	f843 e00e 	str.w	lr, [r3, lr]
 800671a:	e00b      	b.n	8006734 <_malloc_r+0x260>
 800671c:	f1be 0f00 	cmp.w	lr, #0
 8006720:	db0c      	blt.n	800673c <_malloc_r+0x268>
 8006722:	1833      	adds	r3, r6, r0
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	f042 0201 	orr.w	r2, r2, #1
 800672a:	605a      	str	r2, [r3, #4]
 800672c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8006730:	60df      	str	r7, [r3, #12]
 8006732:	60bb      	str	r3, [r7, #8]
 8006734:	4648      	mov	r0, r9
 8006736:	f000 f8ea 	bl	800690e <__malloc_unlock>
 800673a:	e0d5      	b.n	80068e8 <_malloc_r+0x414>
 800673c:	463e      	mov	r6, r7
 800673e:	e7d0      	b.n	80066e2 <_malloc_r+0x20e>
 8006740:	f10c 0c01 	add.w	ip, ip, #1
 8006744:	f01c 0f03 	tst.w	ip, #3
 8006748:	f10a 0a08 	add.w	sl, sl, #8
 800674c:	d1c7      	bne.n	80066de <_malloc_r+0x20a>
 800674e:	0798      	lsls	r0, r3, #30
 8006750:	d104      	bne.n	800675c <_malloc_r+0x288>
 8006752:	686b      	ldr	r3, [r5, #4]
 8006754:	ea23 0302 	bic.w	r3, r3, r2
 8006758:	606b      	str	r3, [r5, #4]
 800675a:	e004      	b.n	8006766 <_malloc_r+0x292>
 800675c:	f858 0908 	ldr.w	r0, [r8], #-8
 8006760:	3b01      	subs	r3, #1
 8006762:	4580      	cmp	r8, r0
 8006764:	d0f3      	beq.n	800674e <_malloc_r+0x27a>
 8006766:	6868      	ldr	r0, [r5, #4]
 8006768:	0052      	lsls	r2, r2, #1
 800676a:	4282      	cmp	r2, r0
 800676c:	d808      	bhi.n	8006780 <_malloc_r+0x2ac>
 800676e:	b13a      	cbz	r2, 8006780 <_malloc_r+0x2ac>
 8006770:	4663      	mov	r3, ip
 8006772:	4202      	tst	r2, r0
 8006774:	d1af      	bne.n	80066d6 <_malloc_r+0x202>
 8006776:	3304      	adds	r3, #4
 8006778:	0052      	lsls	r2, r2, #1
 800677a:	e7fa      	b.n	8006772 <_malloc_r+0x29e>
 800677c:	20000750 	.word	0x20000750
 8006780:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8006784:	f8db 6004 	ldr.w	r6, [fp, #4]
 8006788:	f026 0603 	bic.w	r6, r6, #3
 800678c:	42b4      	cmp	r4, r6
 800678e:	d803      	bhi.n	8006798 <_malloc_r+0x2c4>
 8006790:	1b33      	subs	r3, r6, r4
 8006792:	2b0f      	cmp	r3, #15
 8006794:	f300 809b 	bgt.w	80068ce <_malloc_r+0x3fa>
 8006798:	4a55      	ldr	r2, [pc, #340]	; (80068f0 <_malloc_r+0x41c>)
 800679a:	4956      	ldr	r1, [pc, #344]	; (80068f4 <_malloc_r+0x420>)
 800679c:	6812      	ldr	r2, [r2, #0]
 800679e:	6808      	ldr	r0, [r1, #0]
 80067a0:	f102 0810 	add.w	r8, r2, #16
 80067a4:	4a54      	ldr	r2, [pc, #336]	; (80068f8 <_malloc_r+0x424>)
 80067a6:	3001      	adds	r0, #1
 80067a8:	9101      	str	r1, [sp, #4]
 80067aa:	44a0      	add	r8, r4
 80067ac:	bf1f      	itttt	ne
 80067ae:	f102 31ff 	addne.w	r1, r2, #4294967295
 80067b2:	4488      	addne	r8, r1
 80067b4:	4251      	negne	r1, r2
 80067b6:	ea01 0808 	andne.w	r8, r1, r8
 80067ba:	eb0b 0306 	add.w	r3, fp, r6
 80067be:	4641      	mov	r1, r8
 80067c0:	4648      	mov	r0, r9
 80067c2:	9203      	str	r2, [sp, #12]
 80067c4:	9302      	str	r3, [sp, #8]
 80067c6:	f000 f8a3 	bl	8006910 <_sbrk_r>
 80067ca:	1c42      	adds	r2, r0, #1
 80067cc:	4607      	mov	r7, r0
 80067ce:	d06f      	beq.n	80068b0 <_malloc_r+0x3dc>
 80067d0:	9b02      	ldr	r3, [sp, #8]
 80067d2:	9a03      	ldr	r2, [sp, #12]
 80067d4:	4283      	cmp	r3, r0
 80067d6:	d901      	bls.n	80067dc <_malloc_r+0x308>
 80067d8:	45ab      	cmp	fp, r5
 80067da:	d169      	bne.n	80068b0 <_malloc_r+0x3dc>
 80067dc:	f8df a124 	ldr.w	sl, [pc, #292]	; 8006904 <_malloc_r+0x430>
 80067e0:	42bb      	cmp	r3, r7
 80067e2:	f8da 0000 	ldr.w	r0, [sl]
 80067e6:	f8df c120 	ldr.w	ip, [pc, #288]	; 8006908 <_malloc_r+0x434>
 80067ea:	4440      	add	r0, r8
 80067ec:	f8ca 0000 	str.w	r0, [sl]
 80067f0:	d108      	bne.n	8006804 <_malloc_r+0x330>
 80067f2:	ea13 0f0c 	tst.w	r3, ip
 80067f6:	d105      	bne.n	8006804 <_malloc_r+0x330>
 80067f8:	68ab      	ldr	r3, [r5, #8]
 80067fa:	4446      	add	r6, r8
 80067fc:	f046 0601 	orr.w	r6, r6, #1
 8006800:	605e      	str	r6, [r3, #4]
 8006802:	e049      	b.n	8006898 <_malloc_r+0x3c4>
 8006804:	9901      	ldr	r1, [sp, #4]
 8006806:	f8d1 e000 	ldr.w	lr, [r1]
 800680a:	f1be 3fff 	cmp.w	lr, #4294967295
 800680e:	bf15      	itete	ne
 8006810:	1afb      	subne	r3, r7, r3
 8006812:	4b38      	ldreq	r3, [pc, #224]	; (80068f4 <_malloc_r+0x420>)
 8006814:	181b      	addne	r3, r3, r0
 8006816:	601f      	streq	r7, [r3, #0]
 8006818:	bf18      	it	ne
 800681a:	f8ca 3000 	strne.w	r3, [sl]
 800681e:	f017 0307 	ands.w	r3, r7, #7
 8006822:	bf1c      	itt	ne
 8006824:	f1c3 0308 	rsbne	r3, r3, #8
 8006828:	18ff      	addne	r7, r7, r3
 800682a:	44b8      	add	r8, r7
 800682c:	441a      	add	r2, r3
 800682e:	ea08 080c 	and.w	r8, r8, ip
 8006832:	ebc8 0802 	rsb	r8, r8, r2
 8006836:	4641      	mov	r1, r8
 8006838:	4648      	mov	r0, r9
 800683a:	f000 f869 	bl	8006910 <_sbrk_r>
 800683e:	1c43      	adds	r3, r0, #1
 8006840:	bf04      	itt	eq
 8006842:	4638      	moveq	r0, r7
 8006844:	f04f 0800 	moveq.w	r8, #0
 8006848:	f8da 3000 	ldr.w	r3, [sl]
 800684c:	1bc2      	subs	r2, r0, r7
 800684e:	4442      	add	r2, r8
 8006850:	4443      	add	r3, r8
 8006852:	f042 0201 	orr.w	r2, r2, #1
 8006856:	45ab      	cmp	fp, r5
 8006858:	60af      	str	r7, [r5, #8]
 800685a:	f8ca 3000 	str.w	r3, [sl]
 800685e:	607a      	str	r2, [r7, #4]
 8006860:	d01a      	beq.n	8006898 <_malloc_r+0x3c4>
 8006862:	2e0f      	cmp	r6, #15
 8006864:	d802      	bhi.n	800686c <_malloc_r+0x398>
 8006866:	2301      	movs	r3, #1
 8006868:	607b      	str	r3, [r7, #4]
 800686a:	e021      	b.n	80068b0 <_malloc_r+0x3dc>
 800686c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006870:	3e0c      	subs	r6, #12
 8006872:	f026 0607 	bic.w	r6, r6, #7
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	4333      	orrs	r3, r6
 800687c:	f8cb 3004 	str.w	r3, [fp, #4]
 8006880:	2205      	movs	r2, #5
 8006882:	eb0b 0306 	add.w	r3, fp, r6
 8006886:	2e0f      	cmp	r6, #15
 8006888:	605a      	str	r2, [r3, #4]
 800688a:	609a      	str	r2, [r3, #8]
 800688c:	d904      	bls.n	8006898 <_malloc_r+0x3c4>
 800688e:	f10b 0108 	add.w	r1, fp, #8
 8006892:	4648      	mov	r0, r9
 8006894:	f7ff fd58 	bl	8006348 <_free_r>
 8006898:	4a18      	ldr	r2, [pc, #96]	; (80068fc <_malloc_r+0x428>)
 800689a:	f8da 3000 	ldr.w	r3, [sl]
 800689e:	6811      	ldr	r1, [r2, #0]
 80068a0:	428b      	cmp	r3, r1
 80068a2:	bf88      	it	hi
 80068a4:	6013      	strhi	r3, [r2, #0]
 80068a6:	4a16      	ldr	r2, [pc, #88]	; (8006900 <_malloc_r+0x42c>)
 80068a8:	6811      	ldr	r1, [r2, #0]
 80068aa:	428b      	cmp	r3, r1
 80068ac:	bf88      	it	hi
 80068ae:	6013      	strhi	r3, [r2, #0]
 80068b0:	68ab      	ldr	r3, [r5, #8]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	f022 0203 	bic.w	r2, r2, #3
 80068b8:	4294      	cmp	r4, r2
 80068ba:	eba2 0304 	sub.w	r3, r2, r4
 80068be:	d801      	bhi.n	80068c4 <_malloc_r+0x3f0>
 80068c0:	2b0f      	cmp	r3, #15
 80068c2:	dc04      	bgt.n	80068ce <_malloc_r+0x3fa>
 80068c4:	4648      	mov	r0, r9
 80068c6:	f000 f822 	bl	800690e <__malloc_unlock>
 80068ca:	2600      	movs	r6, #0
 80068cc:	e00c      	b.n	80068e8 <_malloc_r+0x414>
 80068ce:	68ae      	ldr	r6, [r5, #8]
 80068d0:	f044 0201 	orr.w	r2, r4, #1
 80068d4:	f043 0301 	orr.w	r3, r3, #1
 80068d8:	4434      	add	r4, r6
 80068da:	6072      	str	r2, [r6, #4]
 80068dc:	60ac      	str	r4, [r5, #8]
 80068de:	6063      	str	r3, [r4, #4]
 80068e0:	4648      	mov	r0, r9
 80068e2:	f000 f814 	bl	800690e <__malloc_unlock>
 80068e6:	3608      	adds	r6, #8
 80068e8:	4630      	mov	r0, r6
 80068ea:	b005      	add	sp, #20
 80068ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f0:	20000cd8 	.word	0x20000cd8
 80068f4:	20000b5c 	.word	0x20000b5c
 80068f8:	00000080 	.word	0x00000080
 80068fc:	20000cd4 	.word	0x20000cd4
 8006900:	20000cd0 	.word	0x20000cd0
 8006904:	20000cdc 	.word	0x20000cdc
 8006908:	0000007f 	.word	0x0000007f

0800690c <__malloc_lock>:
 800690c:	4770      	bx	lr

0800690e <__malloc_unlock>:
 800690e:	4770      	bx	lr

08006910 <_sbrk_r>:
 8006910:	b538      	push	{r3, r4, r5, lr}
 8006912:	4c06      	ldr	r4, [pc, #24]	; (800692c <_sbrk_r+0x1c>)
 8006914:	2300      	movs	r3, #0
 8006916:	4605      	mov	r5, r0
 8006918:	4608      	mov	r0, r1
 800691a:	6023      	str	r3, [r4, #0]
 800691c:	f7fd fbdc 	bl	80040d8 <_sbrk>
 8006920:	1c43      	adds	r3, r0, #1
 8006922:	d102      	bne.n	800692a <_sbrk_r+0x1a>
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	b103      	cbz	r3, 800692a <_sbrk_r+0x1a>
 8006928:	602b      	str	r3, [r5, #0]
 800692a:	bd38      	pop	{r3, r4, r5, pc}
 800692c:	20001a58 	.word	0x20001a58

08006930 <_init>:
 8006930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006932:	bf00      	nop
 8006934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006936:	bc08      	pop	{r3}
 8006938:	469e      	mov	lr, r3
 800693a:	4770      	bx	lr

0800693c <_fini>:
 800693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693e:	bf00      	nop
 8006940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006942:	bc08      	pop	{r3}
 8006944:	469e      	mov	lr, r3
 8006946:	4770      	bx	lr
